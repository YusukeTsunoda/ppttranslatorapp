{"version":3,"sources":["/Users/yusuketsunoda/Documents/cursor/ppttranslatorapp/worktrees/1-text-position-fix/lib/translation/error-handler.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport { TranslationErrorContext } from './types';\n\nexport interface TranslationError extends Error {\n  name: string;\n  status?: number;\n  retryable?: boolean;\n  retryAfter?: number;\n  context?: TranslationErrorContext;\n}\n\n/**\n * エラーレスポンスを生成する\n * @param error エラーオブジェクト\n * @param additionalContext 追加のコンテキスト情報\n * @returns NextResponse\n */\nexport function handleTranslationError(error: TranslationError, additionalContext?: TranslationErrorContext): NextResponse {\n  console.error('Translation error:', error);\n\n  // エラーの種類に応じたステータスコードとメッセージを設定\n  let status = error.status || 500;\n  let message = error.message;\n  let retryAfter: number | undefined;\n\n  switch (error.name) {\n    case 'RateLimitError':\n      status = 429;\n      message = 'リクエスト制限を超えました。しばらく待ってから再試行してください。';\n      retryAfter = error.retryAfter || 60;\n      break;\n    case 'TimeoutError':\n      status = 504;\n      message = 'リクエストがタイムアウトしました。再試行してください。';\n      break;\n    case 'NetworkError':\n      status = 503;\n      message = 'ネットワークエラーが発生しました。再試行してください。';\n      break;\n    case 'ValidationError':\n      status = 400;\n      message = error.message || 'リクエストが不正です。';\n      break;\n    case 'AuthenticationError':\n      status = 401;\n      message = '認証が必要です。';\n      break;\n    case 'AuthorizationError':\n      status = 403;\n      message = 'アクセスが拒否されました。';\n      break;\n    case 'NotFoundError':\n      status = 404;\n      message = 'リソースが見つかりません。';\n      break;\n    default:\n      status = 500;\n      message = '内部サーバーエラーが発生しました。';\n  }\n\n  // エラーレスポンスを生成\n  const response = {\n    error: message,\n    code: error.name,\n    retryable: error.retryable ?? isRetryableError(status),\n    context: { ...error.context, ...additionalContext },\n  };\n\n  // レスポンスヘッダーを設定\n  const headers = new Headers({\n    'Content-Type': 'application/json',\n    'Cache-Control': 'no-store',\n  });\n\n  // Retry-Afterヘッダーを設定（必要な場合）\n  if (retryAfter) {\n    headers.set('Retry-After', retryAfter.toString());\n  }\n\n  return new NextResponse(JSON.stringify(response), {\n    status,\n    headers,\n  });\n}\n\n/**\n * リトライ可能なエラーかどうかを判定する\n * @param status HTTPステータスコード\n * @returns リトライ可能な場合はtrue\n */\nfunction isRetryableError(status: number): boolean {\n  return [408, 429, 500, 502, 503, 504].includes(status);\n}\n\n/**\n * リトライ処理を実行する\n * @param operation 実行する処理\n * @param maxRetries 最大リトライ回数\n * @param baseDelay 基本待機時間（ミリ秒）\n * @returns 処理結果\n */\nexport async function withRetry<T>(\n  operation: () => Promise<T>,\n  maxRetries: number = 3,\n  baseDelay: number = 1000,\n  onRetry?: (error: Error) => boolean\n): Promise<T> {\n  let lastError: Error | null = null;\n  \n  for (let attempt = 0; attempt < maxRetries; attempt++) {\n    try {\n      return await operation();\n    } catch (error) {\n      lastError = error as Error;\n      \n      // カスタムリトライハンドラーがある場合は実行\n      if (onRetry && !onRetry(lastError)) {\n        throw error; // リトライハンドラーがfalseを返した場合はリトライしない\n      }\n      \n      // リトライ不可能なエラーの場合は即座にスロー\n      if (error instanceof Error && !isRetryableError(getErrorStatus(error))) {\n        throw error;\n      }\n      \n      // 最後の試行でエラーの場合はスロー\n      if (attempt === maxRetries - 1) {\n        const enhancedError = new Error('最大リトライ回数を超えました。後でもう一度お試しください。');\n        enhancedError.name = 'MaxRetriesExceededError';\n        (enhancedError as any).originalError = lastError;\n        throw enhancedError;\n      }\n      \n      // 指数バックオフで待機\n      const delay = baseDelay * Math.pow(2, attempt);\n      console.log(`リトライ ${attempt + 1}/${maxRetries} (${delay}ms後)`);\n      await new Promise(resolve => setTimeout(resolve, delay));\n    }\n  }\n  \n  throw lastError || new Error('Unknown error');\n}\n\n/**\n * エラーからHTTPステータスコードを取得する\n * @param error エラーオブジェクト\n * @returns HTTPステータスコード\n */\nfunction getErrorStatus(error: Error): number {\n  if ('status' in error && typeof (error as any).status === 'number') {\n    return (error as any).status;\n  }\n  \n  switch (error.name) {\n    case 'RateLimitError':\n      return 429;\n    case 'TimeoutError':\n      return 504;\n    case 'NetworkError':\n      return 503;\n    case 'ValidationError':\n      return 400;\n    case 'AuthenticationError':\n      return 401;\n    case 'AuthorizationError':\n      return 403;\n    case 'NotFoundError':\n      return 404;\n    default:\n      return 500;\n  }\n}\n\n/**\n * エラーログを記録する\n * @param error エラーオブジェクト\n * @param context エラーコンテキスト\n */\nexport function logTranslationError(error: Error, context: TranslationErrorContext = {}): void {\n  const errorLog = {\n    timestamp: new Date().toISOString(),\n    name: error.name,\n    message: error.message,\n    stack: error.stack,\n    context,\n  };\n\n  // エラーログを出力（本番環境では適切なロギングサービスに送信）\n  console.error('Translation Error:', JSON.stringify(errorLog, null, 2));\n  \n  // 開発環境では詳細なエラー情報を出力\n  if (process.env.NODE_ENV === 'development') {\n    console.error('Error details:', error);\n  }\n} "],"names":["handleTranslationError","logTranslationError","withRetry","error","additionalContext","console","status","message","retryAfter","name","response","code","retryable","isRetryableError","context","headers","Headers","set","toString","NextResponse","JSON","stringify","includes","operation","maxRetries","baseDelay","onRetry","lastError","attempt","Error","getErrorStatus","enhancedError","originalError","delay","Math","pow","log","Promise","resolve","setTimeout","errorLog","timestamp","Date","toISOString","stack","process","env","NODE_ENV"],"mappings":"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"}