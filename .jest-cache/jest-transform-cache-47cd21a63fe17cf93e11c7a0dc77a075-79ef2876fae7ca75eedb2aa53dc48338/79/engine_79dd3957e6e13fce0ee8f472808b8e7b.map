{"version":3,"sources":["/Users/yusuketsunoda/Documents/cursor/ppttranslatorapp/worktrees/1-text-position-fix/lib/translation/engine.ts"],"sourcesContent":["/**\n * 翻訳エンジン連携モジュール\n * Anthropic APIを使用した翻訳処理を担当\n */\n\nimport Anthropic from '@anthropic-ai/sdk';\nimport { Language } from '@prisma/client';\nimport { withRetry } from './error-handler';\nimport { preprocessText, generateTranslationPrompt } from './utils';\nimport { normalizeTranslatedText, checkTranslationQuality } from './normalizer';\nimport { TranslationErrorContext } from './types';\n\n// 翻訳エンジンの設定\nconst DEFAULT_MODEL = 'claude-3-haiku-20240307';\nconst MAX_TOKENS = 4096;\nconst DEFAULT_TEMPERATURE = 0.3;\nconst MAX_RETRIES = 3;\nconst RETRY_DELAY_MS = 1000;\n\n/**\n * 翻訳エンジンクラス\n */\nexport class TranslationEngine {\n  private anthropic: Anthropic;\n  private model: string;\n  \n  /**\n   * コンストラクタ\n   * @param apiKey Anthropic API Key\n   * @param model 使用するモデル名\n   */\n  constructor(apiKey: string, model?: string) {\n    if (!apiKey) {\n      throw new Error('API設定が不足しています');\n    }\n    \n    this.anthropic = new Anthropic({\n      apiKey: apiKey,\n    });\n    \n    this.model = model || DEFAULT_MODEL;\n  }\n  \n  /**\n   * 単一テキストの翻訳を実行\n   * @param text 翻訳対象テキスト\n   * @param sourceLang ソース言語\n   * @param targetLang ターゲット言語\n   * @param context エラー時のコンテキスト情報\n   * @returns 翻訳されたテキスト\n   */\n  async translateText(\n    text: string,\n    sourceLang: Language,\n    targetLang: Language,\n    context?: TranslationErrorContext\n  ): Promise<string> {\n    if (!text || text.trim() === '') {\n      return '';\n    }\n    \n    // 翻訳プロンプトを生成\n    const prompt = generateTranslationPrompt(\n      preprocessText(text),\n      sourceLang,\n      targetLang\n    );\n    \n    // システムプロンプト\n    const systemPrompt = `あなたは高品質な翻訳エンジンです。${sourceLang}から${targetLang}への翻訳を行います。元のテキストの意味を正確に保ちながら、自然な${targetLang}に翻訳してください。フォーマットや記号は保持し、翻訳のみを行ってください。余分な説明や前置き、後置きは一切加えないでください。`;\n    \n    try {\n      // Anthropic APIを使用して翻訳\n      const translationResult = await withRetry(\n        async () => {\n          return await this.anthropic.messages.create({\n            model: this.model,\n            max_tokens: MAX_TOKENS,\n            temperature: DEFAULT_TEMPERATURE,\n            system: systemPrompt,\n            messages: [\n              {\n                role: \"user\",\n                content: prompt\n              }\n            ]\n          });\n        },\n        MAX_RETRIES,\n        RETRY_DELAY_MS,\n        (error: Error) => {\n          const textIndex = context?.textIndex ?? -1;\n          const totalTexts = context?.totalTexts ?? 0;\n          console.error(`翻訳リトライエラー (${textIndex + 1}/${totalTexts}):`, error);\n          return true; // すべてのエラーでリトライ\n        }\n      );\n\n      // レスポンスからテキスト内容を取得\n      let translatedContent = '';\n      if (translationResult.content && translationResult.content.length > 0) {\n        // contentの各ブロックを確認\n        for (const block of translationResult.content) {\n          if (block.type === 'text') {\n            translatedContent += block.text;\n          }\n        }\n      }\n\n      // 翻訳結果を正規化\n      const normalizedTranslation = normalizeTranslatedText(translatedContent);\n      \n      // 翻訳品質チェック\n      const qualityCheck = checkTranslationQuality(normalizedTranslation, text);\n      if (!qualityCheck.isValid) {\n        console.warn(`翻訳品質の問題が検出されました: ${qualityCheck.issues.join(', ')}`);\n        // 問題があっても処理は続行し、後で改善または再翻訳を検討\n      }\n      \n      return normalizedTranslation;\n    } catch (error) {\n      const textIndex = context?.textIndex ?? -1;\n      const totalTexts = context?.totalTexts ?? 0;\n      console.error(`翻訳エラー (${textIndex + 1}/${totalTexts}):`, error);\n      throw error;\n    }\n  }\n  \n  /**\n   * 複数テキストの翻訳を実行\n   * @param texts 翻訳対象テキスト配列\n   * @param sourceLang ソース言語\n   * @param targetLang ターゲット言語\n   * @returns 翻訳結果と処理情報\n   */\n  async translateTexts(\n    texts: string[],\n    sourceLang: Language,\n    targetLang: Language\n  ): Promise<{\n    translations: string[];\n    error: Error | null;\n    processingTimeMs: number;\n  }> {\n    if (!texts || !Array.isArray(texts) || texts.length === 0) {\n      return {\n        translations: [],\n        error: new Error('テキストが必要です'),\n        processingTimeMs: 0\n      };\n    }\n    \n    const startTime = Date.now();\n    const translations: string[] = [];\n    let translationError: Error | null = null;\n    \n    // 各テキストを順番に翻訳\n    for (let i = 0; i < texts.length; i++) {\n      const text = texts[i];\n      if (!text || text.trim() === '') {\n        translations.push('');\n        continue;\n      }\n      \n      try {\n        const translatedText = await this.translateText(\n          text,\n          sourceLang,\n          targetLang,\n          {\n            textIndex: i,\n            totalTexts: texts.length\n          }\n        );\n        \n        translations.push(translatedText);\n      } catch (error) {\n        translationError = error as Error;\n        // エラーが発生しても続行し、可能な限り翻訳を完了させる\n        continue;\n      }\n    }\n    \n    const processingTime = Date.now() - startTime;\n    console.log(`翻訳処理時間: ${processingTime}ms (${translations.length}/${texts.length} 完了)`);\n    \n    return {\n      translations,\n      error: translationError,\n      processingTimeMs: processingTime\n    };\n  }\n  \n  /**\n   * モデル名を設定\n   * @param model モデル名\n   */\n  setModel(model: string): void {\n    this.model = model;\n  }\n  \n  /**\n   * 現在のモデル名を取得\n   * @returns 現在のモデル名\n   */\n  getModel(): string {\n    return this.model;\n  }\n  \n  /**\n   * モデル名が有効かチェック\n   * @param model モデル名\n   * @returns 有効な場合はtrue\n   */\n  static isValidModel(model: string): boolean {\n    const validModels = [\n      'claude-3-haiku-20240307',\n      'claude-3-sonnet-20240229',\n      'claude-3-opus-20240229'\n    ];\n    \n    return validModels.includes(model);\n  }\n  \n  /**\n   * 無料ユーザー向けのモデル名を取得\n   * @returns 無料ユーザー向けモデル名\n   */\n  static getFreeUserModel(): string {\n    return DEFAULT_MODEL;\n  }\n}\n"],"names":["TranslationEngine","DEFAULT_MODEL","MAX_TOKENS","DEFAULT_TEMPERATURE","MAX_RETRIES","RETRY_DELAY_MS","translateText","text","sourceLang","targetLang","context","trim","prompt","generateTranslationPrompt","preprocessText","systemPrompt","translationResult","withRetry","anthropic","messages","create","model","max_tokens","temperature","system","role","content","error","textIndex","totalTexts","console","translatedContent","length","block","type","normalizedTranslation","normalizeTranslatedText","qualityCheck","checkTranslationQuality","isValid","warn","issues","join","translateTexts","texts","Array","isArray","translations","Error","processingTimeMs","startTime","Date","now","translationError","i","push","translatedText","processingTime","log","setModel","getModel","isValidModel","validModels","includes","getFreeUserModel","constructor","apiKey","Anthropic"],"mappings":"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"}