166f9c1a371f320e415a98fe32ce6b73
// Node.jsランタイムを明示的に指定
// Anthropic APIの処理を含むため、Edge Runtimeでは動作しません
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    GET: function() {
        return GET;
    },
    POST: function() {
        return POST;
    },
    runtime: function() {
        return runtime;
    }
});
const _server = require("next/server");
const _nextauth = require("next-auth");
const _authoptions = require("@/lib/auth/auth-options");
const _prisma = require("@/lib/db/prisma");
const _client = require("@prisma/client");
const _apilogging = require("@/lib/utils/api-logging");
const _errorhandler = require("@/lib/translation/error-handler");
const _utils = require("@/lib/translation/utils");
const _normalizer = require("@/lib/translation/normalizer");
const _engine = require("@/lib/translation/engine");
const _history = require("@/lib/translation/history");
const runtime = 'nodejs';
// 翻訳APIエンドポイント
async function handler(req) {
    // 処理開始時間を記録
    const startTime = Date.now();
    let translationError = null;
    let translatedSlides = [];
    let translations = [];
    try {
        var _session_user;
        // APIキーの確認
        if (!process.env.ANTHROPIC_API_KEY) {
            return _server.NextResponse.json({
                error: 'API設定が不足しています'
            }, {
                status: 500
            });
        }
        // 翻訳エンジンの初期化
        const translationEngine = new _engine.TranslationEngine(process.env.ANTHROPIC_API_KEY);
        // セッションからユーザー情報を取得
        const session = await (0, _nextauth.getServerSession)(_authoptions.authOptions);
        if (!session) {
            return new _server.NextResponse(JSON.stringify({
                error: '認証が必要です'
            }), {
                status: 401,
                headers: {
                    'Content-Type': 'application/json',
                    'Cache-Control': 'no-store, max-age=0'
                }
            });
        }
        // リクエストデータの取得とバリデーション
        const data = await req.json();
        const { texts, sourceLang, targetLang, model, fileName = 'スライド', slides, fileId } = data;
        // デバッグ用にリクエストデータをログ出力
        console.log('翻訳APIリクエストデータ:', {
            fileId,
            sourceLang,
            targetLang,
            model,
            slidesProvided: !!slides,
            slidesLength: slides === null || slides === void 0 ? void 0 : slides.length,
            textsProvided: !!texts,
            textsLength: texts === null || texts === void 0 ? void 0 : texts.length
        });
        // リクエストバリデーション
        const translationRequest = {
            texts,
            sourceLang,
            targetLang,
            fileId,
            fileName,
            slides,
            model
        };
        const validationResult = (0, _utils.validateTranslationRequest)(translationRequest);
        if (!validationResult.isValid) {
            return _server.NextResponse.json({
                error: validationResult.error
            }, {
                status: 400
            });
        }
        // fileIdがデータベースに存在するか確認
        try {
            const existingFile = await (0, _prisma.filePrisma)().file.findUnique({
                where: {
                    id: fileId
                }
            });
            if (!existingFile) {
                console.error(`ファイルID ${fileId} がデータベースに存在しません`);
                return _server.NextResponse.json({
                    error: '指定されたファイルIDがデータベースに存在しません',
                    detail: 'ファイルを再アップロードしてください'
                }, {
                    status: 404
                });
            }
        } catch (dbError) {
            console.error('ファイル存在確認エラー:', dbError);
        // データベースエラーの場合は続行する
        }
        // モデル選択とバリデーション
        const defaultModel = _engine.TranslationEngine.getFreeUserModel();
        let selectedModel = model || defaultModel;
        // AWS Bedrockモデルの場合の処理
        if (selectedModel.includes('anthropic.claude')) {
            // TODO: AWS Bedrock APIの呼び出し処理を実装
            return _server.NextResponse.json({
                error: 'AWS Bedrock APIは現在実装中です'
            }, {
                status: 501
            });
        }
        // 無料ユーザーは基本モデルのみ利用可能
        if (!((_session_user = session.user) === null || _session_user === void 0 ? void 0 : _session_user.isPremium)) {
            selectedModel = defaultModel;
        }
        // モデルが有効か確認
        if (!_engine.TranslationEngine.isValidModel(selectedModel)) {
            selectedModel = defaultModel;
        }
        // 翻訳エンジンにモデルを設定
        translationEngine.setModel(selectedModel);
        // 必要なクレジット数を計算
        const textCount = texts.length;
        const requiredCredits = (0, _history.calculateRequiredCredits)(textCount);
        // クレジット残高の確認
        const creditCheck = await (0, _history.checkSufficientCredits)(session.user.id, requiredCredits);
        if (!creditCheck.isEnough) {
            return _server.NextResponse.json({
                error: 'クレジットが不足しています',
                detail: `必要クレジット: ${requiredCredits}, 利用可能クレジット: ${creditCheck.available}`
            }, {
                status: 402
            }); // Payment Required
        }
        // 翻訳処理の実行
        const translationResult = await translationEngine.translateTexts(texts, sourceLang, targetLang);
        translations = translationResult.translations;
        translationError = translationResult.error;
        const processingTime = translationResult.processingTimeMs;
        // 部分的な翻訳結果があるかどうか
        const partialTranslationAvailable = translationError && translations.length > 0;
        // 翻訳結果を構造化
        if (slides && Array.isArray(slides)) {
            // 構造化された翻訳結果を生成
            translatedSlides = (0, _normalizer.structureTranslations)(translations, texts, slides);
        }
        // クレジットを消費
        try {
            await (0, _history.consumeUserCredits)(session.user.id, requiredCredits);
        } catch (creditError) {
            console.error('クレジット消費エラー:', creditError);
        // クレジット消費に失敗しても翻訳結果は返す
        }
        // 翻訳履歴を記録
        let historyStatus;
        let historyErrorMessage = null;
        if (translationError) {
            historyStatus = _client.TranslationStatus.FAILED;
            historyErrorMessage = translationError.message;
        } else {
            historyStatus = _client.TranslationStatus.COMPLETED;
        }
        // 翻訳履歴を作成
        try {
            await (0, _history.createTranslationHistory)(session.user.id, fileId, fileName, sourceLang, targetLang, selectedModel, textCount, translations.length, processingTime, historyErrorMessage);
        } catch (historyError) {
            console.error('翻訳履歴作成エラー:', historyError);
        // 履歴作成に失敗しても翻訳結果は返す
        }
        // 部分的な翻訳結果がある場合
        if (partialTranslationAvailable) {
            console.log(`部分的な翻訳結果が利用可能です (${translations.length}/${texts.length})`);
            // 部分的な翻訳結果を構造化
            const partialResult = (0, _normalizer.createPartialTranslationResult)(translations, texts, slides || [], translationError);
            // 部分的な結果を返す（成功したものだけでも返す）
            return _server.NextResponse.json({
                success: false,
                isPartial: true,
                error: translationError.message,
                translations,
                translatedSlides: partialResult.translatedSlides,
                metadata: {
                    sourceLang,
                    targetLang,
                    model: selectedModel,
                    completedCount: translations.length,
                    totalCount: textCount,
                    processingTimeMs: processingTime
                }
            }, {
                status: 206
            }); // Partial Content
        }
        // 完全に失敗した場合
        if (translationError) {
            return new _server.NextResponse(JSON.stringify({
                error: '翻訳に失敗しました',
                detail: translationError.message,
                success: false,
                isPartial: false
            }), {
                status: 500,
                headers: {
                    'Content-Type': 'application/json',
                    'Cache-Control': 'no-store, max-age=0'
                }
            });
        }
        // 完全に成功した場合
        return _server.NextResponse.json({
            success: true,
            isPartial: false,
            translations,
            translatedSlides,
            metadata: {
                sourceLang,
                targetLang,
                model: selectedModel,
                completedCount: translations.length,
                totalCount: textCount,
                processingTimeMs: processingTime
            }
        });
    } catch (error) {
        console.error('Overall Translation API Error:', error);
        // 一般的なエラーレスポンスを返す
        return new _server.NextResponse(JSON.stringify({
            error: '翻訳に失敗しました',
            detail: error instanceof Error ? error.message : String(error),
            success: false,
            isPartial: false
        }), {
            status: 500,
            headers: {
                'Content-Type': 'application/json',
                'Cache-Control': 'no-store, max-age=0'
            }
        });
    }
}
async function GET(req) {
    try {
        // セッションの取得
        const session = await (0, _nextauth.getServerSession)(_authoptions.authOptions);
        if (!(session === null || session === void 0 ? void 0 : session.user)) {
            throw Object.assign(new Error('認証が必要です'), {
                name: 'AuthenticationError'
            });
        }
        // 翻訳履歴の取得
        const histories = await (0, _history.getUserTranslationHistory)(session.user.id);
        return new Response(JSON.stringify({
            translations: histories
        }), {
            headers: {
                'Content-Type': 'application/json',
                'Cache-Control': 'no-store'
            }
        });
    } catch (error) {
        var _user, _this;
        // エラーログの記録
        (0, _errorhandler.logTranslationError)(error, {
            userId: (_this = await (0, _nextauth.getServerSession)(_authoptions.authOptions)) === null || _this === void 0 ? void 0 : (_user = _this.user) === null || _user === void 0 ? void 0 : _user.id,
            operation: 'get_translations'
        });
        // エラーレスポンスの生成
        return (0, _errorhandler.handleTranslationError)(error);
    }
}
// 言語名を取得する関数
const getLanguageName = (langCode)=>{
    const languages = {
        ja: '日本語',
        en: '英語',
        zh: '中国語',
        ko: '韓国語',
        fr: 'フランス語',
        de: 'ドイツ語',
        es: 'スペイン語',
        it: 'イタリア語',
        ru: 'ロシア語',
        pt: 'ポルトガル語'
    };
    return languages[langCode] || langCode;
};
const POST = (0, _apilogging.withAPILogging)(handler, 'translate');

//# sourceMappingURL=data:application/json;base64,