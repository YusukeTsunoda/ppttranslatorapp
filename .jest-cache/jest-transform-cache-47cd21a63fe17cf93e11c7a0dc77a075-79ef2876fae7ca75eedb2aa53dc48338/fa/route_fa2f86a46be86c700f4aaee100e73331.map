{"version":3,"sources":["/Users/yusuketsunoda/Documents/cursor/ppttranslatorapp/worktrees/1-text-position-fix/app/api/translate/route.ts"],"sourcesContent":["// Node.jsランタイムを明示的に指定\n// Anthropic APIの処理を含むため、Edge Runtimeでは動作しません\nexport const runtime = 'nodejs';\n\nimport { NextRequest, NextResponse } from 'next/server';\nimport { getServerSession } from 'next-auth';\nimport { authOptions } from '@/lib/auth/auth-options';\nimport { Session } from 'next-auth';\nimport { filePrisma, translationPrisma, userPrisma } from '@/lib/db/prisma';\nimport { Language, TranslationStatus } from '@prisma/client';\nimport { withAPILogging } from '@/lib/utils/api-logging';\n\n// 翻訳モジュールのインポート\nimport { handleTranslationError, logTranslationError } from '@/lib/translation/error-handler';\nimport { validateTranslationRequest } from '@/lib/translation/utils';\nimport { structureTranslations, createPartialTranslationResult } from '@/lib/translation/normalizer';\nimport { TranslationEngine } from '@/lib/translation/engine';\nimport { createTranslationHistory, calculateRequiredCredits, checkSufficientCredits, consumeUserCredits, getUserTranslationHistory } from '@/lib/translation/history';\nimport { \n  TranslationRequest, \n  ValidationResult, \n  TranslationResponse, \n  StructuredTranslation,\n  TranslationErrorContext\n} from '@/lib/translation/types';\n\ninterface CustomSession extends Session {\n  user: {\n    id: string;\n    isPremium?: boolean;\n    name?: string | null;\n    email?: string | null;\n    image?: string | null;\n  };\n}\n\n// 翻訳APIエンドポイント\nasync function handler(req: NextRequest) {\n  // 処理開始時間を記録\n  const startTime = Date.now();\n  let translationError: Error | null = null;\n  let translatedSlides: StructuredTranslation[] = [];\n  let translations: string[] = [];\n  \n  try {\n    // APIキーの確認\n    if (!process.env.ANTHROPIC_API_KEY) {\n      return NextResponse.json(\n        { error: 'API設定が不足しています' },\n        { status: 500 }\n      );\n    }\n    \n    // 翻訳エンジンの初期化\n    const translationEngine = new TranslationEngine(process.env.ANTHROPIC_API_KEY);\n\n    // セッションからユーザー情報を取得\n    const session = (await getServerSession(authOptions)) as CustomSession;\n    if (!session) {\n      return new NextResponse(JSON.stringify({ error: '認証が必要です' }), {\n        status: 401,\n        headers: {\n          'Content-Type': 'application/json',\n          'Cache-Control': 'no-store, max-age=0',\n        },\n      });\n    }\n\n    // リクエストデータの取得とバリデーション\n    const data = await req.json();\n    const { texts, sourceLang, targetLang, model, fileName = 'スライド', slides, fileId } = data;\n    \n    // デバッグ用にリクエストデータをログ出力\n    console.log('翻訳APIリクエストデータ:', {\n      fileId,\n      sourceLang,\n      targetLang,\n      model,\n      slidesProvided: !!slides,\n      slidesLength: slides?.length,\n      textsProvided: !!texts,\n      textsLength: texts?.length\n    });\n    \n    // リクエストバリデーション\n    const translationRequest: TranslationRequest = {\n      texts,\n      sourceLang,\n      targetLang,\n      fileId,\n      fileName,\n      slides,\n      model\n    };\n    \n    const validationResult: ValidationResult = validateTranslationRequest(translationRequest);\n    if (!validationResult.isValid) {\n      return NextResponse.json({ error: validationResult.error }, { status: 400 });\n    }\n    \n    // fileIdがデータベースに存在するか確認\n    try {\n      const existingFile = await filePrisma().file.findUnique({\n        where: { id: fileId }\n      });\n      \n      if (!existingFile) {\n        console.error(`ファイルID ${fileId} がデータベースに存在しません`);\n        return NextResponse.json({ \n          error: '指定されたファイルIDがデータベースに存在しません', \n          detail: 'ファイルを再アップロードしてください' \n        }, { status: 404 });\n      }\n    } catch (dbError) {\n      console.error('ファイル存在確認エラー:', dbError);\n      // データベースエラーの場合は続行する\n    }\n\n    // モデル選択とバリデーション\n    const defaultModel = TranslationEngine.getFreeUserModel();\n    let selectedModel = model || defaultModel;\n\n    // AWS Bedrockモデルの場合の処理\n    if (selectedModel.includes('anthropic.claude')) {\n      // TODO: AWS Bedrock APIの呼び出し処理を実装\n      return NextResponse.json({ error: 'AWS Bedrock APIは現在実装中です' }, { status: 501 });\n    }\n\n    // 無料ユーザーは基本モデルのみ利用可能\n    if (!session.user?.isPremium) {\n      selectedModel = defaultModel;\n    }\n    \n    // モデルが有効か確認\n    if (!TranslationEngine.isValidModel(selectedModel)) {\n      selectedModel = defaultModel;\n    }\n    \n    // 翻訳エンジンにモデルを設定\n    translationEngine.setModel(selectedModel);\n    \n    // 必要なクレジット数を計算\n    const textCount = texts.length;\n    const requiredCredits = calculateRequiredCredits(textCount);\n    \n    // クレジット残高の確認\n    const creditCheck = await checkSufficientCredits(session.user.id, requiredCredits);\n    if (!creditCheck.isEnough) {\n      return NextResponse.json({\n        error: 'クレジットが不足しています',\n        detail: `必要クレジット: ${requiredCredits}, 利用可能クレジット: ${creditCheck.available}`,\n      }, { status: 402 }); // Payment Required\n    }\n\n    // 翻訳処理の実行\n    const translationResult = await translationEngine.translateTexts(\n      texts,\n      sourceLang,\n      targetLang\n    );\n    \n    translations = translationResult.translations;\n    translationError = translationResult.error;\n    const processingTime = translationResult.processingTimeMs;\n    \n    // 部分的な翻訳結果があるかどうか\n    const partialTranslationAvailable = translationError && translations.length > 0;\n    \n    // 翻訳結果を構造化\n    if (slides && Array.isArray(slides)) {\n      // 構造化された翻訳結果を生成\n      translatedSlides = structureTranslations(translations, texts, slides);\n    }\n    \n    // クレジットを消費\n    try {\n      await consumeUserCredits(session.user.id, requiredCredits);\n    } catch (creditError) {\n      console.error('クレジット消費エラー:', creditError);\n      // クレジット消費に失敗しても翻訳結果は返す\n    }\n    \n    // 翻訳履歴を記録\n    let historyStatus: TranslationStatus;\n    let historyErrorMessage: string | null = null;\n\n    if (translationError) {\n      historyStatus = TranslationStatus.FAILED;\n      historyErrorMessage = translationError.message;\n    } else {\n      historyStatus = TranslationStatus.COMPLETED;\n    }\n    \n    // 翻訳履歴を作成\n    try {\n      await createTranslationHistory(\n        session.user.id,\n        fileId,\n        fileName,\n        sourceLang,\n        targetLang,\n        selectedModel,\n        textCount,\n        translations.length,\n        processingTime,\n        historyErrorMessage\n      );\n    } catch (historyError) {\n      console.error('翻訳履歴作成エラー:', historyError);\n      // 履歴作成に失敗しても翻訳結果は返す\n    }\n\n    // 部分的な翻訳結果がある場合\n    if (partialTranslationAvailable) {\n      console.log(`部分的な翻訳結果が利用可能です (${translations.length}/${texts.length})`);\n      \n      // 部分的な翻訳結果を構造化\n      const partialResult = createPartialTranslationResult(\n        translations,\n        texts,\n        slides || [],\n        translationError\n      );\n      \n      // 部分的な結果を返す（成功したものだけでも返す）\n      return NextResponse.json({\n        success: false,\n        isPartial: true,\n        error: translationError.message,\n        translations, // 後方互換性のため残す\n        translatedSlides: partialResult.translatedSlides,\n        metadata: {\n          sourceLang,\n          targetLang,\n          model: selectedModel,\n          completedCount: translations.length,\n          totalCount: textCount,\n          processingTimeMs: processingTime\n        },\n      }, { status: 206 }); // Partial Content\n    }\n\n    // 完全に失敗した場合\n    if (translationError) {\n      return new NextResponse(JSON.stringify({ \n        error: '翻訳に失敗しました', \n        detail: translationError.message,\n        success: false,\n        isPartial: false\n      }), {\n        status: 500,\n        headers: {\n          'Content-Type': 'application/json',\n          'Cache-Control': 'no-store, max-age=0',\n        },\n      });\n    }\n\n    // 完全に成功した場合\n    return NextResponse.json({\n      success: true,\n      isPartial: false,\n      translations, // 後方互換性のため残す\n      translatedSlides, // スライドごとの翻訳結果\n      metadata: {\n        sourceLang,\n        targetLang,\n        model: selectedModel,\n        completedCount: translations.length,\n        totalCount: textCount,\n        processingTimeMs: processingTime\n      },\n    });\n  } catch (error) {\n    console.error('Overall Translation API Error:', error);\n    \n    // 一般的なエラーレスポンスを返す\n    return new NextResponse(JSON.stringify({ \n      error: '翻訳に失敗しました', \n      detail: error instanceof Error ? error.message : String(error),\n      success: false,\n      isPartial: false\n    }), {\n      status: 500,\n      headers: {\n        'Content-Type': 'application/json',\n        'Cache-Control': 'no-store, max-age=0',\n      },\n    });\n  }\n}\n\n// 翻訳履歴取得エンドポイント\nexport async function GET(req: NextRequest) {\n  try {\n    // セッションの取得\n    const session = await getServerSession(authOptions) as CustomSession;\n    if (!session?.user) {\n      throw Object.assign(new Error('認証が必要です'), { name: 'AuthenticationError' });\n    }\n\n    // 翻訳履歴の取得\n    const histories = await getUserTranslationHistory(session.user.id);\n\n    return new Response(JSON.stringify({ translations: histories }), {\n      headers: {\n        'Content-Type': 'application/json',\n        'Cache-Control': 'no-store',\n      },\n    });\n  } catch (error) {\n    // エラーログの記録\n    logTranslationError(error as Error, {\n      userId: (await getServerSession(authOptions))?.user?.id,\n      operation: 'get_translations',\n    });\n\n    // エラーレスポンスの生成\n    return handleTranslationError(error as Error);\n  }\n}\n\n// 言語名を取得する関数\nconst getLanguageName = (langCode: string): string => {\n  const languages: Record<string, string> = {\n    ja: '日本語',\n    en: '英語',\n    zh: '中国語',\n    ko: '韓国語',\n    fr: 'フランス語',\n    de: 'ドイツ語',\n    es: 'スペイン語',\n    it: 'イタリア語',\n    ru: 'ロシア語',\n    pt: 'ポルトガル語',\n    // 必要に応じて他の言語を追加\n  };\n  return languages[langCode] || langCode;\n};\n\n// ログ機能を適用したハンドラをエクスポート\nexport const POST = withAPILogging(handler, 'translate');\n"],"names":["GET","POST","runtime","handler","req","startTime","Date","now","translationError","translatedSlides","translations","session","process","env","ANTHROPIC_API_KEY","NextResponse","json","error","status","translationEngine","TranslationEngine","getServerSession","authOptions","JSON","stringify","headers","data","texts","sourceLang","targetLang","model","fileName","slides","fileId","console","log","slidesProvided","slidesLength","length","textsProvided","textsLength","translationRequest","validationResult","validateTranslationRequest","isValid","existingFile","filePrisma","file","findUnique","where","id","detail","dbError","defaultModel","getFreeUserModel","selectedModel","includes","user","isPremium","isValidModel","setModel","textCount","requiredCredits","calculateRequiredCredits","creditCheck","checkSufficientCredits","isEnough","available","translationResult","translateTexts","processingTime","processingTimeMs","partialTranslationAvailable","Array","isArray","structureTranslations","consumeUserCredits","creditError","historyStatus","historyErrorMessage","TranslationStatus","FAILED","message","COMPLETED","createTranslationHistory","historyError","partialResult","createPartialTranslationResult","success","isPartial","metadata","completedCount","totalCount","Error","String","Object","assign","name","histories","getUserTranslationHistory","Response","logTranslationError","userId","operation","handleTranslationError","getLanguageName","langCode","languages","ja","en","zh","ko","fr","de","es","it","ru","pt","withAPILogging"],"mappings":"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"}