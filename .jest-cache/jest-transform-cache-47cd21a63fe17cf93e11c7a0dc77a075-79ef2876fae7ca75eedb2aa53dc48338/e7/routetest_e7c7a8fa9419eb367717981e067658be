f403f07e5bd96282e0f080e775bbee29
"use strict";
// 翻訳モジュールのモック
jest.mock('@/lib/translation/engine');
jest.mock('@/lib/translation/history');
jest.mock('@/lib/translation/normalizer');
// getServerSessionのモック
jest.mock('next-auth', ()=>({
        getServerSession: jest.fn()
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _interop_require_wildcard = require("@swc/helpers/_/_interop_require_wildcard");
const _route = require("@/app/api/translate/route");
const _server = require("next/server");
const _nextauth = require("next-auth");
const _client = require("@prisma/client");
const _mockSetup = require("@/tests/helpers/mockSetup");
const _engine = require("@/lib/translation/engine");
const _history = /*#__PURE__*/ _interop_require_wildcard._(require("@/lib/translation/history"));
const _normalizer = /*#__PURE__*/ _interop_require_wildcard._(require("@/lib/translation/normalizer"));
// TranslationEngineクラスのモック化
const MockTranslationEngine = _engine.TranslationEngine;
// console.logのモック
const mockConsoleLog = jest.spyOn(console, 'log').mockImplementation();
const mockConsoleError = jest.spyOn(console, 'error').mockImplementation();
const prismaMock = (0, _mockSetup.createPrismaMock)();
const getServerSessionMock = _nextauth.getServerSession;
describe('POST /api/translate', ()=>{
    // TranslationEngineのモック
    const mockTranslateTexts = jest.fn();
    beforeEach(()=>{
        (0, _mockSetup.clearAllMocks)();
        process.env.ANTHROPIC_API_KEY = 'test-api-key';
        // TranslationEngineのモックを設定
        MockTranslationEngine.prototype.translateTexts = mockTranslateTexts;
        MockTranslationEngine.prototype.setModel = jest.fn();
        MockTranslationEngine.prototype.getModel = jest.fn().mockReturnValue('claude-3-haiku-20240307');
        // 静的メソッドのモック
        MockTranslationEngine.isValidModel = jest.fn().mockReturnValue(true);
        MockTranslationEngine.getFreeUserModel = jest.fn().mockReturnValue('claude-3-haiku-20240307');
        // historyモジュールのモック
        jest.spyOn(_history, 'calculateRequiredCredits').mockReturnValue(1);
        jest.spyOn(_history, 'checkSufficientCredits').mockResolvedValue({
            isEnough: true,
            available: 10
        });
        jest.spyOn(_history, 'consumeUserCredits').mockResolvedValue(9);
        jest.spyOn(_history, 'createTranslationHistory').mockResolvedValue({
            id: 'test-history-id',
            userId: 'test-user-id',
            fileId: 'test-file-id',
            fileName: 'test.pptx',
            sourceLanguage: _client.Language.en,
            targetLanguage: _client.Language.ja,
            status: _client.TranslationStatus.COMPLETED,
            model: 'claude-3-haiku-20240307',
            textCount: 1,
            translatedCount: 1,
            processingTimeMs: 1000,
            fileSize: 1024,
            createdAt: new Date(),
            updatedAt: new Date(),
            metadata: {},
            error: null,
            translatedFileKey: null
        });
        // normalizerモジュールのモック
        jest.spyOn(_normalizer, 'structureTranslations').mockReturnValue([
            {
                slideIndex: 0,
                texts: [
                    {
                        index: 0,
                        originalText: 'Hello',
                        translatedText: '翻訳されたテキスト',
                        position: {
                            x: 0,
                            y: 0,
                            width: 100,
                            height: 50
                        }
                    }
                ]
            }
        ]);
    });
    afterEach(()=>{
        mockConsoleLog.mockClear();
        mockConsoleError.mockClear();
    });
    it('should translate text successfully', async ()=>{
        const mockUser = (0, _mockSetup.createMockUser)({
            id: 'test-user-id',
            isPremium: true,
            credits: 10
        });
        getServerSessionMock.mockResolvedValue({
            user: mockUser
        });
        const mockFile = {
            id: 'test-file-id',
            userId: 'test-user-id',
            originalName: 'test.pptx',
            storagePath: '/path/to/file',
            fileSize: 1024,
            mimeType: 'application/vnd.openxmlformats-officedocument.presentationml.presentation',
            status: _client.FileStatus.READY,
            createdAt: new Date(),
            updatedAt: new Date()
        };
        prismaMock.file.findUnique.mockResolvedValue(mockFile);
        prismaMock.user.findUnique.mockResolvedValue(mockUser);
        prismaMock.user.update.mockResolvedValue({
            ...mockUser,
            credits: 9
        });
        prismaMock.translationHistory.create.mockResolvedValue({
            id: 'test-history-id',
            userId: mockUser.id,
            fileId: mockFile.id,
            sourceLang: _client.Language.en,
            targetLang: _client.Language.ja,
            status: _client.TranslationStatus.COMPLETED,
            model: 'claude-3-haiku-20240307',
            textCount: 1,
            translatedCount: 1,
            processingTimeMs: 1000,
            fileSize: 1024,
            createdAt: new Date(),
            updatedAt: new Date(),
            metadata: {},
            errorMessage: null,
            translatedFileKey: null
        });
        // 翻訳エンジンの結果をモック
        mockTranslateTexts.mockResolvedValue({
            translations: [
                '翻訳されたテキスト'
            ],
            error: null,
            processingTimeMs: 1000
        });
        const requestBody = {
            texts: [
                'Hello'
            ],
            sourceLang: _client.Language.en,
            targetLang: _client.Language.ja,
            fileId: 'test-file-id',
            slides: [
                {
                    index: 0,
                    texts: [
                        {
                            text: 'Hello',
                            index: 0
                        }
                    ]
                }
            ]
        };
        const req = new _server.NextRequest('http://localhost/api/translate', {
            method: 'POST',
            body: JSON.stringify(requestBody),
            headers: {
                'Content-Type': 'application/json'
            }
        });
        const response = await (0, _route.POST)(req);
        const responseBody = await response.json();
        expect(response.status).toBe(200);
        expect(responseBody.success).toBe(true);
        expect(responseBody.translatedSlides).toHaveLength(1);
        expect(responseBody.translatedSlides[0].texts[0].translatedText).toBe('翻訳されたテキスト');
        // クレジット消費が呼ばれたことを確認
        expect(_history.consumeUserCredits).toHaveBeenCalledWith(mockUser.id, 1);
    });
    it('should return 401 if not authenticated', async ()=>{
        getServerSessionMock.mockResolvedValue(null);
        const req = new _server.NextRequest('http://localhost/api/translate', {
            method: 'POST',
            body: JSON.stringify({}),
            headers: {
                'Content-Type': 'application/json'
            }
        });
        const response = await (0, _route.POST)(req);
        const responseBody = await response.json();
        expect(response.status).toBe(401);
        expect(responseBody.error).toBe('認証が必要です');
    });
    it('should return 400 if fileId is missing', async ()=>{
        const mockUser = (0, _mockSetup.createMockUser)({
            id: 'test-user-id'
        });
        getServerSessionMock.mockResolvedValue({
            user: mockUser
        });
        const req = new _server.NextRequest('http://localhost/api/translate', {
            method: 'POST',
            body: JSON.stringify({
                texts: [
                    'Hello'
                ],
                sourceLang: _client.Language.en,
                targetLang: _client.Language.ja
            }),
            headers: {
                'Content-Type': 'application/json'
            }
        });
        const response = await (0, _route.POST)(req);
        const responseBody = await response.json();
        expect(response.status).toBe(400);
        expect(responseBody.error).toBe('ファイルIDが必要です');
    });
    it('should return 404 if file not found', async ()=>{
        const mockUser = (0, _mockSetup.createMockUser)({
            id: 'test-user-id'
        });
        getServerSessionMock.mockResolvedValue({
            user: mockUser
        });
        prismaMock.file.findUnique.mockResolvedValue(null);
        const req = new _server.NextRequest('http://localhost/api/translate', {
            method: 'POST',
            body: JSON.stringify({
                texts: [
                    'Hello'
                ],
                sourceLang: _client.Language.en,
                targetLang: _client.Language.ja,
                fileId: 'non-existent-file-id'
            }),
            headers: {
                'Content-Type': 'application/json'
            }
        });
        const response = await (0, _route.POST)(req);
        const responseBody = await response.json();
        expect(response.status).toBe(404);
        expect(responseBody.error).toBe('指定されたファイルIDがデータベースに存在しません');
    });
    it('should return 402 if user has insufficient credits', async ()=>{
        const mockUser = (0, _mockSetup.createMockUser)({
            id: 'test-user-id',
            credits: 0
        });
        getServerSessionMock.mockResolvedValue({
            user: mockUser
        });
        const mockFile = {
            id: 'test-file-id',
            userId: 'test-user-id',
            originalName: 'test.pptx',
            storagePath: '/path/to/file',
            fileSize: 1024,
            mimeType: 'application/vnd.openxmlformats-officedocument.presentationml.presentation',
            status: _client.FileStatus.READY,
            createdAt: new Date(),
            updatedAt: new Date()
        };
        prismaMock.file.findUnique.mockResolvedValue(mockFile);
        // クレジット不足をモック
        jest.spyOn(_history, 'checkSufficientCredits').mockResolvedValueOnce({
            isEnough: false,
            available: 0
        });
        const req = new _server.NextRequest('http://localhost/api/translate', {
            method: 'POST',
            body: JSON.stringify({
                texts: [
                    'Hello'
                ],
                sourceLang: _client.Language.en,
                targetLang: _client.Language.ja,
                fileId: 'test-file-id',
                slides: [
                    {
                        index: 0,
                        texts: [
                            {
                                text: 'Hello',
                                index: 0
                            }
                        ]
                    }
                ]
            }),
            headers: {
                'Content-Type': 'application/json'
            }
        });
        const response = await (0, _route.POST)(req);
        const responseBody = await response.json();
        expect(response.status).toBe(402); // Payment Required
        expect(responseBody.error).toBe('クレジットが不足しています');
        expect(responseBody.detail.includes('利用可能クレジット: 0')).toBe(true);
    });
    it('should use default model for non-premium users', async ()=>{
        const mockUser = (0, _mockSetup.createMockUser)({
            id: 'test-user-id',
            isPremium: false,
            credits: 10
        });
        getServerSessionMock.mockResolvedValue({
            user: mockUser
        });
        const mockFile = {
            id: 'test-file-id',
            userId: 'test-user-id',
            originalName: 'test.pptx',
            storagePath: '/path/to/file',
            fileSize: 1024,
            mimeType: 'application/vnd.openxmlformats-officedocument.presentationml.presentation',
            status: _client.FileStatus.READY,
            createdAt: new Date(),
            updatedAt: new Date()
        };
        prismaMock.file.findUnique.mockResolvedValue(mockFile);
        prismaMock.user.findUnique.mockResolvedValue(mockUser);
        prismaMock.user.update.mockResolvedValue({
            ...mockUser,
            credits: 9
        });
        // 翻訳エンジンの結果をモック
        mockTranslateTexts.mockResolvedValue({
            translations: [
                '翻訳されたテキスト'
            ],
            error: null,
            processingTimeMs: 1000
        });
        const req = new _server.NextRequest('http://localhost/api/translate', {
            method: 'POST',
            body: JSON.stringify({
                texts: [
                    'Hello'
                ],
                sourceLang: _client.Language.en,
                targetLang: _client.Language.ja,
                model: 'claude-3-opus-20240229',
                fileId: 'test-file-id',
                slides: [
                    {
                        index: 0,
                        texts: [
                            {
                                text: 'Hello',
                                index: 0
                            }
                        ]
                    }
                ]
            }),
            headers: {
                'Content-Type': 'application/json'
            }
        });
        await (0, _route.POST)(req);
        // 無料ユーザー用のモデルが使用されたことを確認
        expect(MockTranslationEngine.getFreeUserModel).toHaveBeenCalled();
        expect(mockTranslateTexts).toHaveBeenCalled();
    });
    it('should handle translation API errors', async ()=>{
        const mockUser = (0, _mockSetup.createMockUser)({
            id: 'test-user-id',
            credits: 10
        });
        getServerSessionMock.mockResolvedValue({
            user: mockUser
        });
        const mockFile = {
            id: 'test-file-id',
            userId: 'test-user-id',
            originalName: 'test.pptx',
            storagePath: '/path/to/file',
            fileSize: 1024,
            mimeType: 'application/vnd.openxmlformats-officedocument.presentationml.presentation',
            status: _client.FileStatus.READY,
            createdAt: new Date(),
            updatedAt: new Date()
        };
        prismaMock.file.findUnique.mockResolvedValue(mockFile);
        prismaMock.user.findUnique.mockResolvedValue(mockUser);
        // 翻訳エラーをモック
        mockTranslateTexts.mockResolvedValue({
            translations: [],
            error: new Error('API Error'),
            processingTimeMs: 1000
        });
        const req = new _server.NextRequest('http://localhost/api/translate', {
            method: 'POST',
            body: JSON.stringify({
                texts: [
                    'Hello'
                ],
                sourceLang: _client.Language.en,
                targetLang: _client.Language.ja,
                fileId: 'test-file-id',
                slides: [
                    {
                        index: 0,
                        texts: [
                            {
                                text: 'Hello',
                                index: 0
                            }
                        ]
                    }
                ]
            }),
            headers: {
                'Content-Type': 'application/json'
            }
        });
        const response = await (0, _route.POST)(req);
        const responseBody = await response.json();
        expect(response.status).toBe(500);
        expect(responseBody.error).toBe('翻訳に失敗しました');
        // 失敗した翻訳履歴が作成されたことを確認
        expect(_history.createTranslationHistory).toHaveBeenCalled();
    });
});

//# sourceMappingURL=data:application/json;base64,