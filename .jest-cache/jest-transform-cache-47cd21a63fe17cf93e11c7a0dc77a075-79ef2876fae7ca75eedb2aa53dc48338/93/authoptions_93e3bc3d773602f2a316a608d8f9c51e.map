{"version":3,"sources":["/Users/yusuketsunoda/Documents/cursor/ppttranslatorapp/worktrees/1-text-position-fix/lib/auth/auth-options.ts"],"sourcesContent":["import { PrismaAdapter } from '@next-auth/prisma-adapter';\nimport { type NextAuthOptions } from 'next-auth';\nimport CredentialsProvider from 'next-auth/providers/credentials';\nimport { prisma } from '@/lib/db/prisma';\nimport { comparePasswords } from '@/lib/auth/password';\nimport { JWT } from 'next-auth/jwt';\n\n/**\n * セッション有効期限の設定\n */\nconst SESSION_MAXAGE = 24 * 60 * 60; // 24時間（1日）\nconst SESSION_UPDATE_AGE = 60 * 60; // 1時間\nconst TOKEN_REFRESH_MARGIN = 60 * 5; // 5分前に更新\n\n// トークンの有効期限を確認し、必要に応じて更新する\nconst refreshToken = async (token: JWT): Promise<JWT> => {\n  // トークンに有効期限がない場合は更新\n  if (!token.exp) {\n    token.exp = Math.floor(Date.now() / 1000) + SESSION_MAXAGE;\n    token.iat = Math.floor(Date.now() / 1000);\n    return token;\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  const timeUntilExpiry = (token.exp as number) - now;\n\n  // 有効期限が近づいている場合は更新\n  if (timeUntilExpiry < TOKEN_REFRESH_MARGIN) {\n    // ユーザー情報を再確認\n    if (token.email) {\n      try {\n        const user = await prisma.user.findUnique({\n          where: { email: token.email as string },\n        });\n\n        if (user) {\n          // トークンの有効期限を更新\n          token.exp = Math.floor(Date.now() / 1000) + SESSION_MAXAGE;\n          token.iat = Math.floor(Date.now() / 1000);\n\n          // ユーザー情報を更新\n          await prisma.user.update({\n            where: { id: user.id },\n            data: { updatedAt: new Date() },\n          });\n        }\n      } catch (error) {\n        // エラーログのみ残す\n        console.error('Error refreshing token:', error);\n      }\n    }\n  }\n\n  return token;\n};\n\nexport const authOptions: NextAuthOptions = {\n  adapter: PrismaAdapter(prisma),\n  providers: [\n    CredentialsProvider({\n      name: 'credentials',\n      credentials: {\n        email: { label: 'メールアドレス', type: 'email' },\n        password: { label: 'パスワード', type: 'password' },\n      },\n      async authorize(credentials): Promise<any> {\n        if (!credentials?.email || !credentials?.password) {\n          throw new Error('メールアドレスとパスワードは必須です');\n        }\n\n        const user = await prisma.user.findUnique({\n          where: { email: credentials.email },\n        });\n\n        if (!user || !user.password) {\n          throw new Error('メールアドレスまたはパスワードが正しくありません');\n        }\n\n        const isValid = await comparePasswords(credentials.password, user.password);\n\n        if (!isValid) {\n          throw new Error('メールアドレスまたはパスワードが正しくありません');\n        }\n\n        // ログイン成功時の処理\n        await prisma.user.update({\n          where: { id: user.id },\n          data: {\n            updatedAt: new Date(),\n          },\n        });\n\n        return {\n          id: user.id,\n          email: user.email,\n          name: user.name,\n        };\n      },\n    }),\n  ],\n  session: {\n    strategy: 'jwt',\n    maxAge: SESSION_MAXAGE,\n    updateAge: SESSION_UPDATE_AGE,\n  },\n  pages: {\n    signIn: '/signin',\n    error: '/error',\n    newUser: '/signup',\n  },\n  callbacks: {\n    async jwt({ token, user, trigger, session }) {\n      // 初回ログイン時にユーザー情報をトークンに追加\n      if (user) {\n        token.id = user.id;\n        token.email = user.email;\n        token.name = user.name;\n        token.iat = Math.floor(Date.now() / 1000);\n        token.exp = Math.floor(Date.now() / 1000) + SESSION_MAXAGE;\n\n        // セキュリティ強化: ユーザーエージェント情報を追加\n        if (typeof window !== 'undefined') {\n          token.ua = window.navigator.userAgent;\n        }\n      }\n\n      // セッション更新時の処理\n      if (trigger === 'update' && session) {\n        if (session.user) {\n          token.name = session.user.name;\n        }\n      }\n\n      // トークンのリフレッシュ処理\n      const refreshedToken = await refreshToken(token);\n      return refreshedToken;\n    },\n    async session({ session, token }) {\n      if (token) {\n        session.user.id = token.id as string;\n        session.user.email = token.email as string;\n        session.user.name = token.name as string | null;\n\n        // セッションに有効期限情報を追加\n        if (token.exp) {\n          session.expires = new Date((token.exp as number) * 1000).toISOString();\n        }\n\n        // セキュリティ強化: ユーザーエージェントの検証\n        if (typeof window !== 'undefined' && token.ua) {\n          const currentUA = window.navigator.userAgent;\n          if (currentUA !== token.ua) {\n            console.warn('User agent mismatch detected');\n            // 本番環境では、ここでセッションを無効化する処理を追加できる\n            // 今回はデモのため、警告のみ\n          }\n        }\n      }\n\n      return session;\n    },\n  },\n  jwt: {\n    // JWTの設定\n    maxAge: SESSION_MAXAGE,\n  },\n  cookies: {\n    // Cookieのセキュリティ設定\n    sessionToken: {\n      name: process.env.NODE_ENV === 'production' ? `__Secure-next-auth.session-token` : `next-auth.session-token`,\n      options: {\n        httpOnly: true,\n        sameSite: 'lax',\n        path: '/',\n        secure: process.env.NODE_ENV === 'production',\n        maxAge: SESSION_MAXAGE,\n      },\n    },\n    callbackUrl: {\n      name: process.env.NODE_ENV === 'production' ? `__Secure-next-auth.callback-url` : `next-auth.callback-url`,\n      options: {\n        httpOnly: true,\n        sameSite: 'lax',\n        path: '/',\n        secure: process.env.NODE_ENV === 'production',\n      },\n    },\n    csrfToken: {\n      name: process.env.NODE_ENV === 'production' ? `__Host-next-auth.csrf-token` : `next-auth.csrf-token`,\n      options: {\n        httpOnly: true,\n        sameSite: 'lax',\n        path: '/',\n        secure: process.env.NODE_ENV === 'production',\n      },\n    },\n  },\n  // CSRF対策を有効化\n  useSecureCookies: process.env.NODE_ENV === 'production',\n  secret: process.env.NEXTAUTH_SECRET,\n  debug: false,\n};\n"],"names":["authOptions","SESSION_MAXAGE","SESSION_UPDATE_AGE","TOKEN_REFRESH_MARGIN","refreshToken","token","exp","Math","floor","Date","now","iat","timeUntilExpiry","email","user","prisma","findUnique","where","update","id","data","updatedAt","error","console","adapter","PrismaAdapter","providers","CredentialsProvider","name","credentials","label","type","password","authorize","Error","isValid","comparePasswords","session","strategy","maxAge","updateAge","pages","signIn","newUser","callbacks","jwt","trigger","window","ua","navigator","userAgent","refreshedToken","expires","toISOString","currentUA","warn","cookies","sessionToken","process","env","NODE_ENV","options","httpOnly","sameSite","path","secure","callbackUrl","csrfToken","useSecureCookies","secret","NEXTAUTH_SECRET","debug"],"mappings":"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"}