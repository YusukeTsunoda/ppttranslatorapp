{"version":3,"sources":["/Users/yusuketsunoda/Documents/cursor/ppttranslatorapp/worktrees/1-text-position-fix/tests/api/translate/route.test.ts"],"sourcesContent":["import { POST } from '@/app/api/translate/route';\nimport { NextRequest, NextResponse } from 'next/server';\nimport { getServerSession } from 'next-auth';\nimport { Language, TranslationStatus, FileStatus } from '@prisma/client';\nimport { createPrismaMock, createMockUser, clearAllMocks } from '@/tests/helpers/mockSetup';\n\n// 翻訳モジュールのモック\nimport { TranslationEngine } from '@/lib/translation/engine';\nimport * as historyModule from '@/lib/translation/history';\nimport * as normalizerModule from '@/lib/translation/normalizer';\n\n// 翻訳モジュールのモック\njest.mock('@/lib/translation/engine');\njest.mock('@/lib/translation/history');\njest.mock('@/lib/translation/normalizer');\n\n// TranslationEngineクラスのモック化\nconst MockTranslationEngine = TranslationEngine as jest.MockedClass<typeof TranslationEngine>;\n\n// next/serverのモック\njest.mock('next/server', () => ({\n  NextResponse: {\n    json: jest.fn((data, options = {}) => ({\n      json: () => data,\n      status: options.status,\n    })),\n    redirect: jest.fn((url) => ({ url })),\n    next: jest.fn(() => ({ status: 200 })),\n  },\n  NextRequest: jest.fn().mockImplementation(function(url, options = {}) {\n    this.url = url;\n    this.method = options.method || 'GET';\n    this.headers = new Map(Object.entries(options.headers || {}));\n    this.json = jest.fn().mockImplementation(() => JSON.parse(options.body || '{}'));\n    this.nextUrl = {\n      pathname: new URL(url).pathname,\n      searchParams: new URLSearchParams(new URL(url).search)\n    };\n  }),\n}));\n\n// getServerSessionのモック\njest.mock('next-auth', () => ({\n  getServerSession: jest.fn(),\n}));\n\n// console.logのモック\nconst mockConsoleLog = jest.spyOn(console, 'log').mockImplementation();\nconst mockConsoleError = jest.spyOn(console, 'error').mockImplementation();\n\nconst prismaMock = createPrismaMock();\nconst getServerSessionMock = getServerSession as jest.Mock;\n\ndescribe('POST /api/translate', () => {\n  // TranslationEngineのモック\n  const mockTranslateTexts = jest.fn();\n  \n  beforeEach(() => {\n    clearAllMocks();\n    process.env.ANTHROPIC_API_KEY = 'test-api-key';\n    \n    // TranslationEngineのモックを設定\n    MockTranslationEngine.prototype.translateTexts = mockTranslateTexts;\n    MockTranslationEngine.prototype.setModel = jest.fn();\n    MockTranslationEngine.prototype.getModel = jest.fn().mockReturnValue('claude-3-haiku-20240307');\n    \n    // 静的メソッドのモック\n    MockTranslationEngine.isValidModel = jest.fn().mockReturnValue(true);\n    MockTranslationEngine.getFreeUserModel = jest.fn().mockReturnValue('claude-3-haiku-20240307');\n    \n    // historyモジュールのモック\n    jest.spyOn(historyModule, 'calculateRequiredCredits').mockReturnValue(1);\n    jest.spyOn(historyModule, 'checkSufficientCredits').mockResolvedValue({ isEnough: true, available: 10 });\n    jest.spyOn(historyModule, 'consumeUserCredits').mockResolvedValue(9);\n    jest.spyOn(historyModule, 'createTranslationHistory').mockResolvedValue({\n      id: 'test-history-id',\n      userId: 'test-user-id',\n      fileId: 'test-file-id',\n      fileName: 'test.pptx',\n      sourceLanguage: Language.en,\n      targetLanguage: Language.ja,\n      status: TranslationStatus.COMPLETED,\n      model: 'claude-3-haiku-20240307',\n      textCount: 1,\n      translatedCount: 1,\n      processingTimeMs: 1000,\n      fileSize: 1024,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n      metadata: {},\n      error: null,\n      translatedFileKey: null\n    });\n    \n    // normalizerモジュールのモック\n    jest.spyOn(normalizerModule, 'structureTranslations').mockReturnValue([{\n      slideIndex: 0,\n      texts: [{\n        index: 0,\n        originalText: 'Hello',\n        translatedText: '翻訳されたテキスト',\n        position: { x: 0, y: 0, width: 100, height: 50 }\n      }]\n    }]);\n  });\n\n  afterEach(() => {\n    mockConsoleLog.mockClear();\n    mockConsoleError.mockClear();\n  });\n\n  it('should translate text successfully', async () => {\n    const mockUser = createMockUser({\n      id: 'test-user-id',\n      isPremium: true,\n      credits: 10,\n    });\n\n    getServerSessionMock.mockResolvedValue({\n      user: mockUser,\n    });\n\n    const mockFile = {\n      id: 'test-file-id',\n      userId: 'test-user-id',\n      originalName: 'test.pptx',\n      storagePath: '/path/to/file',\n      fileSize: 1024,\n      mimeType: 'application/vnd.openxmlformats-officedocument.presentationml.presentation',\n      status: FileStatus.READY,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n\n    prismaMock.file.findUnique.mockResolvedValue(mockFile);\n    prismaMock.user.findUnique.mockResolvedValue(mockUser);\n    prismaMock.user.update.mockResolvedValue({ ...mockUser, credits: 9 });\n    prismaMock.translationHistory.create.mockResolvedValue({\n      id: 'test-history-id',\n      userId: mockUser.id,\n      fileId: mockFile.id,\n      sourceLang: Language.en,\n      targetLang: Language.ja,\n      status: TranslationStatus.COMPLETED,\n      model: 'claude-3-haiku-20240307',\n      textCount: 1,\n      translatedCount: 1,\n      processingTimeMs: 1000,\n      fileSize: 1024,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n      metadata: {},\n      errorMessage: null,\n      translatedFileKey: null\n    });\n\n    // 翻訳エンジンの結果をモック\n    mockTranslateTexts.mockResolvedValue({\n      translations: ['翻訳されたテキスト'],\n      error: null,\n      processingTimeMs: 1000\n    });\n\n    const requestBody = {\n      texts: ['Hello'],\n      sourceLang: Language.en,\n      targetLang: Language.ja,\n      fileId: 'test-file-id',\n      slides: [{ index: 0, texts: [{ text: 'Hello', index: 0 }] }],\n    };\n\n    const req = new NextRequest('http://localhost/api/translate', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: { 'Content-Type': 'application/json' },\n    });\n\n    const response = await POST(req);\n    const responseBody = await response.json();\n\n    expect(response.status).toBe(200);\n    expect(responseBody.success).toBe(true);\n    expect(responseBody.translatedSlides).toHaveLength(1);\n    expect(responseBody.translatedSlides[0].texts[0].translatedText).toBe('翻訳されたテキスト');\n    // クレジット消費が呼ばれたことを確認\n    expect(historyModule.consumeUserCredits).toHaveBeenCalledWith(\n      mockUser.id,\n      1\n    );\n  });\n\n  it('should return 401 if not authenticated', async () => {\n    getServerSessionMock.mockResolvedValue(null);\n\n    const req = new NextRequest('http://localhost/api/translate', {\n      method: 'POST',\n      body: JSON.stringify({}),\n      headers: { 'Content-Type': 'application/json' },\n    });\n\n    const response = await POST(req);\n    const responseBody = await response.json();\n\n    expect(response.status).toBe(401);\n    expect(responseBody.error).toBe('認証が必要です');\n  });\n\n  it('should return 400 if fileId is missing', async () => {\n    const mockUser = createMockUser({ id: 'test-user-id' });\n    getServerSessionMock.mockResolvedValue({ user: mockUser });\n\n    const req = new NextRequest('http://localhost/api/translate', {\n      method: 'POST',\n      body: JSON.stringify({\n        texts: ['Hello'],\n        sourceLang: Language.en,\n        targetLang: Language.ja,\n      }),\n      headers: { 'Content-Type': 'application/json' },\n    });\n\n    const response = await POST(req);\n    const responseBody = await response.json();\n\n    expect(response.status).toBe(400);\n    expect(responseBody.error).toBe('ファイルIDが必要です');\n  });\n\n  it('should return 404 if file not found', async () => {\n    const mockUser = createMockUser({ id: 'test-user-id' });\n    getServerSessionMock.mockResolvedValue({ user: mockUser });\n\n    prismaMock.file.findUnique.mockResolvedValue(null);\n\n    const req = new NextRequest('http://localhost/api/translate', {\n      method: 'POST',\n      body: JSON.stringify({\n        texts: ['Hello'],\n        sourceLang: Language.en,\n        targetLang: Language.ja,\n        fileId: 'non-existent-file-id',\n      }),\n      headers: { 'Content-Type': 'application/json' },\n    });\n\n    const response = await POST(req);\n    const responseBody = await response.json();\n\n    expect(response.status).toBe(404);\n    expect(responseBody.error).toBe('指定されたファイルIDがデータベースに存在しません');\n  });\n\n  it('should return 402 if user has insufficient credits', async () => {\n    const mockUser = createMockUser({\n      id: 'test-user-id',\n      credits: 0,\n    });\n\n    getServerSessionMock.mockResolvedValue({ user: mockUser });\n\n    const mockFile = {\n      id: 'test-file-id',\n      userId: 'test-user-id',\n      originalName: 'test.pptx',\n      storagePath: '/path/to/file',\n      fileSize: 1024,\n      mimeType: 'application/vnd.openxmlformats-officedocument.presentationml.presentation',\n      status: FileStatus.READY,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n\n    prismaMock.file.findUnique.mockResolvedValue(mockFile);\n    \n    // クレジット不足をモック\n    jest.spyOn(historyModule, 'checkSufficientCredits').mockResolvedValueOnce({ \n      isEnough: false, \n      available: 0 \n    });\n\n    const req = new NextRequest('http://localhost/api/translate', {\n      method: 'POST',\n      body: JSON.stringify({\n        texts: ['Hello'],\n        sourceLang: Language.en,\n        targetLang: Language.ja,\n        fileId: 'test-file-id',\n        slides: [{ index: 0, texts: [{ text: 'Hello', index: 0 }] }],\n      }),\n      headers: { 'Content-Type': 'application/json' },\n    });\n\n    const response = await POST(req);\n    const responseBody = await response.json();\n\n    expect(response.status).toBe(402); // Payment Required\n    expect(responseBody.error).toBe('クレジットが不足しています');\n    expect(responseBody.detail.includes('利用可能クレジット: 0')).toBe(true);\n  });\n\n  it('should use default model for non-premium users', async () => {\n    const mockUser = createMockUser({\n      id: 'test-user-id',\n      isPremium: false,\n      credits: 10,\n    });\n\n    getServerSessionMock.mockResolvedValue({ user: mockUser });\n\n    const mockFile = {\n      id: 'test-file-id',\n      userId: 'test-user-id',\n      originalName: 'test.pptx',\n      storagePath: '/path/to/file',\n      fileSize: 1024,\n      mimeType: 'application/vnd.openxmlformats-officedocument.presentationml.presentation',\n      status: FileStatus.READY,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n\n    prismaMock.file.findUnique.mockResolvedValue(mockFile);\n    prismaMock.user.findUnique.mockResolvedValue(mockUser);\n    prismaMock.user.update.mockResolvedValue({ ...mockUser, credits: 9 });\n    \n    // 翻訳エンジンの結果をモック\n    mockTranslateTexts.mockResolvedValue({\n      translations: ['翻訳されたテキスト'],\n      error: null,\n      processingTimeMs: 1000\n    });\n\n    const req = new NextRequest('http://localhost/api/translate', {\n      method: 'POST',\n      body: JSON.stringify({\n        texts: ['Hello'],\n        sourceLang: Language.en,\n        targetLang: Language.ja,\n        model: 'claude-3-opus-20240229',\n        fileId: 'test-file-id',\n        slides: [{ index: 0, texts: [{ text: 'Hello', index: 0 }] }],\n      }),\n      headers: { 'Content-Type': 'application/json' },\n    });\n\n    await POST(req);\n\n    // 無料ユーザー用のモデルが使用されたことを確認\n    expect(MockTranslationEngine.getFreeUserModel).toHaveBeenCalled();\n    expect(mockTranslateTexts).toHaveBeenCalled();\n  });\n\n  it('should handle translation API errors', async () => {\n    const mockUser = createMockUser({\n      id: 'test-user-id',\n      credits: 10,\n    });\n\n    getServerSessionMock.mockResolvedValue({ user: mockUser });\n\n    const mockFile = {\n      id: 'test-file-id',\n      userId: 'test-user-id',\n      originalName: 'test.pptx',\n      storagePath: '/path/to/file',\n      fileSize: 1024,\n      mimeType: 'application/vnd.openxmlformats-officedocument.presentationml.presentation',\n      status: FileStatus.READY,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n\n    prismaMock.file.findUnique.mockResolvedValue(mockFile);\n    prismaMock.user.findUnique.mockResolvedValue(mockUser);\n    // 翻訳エラーをモック\n    mockTranslateTexts.mockResolvedValue({\n      translations: [],\n      error: new Error('API Error'),\n      processingTimeMs: 1000\n    });\n\n    const req = new NextRequest('http://localhost/api/translate', {\n      method: 'POST',\n      body: JSON.stringify({\n        texts: ['Hello'],\n        sourceLang: Language.en,\n        targetLang: Language.ja,\n        fileId: 'test-file-id',\n        slides: [{ index: 0, texts: [{ text: 'Hello', index: 0 }] }],\n      }),\n      headers: { 'Content-Type': 'application/json' },\n    });\n\n    const response = await POST(req);\n    const responseBody = await response.json();\n\n    expect(response.status).toBe(500);\n    expect(responseBody.error).toBe('翻訳に失敗しました');\n    // 失敗した翻訳履歴が作成されたことを確認\n    expect(historyModule.createTranslationHistory).toHaveBeenCalled();\n  });\n}); "],"names":["jest","mock","NextResponse","json","fn","data","options","status","redirect","url","next","NextRequest","mockImplementation","method","headers","Map","Object","entries","JSON","parse","body","nextUrl","pathname","URL","searchParams","URLSearchParams","search","getServerSession","MockTranslationEngine","TranslationEngine","mockConsoleLog","spyOn","console","mockConsoleError","prismaMock","createPrismaMock","getServerSessionMock","describe","mockTranslateTexts","beforeEach","clearAllMocks","process","env","ANTHROPIC_API_KEY","prototype","translateTexts","setModel","getModel","mockReturnValue","isValidModel","getFreeUserModel","historyModule","mockResolvedValue","isEnough","available","id","userId","fileId","fileName","sourceLanguage","Language","en","targetLanguage","ja","TranslationStatus","COMPLETED","model","textCount","translatedCount","processingTimeMs","fileSize","createdAt","Date","updatedAt","metadata","error","translatedFileKey","normalizerModule","slideIndex","texts","index","originalText","translatedText","position","x","y","width","height","afterEach","mockClear","it","mockUser","createMockUser","isPremium","credits","user","mockFile","originalName","storagePath","mimeType","FileStatus","READY","file","findUnique","update","translationHistory","create","sourceLang","targetLang","errorMessage","translations","requestBody","slides","text","req","stringify","response","POST","responseBody","expect","toBe","success","translatedSlides","toHaveLength","consumeUserCredits","toHaveBeenCalledWith","mockResolvedValueOnce","detail","includes","toHaveBeenCalled","Error","createTranslationHistory"],"mappings":"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"}