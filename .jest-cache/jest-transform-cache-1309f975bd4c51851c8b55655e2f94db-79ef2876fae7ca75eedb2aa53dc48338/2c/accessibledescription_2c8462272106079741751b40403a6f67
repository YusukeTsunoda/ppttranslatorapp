fe0ea8c88b1d547c10593edaa303848d
"use strict";
exports.__esModule = true;
exports.computeAccessibleDescription = computeAccessibleDescription;
var _accessibleNameAndDescription = require("./accessible-name-and-description");
var _util = require("./util");
function _typeof(obj) {
    "@babel/helpers - typeof";
    return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj) {
        return typeof obj;
    } : function(obj) {
        return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    }, _typeof(obj);
}
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        enumerableOnly && (symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        })), keys.push.apply(keys, symbols);
    }
    return keys;
}
function _objectSpread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = null != arguments[i] ? arguments[i] : {};
        i % 2 ? ownKeys(Object(source), !0).forEach(function(key) {
            _defineProperty(target, key, source[key]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
function _defineProperty(obj, key, value) {
    key = _toPropertyKey(key);
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _toPropertyKey(arg) {
    var key = _toPrimitive(arg, "string");
    return _typeof(key) === "symbol" ? key : String(key);
}
function _toPrimitive(input, hint) {
    if (_typeof(input) !== "object" || input === null) return input;
    var prim = input[Symbol.toPrimitive];
    if (prim !== undefined) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object") return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (hint === "string" ? String : Number)(input);
}
/**
 * @param root
 * @param options
 * @returns
 */ function computeAccessibleDescription(root) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var description = (0, _util.queryIdRefs)(root, "aria-describedby").map(function(element) {
        return (0, _accessibleNameAndDescription.computeTextAlternative)(element, _objectSpread(_objectSpread({}, options), {}, {
            compute: "description"
        }));
    }).join(" ");
    // TODO: Technically we need to make sure that node wasn't used for the accessible name
    //       This causes `description_1.0_combobox-focusable-manual` to fail
    //
    // https://www.w3.org/TR/html-aam-1.0/#accessible-name-and-description-computation
    // says for so many elements to use the `title` that we assume all elements are considered
    if (description === "") {
        var title = root.getAttribute("title");
        description = title === null ? "" : title;
    }
    return description;
} //# sourceMappingURL=accessible-description.js.map

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWNjZXNzaWJsZS1kZXNjcmlwdGlvbi5qcyIsInNvdXJjZXMiOlsiLi4vc291cmNlcy9hY2Nlc3NpYmxlLWRlc2NyaXB0aW9uLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG5cdGNvbXB1dGVUZXh0QWx0ZXJuYXRpdmUsXG5cdENvbXB1dGVUZXh0QWx0ZXJuYXRpdmVPcHRpb25zLFxufSBmcm9tIFwiLi9hY2Nlc3NpYmxlLW5hbWUtYW5kLWRlc2NyaXB0aW9uXCI7XG5pbXBvcnQgeyBxdWVyeUlkUmVmcyB9IGZyb20gXCIuL3V0aWxcIjtcblxuLyoqXG4gKiBAcGFyYW0gcm9vdFxuICogQHBhcmFtIG9wdGlvbnNcbiAqIEByZXR1cm5zXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb21wdXRlQWNjZXNzaWJsZURlc2NyaXB0aW9uKFxuXHRyb290OiBFbGVtZW50LFxuXHRvcHRpb25zOiBDb21wdXRlVGV4dEFsdGVybmF0aXZlT3B0aW9ucyA9IHt9XG4pOiBzdHJpbmcge1xuXHRsZXQgZGVzY3JpcHRpb24gPSBxdWVyeUlkUmVmcyhyb290LCBcImFyaWEtZGVzY3JpYmVkYnlcIilcblx0XHQubWFwKChlbGVtZW50KSA9PiB7XG5cdFx0XHRyZXR1cm4gY29tcHV0ZVRleHRBbHRlcm5hdGl2ZShlbGVtZW50LCB7XG5cdFx0XHRcdC4uLm9wdGlvbnMsXG5cdFx0XHRcdGNvbXB1dGU6IFwiZGVzY3JpcHRpb25cIixcblx0XHRcdH0pO1xuXHRcdH0pXG5cdFx0LmpvaW4oXCIgXCIpO1xuXG5cdC8vIFRPRE86IFRlY2huaWNhbGx5IHdlIG5lZWQgdG8gbWFrZSBzdXJlIHRoYXQgbm9kZSB3YXNuJ3QgdXNlZCBmb3IgdGhlIGFjY2Vzc2libGUgbmFtZVxuXHQvLyAgICAgICBUaGlzIGNhdXNlcyBgZGVzY3JpcHRpb25fMS4wX2NvbWJvYm94LWZvY3VzYWJsZS1tYW51YWxgIHRvIGZhaWxcblx0Ly9cblx0Ly8gaHR0cHM6Ly93d3cudzMub3JnL1RSL2h0bWwtYWFtLTEuMC8jYWNjZXNzaWJsZS1uYW1lLWFuZC1kZXNjcmlwdGlvbi1jb21wdXRhdGlvblxuXHQvLyBzYXlzIGZvciBzbyBtYW55IGVsZW1lbnRzIHRvIHVzZSB0aGUgYHRpdGxlYCB0aGF0IHdlIGFzc3VtZSBhbGwgZWxlbWVudHMgYXJlIGNvbnNpZGVyZWRcblx0aWYgKGRlc2NyaXB0aW9uID09PSBcIlwiKSB7XG5cdFx0Y29uc3QgdGl0bGUgPSByb290LmdldEF0dHJpYnV0ZShcInRpdGxlXCIpO1xuXHRcdGRlc2NyaXB0aW9uID0gdGl0bGUgPT09IG51bGwgPyBcIlwiIDogdGl0bGU7XG5cdH1cblxuXHRyZXR1cm4gZGVzY3JpcHRpb247XG59XG4iXSwibmFtZXMiOlsiY29tcHV0ZUFjY2Vzc2libGVEZXNjcmlwdGlvbiIsInJvb3QiLCJvcHRpb25zIiwiZGVzY3JpcHRpb24iLCJxdWVyeUlkUmVmcyIsIm1hcCIsImVsZW1lbnQiLCJjb21wdXRlVGV4dEFsdGVybmF0aXZlIiwiY29tcHV0ZSIsImpvaW4iLCJ0aXRsZSIsImdldEF0dHJpYnV0ZSJdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsSUFBQSxnQ0FBQSxRQUFBO0FBSUEsSUFBQSxRQUFBLFFBQUE7QUFBcUMsU0FBQSxRQUFBLEdBQUE7SUFBQTtJQUFBLE9BQUEsVUFBQSxjQUFBLE9BQUEsVUFBQSxZQUFBLE9BQUEsT0FBQSxRQUFBLEdBQUEsU0FBQSxHQUFBO1FBQUEsT0FBQSxPQUFBO0lBQUEsSUFBQSxTQUFBLEdBQUE7UUFBQSxPQUFBLE9BQUEsY0FBQSxPQUFBLFVBQUEsSUFBQSxXQUFBLEtBQUEsVUFBQSxRQUFBLE9BQUEsU0FBQSxHQUFBLFdBQUEsT0FBQTtJQUFBLEdBQUEsUUFBQTtBQUFBO0FBQUEsU0FBQSxRQUFBLE1BQUEsRUFBQSxjQUFBO0lBQUEsSUFBQSxPQUFBLE9BQUEsSUFBQSxDQUFBO0lBQUEsSUFBQSxPQUFBLHFCQUFBLEVBQUE7UUFBQSxJQUFBLFVBQUEsT0FBQSxxQkFBQSxDQUFBO1FBQUEsa0JBQUEsQ0FBQSxVQUFBLFFBQUEsTUFBQSxDQUFBLFNBQUEsR0FBQTtZQUFBLE9BQUEsT0FBQSx3QkFBQSxDQUFBLFFBQUEsS0FBQSxVQUFBO1FBQUEsRUFBQSxHQUFBLEtBQUEsSUFBQSxDQUFBLEtBQUEsQ0FBQSxNQUFBO0lBQUE7SUFBQSxPQUFBO0FBQUE7QUFBQSxTQUFBLGNBQUEsTUFBQTtJQUFBLElBQUEsSUFBQSxJQUFBLEdBQUEsSUFBQSxVQUFBLE1BQUEsRUFBQSxJQUFBO1FBQUEsSUFBQSxTQUFBLFFBQUEsU0FBQSxDQUFBLEVBQUEsR0FBQSxTQUFBLENBQUEsRUFBQSxHQUFBLENBQUE7UUFBQSxJQUFBLElBQUEsUUFBQSxPQUFBLFNBQUEsQ0FBQSxHQUFBLE9BQUEsQ0FBQSxTQUFBLEdBQUE7WUFBQSxnQkFBQSxRQUFBLEtBQUEsTUFBQSxDQUFBLElBQUE7UUFBQSxLQUFBLE9BQUEseUJBQUEsR0FBQSxPQUFBLGdCQUFBLENBQUEsUUFBQSxPQUFBLHlCQUFBLENBQUEsV0FBQSxRQUFBLE9BQUEsU0FBQSxPQUFBLENBQUEsU0FBQSxHQUFBO1lBQUEsT0FBQSxjQUFBLENBQUEsUUFBQSxLQUFBLE9BQUEsd0JBQUEsQ0FBQSxRQUFBO1FBQUE7SUFBQTtJQUFBLE9BQUE7QUFBQTtBQUFBLFNBQUEsZ0JBQUEsR0FBQSxFQUFBLEdBQUEsRUFBQSxLQUFBO0lBQUEsTUFBQSxlQUFBO0lBQUEsSUFBQSxPQUFBLEtBQUE7UUFBQSxPQUFBLGNBQUEsQ0FBQSxLQUFBLEtBQUE7WUFBQSxPQUFBO1lBQUEsWUFBQTtZQUFBLGNBQUE7WUFBQSxVQUFBO1FBQUE7SUFBQSxPQUFBO1FBQUEsR0FBQSxDQUFBLElBQUEsR0FBQTtJQUFBO0lBQUEsT0FBQTtBQUFBO0FBQUEsU0FBQSxlQUFBLEdBQUE7SUFBQSxJQUFBLE1BQUEsYUFBQSxLQUFBO0lBQUEsT0FBQSxRQUFBLFNBQUEsV0FBQSxNQUFBLE9BQUE7QUFBQTtBQUFBLFNBQUEsYUFBQSxLQUFBLEVBQUEsSUFBQTtJQUFBLElBQUEsUUFBQSxXQUFBLFlBQUEsVUFBQSxNQUFBLE9BQUE7SUFBQSxJQUFBLE9BQUEsS0FBQSxDQUFBLE9BQUEsV0FBQSxDQUFBO0lBQUEsSUFBQSxTQUFBLFdBQUE7UUFBQSxJQUFBLE1BQUEsS0FBQSxJQUFBLENBQUEsT0FBQSxRQUFBO1FBQUEsSUFBQSxRQUFBLFNBQUEsVUFBQSxPQUFBO1FBQUEsTUFBQSxJQUFBLFVBQUE7SUFBQTtJQUFBLE9BQUEsQ0FBQSxTQUFBLFdBQUEsU0FBQSxNQUFBLEVBQUE7QUFBQTtBQUVyQzs7OztDQUlBLEdBQ08sU0FBU0EsNEJBQTRCLENBQzNDQyxJQUFhLEVBRUo7SUFBQSxJQURUQyxPQUFzQyxHQUFBLFVBQUEsTUFBQSxHQUFBLEtBQUEsU0FBQSxDQUFBLEVBQUEsS0FBQSxZQUFBLFNBQUEsQ0FBQSxFQUFBLEdBQUcsQ0FBQyxDQUFDO0lBRTNDLElBQUlDLFdBQVcsR0FBRyxDQUFBLEdBQUFDLE1BQUFBLFdBQVcsQUFBWEEsRUFBWUgsSUFBSSxFQUFFLGtCQUFrQixDQUFDLENBQ3JESSxHQUFHLENBQUMsU0FBQ0MsT0FBTyxFQUFLO1FBQ2pCLE9BQU8sQ0FBQSxHQUFBQyw4QkFBQUEsc0JBQXNCLEFBQXRCQSxFQUF1QkQsT0FBTyxFQUFBLGNBQUEsY0FBQSxDQUFBLEdBQ2pDSixPQUFPLEdBQUEsQ0FBQSxHQUFBO1lBQ1ZNLE9BQU8sRUFBRTtRQUFhLEdBQ3JCO0lBQ0gsQ0FBQyxDQUFDLENBQ0RDLElBQUksQ0FBQyxHQUFHLENBQUM7SUFFWCx1RkFBQTtJQUNBLHdFQUFBO0lBQ0EsRUFBQTtJQUNBLGtGQUFBO0lBQ0EsMEZBQUE7SUFDQSxJQUFJTixXQUFXLEtBQUssRUFBRSxFQUFFO1FBQ3ZCLElBQU1PLEtBQUssR0FBR1QsSUFBSSxDQUFDVSxZQUFZLENBQUMsT0FBTyxDQUFDO1FBQ3hDUixXQUFXLEdBQUdPLEtBQUssS0FBSyxJQUFJLEdBQUcsRUFBRSxHQUFHQSxLQUFLO0lBQzFDO0lBRUEsT0FBT1AsV0FBVztBQUNuQiJ9