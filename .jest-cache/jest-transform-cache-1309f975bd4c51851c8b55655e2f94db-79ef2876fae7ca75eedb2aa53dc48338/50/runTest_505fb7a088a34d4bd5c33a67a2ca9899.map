{"version":3,"sources":["/Users/yusuketsunoda/Documents/cursor/ppttranslatorapp/node_modules/jest-runner/build/runTest.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.default = runTest;\nfunction _chalk() {\n  const data = _interopRequireDefault(require('chalk'));\n  _chalk = function () {\n    return data;\n  };\n  return data;\n}\nfunction fs() {\n  const data = _interopRequireWildcard(require('graceful-fs'));\n  fs = function () {\n    return data;\n  };\n  return data;\n}\nfunction _sourceMapSupport() {\n  const data = _interopRequireDefault(require('source-map-support'));\n  _sourceMapSupport = function () {\n    return data;\n  };\n  return data;\n}\nfunction _console() {\n  const data = require('@jest/console');\n  _console = function () {\n    return data;\n  };\n  return data;\n}\nfunction _transform() {\n  const data = require('@jest/transform');\n  _transform = function () {\n    return data;\n  };\n  return data;\n}\nfunction docblock() {\n  const data = _interopRequireWildcard(require('jest-docblock'));\n  docblock = function () {\n    return data;\n  };\n  return data;\n}\nfunction _jestLeakDetector() {\n  const data = _interopRequireDefault(require('jest-leak-detector'));\n  _jestLeakDetector = function () {\n    return data;\n  };\n  return data;\n}\nfunction _jestMessageUtil() {\n  const data = require('jest-message-util');\n  _jestMessageUtil = function () {\n    return data;\n  };\n  return data;\n}\nfunction _jestResolve() {\n  const data = require('jest-resolve');\n  _jestResolve = function () {\n    return data;\n  };\n  return data;\n}\nfunction _jestUtil() {\n  const data = require('jest-util');\n  _jestUtil = function () {\n    return data;\n  };\n  return data;\n}\nfunction _getRequireWildcardCache(nodeInterop) {\n  if (typeof WeakMap !== 'function') return null;\n  var cacheBabelInterop = new WeakMap();\n  var cacheNodeInterop = new WeakMap();\n  return (_getRequireWildcardCache = function (nodeInterop) {\n    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n  })(nodeInterop);\n}\nfunction _interopRequireWildcard(obj, nodeInterop) {\n  if (!nodeInterop && obj && obj.__esModule) {\n    return obj;\n  }\n  if (obj === null || (typeof obj !== 'object' && typeof obj !== 'function')) {\n    return {default: obj};\n  }\n  var cache = _getRequireWildcardCache(nodeInterop);\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n  var newObj = {};\n  var hasPropertyDescriptor =\n    Object.defineProperty && Object.getOwnPropertyDescriptor;\n  for (var key in obj) {\n    if (key !== 'default' && Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor\n        ? Object.getOwnPropertyDescriptor(obj, key)\n        : null;\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n  newObj.default = obj;\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n  return newObj;\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {default: obj};\n}\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nfunction freezeConsole(testConsole, config) {\n  // @ts-expect-error: `_log` is `private` - we should figure out some proper API here\n  testConsole._log = function fakeConsolePush(_type, message) {\n    const error = new (_jestUtil().ErrorWithStack)(\n      `${_chalk().default.red(\n        `${_chalk().default.bold(\n          'Cannot log after tests are done.'\n        )} Did you forget to wait for something async in your test?`\n      )}\\nAttempted to log \"${message}\".`,\n      fakeConsolePush\n    );\n    const formattedError = (0, _jestMessageUtil().formatExecError)(\n      error,\n      config,\n      {\n        noStackTrace: false\n      },\n      undefined,\n      true\n    );\n    process.stderr.write(`\\n${formattedError}\\n`);\n    process.exitCode = 1;\n  };\n}\n\n// Keeping the core of \"runTest\" as a separate function (as \"runTestInternal\")\n// is key to be able to detect memory leaks. Since all variables are local to\n// the function, when \"runTestInternal\" finishes its execution, they can all be\n// freed, UNLESS something else is leaking them (and that's why we can detect\n// the leak!).\n//\n// If we had all the code in a single function, we should manually nullify all\n// references to verify if there is a leak, which is not maintainable and error\n// prone. That's why \"runTestInternal\" CANNOT be inlined inside \"runTest\".\nasync function runTestInternal(\n  path,\n  globalConfig,\n  projectConfig,\n  resolver,\n  context,\n  sendMessageToJest\n) {\n  const testSource = fs().readFileSync(path, 'utf8');\n  const docblockPragmas = docblock().parse(docblock().extract(testSource));\n  const customEnvironment = docblockPragmas['jest-environment'];\n  let testEnvironment = projectConfig.testEnvironment;\n  if (customEnvironment) {\n    if (Array.isArray(customEnvironment)) {\n      throw new Error(\n        `You can only define a single test environment through docblocks, got \"${customEnvironment.join(\n          ', '\n        )}\"`\n      );\n    }\n    testEnvironment = (0, _jestResolve().resolveTestEnvironment)({\n      ...projectConfig,\n      requireResolveFunction: require.resolve,\n      testEnvironment: customEnvironment\n    });\n  }\n  const cacheFS = new Map([[path, testSource]]);\n  const transformer = await (0, _transform().createScriptTransformer)(\n    projectConfig,\n    cacheFS\n  );\n  const TestEnvironment = await transformer.requireAndTranspileModule(\n    testEnvironment\n  );\n  const testFramework = await transformer.requireAndTranspileModule(\n    process.env.JEST_JASMINE === '1'\n      ? require.resolve('jest-jasmine2')\n      : projectConfig.testRunner\n  );\n  const Runtime = (0, _jestUtil().interopRequireDefault)(\n    projectConfig.runtime\n      ? require(projectConfig.runtime)\n      : require('jest-runtime')\n  ).default;\n  const consoleOut = globalConfig.useStderr ? process.stderr : process.stdout;\n  const consoleFormatter = (type, message) =>\n    (0, _console().getConsoleOutput)(\n      // 4 = the console call is buried 4 stack frames deep\n      _console().BufferedConsole.write([], type, message, 4),\n      projectConfig,\n      globalConfig\n    );\n  let testConsole;\n  if (globalConfig.silent) {\n    testConsole = new (_console().NullConsole)(\n      consoleOut,\n      consoleOut,\n      consoleFormatter\n    );\n  } else if (globalConfig.verbose) {\n    testConsole = new (_console().CustomConsole)(\n      consoleOut,\n      consoleOut,\n      consoleFormatter\n    );\n  } else {\n    testConsole = new (_console().BufferedConsole)();\n  }\n  let extraTestEnvironmentOptions;\n  const docblockEnvironmentOptions =\n    docblockPragmas['jest-environment-options'];\n  if (typeof docblockEnvironmentOptions === 'string') {\n    extraTestEnvironmentOptions = JSON.parse(docblockEnvironmentOptions);\n  }\n  const environment = new TestEnvironment(\n    {\n      globalConfig,\n      projectConfig: extraTestEnvironmentOptions\n        ? {\n            ...projectConfig,\n            testEnvironmentOptions: {\n              ...projectConfig.testEnvironmentOptions,\n              ...extraTestEnvironmentOptions\n            }\n          }\n        : projectConfig\n    },\n    {\n      console: testConsole,\n      docblockPragmas,\n      testPath: path\n    }\n  );\n  if (typeof environment.getVmContext !== 'function') {\n    console.error(\n      `Test environment found at \"${testEnvironment}\" does not export a \"getVmContext\" method, which is mandatory from Jest 27. This method is a replacement for \"runScript\".`\n    );\n    process.exit(1);\n  }\n  const leakDetector = projectConfig.detectLeaks\n    ? new (_jestLeakDetector().default)(environment)\n    : null;\n  (0, _jestUtil().setGlobal)(environment.global, 'console', testConsole);\n  const runtime = new Runtime(\n    projectConfig,\n    environment,\n    resolver,\n    transformer,\n    cacheFS,\n    {\n      changedFiles: context.changedFiles,\n      collectCoverage: globalConfig.collectCoverage,\n      collectCoverageFrom: globalConfig.collectCoverageFrom,\n      coverageProvider: globalConfig.coverageProvider,\n      sourcesRelatedToTestsInChangedFiles:\n        context.sourcesRelatedToTestsInChangedFiles\n    },\n    path,\n    globalConfig\n  );\n  let isTornDown = false;\n  const tearDownEnv = async () => {\n    if (!isTornDown) {\n      runtime.teardown();\n      await environment.teardown();\n      isTornDown = true;\n    }\n  };\n  const start = Date.now();\n  for (const path of projectConfig.setupFiles) {\n    const esm = runtime.unstable_shouldLoadAsEsm(path);\n    if (esm) {\n      await runtime.unstable_importModule(path);\n    } else {\n      const setupFile = runtime.requireModule(path);\n      if (typeof setupFile === 'function') {\n        await setupFile();\n      }\n    }\n  }\n  const sourcemapOptions = {\n    environment: 'node',\n    handleUncaughtExceptions: false,\n    retrieveSourceMap: source => {\n      const sourceMapSource = runtime.getSourceMaps()?.get(source);\n      if (sourceMapSource) {\n        try {\n          return {\n            map: JSON.parse(fs().readFileSync(sourceMapSource, 'utf8')),\n            url: source\n          };\n        } catch {}\n      }\n      return null;\n    }\n  };\n\n  // For tests\n  runtime\n    .requireInternalModule(require.resolve('source-map-support'))\n    .install(sourcemapOptions);\n\n  // For runtime errors\n  _sourceMapSupport().default.install(sourcemapOptions);\n  if (\n    environment.global &&\n    environment.global.process &&\n    environment.global.process.exit\n  ) {\n    const realExit = environment.global.process.exit;\n    environment.global.process.exit = function exit(...args) {\n      const error = new (_jestUtil().ErrorWithStack)(\n        `process.exit called with \"${args.join(', ')}\"`,\n        exit\n      );\n      const formattedError = (0, _jestMessageUtil().formatExecError)(\n        error,\n        projectConfig,\n        {\n          noStackTrace: false\n        },\n        undefined,\n        true\n      );\n      process.stderr.write(formattedError);\n      return realExit(...args);\n    };\n  }\n\n  // if we don't have `getVmContext` on the env skip coverage\n  const collectV8Coverage =\n    globalConfig.collectCoverage &&\n    globalConfig.coverageProvider === 'v8' &&\n    typeof environment.getVmContext === 'function';\n\n  // Node's error-message stack size is limited at 10, but it's pretty useful\n  // to see more than that when a test fails.\n  Error.stackTraceLimit = 100;\n  try {\n    await environment.setup();\n    let result;\n    try {\n      if (collectV8Coverage) {\n        await runtime.collectV8Coverage();\n      }\n      result = await testFramework(\n        globalConfig,\n        projectConfig,\n        environment,\n        runtime,\n        path,\n        sendMessageToJest\n      );\n    } catch (err) {\n      // Access stack before uninstalling sourcemaps\n      err.stack;\n      throw err;\n    } finally {\n      if (collectV8Coverage) {\n        await runtime.stopCollectingV8Coverage();\n      }\n    }\n    freezeConsole(testConsole, projectConfig);\n    const testCount =\n      result.numPassingTests +\n      result.numFailingTests +\n      result.numPendingTests +\n      result.numTodoTests;\n    const end = Date.now();\n    const testRuntime = end - start;\n    result.perfStats = {\n      end,\n      runtime: testRuntime,\n      slow: testRuntime / 1000 > projectConfig.slowTestThreshold,\n      start\n    };\n    result.testFilePath = path;\n    result.console = testConsole.getBuffer();\n    result.skipped = testCount === result.numPendingTests;\n    result.displayName = projectConfig.displayName;\n    const coverage = runtime.getAllCoverageInfoCopy();\n    if (coverage) {\n      const coverageKeys = Object.keys(coverage);\n      if (coverageKeys.length) {\n        result.coverage = coverage;\n      }\n    }\n    if (collectV8Coverage) {\n      const v8Coverage = runtime.getAllV8CoverageInfoCopy();\n      if (v8Coverage && v8Coverage.length > 0) {\n        result.v8Coverage = v8Coverage;\n      }\n    }\n    if (globalConfig.logHeapUsage) {\n      // @ts-expect-error - doesn't exist on globalThis\n      globalThis.gc?.();\n      result.memoryUsage = process.memoryUsage().heapUsed;\n    }\n    await tearDownEnv();\n\n    // Delay the resolution to allow log messages to be output.\n    return await new Promise(resolve => {\n      setImmediate(() =>\n        resolve({\n          leakDetector,\n          result\n        })\n      );\n    });\n  } finally {\n    await tearDownEnv();\n    _sourceMapSupport().default.resetRetrieveHandlers();\n  }\n}\nasync function runTest(\n  path,\n  globalConfig,\n  config,\n  resolver,\n  context,\n  sendMessageToJest\n) {\n  const {leakDetector, result} = await runTestInternal(\n    path,\n    globalConfig,\n    config,\n    resolver,\n    context,\n    sendMessageToJest\n  );\n  if (leakDetector) {\n    // We wanna allow a tiny but time to pass to allow last-minute cleanup\n    await new Promise(resolve => setTimeout(resolve, 100));\n\n    // Resolve leak detector, outside the \"runTestInternal\" closure.\n    result.leaks = await leakDetector.isLeaking();\n  } else {\n    result.leaks = false;\n  }\n  return result;\n}\n"],"names":["Object","defineProperty","exports","value","default","runTest","_chalk","data","_interopRequireDefault","require","fs","_interopRequireWildcard","_sourceMapSupport","_console","_transform","docblock","_jestLeakDetector","_jestMessageUtil","_jestResolve","_jestUtil","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","obj","__esModule","cache","has","get","newObj","hasPropertyDescriptor","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","freezeConsole","testConsole","config","_log","fakeConsolePush","_type","message","error","ErrorWithStack","red","bold","formattedError","formatExecError","noStackTrace","undefined","process","stderr","write","exitCode","runTestInternal","path","globalConfig","projectConfig","resolver","context","sendMessageToJest","testSource","readFileSync","docblockPragmas","parse","extract","customEnvironment","testEnvironment","Array","isArray","Error","join","resolveTestEnvironment","requireResolveFunction","resolve","cacheFS","Map","transformer","createScriptTransformer","TestEnvironment","requireAndTranspileModule","testFramework","env","JEST_JASMINE","testRunner","Runtime","interopRequireDefault","runtime","consoleOut","useStderr","stdout","consoleFormatter","type","getConsoleOutput","BufferedConsole","silent","NullConsole","verbose","CustomConsole","extraTestEnvironmentOptions","docblockEnvironmentOptions","JSON","environment","testEnvironmentOptions","console","testPath","getVmContext","exit","leakDetector","detectLeaks","setGlobal","global","changedFiles","collectCoverage","collectCoverageFrom","coverageProvider","sourcesRelatedToTestsInChangedFiles","isTornDown","tearDownEnv","teardown","start","Date","now","setupFiles","esm","unstable_shouldLoadAsEsm","unstable_importModule","setupFile","requireModule","sourcemapOptions","handleUncaughtExceptions","retrieveSourceMap","source","sourceMapSource","getSourceMaps","map","url","requireInternalModule","install","realExit","args","collectV8Coverage","stackTraceLimit","setup","result","err","stack","stopCollectingV8Coverage","testCount","numPassingTests","numFailingTests","numPendingTests","numTodoTests","end","testRuntime","perfStats","slow","slowTestThreshold","testFilePath","getBuffer","skipped","displayName","coverage","getAllCoverageInfoCopy","coverageKeys","keys","length","v8Coverage","getAllV8CoverageInfoCopy","logHeapUsage","globalThis","gc","memoryUsage","heapUsed","Promise","setImmediate","resetRetrieveHandlers","setTimeout","leaks","isLeaking"],"mappings":"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"}