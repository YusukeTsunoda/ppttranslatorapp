cc65ad454f81902a2f45753147741c01
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.queryByTestId = exports.queryAllByTestId = exports.getByTestId = exports.getAllByTestId = exports.findByTestId = exports.findAllByTestId = void 0;
var _helpers = require("../helpers");
var _queryHelpers = require("../query-helpers");
var _allUtils = require("./all-utils");
const getTestIdAttribute = ()=>(0, _allUtils.getConfig)().testIdAttribute;
const queryAllByTestId = (...args)=>{
    (0, _helpers.checkContainerType)(args[0]);
    return (0, _allUtils.queryAllByAttribute)(getTestIdAttribute(), ...args);
};
const getMultipleError = (c, id)=>`Found multiple elements by: [${getTestIdAttribute()}="${id}"]`;
const getMissingError = (c, id)=>`Unable to find an element by: [${getTestIdAttribute()}="${id}"]`;
const queryAllByTestIdWithSuggestions = exports.queryAllByTestId = (0, _queryHelpers.wrapAllByQueryWithSuggestion)(queryAllByTestId, queryAllByTestId.name, 'queryAll');
const [queryByTestId, getAllByTestId, getByTestId, findAllByTestId, findByTestId] = (0, _allUtils.buildQueries)(queryAllByTestId, getMultipleError, getMissingError);
exports.findByTestId = findByTestId;
exports.findAllByTestId = findAllByTestId;
exports.getByTestId = getByTestId;
exports.getAllByTestId = getAllByTestId;
exports.queryByTestId = queryByTestId;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy95dXN1a2V0c3Vub2RhL0RvY3VtZW50cy9jdXJzb3IvcHB0dHJhbnNsYXRvcmFwcC9ub2RlX21vZHVsZXMvQHRlc3RpbmctbGlicmFyeS9yZWFjdC9ub2RlX21vZHVsZXMvQHRlc3RpbmctbGlicmFyeS9kb20vZGlzdC9xdWVyaWVzL3Rlc3QtaWQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLnF1ZXJ5QnlUZXN0SWQgPSBleHBvcnRzLnF1ZXJ5QWxsQnlUZXN0SWQgPSBleHBvcnRzLmdldEJ5VGVzdElkID0gZXhwb3J0cy5nZXRBbGxCeVRlc3RJZCA9IGV4cG9ydHMuZmluZEJ5VGVzdElkID0gZXhwb3J0cy5maW5kQWxsQnlUZXN0SWQgPSB2b2lkIDA7XG52YXIgX2hlbHBlcnMgPSByZXF1aXJlKFwiLi4vaGVscGVyc1wiKTtcbnZhciBfcXVlcnlIZWxwZXJzID0gcmVxdWlyZShcIi4uL3F1ZXJ5LWhlbHBlcnNcIik7XG52YXIgX2FsbFV0aWxzID0gcmVxdWlyZShcIi4vYWxsLXV0aWxzXCIpO1xuY29uc3QgZ2V0VGVzdElkQXR0cmlidXRlID0gKCkgPT4gKDAsIF9hbGxVdGlscy5nZXRDb25maWcpKCkudGVzdElkQXR0cmlidXRlO1xuY29uc3QgcXVlcnlBbGxCeVRlc3RJZCA9ICguLi5hcmdzKSA9PiB7XG4gICgwLCBfaGVscGVycy5jaGVja0NvbnRhaW5lclR5cGUpKGFyZ3NbMF0pO1xuICByZXR1cm4gKDAsIF9hbGxVdGlscy5xdWVyeUFsbEJ5QXR0cmlidXRlKShnZXRUZXN0SWRBdHRyaWJ1dGUoKSwgLi4uYXJncyk7XG59O1xuY29uc3QgZ2V0TXVsdGlwbGVFcnJvciA9IChjLCBpZCkgPT4gYEZvdW5kIG11bHRpcGxlIGVsZW1lbnRzIGJ5OiBbJHtnZXRUZXN0SWRBdHRyaWJ1dGUoKX09XCIke2lkfVwiXWA7XG5jb25zdCBnZXRNaXNzaW5nRXJyb3IgPSAoYywgaWQpID0+IGBVbmFibGUgdG8gZmluZCBhbiBlbGVtZW50IGJ5OiBbJHtnZXRUZXN0SWRBdHRyaWJ1dGUoKX09XCIke2lkfVwiXWA7XG5jb25zdCBxdWVyeUFsbEJ5VGVzdElkV2l0aFN1Z2dlc3Rpb25zID0gZXhwb3J0cy5xdWVyeUFsbEJ5VGVzdElkID0gKDAsIF9xdWVyeUhlbHBlcnMud3JhcEFsbEJ5UXVlcnlXaXRoU3VnZ2VzdGlvbikocXVlcnlBbGxCeVRlc3RJZCwgcXVlcnlBbGxCeVRlc3RJZC5uYW1lLCAncXVlcnlBbGwnKTtcbmNvbnN0IFtxdWVyeUJ5VGVzdElkLCBnZXRBbGxCeVRlc3RJZCwgZ2V0QnlUZXN0SWQsIGZpbmRBbGxCeVRlc3RJZCwgZmluZEJ5VGVzdElkXSA9ICgwLCBfYWxsVXRpbHMuYnVpbGRRdWVyaWVzKShxdWVyeUFsbEJ5VGVzdElkLCBnZXRNdWx0aXBsZUVycm9yLCBnZXRNaXNzaW5nRXJyb3IpO1xuZXhwb3J0cy5maW5kQnlUZXN0SWQgPSBmaW5kQnlUZXN0SWQ7XG5leHBvcnRzLmZpbmRBbGxCeVRlc3RJZCA9IGZpbmRBbGxCeVRlc3RJZDtcbmV4cG9ydHMuZ2V0QnlUZXN0SWQgPSBnZXRCeVRlc3RJZDtcbmV4cG9ydHMuZ2V0QWxsQnlUZXN0SWQgPSBnZXRBbGxCeVRlc3RJZDtcbmV4cG9ydHMucXVlcnlCeVRlc3RJZCA9IHF1ZXJ5QnlUZXN0SWQ7Il0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwicXVlcnlCeVRlc3RJZCIsInF1ZXJ5QWxsQnlUZXN0SWQiLCJnZXRCeVRlc3RJZCIsImdldEFsbEJ5VGVzdElkIiwiZmluZEJ5VGVzdElkIiwiZmluZEFsbEJ5VGVzdElkIiwiX2hlbHBlcnMiLCJyZXF1aXJlIiwiX3F1ZXJ5SGVscGVycyIsIl9hbGxVdGlscyIsImdldFRlc3RJZEF0dHJpYnV0ZSIsImdldENvbmZpZyIsInRlc3RJZEF0dHJpYnV0ZSIsImFyZ3MiLCJjaGVja0NvbnRhaW5lclR5cGUiLCJxdWVyeUFsbEJ5QXR0cmlidXRlIiwiZ2V0TXVsdGlwbGVFcnJvciIsImMiLCJpZCIsImdldE1pc3NpbmdFcnJvciIsInF1ZXJ5QWxsQnlUZXN0SWRXaXRoU3VnZ2VzdGlvbnMiLCJ3cmFwQWxsQnlRdWVyeVdpdGhTdWdnZXN0aW9uIiwibmFtZSIsImJ1aWxkUXVlcmllcyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFFQUEsT0FBT0MsY0FBYyxDQUFDQyxTQUFTLGNBQWM7SUFDM0NDLE9BQU87QUFDVDtBQUNBRCxRQUFRRSxhQUFhLEdBQUdGLFFBQVFHLGdCQUFnQixHQUFHSCxRQUFRSSxXQUFXLEdBQUdKLFFBQVFLLGNBQWMsR0FBR0wsUUFBUU0sWUFBWSxHQUFHTixRQUFRTyxlQUFlLEdBQUcsS0FBSztBQUN4SixJQUFJQyxXQUFXQyxRQUFRO0FBQ3ZCLElBQUlDLGdCQUFnQkQsUUFBUTtBQUM1QixJQUFJRSxZQUFZRixRQUFRO0FBQ3hCLE1BQU1HLHFCQUFxQixJQUFNLEFBQUMsQ0FBQSxHQUFHRCxVQUFVRSxTQUFTLEFBQUQsSUFBS0MsZUFBZTtBQUMzRSxNQUFNWCxtQkFBbUIsQ0FBQyxHQUFHWTtJQUMxQixDQUFBLEdBQUdQLFNBQVNRLGtCQUFrQixBQUFELEVBQUdELElBQUksQ0FBQyxFQUFFO0lBQ3hDLE9BQU8sQUFBQyxDQUFBLEdBQUdKLFVBQVVNLG1CQUFtQixBQUFELEVBQUdMLHlCQUF5Qkc7QUFDckU7QUFDQSxNQUFNRyxtQkFBbUIsQ0FBQ0MsR0FBR0MsS0FBTyxDQUFDLDZCQUE2QixFQUFFUixxQkFBcUIsRUFBRSxFQUFFUSxHQUFHLEVBQUUsQ0FBQztBQUNuRyxNQUFNQyxrQkFBa0IsQ0FBQ0YsR0FBR0MsS0FBTyxDQUFDLCtCQUErQixFQUFFUixxQkFBcUIsRUFBRSxFQUFFUSxHQUFHLEVBQUUsQ0FBQztBQUNwRyxNQUFNRSxrQ0FBa0N0QixRQUFRRyxnQkFBZ0IsR0FBRyxBQUFDLENBQUEsR0FBR08sY0FBY2EsNEJBQTRCLEFBQUQsRUFBR3BCLGtCQUFrQkEsaUJBQWlCcUIsSUFBSSxFQUFFO0FBQzVKLE1BQU0sQ0FBQ3RCLGVBQWVHLGdCQUFnQkQsYUFBYUcsaUJBQWlCRCxhQUFhLEdBQUcsQUFBQyxDQUFBLEdBQUdLLFVBQVVjLFlBQVksQUFBRCxFQUFHdEIsa0JBQWtCZSxrQkFBa0JHO0FBQ3BKckIsUUFBUU0sWUFBWSxHQUFHQTtBQUN2Qk4sUUFBUU8sZUFBZSxHQUFHQTtBQUMxQlAsUUFBUUksV0FBVyxHQUFHQTtBQUN0QkosUUFBUUssY0FBYyxHQUFHQTtBQUN6QkwsUUFBUUUsYUFBYSxHQUFHQSJ9