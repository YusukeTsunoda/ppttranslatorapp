{"version":3,"sources":["/Users/yusuketsunoda/Documents/cursor/ppttranslatorapp/node_modules/lz-string/libs/lz-string.js"],"sourcesContent":["// Copyright (c) 2013 Pieroxy <pieroxy@pieroxy.net>\n// This work is free. You can redistribute it and/or modify it\n// under the terms of the WTFPL, Version 2\n// For more information see LICENSE.txt or http://www.wtfpl.net/\n//\n// For more information, the home page:\n// http://pieroxy.net/blog/pages/lz-string/testing.html\n//\n// LZ-based compression algorithm, version 1.4.5\nvar LZString = (function() {\n\n// private property\nvar f = String.fromCharCode;\nvar keyStrBase64 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\nvar keyStrUriSafe = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+-$\";\nvar baseReverseDic = {};\n\nfunction getBaseValue(alphabet, character) {\n  if (!baseReverseDic[alphabet]) {\n    baseReverseDic[alphabet] = {};\n    for (var i=0 ; i<alphabet.length ; i++) {\n      baseReverseDic[alphabet][alphabet.charAt(i)] = i;\n    }\n  }\n  return baseReverseDic[alphabet][character];\n}\n\nvar LZString = {\n  compressToBase64 : function (input) {\n    if (input == null) return \"\";\n    var res = LZString._compress(input, 6, function(a){return keyStrBase64.charAt(a);});\n    switch (res.length % 4) { // To produce valid Base64\n    default: // When could this happen ?\n    case 0 : return res;\n    case 1 : return res+\"===\";\n    case 2 : return res+\"==\";\n    case 3 : return res+\"=\";\n    }\n  },\n\n  decompressFromBase64 : function (input) {\n    if (input == null) return \"\";\n    if (input == \"\") return null;\n    return LZString._decompress(input.length, 32, function(index) { return getBaseValue(keyStrBase64, input.charAt(index)); });\n  },\n\n  compressToUTF16 : function (input) {\n    if (input == null) return \"\";\n    return LZString._compress(input, 15, function(a){return f(a+32);}) + \" \";\n  },\n\n  decompressFromUTF16: function (compressed) {\n    if (compressed == null) return \"\";\n    if (compressed == \"\") return null;\n    return LZString._decompress(compressed.length, 16384, function(index) { return compressed.charCodeAt(index) - 32; });\n  },\n\n  //compress into uint8array (UCS-2 big endian format)\n  compressToUint8Array: function (uncompressed) {\n    var compressed = LZString.compress(uncompressed);\n    var buf=new Uint8Array(compressed.length*2); // 2 bytes per character\n\n    for (var i=0, TotalLen=compressed.length; i<TotalLen; i++) {\n      var current_value = compressed.charCodeAt(i);\n      buf[i*2] = current_value >>> 8;\n      buf[i*2+1] = current_value % 256;\n    }\n    return buf;\n  },\n\n  //decompress from uint8array (UCS-2 big endian format)\n  decompressFromUint8Array:function (compressed) {\n    if (compressed===null || compressed===undefined){\n        return LZString.decompress(compressed);\n    } else {\n        var buf=new Array(compressed.length/2); // 2 bytes per character\n        for (var i=0, TotalLen=buf.length; i<TotalLen; i++) {\n          buf[i]=compressed[i*2]*256+compressed[i*2+1];\n        }\n\n        var result = [];\n        buf.forEach(function (c) {\n          result.push(f(c));\n        });\n        return LZString.decompress(result.join(''));\n\n    }\n\n  },\n\n\n  //compress into a string that is already URI encoded\n  compressToEncodedURIComponent: function (input) {\n    if (input == null) return \"\";\n    return LZString._compress(input, 6, function(a){return keyStrUriSafe.charAt(a);});\n  },\n\n  //decompress from an output of compressToEncodedURIComponent\n  decompressFromEncodedURIComponent:function (input) {\n    if (input == null) return \"\";\n    if (input == \"\") return null;\n    input = input.replace(/ /g, \"+\");\n    return LZString._decompress(input.length, 32, function(index) { return getBaseValue(keyStrUriSafe, input.charAt(index)); });\n  },\n\n  compress: function (uncompressed) {\n    return LZString._compress(uncompressed, 16, function(a){return f(a);});\n  },\n  _compress: function (uncompressed, bitsPerChar, getCharFromInt) {\n    if (uncompressed == null) return \"\";\n    var i, value,\n        context_dictionary= {},\n        context_dictionaryToCreate= {},\n        context_c=\"\",\n        context_wc=\"\",\n        context_w=\"\",\n        context_enlargeIn= 2, // Compensate for the first entry which should not count\n        context_dictSize= 3,\n        context_numBits= 2,\n        context_data=[],\n        context_data_val=0,\n        context_data_position=0,\n        ii;\n\n    for (ii = 0; ii < uncompressed.length; ii += 1) {\n      context_c = uncompressed.charAt(ii);\n      if (!Object.prototype.hasOwnProperty.call(context_dictionary,context_c)) {\n        context_dictionary[context_c] = context_dictSize++;\n        context_dictionaryToCreate[context_c] = true;\n      }\n\n      context_wc = context_w + context_c;\n      if (Object.prototype.hasOwnProperty.call(context_dictionary,context_wc)) {\n        context_w = context_wc;\n      } else {\n        if (Object.prototype.hasOwnProperty.call(context_dictionaryToCreate,context_w)) {\n          if (context_w.charCodeAt(0)<256) {\n            for (i=0 ; i<context_numBits ; i++) {\n              context_data_val = (context_data_val << 1);\n              if (context_data_position == bitsPerChar-1) {\n                context_data_position = 0;\n                context_data.push(getCharFromInt(context_data_val));\n                context_data_val = 0;\n              } else {\n                context_data_position++;\n              }\n            }\n            value = context_w.charCodeAt(0);\n            for (i=0 ; i<8 ; i++) {\n              context_data_val = (context_data_val << 1) | (value&1);\n              if (context_data_position == bitsPerChar-1) {\n                context_data_position = 0;\n                context_data.push(getCharFromInt(context_data_val));\n                context_data_val = 0;\n              } else {\n                context_data_position++;\n              }\n              value = value >> 1;\n            }\n          } else {\n            value = 1;\n            for (i=0 ; i<context_numBits ; i++) {\n              context_data_val = (context_data_val << 1) | value;\n              if (context_data_position ==bitsPerChar-1) {\n                context_data_position = 0;\n                context_data.push(getCharFromInt(context_data_val));\n                context_data_val = 0;\n              } else {\n                context_data_position++;\n              }\n              value = 0;\n            }\n            value = context_w.charCodeAt(0);\n            for (i=0 ; i<16 ; i++) {\n              context_data_val = (context_data_val << 1) | (value&1);\n              if (context_data_position == bitsPerChar-1) {\n                context_data_position = 0;\n                context_data.push(getCharFromInt(context_data_val));\n                context_data_val = 0;\n              } else {\n                context_data_position++;\n              }\n              value = value >> 1;\n            }\n          }\n          context_enlargeIn--;\n          if (context_enlargeIn == 0) {\n            context_enlargeIn = Math.pow(2, context_numBits);\n            context_numBits++;\n          }\n          delete context_dictionaryToCreate[context_w];\n        } else {\n          value = context_dictionary[context_w];\n          for (i=0 ; i<context_numBits ; i++) {\n            context_data_val = (context_data_val << 1) | (value&1);\n            if (context_data_position == bitsPerChar-1) {\n              context_data_position = 0;\n              context_data.push(getCharFromInt(context_data_val));\n              context_data_val = 0;\n            } else {\n              context_data_position++;\n            }\n            value = value >> 1;\n          }\n\n\n        }\n        context_enlargeIn--;\n        if (context_enlargeIn == 0) {\n          context_enlargeIn = Math.pow(2, context_numBits);\n          context_numBits++;\n        }\n        // Add wc to the dictionary.\n        context_dictionary[context_wc] = context_dictSize++;\n        context_w = String(context_c);\n      }\n    }\n\n    // Output the code for w.\n    if (context_w !== \"\") {\n      if (Object.prototype.hasOwnProperty.call(context_dictionaryToCreate,context_w)) {\n        if (context_w.charCodeAt(0)<256) {\n          for (i=0 ; i<context_numBits ; i++) {\n            context_data_val = (context_data_val << 1);\n            if (context_data_position == bitsPerChar-1) {\n              context_data_position = 0;\n              context_data.push(getCharFromInt(context_data_val));\n              context_data_val = 0;\n            } else {\n              context_data_position++;\n            }\n          }\n          value = context_w.charCodeAt(0);\n          for (i=0 ; i<8 ; i++) {\n            context_data_val = (context_data_val << 1) | (value&1);\n            if (context_data_position == bitsPerChar-1) {\n              context_data_position = 0;\n              context_data.push(getCharFromInt(context_data_val));\n              context_data_val = 0;\n            } else {\n              context_data_position++;\n            }\n            value = value >> 1;\n          }\n        } else {\n          value = 1;\n          for (i=0 ; i<context_numBits ; i++) {\n            context_data_val = (context_data_val << 1) | value;\n            if (context_data_position == bitsPerChar-1) {\n              context_data_position = 0;\n              context_data.push(getCharFromInt(context_data_val));\n              context_data_val = 0;\n            } else {\n              context_data_position++;\n            }\n            value = 0;\n          }\n          value = context_w.charCodeAt(0);\n          for (i=0 ; i<16 ; i++) {\n            context_data_val = (context_data_val << 1) | (value&1);\n            if (context_data_position == bitsPerChar-1) {\n              context_data_position = 0;\n              context_data.push(getCharFromInt(context_data_val));\n              context_data_val = 0;\n            } else {\n              context_data_position++;\n            }\n            value = value >> 1;\n          }\n        }\n        context_enlargeIn--;\n        if (context_enlargeIn == 0) {\n          context_enlargeIn = Math.pow(2, context_numBits);\n          context_numBits++;\n        }\n        delete context_dictionaryToCreate[context_w];\n      } else {\n        value = context_dictionary[context_w];\n        for (i=0 ; i<context_numBits ; i++) {\n          context_data_val = (context_data_val << 1) | (value&1);\n          if (context_data_position == bitsPerChar-1) {\n            context_data_position = 0;\n            context_data.push(getCharFromInt(context_data_val));\n            context_data_val = 0;\n          } else {\n            context_data_position++;\n          }\n          value = value >> 1;\n        }\n\n\n      }\n      context_enlargeIn--;\n      if (context_enlargeIn == 0) {\n        context_enlargeIn = Math.pow(2, context_numBits);\n        context_numBits++;\n      }\n    }\n\n    // Mark the end of the stream\n    value = 2;\n    for (i=0 ; i<context_numBits ; i++) {\n      context_data_val = (context_data_val << 1) | (value&1);\n      if (context_data_position == bitsPerChar-1) {\n        context_data_position = 0;\n        context_data.push(getCharFromInt(context_data_val));\n        context_data_val = 0;\n      } else {\n        context_data_position++;\n      }\n      value = value >> 1;\n    }\n\n    // Flush the last char\n    while (true) {\n      context_data_val = (context_data_val << 1);\n      if (context_data_position == bitsPerChar-1) {\n        context_data.push(getCharFromInt(context_data_val));\n        break;\n      }\n      else context_data_position++;\n    }\n    return context_data.join('');\n  },\n\n  decompress: function (compressed) {\n    if (compressed == null) return \"\";\n    if (compressed == \"\") return null;\n    return LZString._decompress(compressed.length, 32768, function(index) { return compressed.charCodeAt(index); });\n  },\n\n  _decompress: function (length, resetValue, getNextValue) {\n    var dictionary = [],\n        next,\n        enlargeIn = 4,\n        dictSize = 4,\n        numBits = 3,\n        entry = \"\",\n        result = [],\n        i,\n        w,\n        bits, resb, maxpower, power,\n        c,\n        data = {val:getNextValue(0), position:resetValue, index:1};\n\n    for (i = 0; i < 3; i += 1) {\n      dictionary[i] = i;\n    }\n\n    bits = 0;\n    maxpower = Math.pow(2,2);\n    power=1;\n    while (power!=maxpower) {\n      resb = data.val & data.position;\n      data.position >>= 1;\n      if (data.position == 0) {\n        data.position = resetValue;\n        data.val = getNextValue(data.index++);\n      }\n      bits |= (resb>0 ? 1 : 0) * power;\n      power <<= 1;\n    }\n\n    switch (next = bits) {\n      case 0:\n          bits = 0;\n          maxpower = Math.pow(2,8);\n          power=1;\n          while (power!=maxpower) {\n            resb = data.val & data.position;\n            data.position >>= 1;\n            if (data.position == 0) {\n              data.position = resetValue;\n              data.val = getNextValue(data.index++);\n            }\n            bits |= (resb>0 ? 1 : 0) * power;\n            power <<= 1;\n          }\n        c = f(bits);\n        break;\n      case 1:\n          bits = 0;\n          maxpower = Math.pow(2,16);\n          power=1;\n          while (power!=maxpower) {\n            resb = data.val & data.position;\n            data.position >>= 1;\n            if (data.position == 0) {\n              data.position = resetValue;\n              data.val = getNextValue(data.index++);\n            }\n            bits |= (resb>0 ? 1 : 0) * power;\n            power <<= 1;\n          }\n        c = f(bits);\n        break;\n      case 2:\n        return \"\";\n    }\n    dictionary[3] = c;\n    w = c;\n    result.push(c);\n    while (true) {\n      if (data.index > length) {\n        return \"\";\n      }\n\n      bits = 0;\n      maxpower = Math.pow(2,numBits);\n      power=1;\n      while (power!=maxpower) {\n        resb = data.val & data.position;\n        data.position >>= 1;\n        if (data.position == 0) {\n          data.position = resetValue;\n          data.val = getNextValue(data.index++);\n        }\n        bits |= (resb>0 ? 1 : 0) * power;\n        power <<= 1;\n      }\n\n      switch (c = bits) {\n        case 0:\n          bits = 0;\n          maxpower = Math.pow(2,8);\n          power=1;\n          while (power!=maxpower) {\n            resb = data.val & data.position;\n            data.position >>= 1;\n            if (data.position == 0) {\n              data.position = resetValue;\n              data.val = getNextValue(data.index++);\n            }\n            bits |= (resb>0 ? 1 : 0) * power;\n            power <<= 1;\n          }\n\n          dictionary[dictSize++] = f(bits);\n          c = dictSize-1;\n          enlargeIn--;\n          break;\n        case 1:\n          bits = 0;\n          maxpower = Math.pow(2,16);\n          power=1;\n          while (power!=maxpower) {\n            resb = data.val & data.position;\n            data.position >>= 1;\n            if (data.position == 0) {\n              data.position = resetValue;\n              data.val = getNextValue(data.index++);\n            }\n            bits |= (resb>0 ? 1 : 0) * power;\n            power <<= 1;\n          }\n          dictionary[dictSize++] = f(bits);\n          c = dictSize-1;\n          enlargeIn--;\n          break;\n        case 2:\n          return result.join('');\n      }\n\n      if (enlargeIn == 0) {\n        enlargeIn = Math.pow(2, numBits);\n        numBits++;\n      }\n\n      if (dictionary[c]) {\n        entry = dictionary[c];\n      } else {\n        if (c === dictSize) {\n          entry = w + w.charAt(0);\n        } else {\n          return null;\n        }\n      }\n      result.push(entry);\n\n      // Add w+entry[0] to the dictionary.\n      dictionary[dictSize++] = w + entry.charAt(0);\n      enlargeIn--;\n\n      w = entry;\n\n      if (enlargeIn == 0) {\n        enlargeIn = Math.pow(2, numBits);\n        numBits++;\n      }\n\n    }\n  }\n};\n  return LZString;\n})();\n\nif (typeof define === 'function' && define.amd) {\n  define(function () { return LZString; });\n} else if( typeof module !== 'undefined' && module != null ) {\n  module.exports = LZString\n} else if( typeof angular !== 'undefined' && angular != null ) {\n  angular.module('LZString', [])\n  .factory('LZString', function () {\n    return LZString;\n  });\n}\n"],"names":["LZString","f","String","fromCharCode","keyStrBase64","keyStrUriSafe","baseReverseDic","getBaseValue","alphabet","character","i","length","charAt","compressToBase64","input","res","_compress","a","decompressFromBase64","_decompress","index","compressToUTF16","decompressFromUTF16","compressed","charCodeAt","compressToUint8Array","uncompressed","compress","buf","Uint8Array","TotalLen","current_value","decompressFromUint8Array","undefined","decompress","Array","result","forEach","c","push","join","compressToEncodedURIComponent","decompressFromEncodedURIComponent","replace","bitsPerChar","getCharFromInt","value","context_dictionary","context_dictionaryToCreate","context_c","context_wc","context_w","context_enlargeIn","context_dictSize","context_numBits","context_data","context_data_val","context_data_position","ii","Object","prototype","hasOwnProperty","call","Math","pow","resetValue","getNextValue","dictionary","next","enlargeIn","dictSize","numBits","entry","w","bits","resb","maxpower","power","data","val","position","define","amd","module","exports","angular","factory"],"mappings":"AAAA,mDAAmD;AACnD,8DAA8D;AAC9D,0CAA0C;AAC1C,gEAAgE;AAChE,EAAE;AACF,uCAAuC;AACvC,uDAAuD;AACvD,EAAE;AACF,gDAAgD;;AAChD,IAAIA,WAAW,AAAC;IAEhB,mBAAmB;IACnB,IAAIC,IAAIC,OAAOC,YAAY;IAC3B,IAAIC,eAAe;IACnB,IAAIC,gBAAgB;IACpB,IAAIC,iBAAiB,CAAC;IAEtB,SAASC,aAAaC,QAAQ,EAAEC,SAAS;QACvC,IAAI,CAACH,cAAc,CAACE,SAAS,EAAE;YAC7BF,cAAc,CAACE,SAAS,GAAG,CAAC;YAC5B,IAAK,IAAIE,IAAE,GAAIA,IAAEF,SAASG,MAAM,EAAGD,IAAK;gBACtCJ,cAAc,CAACE,SAAS,CAACA,SAASI,MAAM,CAACF,GAAG,GAAGA;YACjD;QACF;QACA,OAAOJ,cAAc,CAACE,SAAS,CAACC,UAAU;IAC5C;IAEA,IAAIT,WAAW;QACba,kBAAmB,SAAUC,KAAK;YAChC,IAAIA,SAAS,MAAM,OAAO;YAC1B,IAAIC,MAAMf,SAASgB,SAAS,CAACF,OAAO,GAAG,SAASG,CAAC;gBAAE,OAAOb,aAAaQ,MAAM,CAACK;YAAG;YACjF,OAAQF,IAAIJ,MAAM,GAAG;gBACrB;gBACA,KAAK;oBAAI,OAAOI;gBAChB,KAAK;oBAAI,OAAOA,MAAI;gBACpB,KAAK;oBAAI,OAAOA,MAAI;gBACpB,KAAK;oBAAI,OAAOA,MAAI;YACpB;QACF;QAEAG,sBAAuB,SAAUJ,KAAK;YACpC,IAAIA,SAAS,MAAM,OAAO;YAC1B,IAAIA,SAAS,IAAI,OAAO;YACxB,OAAOd,SAASmB,WAAW,CAACL,MAAMH,MAAM,EAAE,IAAI,SAASS,KAAK;gBAAI,OAAOb,aAAaH,cAAcU,MAAMF,MAAM,CAACQ;YAAS;QAC1H;QAEAC,iBAAkB,SAAUP,KAAK;YAC/B,IAAIA,SAAS,MAAM,OAAO;YAC1B,OAAOd,SAASgB,SAAS,CAACF,OAAO,IAAI,SAASG,CAAC;gBAAE,OAAOhB,EAAEgB,IAAE;YAAI,KAAK;QACvE;QAEAK,qBAAqB,SAAUC,UAAU;YACvC,IAAIA,cAAc,MAAM,OAAO;YAC/B,IAAIA,cAAc,IAAI,OAAO;YAC7B,OAAOvB,SAASmB,WAAW,CAACI,WAAWZ,MAAM,EAAE,OAAO,SAASS,KAAK;gBAAI,OAAOG,WAAWC,UAAU,CAACJ,SAAS;YAAI;QACpH;QAEA,oDAAoD;QACpDK,sBAAsB,SAAUC,YAAY;YAC1C,IAAIH,aAAavB,SAAS2B,QAAQ,CAACD;YACnC,IAAIE,MAAI,IAAIC,WAAWN,WAAWZ,MAAM,GAAC,IAAI,wBAAwB;YAErE,IAAK,IAAID,IAAE,GAAGoB,WAASP,WAAWZ,MAAM,EAAED,IAAEoB,UAAUpB,IAAK;gBACzD,IAAIqB,gBAAgBR,WAAWC,UAAU,CAACd;gBAC1CkB,GAAG,CAAClB,IAAE,EAAE,GAAGqB,kBAAkB;gBAC7BH,GAAG,CAAClB,IAAE,IAAE,EAAE,GAAGqB,gBAAgB;YAC/B;YACA,OAAOH;QACT;QAEA,sDAAsD;QACtDI,0BAAyB,SAAUT,UAAU;YAC3C,IAAIA,eAAa,QAAQA,eAAaU,WAAU;gBAC5C,OAAOjC,SAASkC,UAAU,CAACX;YAC/B,OAAO;gBACH,IAAIK,MAAI,IAAIO,MAAMZ,WAAWZ,MAAM,GAAC,IAAI,wBAAwB;gBAChE,IAAK,IAAID,IAAE,GAAGoB,WAASF,IAAIjB,MAAM,EAAED,IAAEoB,UAAUpB,IAAK;oBAClDkB,GAAG,CAAClB,EAAE,GAACa,UAAU,CAACb,IAAE,EAAE,GAAC,MAAIa,UAAU,CAACb,IAAE,IAAE,EAAE;gBAC9C;gBAEA,IAAI0B,SAAS,EAAE;gBACfR,IAAIS,OAAO,CAAC,SAAUC,CAAC;oBACrBF,OAAOG,IAAI,CAACtC,EAAEqC;gBAChB;gBACA,OAAOtC,SAASkC,UAAU,CAACE,OAAOI,IAAI,CAAC;YAE3C;QAEF;QAGA,oDAAoD;QACpDC,+BAA+B,SAAU3B,KAAK;YAC5C,IAAIA,SAAS,MAAM,OAAO;YAC1B,OAAOd,SAASgB,SAAS,CAACF,OAAO,GAAG,SAASG,CAAC;gBAAE,OAAOZ,cAAcO,MAAM,CAACK;YAAG;QACjF;QAEA,4DAA4D;QAC5DyB,mCAAkC,SAAU5B,KAAK;YAC/C,IAAIA,SAAS,MAAM,OAAO;YAC1B,IAAIA,SAAS,IAAI,OAAO;YACxBA,QAAQA,MAAM6B,OAAO,CAAC,MAAM;YAC5B,OAAO3C,SAASmB,WAAW,CAACL,MAAMH,MAAM,EAAE,IAAI,SAASS,KAAK;gBAAI,OAAOb,aAAaF,eAAeS,MAAMF,MAAM,CAACQ;YAAS;QAC3H;QAEAO,UAAU,SAAUD,YAAY;YAC9B,OAAO1B,SAASgB,SAAS,CAACU,cAAc,IAAI,SAAST,CAAC;gBAAE,OAAOhB,EAAEgB;YAAG;QACtE;QACAD,WAAW,SAAUU,YAAY,EAAEkB,WAAW,EAAEC,cAAc;YAC5D,IAAInB,gBAAgB,MAAM,OAAO;YACjC,IAAIhB,GAAGoC,OACHC,qBAAoB,CAAC,GACrBC,6BAA4B,CAAC,GAC7BC,YAAU,IACVC,aAAW,IACXC,YAAU,IACVC,oBAAmB,GACnBC,mBAAkB,GAClBC,kBAAiB,GACjBC,eAAa,EAAE,EACfC,mBAAiB,GACjBC,wBAAsB,GACtBC;YAEJ,IAAKA,KAAK,GAAGA,KAAKhC,aAAaf,MAAM,EAAE+C,MAAM,EAAG;gBAC9CT,YAAYvB,aAAad,MAAM,CAAC8C;gBAChC,IAAI,CAACC,OAAOC,SAAS,CAACC,cAAc,CAACC,IAAI,CAACf,oBAAmBE,YAAY;oBACvEF,kBAAkB,CAACE,UAAU,GAAGI;oBAChCL,0BAA0B,CAACC,UAAU,GAAG;gBAC1C;gBAEAC,aAAaC,YAAYF;gBACzB,IAAIU,OAAOC,SAAS,CAACC,cAAc,CAACC,IAAI,CAACf,oBAAmBG,aAAa;oBACvEC,YAAYD;gBACd,OAAO;oBACL,IAAIS,OAAOC,SAAS,CAACC,cAAc,CAACC,IAAI,CAACd,4BAA2BG,YAAY;wBAC9E,IAAIA,UAAU3B,UAAU,CAAC,KAAG,KAAK;4BAC/B,IAAKd,IAAE,GAAIA,IAAE4C,iBAAkB5C,IAAK;gCAClC8C,mBAAoBA,oBAAoB;gCACxC,IAAIC,yBAAyBb,cAAY,GAAG;oCAC1Ca,wBAAwB;oCACxBF,aAAahB,IAAI,CAACM,eAAeW;oCACjCA,mBAAmB;gCACrB,OAAO;oCACLC;gCACF;4BACF;4BACAX,QAAQK,UAAU3B,UAAU,CAAC;4BAC7B,IAAKd,IAAE,GAAIA,IAAE,GAAIA,IAAK;gCACpB8C,mBAAmB,AAACA,oBAAoB,IAAMV,QAAM;gCACpD,IAAIW,yBAAyBb,cAAY,GAAG;oCAC1Ca,wBAAwB;oCACxBF,aAAahB,IAAI,CAACM,eAAeW;oCACjCA,mBAAmB;gCACrB,OAAO;oCACLC;gCACF;gCACAX,QAAQA,SAAS;4BACnB;wBACF,OAAO;4BACLA,QAAQ;4BACR,IAAKpC,IAAE,GAAIA,IAAE4C,iBAAkB5C,IAAK;gCAClC8C,mBAAmB,AAACA,oBAAoB,IAAKV;gCAC7C,IAAIW,yBAAwBb,cAAY,GAAG;oCACzCa,wBAAwB;oCACxBF,aAAahB,IAAI,CAACM,eAAeW;oCACjCA,mBAAmB;gCACrB,OAAO;oCACLC;gCACF;gCACAX,QAAQ;4BACV;4BACAA,QAAQK,UAAU3B,UAAU,CAAC;4BAC7B,IAAKd,IAAE,GAAIA,IAAE,IAAKA,IAAK;gCACrB8C,mBAAmB,AAACA,oBAAoB,IAAMV,QAAM;gCACpD,IAAIW,yBAAyBb,cAAY,GAAG;oCAC1Ca,wBAAwB;oCACxBF,aAAahB,IAAI,CAACM,eAAeW;oCACjCA,mBAAmB;gCACrB,OAAO;oCACLC;gCACF;gCACAX,QAAQA,SAAS;4BACnB;wBACF;wBACAM;wBACA,IAAIA,qBAAqB,GAAG;4BAC1BA,oBAAoBW,KAAKC,GAAG,CAAC,GAAGV;4BAChCA;wBACF;wBACA,OAAON,0BAA0B,CAACG,UAAU;oBAC9C,OAAO;wBACLL,QAAQC,kBAAkB,CAACI,UAAU;wBACrC,IAAKzC,IAAE,GAAIA,IAAE4C,iBAAkB5C,IAAK;4BAClC8C,mBAAmB,AAACA,oBAAoB,IAAMV,QAAM;4BACpD,IAAIW,yBAAyBb,cAAY,GAAG;gCAC1Ca,wBAAwB;gCACxBF,aAAahB,IAAI,CAACM,eAAeW;gCACjCA,mBAAmB;4BACrB,OAAO;gCACLC;4BACF;4BACAX,QAAQA,SAAS;wBACnB;oBAGF;oBACAM;oBACA,IAAIA,qBAAqB,GAAG;wBAC1BA,oBAAoBW,KAAKC,GAAG,CAAC,GAAGV;wBAChCA;oBACF;oBACA,4BAA4B;oBAC5BP,kBAAkB,CAACG,WAAW,GAAGG;oBACjCF,YAAYjD,OAAO+C;gBACrB;YACF;YAEA,yBAAyB;YACzB,IAAIE,cAAc,IAAI;gBACpB,IAAIQ,OAAOC,SAAS,CAACC,cAAc,CAACC,IAAI,CAACd,4BAA2BG,YAAY;oBAC9E,IAAIA,UAAU3B,UAAU,CAAC,KAAG,KAAK;wBAC/B,IAAKd,IAAE,GAAIA,IAAE4C,iBAAkB5C,IAAK;4BAClC8C,mBAAoBA,oBAAoB;4BACxC,IAAIC,yBAAyBb,cAAY,GAAG;gCAC1Ca,wBAAwB;gCACxBF,aAAahB,IAAI,CAACM,eAAeW;gCACjCA,mBAAmB;4BACrB,OAAO;gCACLC;4BACF;wBACF;wBACAX,QAAQK,UAAU3B,UAAU,CAAC;wBAC7B,IAAKd,IAAE,GAAIA,IAAE,GAAIA,IAAK;4BACpB8C,mBAAmB,AAACA,oBAAoB,IAAMV,QAAM;4BACpD,IAAIW,yBAAyBb,cAAY,GAAG;gCAC1Ca,wBAAwB;gCACxBF,aAAahB,IAAI,CAACM,eAAeW;gCACjCA,mBAAmB;4BACrB,OAAO;gCACLC;4BACF;4BACAX,QAAQA,SAAS;wBACnB;oBACF,OAAO;wBACLA,QAAQ;wBACR,IAAKpC,IAAE,GAAIA,IAAE4C,iBAAkB5C,IAAK;4BAClC8C,mBAAmB,AAACA,oBAAoB,IAAKV;4BAC7C,IAAIW,yBAAyBb,cAAY,GAAG;gCAC1Ca,wBAAwB;gCACxBF,aAAahB,IAAI,CAACM,eAAeW;gCACjCA,mBAAmB;4BACrB,OAAO;gCACLC;4BACF;4BACAX,QAAQ;wBACV;wBACAA,QAAQK,UAAU3B,UAAU,CAAC;wBAC7B,IAAKd,IAAE,GAAIA,IAAE,IAAKA,IAAK;4BACrB8C,mBAAmB,AAACA,oBAAoB,IAAMV,QAAM;4BACpD,IAAIW,yBAAyBb,cAAY,GAAG;gCAC1Ca,wBAAwB;gCACxBF,aAAahB,IAAI,CAACM,eAAeW;gCACjCA,mBAAmB;4BACrB,OAAO;gCACLC;4BACF;4BACAX,QAAQA,SAAS;wBACnB;oBACF;oBACAM;oBACA,IAAIA,qBAAqB,GAAG;wBAC1BA,oBAAoBW,KAAKC,GAAG,CAAC,GAAGV;wBAChCA;oBACF;oBACA,OAAON,0BAA0B,CAACG,UAAU;gBAC9C,OAAO;oBACLL,QAAQC,kBAAkB,CAACI,UAAU;oBACrC,IAAKzC,IAAE,GAAIA,IAAE4C,iBAAkB5C,IAAK;wBAClC8C,mBAAmB,AAACA,oBAAoB,IAAMV,QAAM;wBACpD,IAAIW,yBAAyBb,cAAY,GAAG;4BAC1Ca,wBAAwB;4BACxBF,aAAahB,IAAI,CAACM,eAAeW;4BACjCA,mBAAmB;wBACrB,OAAO;4BACLC;wBACF;wBACAX,QAAQA,SAAS;oBACnB;gBAGF;gBACAM;gBACA,IAAIA,qBAAqB,GAAG;oBAC1BA,oBAAoBW,KAAKC,GAAG,CAAC,GAAGV;oBAChCA;gBACF;YACF;YAEA,6BAA6B;YAC7BR,QAAQ;YACR,IAAKpC,IAAE,GAAIA,IAAE4C,iBAAkB5C,IAAK;gBAClC8C,mBAAmB,AAACA,oBAAoB,IAAMV,QAAM;gBACpD,IAAIW,yBAAyBb,cAAY,GAAG;oBAC1Ca,wBAAwB;oBACxBF,aAAahB,IAAI,CAACM,eAAeW;oBACjCA,mBAAmB;gBACrB,OAAO;oBACLC;gBACF;gBACAX,QAAQA,SAAS;YACnB;YAEA,sBAAsB;YACtB,MAAO,KAAM;gBACXU,mBAAoBA,oBAAoB;gBACxC,IAAIC,yBAAyBb,cAAY,GAAG;oBAC1CW,aAAahB,IAAI,CAACM,eAAeW;oBACjC;gBACF,OACKC;YACP;YACA,OAAOF,aAAaf,IAAI,CAAC;QAC3B;QAEAN,YAAY,SAAUX,UAAU;YAC9B,IAAIA,cAAc,MAAM,OAAO;YAC/B,IAAIA,cAAc,IAAI,OAAO;YAC7B,OAAOvB,SAASmB,WAAW,CAACI,WAAWZ,MAAM,EAAE,OAAO,SAASS,KAAK;gBAAI,OAAOG,WAAWC,UAAU,CAACJ;YAAQ;QAC/G;QAEAD,aAAa,SAAUR,MAAM,EAAEsD,UAAU,EAAEC,YAAY;YACrD,IAAIC,aAAa,EAAE,EACfC,MACAC,YAAY,GACZC,WAAW,GACXC,UAAU,GACVC,QAAQ,IACRpC,SAAS,EAAE,EACX1B,GACA+D,GACAC,MAAMC,MAAMC,UAAUC,OACtBvC,GACAwC,OAAO;gBAACC,KAAIb,aAAa;gBAAIc,UAASf;gBAAY7C,OAAM;YAAC;YAE7D,IAAKV,IAAI,GAAGA,IAAI,GAAGA,KAAK,EAAG;gBACzByD,UAAU,CAACzD,EAAE,GAAGA;YAClB;YAEAgE,OAAO;YACPE,WAAWb,KAAKC,GAAG,CAAC,GAAE;YACtBa,QAAM;YACN,MAAOA,SAAOD,SAAU;gBACtBD,OAAOG,KAAKC,GAAG,GAAGD,KAAKE,QAAQ;gBAC/BF,KAAKE,QAAQ,KAAK;gBAClB,IAAIF,KAAKE,QAAQ,IAAI,GAAG;oBACtBF,KAAKE,QAAQ,GAAGf;oBAChBa,KAAKC,GAAG,GAAGb,aAAaY,KAAK1D,KAAK;gBACpC;gBACAsD,QAAQ,AAACC,CAAAA,OAAK,IAAI,IAAI,CAAA,IAAKE;gBAC3BA,UAAU;YACZ;YAEA,OAAQT,OAAOM;gBACb,KAAK;oBACDA,OAAO;oBACPE,WAAWb,KAAKC,GAAG,CAAC,GAAE;oBACtBa,QAAM;oBACN,MAAOA,SAAOD,SAAU;wBACtBD,OAAOG,KAAKC,GAAG,GAAGD,KAAKE,QAAQ;wBAC/BF,KAAKE,QAAQ,KAAK;wBAClB,IAAIF,KAAKE,QAAQ,IAAI,GAAG;4BACtBF,KAAKE,QAAQ,GAAGf;4BAChBa,KAAKC,GAAG,GAAGb,aAAaY,KAAK1D,KAAK;wBACpC;wBACAsD,QAAQ,AAACC,CAAAA,OAAK,IAAI,IAAI,CAAA,IAAKE;wBAC3BA,UAAU;oBACZ;oBACFvC,IAAIrC,EAAEyE;oBACN;gBACF,KAAK;oBACDA,OAAO;oBACPE,WAAWb,KAAKC,GAAG,CAAC,GAAE;oBACtBa,QAAM;oBACN,MAAOA,SAAOD,SAAU;wBACtBD,OAAOG,KAAKC,GAAG,GAAGD,KAAKE,QAAQ;wBAC/BF,KAAKE,QAAQ,KAAK;wBAClB,IAAIF,KAAKE,QAAQ,IAAI,GAAG;4BACtBF,KAAKE,QAAQ,GAAGf;4BAChBa,KAAKC,GAAG,GAAGb,aAAaY,KAAK1D,KAAK;wBACpC;wBACAsD,QAAQ,AAACC,CAAAA,OAAK,IAAI,IAAI,CAAA,IAAKE;wBAC3BA,UAAU;oBACZ;oBACFvC,IAAIrC,EAAEyE;oBACN;gBACF,KAAK;oBACH,OAAO;YACX;YACAP,UAAU,CAAC,EAAE,GAAG7B;YAChBmC,IAAInC;YACJF,OAAOG,IAAI,CAACD;YACZ,MAAO,KAAM;gBACX,IAAIwC,KAAK1D,KAAK,GAAGT,QAAQ;oBACvB,OAAO;gBACT;gBAEA+D,OAAO;gBACPE,WAAWb,KAAKC,GAAG,CAAC,GAAEO;gBACtBM,QAAM;gBACN,MAAOA,SAAOD,SAAU;oBACtBD,OAAOG,KAAKC,GAAG,GAAGD,KAAKE,QAAQ;oBAC/BF,KAAKE,QAAQ,KAAK;oBAClB,IAAIF,KAAKE,QAAQ,IAAI,GAAG;wBACtBF,KAAKE,QAAQ,GAAGf;wBAChBa,KAAKC,GAAG,GAAGb,aAAaY,KAAK1D,KAAK;oBACpC;oBACAsD,QAAQ,AAACC,CAAAA,OAAK,IAAI,IAAI,CAAA,IAAKE;oBAC3BA,UAAU;gBACZ;gBAEA,OAAQvC,IAAIoC;oBACV,KAAK;wBACHA,OAAO;wBACPE,WAAWb,KAAKC,GAAG,CAAC,GAAE;wBACtBa,QAAM;wBACN,MAAOA,SAAOD,SAAU;4BACtBD,OAAOG,KAAKC,GAAG,GAAGD,KAAKE,QAAQ;4BAC/BF,KAAKE,QAAQ,KAAK;4BAClB,IAAIF,KAAKE,QAAQ,IAAI,GAAG;gCACtBF,KAAKE,QAAQ,GAAGf;gCAChBa,KAAKC,GAAG,GAAGb,aAAaY,KAAK1D,KAAK;4BACpC;4BACAsD,QAAQ,AAACC,CAAAA,OAAK,IAAI,IAAI,CAAA,IAAKE;4BAC3BA,UAAU;wBACZ;wBAEAV,UAAU,CAACG,WAAW,GAAGrE,EAAEyE;wBAC3BpC,IAAIgC,WAAS;wBACbD;wBACA;oBACF,KAAK;wBACHK,OAAO;wBACPE,WAAWb,KAAKC,GAAG,CAAC,GAAE;wBACtBa,QAAM;wBACN,MAAOA,SAAOD,SAAU;4BACtBD,OAAOG,KAAKC,GAAG,GAAGD,KAAKE,QAAQ;4BAC/BF,KAAKE,QAAQ,KAAK;4BAClB,IAAIF,KAAKE,QAAQ,IAAI,GAAG;gCACtBF,KAAKE,QAAQ,GAAGf;gCAChBa,KAAKC,GAAG,GAAGb,aAAaY,KAAK1D,KAAK;4BACpC;4BACAsD,QAAQ,AAACC,CAAAA,OAAK,IAAI,IAAI,CAAA,IAAKE;4BAC3BA,UAAU;wBACZ;wBACAV,UAAU,CAACG,WAAW,GAAGrE,EAAEyE;wBAC3BpC,IAAIgC,WAAS;wBACbD;wBACA;oBACF,KAAK;wBACH,OAAOjC,OAAOI,IAAI,CAAC;gBACvB;gBAEA,IAAI6B,aAAa,GAAG;oBAClBA,YAAYN,KAAKC,GAAG,CAAC,GAAGO;oBACxBA;gBACF;gBAEA,IAAIJ,UAAU,CAAC7B,EAAE,EAAE;oBACjBkC,QAAQL,UAAU,CAAC7B,EAAE;gBACvB,OAAO;oBACL,IAAIA,MAAMgC,UAAU;wBAClBE,QAAQC,IAAIA,EAAE7D,MAAM,CAAC;oBACvB,OAAO;wBACL,OAAO;oBACT;gBACF;gBACAwB,OAAOG,IAAI,CAACiC;gBAEZ,oCAAoC;gBACpCL,UAAU,CAACG,WAAW,GAAGG,IAAID,MAAM5D,MAAM,CAAC;gBAC1CyD;gBAEAI,IAAID;gBAEJ,IAAIH,aAAa,GAAG;oBAClBA,YAAYN,KAAKC,GAAG,CAAC,GAAGO;oBACxBA;gBACF;YAEF;QACF;IACF;IACE,OAAOvE;AACT;AAEA,IAAI,OAAOiF,WAAW,cAAcA,OAAOC,GAAG,EAAE;IAC9CD,OAAO;QAAc,OAAOjF;IAAU;AACxC,OAAO,IAAI,OAAOmF,WAAW,eAAeA,UAAU,MAAO;IAC3DA,OAAOC,OAAO,GAAGpF;AACnB,OAAO,IAAI,OAAOqF,YAAY,eAAeA,WAAW,MAAO;IAC7DA,QAAQF,MAAM,CAAC,YAAY,EAAE,EAC5BG,OAAO,CAAC,YAAY;QACnB,OAAOtF;IACT;AACF"}