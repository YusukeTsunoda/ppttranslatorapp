9a01daf2973693cb185992bea3ecf651
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.getQueriesForElement = getQueriesForElement;
var defaultQueries = _interopRequireWildcard(require("./queries"));
function _getRequireWildcardCache(e) {
    if ("function" != typeof WeakMap) return null;
    var r = new WeakMap(), t = new WeakMap();
    return (_getRequireWildcardCache = function(e) {
        return e ? t : r;
    })(e);
}
function _interopRequireWildcard(e, r) {
    if (!r && e && e.__esModule) return e;
    if (null === e || "object" != typeof e && "function" != typeof e) return {
        default: e
    };
    var t = _getRequireWildcardCache(r);
    if (t && t.has(e)) return t.get(e);
    var n = {
        __proto__: null
    }, a = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var u in e)if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) {
        var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
        i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
    }
    return n.default = e, t && t.set(e, n), n;
}
/**
 * @typedef {{[key: string]: Function}} FuncMap
 */ /**
 * @param {HTMLElement} element container
 * @param {FuncMap} queries object of functions
 * @param {Object} initialValue for reducer
 * @returns {FuncMap} returns object of functions bound to container
 */ function getQueriesForElement(element, queries = defaultQueries, initialValue = {}) {
    return Object.keys(queries).reduce((helpers, key)=>{
        const fn = queries[key];
        helpers[key] = fn.bind(null, element);
        return helpers;
    }, initialValue);
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy95dXN1a2V0c3Vub2RhL0RvY3VtZW50cy9jdXJzb3IvcHB0dHJhbnNsYXRvcmFwcC9ub2RlX21vZHVsZXMvQHRlc3RpbmctbGlicmFyeS9yZWFjdC9ub2RlX21vZHVsZXMvQHRlc3RpbmctbGlicmFyeS9kb20vZGlzdC9nZXQtcXVlcmllcy1mb3ItZWxlbWVudC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZ2V0UXVlcmllc0ZvckVsZW1lbnQgPSBnZXRRdWVyaWVzRm9yRWxlbWVudDtcbnZhciBkZWZhdWx0UXVlcmllcyA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCIuL3F1ZXJpZXNcIikpO1xuZnVuY3Rpb24gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKGUpIHsgaWYgKFwiZnVuY3Rpb25cIiAhPSB0eXBlb2YgV2Vha01hcCkgcmV0dXJuIG51bGw7IHZhciByID0gbmV3IFdlYWtNYXAoKSwgdCA9IG5ldyBXZWFrTWFwKCk7IHJldHVybiAoX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlID0gZnVuY3Rpb24gKGUpIHsgcmV0dXJuIGUgPyB0IDogcjsgfSkoZSk7IH1cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKGUsIHIpIHsgaWYgKCFyICYmIGUgJiYgZS5fX2VzTW9kdWxlKSByZXR1cm4gZTsgaWYgKG51bGwgPT09IGUgfHwgXCJvYmplY3RcIiAhPSB0eXBlb2YgZSAmJiBcImZ1bmN0aW9uXCIgIT0gdHlwZW9mIGUpIHJldHVybiB7IGRlZmF1bHQ6IGUgfTsgdmFyIHQgPSBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUocik7IGlmICh0ICYmIHQuaGFzKGUpKSByZXR1cm4gdC5nZXQoZSk7IHZhciBuID0geyBfX3Byb3RvX186IG51bGwgfSwgYSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOyBmb3IgKHZhciB1IGluIGUpIGlmIChcImRlZmF1bHRcIiAhPT0gdSAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZSwgdSkpIHsgdmFyIGkgPSBhID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihlLCB1KSA6IG51bGw7IGkgJiYgKGkuZ2V0IHx8IGkuc2V0KSA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuLCB1LCBpKSA6IG5bdV0gPSBlW3VdOyB9IHJldHVybiBuLmRlZmF1bHQgPSBlLCB0ICYmIHQuc2V0KGUsIG4pLCBuOyB9XG4vKipcbiAqIEB0eXBlZGVmIHt7W2tleTogc3RyaW5nXTogRnVuY3Rpb259fSBGdW5jTWFwXG4gKi9cblxuLyoqXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbGVtZW50IGNvbnRhaW5lclxuICogQHBhcmFtIHtGdW5jTWFwfSBxdWVyaWVzIG9iamVjdCBvZiBmdW5jdGlvbnNcbiAqIEBwYXJhbSB7T2JqZWN0fSBpbml0aWFsVmFsdWUgZm9yIHJlZHVjZXJcbiAqIEByZXR1cm5zIHtGdW5jTWFwfSByZXR1cm5zIG9iamVjdCBvZiBmdW5jdGlvbnMgYm91bmQgdG8gY29udGFpbmVyXG4gKi9cbmZ1bmN0aW9uIGdldFF1ZXJpZXNGb3JFbGVtZW50KGVsZW1lbnQsIHF1ZXJpZXMgPSBkZWZhdWx0UXVlcmllcywgaW5pdGlhbFZhbHVlID0ge30pIHtcbiAgcmV0dXJuIE9iamVjdC5rZXlzKHF1ZXJpZXMpLnJlZHVjZSgoaGVscGVycywga2V5KSA9PiB7XG4gICAgY29uc3QgZm4gPSBxdWVyaWVzW2tleV07XG4gICAgaGVscGVyc1trZXldID0gZm4uYmluZChudWxsLCBlbGVtZW50KTtcbiAgICByZXR1cm4gaGVscGVycztcbiAgfSwgaW5pdGlhbFZhbHVlKTtcbn0iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJnZXRRdWVyaWVzRm9yRWxlbWVudCIsImRlZmF1bHRRdWVyaWVzIiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJyZXF1aXJlIiwiX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlIiwiZSIsIldlYWtNYXAiLCJyIiwidCIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiaGFzIiwiZ2V0IiwibiIsIl9fcHJvdG9fXyIsImEiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJ1IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiaSIsInNldCIsImVsZW1lbnQiLCJxdWVyaWVzIiwiaW5pdGlhbFZhbHVlIiwia2V5cyIsInJlZHVjZSIsImhlbHBlcnMiLCJrZXkiLCJmbiIsImJpbmQiXSwibWFwcGluZ3MiOiJBQUFBO0FBRUFBLE9BQU9DLGNBQWMsQ0FBQ0MsU0FBUyxjQUFjO0lBQzNDQyxPQUFPO0FBQ1Q7QUFDQUQsUUFBUUUsb0JBQW9CLEdBQUdBO0FBQy9CLElBQUlDLGlCQUFpQkMsd0JBQXdCQyxRQUFRO0FBQ3JELFNBQVNDLHlCQUF5QkMsQ0FBQztJQUFJLElBQUksY0FBYyxPQUFPQyxTQUFTLE9BQU87SUFBTSxJQUFJQyxJQUFJLElBQUlELFdBQVdFLElBQUksSUFBSUY7SUFBVyxPQUFPLEFBQUNGLENBQUFBLDJCQUEyQixTQUFVQyxDQUFDO1FBQUksT0FBT0EsSUFBSUcsSUFBSUQ7SUFBRyxDQUFBLEVBQUdGO0FBQUk7QUFDM00sU0FBU0gsd0JBQXdCRyxDQUFDLEVBQUVFLENBQUM7SUFBSSxJQUFJLENBQUNBLEtBQUtGLEtBQUtBLEVBQUVJLFVBQVUsRUFBRSxPQUFPSjtJQUFHLElBQUksU0FBU0EsS0FBSyxZQUFZLE9BQU9BLEtBQUssY0FBYyxPQUFPQSxHQUFHLE9BQU87UUFBRUssU0FBU0w7SUFBRTtJQUFHLElBQUlHLElBQUlKLHlCQUF5Qkc7SUFBSSxJQUFJQyxLQUFLQSxFQUFFRyxHQUFHLENBQUNOLElBQUksT0FBT0csRUFBRUksR0FBRyxDQUFDUDtJQUFJLElBQUlRLElBQUk7UUFBRUMsV0FBVztJQUFLLEdBQUdDLElBQUluQixPQUFPQyxjQUFjLElBQUlELE9BQU9vQix3QkFBd0I7SUFBRSxJQUFLLElBQUlDLEtBQUtaLEVBQUcsSUFBSSxjQUFjWSxLQUFLckIsT0FBT3NCLFNBQVMsQ0FBQ0MsY0FBYyxDQUFDQyxJQUFJLENBQUNmLEdBQUdZLElBQUk7UUFBRSxJQUFJSSxJQUFJTixJQUFJbkIsT0FBT29CLHdCQUF3QixDQUFDWCxHQUFHWSxLQUFLO1FBQU1JLEtBQU1BLENBQUFBLEVBQUVULEdBQUcsSUFBSVMsRUFBRUMsR0FBRyxBQUFELElBQUsxQixPQUFPQyxjQUFjLENBQUNnQixHQUFHSSxHQUFHSSxLQUFLUixDQUFDLENBQUNJLEVBQUUsR0FBR1osQ0FBQyxDQUFDWSxFQUFFO0lBQUU7SUFBRSxPQUFPSixFQUFFSCxPQUFPLEdBQUdMLEdBQUdHLEtBQUtBLEVBQUVjLEdBQUcsQ0FBQ2pCLEdBQUdRLElBQUlBO0FBQUc7QUFDaGxCOztDQUVDLEdBRUQ7Ozs7O0NBS0MsR0FDRCxTQUFTYixxQkFBcUJ1QixPQUFPLEVBQUVDLFVBQVV2QixjQUFjLEVBQUV3QixlQUFlLENBQUMsQ0FBQztJQUNoRixPQUFPN0IsT0FBTzhCLElBQUksQ0FBQ0YsU0FBU0csTUFBTSxDQUFDLENBQUNDLFNBQVNDO1FBQzNDLE1BQU1DLEtBQUtOLE9BQU8sQ0FBQ0ssSUFBSTtRQUN2QkQsT0FBTyxDQUFDQyxJQUFJLEdBQUdDLEdBQUdDLElBQUksQ0FBQyxNQUFNUjtRQUM3QixPQUFPSztJQUNULEdBQUdIO0FBQ0wifQ==