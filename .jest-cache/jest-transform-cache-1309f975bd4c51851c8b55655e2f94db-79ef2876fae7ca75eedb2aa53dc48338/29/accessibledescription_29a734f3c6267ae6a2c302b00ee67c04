9314599c1e522dac3d52f4e2dc530346
"use strict";
exports.__esModule = true;
exports.computeAccessibleDescription = computeAccessibleDescription;
var _accessibleNameAndDescription = require("./accessible-name-and-description");
var _util = require("./util");
function _typeof(o) {
    "@babel/helpers - typeof";
    return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o) {
        return typeof o;
    } : function(o) {
        return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o;
    }, _typeof(o);
}
function ownKeys(e, r) {
    var t = Object.keys(e);
    if (Object.getOwnPropertySymbols) {
        var o = Object.getOwnPropertySymbols(e);
        r && (o = o.filter(function(r) {
            return Object.getOwnPropertyDescriptor(e, r).enumerable;
        })), t.push.apply(t, o);
    }
    return t;
}
function _objectSpread(e) {
    for(var r = 1; r < arguments.length; r++){
        var t = null != arguments[r] ? arguments[r] : {};
        r % 2 ? ownKeys(Object(t), !0).forEach(function(r) {
            _defineProperty(e, r, t[r]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r) {
            Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));
        });
    }
    return e;
}
function _defineProperty(obj, key, value) {
    key = _toPropertyKey(key);
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _toPropertyKey(arg) {
    var key = _toPrimitive(arg, "string");
    return _typeof(key) === "symbol" ? key : String(key);
}
function _toPrimitive(input, hint) {
    if (_typeof(input) !== "object" || input === null) return input;
    var prim = input[Symbol.toPrimitive];
    if (prim !== undefined) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object") return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (hint === "string" ? String : Number)(input);
}
/**
 * @param root
 * @param options
 * @returns
 */ function computeAccessibleDescription(root) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var description = (0, _util.queryIdRefs)(root, "aria-describedby").map(function(element) {
        return (0, _accessibleNameAndDescription.computeTextAlternative)(element, _objectSpread(_objectSpread({}, options), {}, {
            compute: "description"
        }));
    }).join(" ");
    // TODO: Technically we need to make sure that node wasn't used for the accessible name
    //       This causes `description_1.0_combobox-focusable-manual` to fail
    // https://w3c.github.io/aria/#aria-description
    // mentions that aria-description should only be calculated if aria-describedby didn't provide
    // a description
    if (description === "") {
        var ariaDescription = root.getAttribute("aria-description");
        description = ariaDescription === null ? "" : ariaDescription;
    }
    // https://www.w3.org/TR/html-aam-1.0/#accessible-name-and-description-computation
    // says for so many elements to use the `title` that we assume all elements are considered
    if (description === "") {
        var title = root.getAttribute("title");
        description = title === null ? "" : title;
    }
    return description;
} //# sourceMappingURL=accessible-description.js.map

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWNjZXNzaWJsZS1kZXNjcmlwdGlvbi5qcyIsInNvdXJjZXMiOlsiLi4vc291cmNlcy9hY2Nlc3NpYmxlLWRlc2NyaXB0aW9uLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG5cdGNvbXB1dGVUZXh0QWx0ZXJuYXRpdmUsXG5cdENvbXB1dGVUZXh0QWx0ZXJuYXRpdmVPcHRpb25zLFxufSBmcm9tIFwiLi9hY2Nlc3NpYmxlLW5hbWUtYW5kLWRlc2NyaXB0aW9uXCI7XG5pbXBvcnQgeyBxdWVyeUlkUmVmcyB9IGZyb20gXCIuL3V0aWxcIjtcblxuLyoqXG4gKiBAcGFyYW0gcm9vdFxuICogQHBhcmFtIG9wdGlvbnNcbiAqIEByZXR1cm5zXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb21wdXRlQWNjZXNzaWJsZURlc2NyaXB0aW9uKFxuXHRyb290OiBFbGVtZW50LFxuXHRvcHRpb25zOiBDb21wdXRlVGV4dEFsdGVybmF0aXZlT3B0aW9ucyA9IHt9LFxuKTogc3RyaW5nIHtcblx0bGV0IGRlc2NyaXB0aW9uID0gcXVlcnlJZFJlZnMocm9vdCwgXCJhcmlhLWRlc2NyaWJlZGJ5XCIpXG5cdFx0Lm1hcCgoZWxlbWVudCkgPT4ge1xuXHRcdFx0cmV0dXJuIGNvbXB1dGVUZXh0QWx0ZXJuYXRpdmUoZWxlbWVudCwge1xuXHRcdFx0XHQuLi5vcHRpb25zLFxuXHRcdFx0XHRjb21wdXRlOiBcImRlc2NyaXB0aW9uXCIsXG5cdFx0XHR9KTtcblx0XHR9KVxuXHRcdC5qb2luKFwiIFwiKTtcblxuXHQvLyBUT0RPOiBUZWNobmljYWxseSB3ZSBuZWVkIHRvIG1ha2Ugc3VyZSB0aGF0IG5vZGUgd2Fzbid0IHVzZWQgZm9yIHRoZSBhY2Nlc3NpYmxlIG5hbWVcblx0Ly8gICAgICAgVGhpcyBjYXVzZXMgYGRlc2NyaXB0aW9uXzEuMF9jb21ib2JveC1mb2N1c2FibGUtbWFudWFsYCB0byBmYWlsXG5cblx0Ly8gaHR0cHM6Ly93M2MuZ2l0aHViLmlvL2FyaWEvI2FyaWEtZGVzY3JpcHRpb25cblx0Ly8gbWVudGlvbnMgdGhhdCBhcmlhLWRlc2NyaXB0aW9uIHNob3VsZCBvbmx5IGJlIGNhbGN1bGF0ZWQgaWYgYXJpYS1kZXNjcmliZWRieSBkaWRuJ3QgcHJvdmlkZVxuXHQvLyBhIGRlc2NyaXB0aW9uXG5cdGlmIChkZXNjcmlwdGlvbiA9PT0gXCJcIikge1xuXHRcdGNvbnN0IGFyaWFEZXNjcmlwdGlvbiA9IHJvb3QuZ2V0QXR0cmlidXRlKFwiYXJpYS1kZXNjcmlwdGlvblwiKTtcblx0XHRkZXNjcmlwdGlvbiA9IGFyaWFEZXNjcmlwdGlvbiA9PT0gbnVsbCA/IFwiXCIgOiBhcmlhRGVzY3JpcHRpb247XG5cdH1cblxuXHQvLyBodHRwczovL3d3dy53My5vcmcvVFIvaHRtbC1hYW0tMS4wLyNhY2Nlc3NpYmxlLW5hbWUtYW5kLWRlc2NyaXB0aW9uLWNvbXB1dGF0aW9uXG5cdC8vIHNheXMgZm9yIHNvIG1hbnkgZWxlbWVudHMgdG8gdXNlIHRoZSBgdGl0bGVgIHRoYXQgd2UgYXNzdW1lIGFsbCBlbGVtZW50cyBhcmUgY29uc2lkZXJlZFxuXHRpZiAoZGVzY3JpcHRpb24gPT09IFwiXCIpIHtcblx0XHRjb25zdCB0aXRsZSA9IHJvb3QuZ2V0QXR0cmlidXRlKFwidGl0bGVcIik7XG5cdFx0ZGVzY3JpcHRpb24gPSB0aXRsZSA9PT0gbnVsbCA/IFwiXCIgOiB0aXRsZTtcblx0fVxuXG5cdHJldHVybiBkZXNjcmlwdGlvbjtcbn1cbiJdLCJuYW1lcyI6WyJfYWNjZXNzaWJsZU5hbWVBbmREZXNjcmlwdGlvbiIsInJlcXVpcmUiLCJfdXRpbCIsIl90eXBlb2YiLCJvIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJjb25zdHJ1Y3RvciIsInByb3RvdHlwZSIsIm93bktleXMiLCJlIiwiciIsInQiLCJPYmplY3QiLCJrZXlzIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwiZmlsdGVyIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiZW51bWVyYWJsZSIsInB1c2giLCJhcHBseSIsIl9vYmplY3RTcHJlYWQiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJmb3JFYWNoIiwiX2RlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyIsImRlZmluZVByb3BlcnRpZXMiLCJkZWZpbmVQcm9wZXJ0eSIsIm9iaiIsImtleSIsInZhbHVlIiwiX3RvUHJvcGVydHlLZXkiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsImFyZyIsIl90b1ByaW1pdGl2ZSIsIlN0cmluZyIsImlucHV0IiwiaGludCIsInByaW0iLCJ0b1ByaW1pdGl2ZSIsInVuZGVmaW5lZCIsInJlcyIsImNhbGwiLCJUeXBlRXJyb3IiLCJOdW1iZXIiLCJjb21wdXRlQWNjZXNzaWJsZURlc2NyaXB0aW9uIiwicm9vdCIsIm9wdGlvbnMiLCJkZXNjcmlwdGlvbiIsInF1ZXJ5SWRSZWZzIiwibWFwIiwiZWxlbWVudCIsImNvbXB1dGVUZXh0QWx0ZXJuYXRpdmUiLCJjb21wdXRlIiwiam9pbiIsImFyaWFEZXNjcmlwdGlvbiIsImdldEF0dHJpYnV0ZSIsInRpdGxlIl0sIm1hcHBpbmdzIjoiOzs7QUFBQSxJQUFBQSw2QkFBQSxHQUFBQyxPQUFBLENBQUE7QUFJQSxJQUFBQyxLQUFBLEdBQUFELE9BQUEsQ0FBQTtBQUFxQyxTQUFBRSxRQUFBQyxDQUFBO0lBQUE7SUFBQSxPQUFBRCxPQUFBLEdBQUEsY0FBQSxPQUFBRSxNQUFBLElBQUEsWUFBQSxPQUFBQSxNQUFBLENBQUFDLFFBQUEsR0FBQSxTQUFBRixDQUFBO1FBQUEsT0FBQSxPQUFBQSxDQUFBO0lBQUEsSUFBQSxTQUFBQSxDQUFBO1FBQUEsT0FBQUEsQ0FBQSxJQUFBLGNBQUEsT0FBQUMsTUFBQSxJQUFBRCxDQUFBLENBQUFHLFdBQUEsS0FBQUYsTUFBQSxJQUFBRCxDQUFBLEtBQUFDLE1BQUEsQ0FBQUcsU0FBQSxHQUFBLFdBQUEsT0FBQUosQ0FBQTtJQUFBLEdBQUFELE9BQUEsQ0FBQUMsQ0FBQTtBQUFBO0FBQUEsU0FBQUssUUFBQUMsQ0FBQSxFQUFBQyxDQUFBO0lBQUEsSUFBQUMsQ0FBQSxHQUFBQyxNQUFBLENBQUFDLElBQUEsQ0FBQUosQ0FBQTtJQUFBLElBQUFHLE1BQUEsQ0FBQUUscUJBQUEsRUFBQTtRQUFBLElBQUFYLENBQUEsR0FBQVMsTUFBQSxDQUFBRSxxQkFBQSxDQUFBTCxDQUFBO1FBQUFDLENBQUEsS0FBQVAsQ0FBQSxHQUFBQSxDQUFBLENBQUFZLE1BQUEsQ0FBQSxTQUFBTCxDQUFBO1lBQUEsT0FBQUUsTUFBQSxDQUFBSSx3QkFBQSxDQUFBUCxDQUFBLEVBQUFDLENBQUEsRUFBQU8sVUFBQTtRQUFBLEVBQUEsR0FBQU4sQ0FBQSxDQUFBTyxJQUFBLENBQUFDLEtBQUEsQ0FBQVIsQ0FBQSxFQUFBUixDQUFBO0lBQUE7SUFBQSxPQUFBUSxDQUFBO0FBQUE7QUFBQSxTQUFBUyxjQUFBWCxDQUFBO0lBQUEsSUFBQSxJQUFBQyxDQUFBLEdBQUEsR0FBQUEsQ0FBQSxHQUFBVyxTQUFBLENBQUFDLE1BQUEsRUFBQVosQ0FBQSxHQUFBO1FBQUEsSUFBQUMsQ0FBQSxHQUFBLFFBQUFVLFNBQUEsQ0FBQVgsQ0FBQSxDQUFBLEdBQUFXLFNBQUEsQ0FBQVgsQ0FBQSxDQUFBLEdBQUEsQ0FBQTtRQUFBQSxDQUFBLEdBQUEsSUFBQUYsT0FBQSxDQUFBSSxNQUFBLENBQUFELENBQUEsR0FBQSxDQUFBLEdBQUFZLE9BQUEsQ0FBQSxTQUFBYixDQUFBO1lBQUFjLGVBQUEsQ0FBQWYsQ0FBQSxFQUFBQyxDQUFBLEVBQUFDLENBQUEsQ0FBQUQsQ0FBQSxDQUFBO1FBQUEsS0FBQUUsTUFBQSxDQUFBYSx5QkFBQSxHQUFBYixNQUFBLENBQUFjLGdCQUFBLENBQUFqQixDQUFBLEVBQUFHLE1BQUEsQ0FBQWEseUJBQUEsQ0FBQWQsQ0FBQSxLQUFBSCxPQUFBLENBQUFJLE1BQUEsQ0FBQUQsQ0FBQSxHQUFBWSxPQUFBLENBQUEsU0FBQWIsQ0FBQTtZQUFBRSxNQUFBLENBQUFlLGNBQUEsQ0FBQWxCLENBQUEsRUFBQUMsQ0FBQSxFQUFBRSxNQUFBLENBQUFJLHdCQUFBLENBQUFMLENBQUEsRUFBQUQsQ0FBQTtRQUFBO0lBQUE7SUFBQSxPQUFBRCxDQUFBO0FBQUE7QUFBQSxTQUFBZSxnQkFBQUksR0FBQSxFQUFBQyxHQUFBLEVBQUFDLEtBQUE7SUFBQUQsR0FBQSxHQUFBRSxjQUFBLENBQUFGLEdBQUE7SUFBQSxJQUFBQSxHQUFBLElBQUFELEdBQUEsRUFBQTtRQUFBaEIsTUFBQSxDQUFBZSxjQUFBLENBQUFDLEdBQUEsRUFBQUMsR0FBQSxFQUFBO1lBQUFDLEtBQUEsRUFBQUEsS0FBQTtZQUFBYixVQUFBLEVBQUE7WUFBQWUsWUFBQSxFQUFBO1lBQUFDLFFBQUEsRUFBQTtRQUFBO0lBQUEsT0FBQTtRQUFBTCxHQUFBLENBQUFDLEdBQUEsQ0FBQSxHQUFBQyxLQUFBO0lBQUE7SUFBQSxPQUFBRixHQUFBO0FBQUE7QUFBQSxTQUFBRyxlQUFBRyxHQUFBO0lBQUEsSUFBQUwsR0FBQSxHQUFBTSxZQUFBLENBQUFELEdBQUEsRUFBQTtJQUFBLE9BQUFoQyxPQUFBLENBQUEyQixHQUFBLE1BQUEsV0FBQUEsR0FBQSxHQUFBTyxNQUFBLENBQUFQLEdBQUE7QUFBQTtBQUFBLFNBQUFNLGFBQUFFLEtBQUEsRUFBQUMsSUFBQTtJQUFBLElBQUFwQyxPQUFBLENBQUFtQyxLQUFBLE1BQUEsWUFBQUEsS0FBQSxLQUFBLE1BQUEsT0FBQUEsS0FBQTtJQUFBLElBQUFFLElBQUEsR0FBQUYsS0FBQSxDQUFBakMsTUFBQSxDQUFBb0MsV0FBQSxDQUFBO0lBQUEsSUFBQUQsSUFBQSxLQUFBRSxTQUFBLEVBQUE7UUFBQSxJQUFBQyxHQUFBLEdBQUFILElBQUEsQ0FBQUksSUFBQSxDQUFBTixLQUFBLEVBQUFDLElBQUEsSUFBQTtRQUFBLElBQUFwQyxPQUFBLENBQUF3QyxHQUFBLE1BQUEsVUFBQSxPQUFBQSxHQUFBO1FBQUEsTUFBQSxJQUFBRSxTQUFBLENBQUE7SUFBQTtJQUFBLE9BQUEsQ0FBQU4sSUFBQSxLQUFBLFdBQUFGLE1BQUEsR0FBQVMsTUFBQUEsQ0FBQSxDQUFBUixLQUFBO0FBQUE7QUFFckM7Ozs7Q0FJQSxHQUNPLFNBQVNTLDRCQUE0QkEsQ0FDM0NDLElBQWEsRUFFSjtJQUFBLElBRFRDLE9BQXNDLEdBQUEzQixTQUFBLENBQUFDLE1BQUEsR0FBQSxLQUFBRCxTQUFBLENBQUEsRUFBQSxLQUFBb0IsU0FBQSxHQUFBcEIsU0FBQSxDQUFBLEVBQUEsR0FBRyxDQUFDLENBQUM7SUFFM0MsSUFBSTRCLFdBQVcsR0FBRyxDQUFBLEdBQUFDLE1BQUFBLFdBQUFBLEFBQVcsRUFBQ0gsSUFBSSxFQUFFLGtCQUFrQixDQUFDLENBQ3JESSxHQUFHLENBQUMsU0FBQ0MsT0FBTyxFQUFLO1FBQ2pCLE9BQU8sQ0FBQSxHQUFBQyw4QkFBQUEsc0JBQUFBLEFBQXNCLEVBQUNELE9BQU8sRUFBQWhDLGFBQUEsQ0FBQUEsYUFBQSxDQUFBLENBQUEsR0FDakM0QixPQUFPLEdBQUEsQ0FBQSxHQUFBO1lBQ1ZNLE9BQU8sRUFBRTtRQUFhLEVBQ3RCLENBQUM7SUFDSCxDQUFDLENBQUMsQ0FDREMsSUFBSSxDQUFDLEdBQUcsQ0FBQztJQUVYLHVGQUFBO0lBQ0Esd0VBQUE7SUFFQSwrQ0FBQTtJQUNBLDhGQUFBO0lBQ0EsZ0JBQUE7SUFDQSxJQUFJTixXQUFXLEtBQUssRUFBRSxFQUFFO1FBQ3ZCLElBQU1PLGVBQWUsR0FBR1QsSUFBSSxDQUFDVSxZQUFZLENBQUMsa0JBQWtCLENBQUM7UUFDN0RSLFdBQVcsR0FBR08sZUFBZSxLQUFLLElBQUksR0FBRyxFQUFFLEdBQUdBLGVBQWU7SUFDOUQ7SUFFQSxrRkFBQTtJQUNBLDBGQUFBO0lBQ0EsSUFBSVAsV0FBVyxLQUFLLEVBQUUsRUFBRTtRQUN2QixJQUFNUyxLQUFLLEdBQUdYLElBQUksQ0FBQ1UsWUFBWSxDQUFDLE9BQU8sQ0FBQztRQUN4Q1IsV0FBVyxHQUFHUyxLQUFLLEtBQUssSUFBSSxHQUFHLEVBQUUsR0FBR0EsS0FBSztJQUMxQztJQUVBLE9BQU9ULFdBQVc7QUFDbkIifQ==