cca0bb94c41794797540cb7b6a9ceb27
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.queryByAltText = exports.queryAllByAltText = exports.getByAltText = exports.getAllByAltText = exports.findByAltText = exports.findAllByAltText = void 0;
var _queryHelpers = require("../query-helpers");
var _helpers = require("../helpers");
var _allUtils = require("./all-utils");
// Valid tags are img, input, area and custom elements
const VALID_TAG_REGEXP = /^(img|input|area|.+-.+)$/i;
const queryAllByAltText = (container, alt, options = {})=>{
    (0, _helpers.checkContainerType)(container);
    return (0, _queryHelpers.queryAllByAttribute)('alt', container, alt, options).filter((node)=>VALID_TAG_REGEXP.test(node.tagName));
};
const getMultipleError = (c, alt)=>`Found multiple elements with the alt text: ${alt}`;
const getMissingError = (c, alt)=>`Unable to find an element with the alt text: ${alt}`;
const queryAllByAltTextWithSuggestions = exports.queryAllByAltText = (0, _queryHelpers.wrapAllByQueryWithSuggestion)(queryAllByAltText, queryAllByAltText.name, 'queryAll');
const [queryByAltText, getAllByAltText, getByAltText, findAllByAltText, findByAltText] = (0, _allUtils.buildQueries)(queryAllByAltText, getMultipleError, getMissingError);
exports.findByAltText = findByAltText;
exports.findAllByAltText = findAllByAltText;
exports.getByAltText = getByAltText;
exports.getAllByAltText = getAllByAltText;
exports.queryByAltText = queryByAltText;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy95dXN1a2V0c3Vub2RhL0RvY3VtZW50cy9jdXJzb3IvcHB0dHJhbnNsYXRvcmFwcC9ub2RlX21vZHVsZXMvQHRlc3RpbmctbGlicmFyeS9yZWFjdC9ub2RlX21vZHVsZXMvQHRlc3RpbmctbGlicmFyeS9kb20vZGlzdC9xdWVyaWVzL2FsdC10ZXh0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5xdWVyeUJ5QWx0VGV4dCA9IGV4cG9ydHMucXVlcnlBbGxCeUFsdFRleHQgPSBleHBvcnRzLmdldEJ5QWx0VGV4dCA9IGV4cG9ydHMuZ2V0QWxsQnlBbHRUZXh0ID0gZXhwb3J0cy5maW5kQnlBbHRUZXh0ID0gZXhwb3J0cy5maW5kQWxsQnlBbHRUZXh0ID0gdm9pZCAwO1xudmFyIF9xdWVyeUhlbHBlcnMgPSByZXF1aXJlKFwiLi4vcXVlcnktaGVscGVyc1wiKTtcbnZhciBfaGVscGVycyA9IHJlcXVpcmUoXCIuLi9oZWxwZXJzXCIpO1xudmFyIF9hbGxVdGlscyA9IHJlcXVpcmUoXCIuL2FsbC11dGlsc1wiKTtcbi8vIFZhbGlkIHRhZ3MgYXJlIGltZywgaW5wdXQsIGFyZWEgYW5kIGN1c3RvbSBlbGVtZW50c1xuY29uc3QgVkFMSURfVEFHX1JFR0VYUCA9IC9eKGltZ3xpbnB1dHxhcmVhfC4rLS4rKSQvaTtcbmNvbnN0IHF1ZXJ5QWxsQnlBbHRUZXh0ID0gKGNvbnRhaW5lciwgYWx0LCBvcHRpb25zID0ge30pID0+IHtcbiAgKDAsIF9oZWxwZXJzLmNoZWNrQ29udGFpbmVyVHlwZSkoY29udGFpbmVyKTtcbiAgcmV0dXJuICgwLCBfcXVlcnlIZWxwZXJzLnF1ZXJ5QWxsQnlBdHRyaWJ1dGUpKCdhbHQnLCBjb250YWluZXIsIGFsdCwgb3B0aW9ucykuZmlsdGVyKG5vZGUgPT4gVkFMSURfVEFHX1JFR0VYUC50ZXN0KG5vZGUudGFnTmFtZSkpO1xufTtcbmNvbnN0IGdldE11bHRpcGxlRXJyb3IgPSAoYywgYWx0KSA9PiBgRm91bmQgbXVsdGlwbGUgZWxlbWVudHMgd2l0aCB0aGUgYWx0IHRleHQ6ICR7YWx0fWA7XG5jb25zdCBnZXRNaXNzaW5nRXJyb3IgPSAoYywgYWx0KSA9PiBgVW5hYmxlIHRvIGZpbmQgYW4gZWxlbWVudCB3aXRoIHRoZSBhbHQgdGV4dDogJHthbHR9YDtcbmNvbnN0IHF1ZXJ5QWxsQnlBbHRUZXh0V2l0aFN1Z2dlc3Rpb25zID0gZXhwb3J0cy5xdWVyeUFsbEJ5QWx0VGV4dCA9ICgwLCBfcXVlcnlIZWxwZXJzLndyYXBBbGxCeVF1ZXJ5V2l0aFN1Z2dlc3Rpb24pKHF1ZXJ5QWxsQnlBbHRUZXh0LCBxdWVyeUFsbEJ5QWx0VGV4dC5uYW1lLCAncXVlcnlBbGwnKTtcbmNvbnN0IFtxdWVyeUJ5QWx0VGV4dCwgZ2V0QWxsQnlBbHRUZXh0LCBnZXRCeUFsdFRleHQsIGZpbmRBbGxCeUFsdFRleHQsIGZpbmRCeUFsdFRleHRdID0gKDAsIF9hbGxVdGlscy5idWlsZFF1ZXJpZXMpKHF1ZXJ5QWxsQnlBbHRUZXh0LCBnZXRNdWx0aXBsZUVycm9yLCBnZXRNaXNzaW5nRXJyb3IpO1xuZXhwb3J0cy5maW5kQnlBbHRUZXh0ID0gZmluZEJ5QWx0VGV4dDtcbmV4cG9ydHMuZmluZEFsbEJ5QWx0VGV4dCA9IGZpbmRBbGxCeUFsdFRleHQ7XG5leHBvcnRzLmdldEJ5QWx0VGV4dCA9IGdldEJ5QWx0VGV4dDtcbmV4cG9ydHMuZ2V0QWxsQnlBbHRUZXh0ID0gZ2V0QWxsQnlBbHRUZXh0O1xuZXhwb3J0cy5xdWVyeUJ5QWx0VGV4dCA9IHF1ZXJ5QnlBbHRUZXh0OyJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInF1ZXJ5QnlBbHRUZXh0IiwicXVlcnlBbGxCeUFsdFRleHQiLCJnZXRCeUFsdFRleHQiLCJnZXRBbGxCeUFsdFRleHQiLCJmaW5kQnlBbHRUZXh0IiwiZmluZEFsbEJ5QWx0VGV4dCIsIl9xdWVyeUhlbHBlcnMiLCJyZXF1aXJlIiwiX2hlbHBlcnMiLCJfYWxsVXRpbHMiLCJWQUxJRF9UQUdfUkVHRVhQIiwiY29udGFpbmVyIiwiYWx0Iiwib3B0aW9ucyIsImNoZWNrQ29udGFpbmVyVHlwZSIsInF1ZXJ5QWxsQnlBdHRyaWJ1dGUiLCJmaWx0ZXIiLCJub2RlIiwidGVzdCIsInRhZ05hbWUiLCJnZXRNdWx0aXBsZUVycm9yIiwiYyIsImdldE1pc3NpbmdFcnJvciIsInF1ZXJ5QWxsQnlBbHRUZXh0V2l0aFN1Z2dlc3Rpb25zIiwid3JhcEFsbEJ5UXVlcnlXaXRoU3VnZ2VzdGlvbiIsIm5hbWUiLCJidWlsZFF1ZXJpZXMiXSwibWFwcGluZ3MiOiJBQUFBO0FBRUFBLE9BQU9DLGNBQWMsQ0FBQ0MsU0FBUyxjQUFjO0lBQzNDQyxPQUFPO0FBQ1Q7QUFDQUQsUUFBUUUsY0FBYyxHQUFHRixRQUFRRyxpQkFBaUIsR0FBR0gsUUFBUUksWUFBWSxHQUFHSixRQUFRSyxlQUFlLEdBQUdMLFFBQVFNLGFBQWEsR0FBR04sUUFBUU8sZ0JBQWdCLEdBQUcsS0FBSztBQUM5SixJQUFJQyxnQkFBZ0JDLFFBQVE7QUFDNUIsSUFBSUMsV0FBV0QsUUFBUTtBQUN2QixJQUFJRSxZQUFZRixRQUFRO0FBQ3hCLHNEQUFzRDtBQUN0RCxNQUFNRyxtQkFBbUI7QUFDekIsTUFBTVQsb0JBQW9CLENBQUNVLFdBQVdDLEtBQUtDLFVBQVUsQ0FBQyxDQUFDO0lBQ3BELENBQUEsR0FBR0wsU0FBU00sa0JBQWtCLEFBQUQsRUFBR0g7SUFDakMsT0FBTyxBQUFDLENBQUEsR0FBR0wsY0FBY1MsbUJBQW1CLEFBQUQsRUFBRyxPQUFPSixXQUFXQyxLQUFLQyxTQUFTRyxNQUFNLENBQUNDLENBQUFBLE9BQVFQLGlCQUFpQlEsSUFBSSxDQUFDRCxLQUFLRSxPQUFPO0FBQ2pJO0FBQ0EsTUFBTUMsbUJBQW1CLENBQUNDLEdBQUdULE1BQVEsQ0FBQywyQ0FBMkMsRUFBRUEsS0FBSztBQUN4RixNQUFNVSxrQkFBa0IsQ0FBQ0QsR0FBR1QsTUFBUSxDQUFDLDZDQUE2QyxFQUFFQSxLQUFLO0FBQ3pGLE1BQU1XLG1DQUFtQ3pCLFFBQVFHLGlCQUFpQixHQUFHLEFBQUMsQ0FBQSxHQUFHSyxjQUFja0IsNEJBQTRCLEFBQUQsRUFBR3ZCLG1CQUFtQkEsa0JBQWtCd0IsSUFBSSxFQUFFO0FBQ2hLLE1BQU0sQ0FBQ3pCLGdCQUFnQkcsaUJBQWlCRCxjQUFjRyxrQkFBa0JELGNBQWMsR0FBRyxBQUFDLENBQUEsR0FBR0ssVUFBVWlCLFlBQVksQUFBRCxFQUFHekIsbUJBQW1CbUIsa0JBQWtCRTtBQUMxSnhCLFFBQVFNLGFBQWEsR0FBR0E7QUFDeEJOLFFBQVFPLGdCQUFnQixHQUFHQTtBQUMzQlAsUUFBUUksWUFBWSxHQUFHQTtBQUN2QkosUUFBUUssZUFBZSxHQUFHQTtBQUMxQkwsUUFBUUUsY0FBYyxHQUFHQSJ9