e764c6c8aad8c41f86579bdfa13dd6b3
'use strict';
var keys = require('object-keys');
var hasSymbols = typeof Symbol === 'function' && typeof Symbol('foo') === 'symbol';
var toStr = Object.prototype.toString;
var concat = Array.prototype.concat;
var defineDataProperty = require('define-data-property');
var isFunction = function(fn) {
    return typeof fn === 'function' && toStr.call(fn) === '[object Function]';
};
var supportsDescriptors = require('has-property-descriptors')();
var defineProperty = function(object, name, value, predicate) {
    if (name in object) {
        if (predicate === true) {
            if (object[name] === value) {
                return;
            }
        } else if (!isFunction(predicate) || !predicate()) {
            return;
        }
    }
    if (supportsDescriptors) {
        defineDataProperty(object, name, value, true);
    } else {
        defineDataProperty(object, name, value);
    }
};
var defineProperties = function(object, map) {
    var predicates = arguments.length > 2 ? arguments[2] : {};
    var props = keys(map);
    if (hasSymbols) {
        props = concat.call(props, Object.getOwnPropertySymbols(map));
    }
    for(var i = 0; i < props.length; i += 1){
        defineProperty(object, props[i], map[props[i]], predicates[props[i]]);
    }
};
defineProperties.supportsDescriptors = !!supportsDescriptors;
module.exports = defineProperties;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy95dXN1a2V0c3Vub2RhL0RvY3VtZW50cy9jdXJzb3IvcHB0dHJhbnNsYXRvcmFwcC9ub2RlX21vZHVsZXMvZGVmaW5lLXByb3BlcnRpZXMvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIga2V5cyA9IHJlcXVpcmUoJ29iamVjdC1rZXlzJyk7XG52YXIgaGFzU3ltYm9scyA9IHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIFN5bWJvbCgnZm9vJykgPT09ICdzeW1ib2wnO1xuXG52YXIgdG9TdHIgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xudmFyIGNvbmNhdCA9IEFycmF5LnByb3RvdHlwZS5jb25jYXQ7XG52YXIgZGVmaW5lRGF0YVByb3BlcnR5ID0gcmVxdWlyZSgnZGVmaW5lLWRhdGEtcHJvcGVydHknKTtcblxudmFyIGlzRnVuY3Rpb24gPSBmdW5jdGlvbiAoZm4pIHtcblx0cmV0dXJuIHR5cGVvZiBmbiA9PT0gJ2Z1bmN0aW9uJyAmJiB0b1N0ci5jYWxsKGZuKSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJztcbn07XG5cbnZhciBzdXBwb3J0c0Rlc2NyaXB0b3JzID0gcmVxdWlyZSgnaGFzLXByb3BlcnR5LWRlc2NyaXB0b3JzJykoKTtcblxudmFyIGRlZmluZVByb3BlcnR5ID0gZnVuY3Rpb24gKG9iamVjdCwgbmFtZSwgdmFsdWUsIHByZWRpY2F0ZSkge1xuXHRpZiAobmFtZSBpbiBvYmplY3QpIHtcblx0XHRpZiAocHJlZGljYXRlID09PSB0cnVlKSB7XG5cdFx0XHRpZiAob2JqZWN0W25hbWVdID09PSB2YWx1ZSkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cdFx0fSBlbHNlIGlmICghaXNGdW5jdGlvbihwcmVkaWNhdGUpIHx8ICFwcmVkaWNhdGUoKSkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0fVxuXG5cdGlmIChzdXBwb3J0c0Rlc2NyaXB0b3JzKSB7XG5cdFx0ZGVmaW5lRGF0YVByb3BlcnR5KG9iamVjdCwgbmFtZSwgdmFsdWUsIHRydWUpO1xuXHR9IGVsc2Uge1xuXHRcdGRlZmluZURhdGFQcm9wZXJ0eShvYmplY3QsIG5hbWUsIHZhbHVlKTtcblx0fVxufTtcblxudmFyIGRlZmluZVByb3BlcnRpZXMgPSBmdW5jdGlvbiAob2JqZWN0LCBtYXApIHtcblx0dmFyIHByZWRpY2F0ZXMgPSBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHt9O1xuXHR2YXIgcHJvcHMgPSBrZXlzKG1hcCk7XG5cdGlmIChoYXNTeW1ib2xzKSB7XG5cdFx0cHJvcHMgPSBjb25jYXQuY2FsbChwcm9wcywgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhtYXApKTtcblx0fVxuXHRmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSArPSAxKSB7XG5cdFx0ZGVmaW5lUHJvcGVydHkob2JqZWN0LCBwcm9wc1tpXSwgbWFwW3Byb3BzW2ldXSwgcHJlZGljYXRlc1twcm9wc1tpXV0pO1xuXHR9XG59O1xuXG5kZWZpbmVQcm9wZXJ0aWVzLnN1cHBvcnRzRGVzY3JpcHRvcnMgPSAhIXN1cHBvcnRzRGVzY3JpcHRvcnM7XG5cbm1vZHVsZS5leHBvcnRzID0gZGVmaW5lUHJvcGVydGllcztcbiJdLCJuYW1lcyI6WyJrZXlzIiwicmVxdWlyZSIsImhhc1N5bWJvbHMiLCJTeW1ib2wiLCJ0b1N0ciIsIk9iamVjdCIsInByb3RvdHlwZSIsInRvU3RyaW5nIiwiY29uY2F0IiwiQXJyYXkiLCJkZWZpbmVEYXRhUHJvcGVydHkiLCJpc0Z1bmN0aW9uIiwiZm4iLCJjYWxsIiwic3VwcG9ydHNEZXNjcmlwdG9ycyIsImRlZmluZVByb3BlcnR5Iiwib2JqZWN0IiwibmFtZSIsInZhbHVlIiwicHJlZGljYXRlIiwiZGVmaW5lUHJvcGVydGllcyIsIm1hcCIsInByZWRpY2F0ZXMiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJwcm9wcyIsImdldE93blByb3BlcnR5U3ltYm9scyIsImkiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUVBLElBQUlBLE9BQU9DLFFBQVE7QUFDbkIsSUFBSUMsYUFBYSxPQUFPQyxXQUFXLGNBQWMsT0FBT0EsT0FBTyxXQUFXO0FBRTFFLElBQUlDLFFBQVFDLE9BQU9DLFNBQVMsQ0FBQ0MsUUFBUTtBQUNyQyxJQUFJQyxTQUFTQyxNQUFNSCxTQUFTLENBQUNFLE1BQU07QUFDbkMsSUFBSUUscUJBQXFCVCxRQUFRO0FBRWpDLElBQUlVLGFBQWEsU0FBVUMsRUFBRTtJQUM1QixPQUFPLE9BQU9BLE9BQU8sY0FBY1IsTUFBTVMsSUFBSSxDQUFDRCxRQUFRO0FBQ3ZEO0FBRUEsSUFBSUUsc0JBQXNCYixRQUFRO0FBRWxDLElBQUljLGlCQUFpQixTQUFVQyxNQUFNLEVBQUVDLElBQUksRUFBRUMsS0FBSyxFQUFFQyxTQUFTO0lBQzVELElBQUlGLFFBQVFELFFBQVE7UUFDbkIsSUFBSUcsY0FBYyxNQUFNO1lBQ3ZCLElBQUlILE1BQU0sQ0FBQ0MsS0FBSyxLQUFLQyxPQUFPO2dCQUMzQjtZQUNEO1FBQ0QsT0FBTyxJQUFJLENBQUNQLFdBQVdRLGNBQWMsQ0FBQ0EsYUFBYTtZQUNsRDtRQUNEO0lBQ0Q7SUFFQSxJQUFJTCxxQkFBcUI7UUFDeEJKLG1CQUFtQk0sUUFBUUMsTUFBTUMsT0FBTztJQUN6QyxPQUFPO1FBQ05SLG1CQUFtQk0sUUFBUUMsTUFBTUM7SUFDbEM7QUFDRDtBQUVBLElBQUlFLG1CQUFtQixTQUFVSixNQUFNLEVBQUVLLEdBQUc7SUFDM0MsSUFBSUMsYUFBYUMsVUFBVUMsTUFBTSxHQUFHLElBQUlELFNBQVMsQ0FBQyxFQUFFLEdBQUcsQ0FBQztJQUN4RCxJQUFJRSxRQUFRekIsS0FBS3FCO0lBQ2pCLElBQUluQixZQUFZO1FBQ2Z1QixRQUFRakIsT0FBT0ssSUFBSSxDQUFDWSxPQUFPcEIsT0FBT3FCLHFCQUFxQixDQUFDTDtJQUN6RDtJQUNBLElBQUssSUFBSU0sSUFBSSxHQUFHQSxJQUFJRixNQUFNRCxNQUFNLEVBQUVHLEtBQUssRUFBRztRQUN6Q1osZUFBZUMsUUFBUVMsS0FBSyxDQUFDRSxFQUFFLEVBQUVOLEdBQUcsQ0FBQ0ksS0FBSyxDQUFDRSxFQUFFLENBQUMsRUFBRUwsVUFBVSxDQUFDRyxLQUFLLENBQUNFLEVBQUUsQ0FBQztJQUNyRTtBQUNEO0FBRUFQLGlCQUFpQk4sbUJBQW1CLEdBQUcsQ0FBQyxDQUFDQTtBQUV6Q2MsT0FBT0MsT0FBTyxHQUFHVCJ9