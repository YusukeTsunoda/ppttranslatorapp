5be48fafceb33d0588c7f77d6205c720
"use strict";
exports.__esModule = true;
exports.default = getRole;
exports.getLocalName = getLocalName;
// https://w3c.github.io/html-aria/#document-conformance-requirements-for-use-of-aria-attributes-in-html
/**
 * Safe Element.localName for all supported environments
 * @param element
 */ function getLocalName(element) {
    var _element$localName;
    return (_element$localName = element.localName) !== null && _element$localName !== void 0 ? _element$localName : // eslint-disable-next-line no-restricted-properties -- required for the fallback
    element.tagName.toLowerCase();
}
var localNameToRoleMappings = {
    article: "article",
    aside: "complementary",
    button: "button",
    datalist: "listbox",
    dd: "definition",
    details: "group",
    dialog: "dialog",
    dt: "term",
    fieldset: "group",
    figure: "figure",
    // WARNING: Only with an accessible name
    form: "form",
    footer: "contentinfo",
    h1: "heading",
    h2: "heading",
    h3: "heading",
    h4: "heading",
    h5: "heading",
    h6: "heading",
    header: "banner",
    hr: "separator",
    html: "document",
    legend: "legend",
    li: "listitem",
    math: "math",
    main: "main",
    menu: "list",
    nav: "navigation",
    ol: "list",
    optgroup: "group",
    // WARNING: Only in certain context
    option: "option",
    output: "status",
    progress: "progressbar",
    // WARNING: Only with an accessible name
    section: "region",
    summary: "button",
    table: "table",
    tbody: "rowgroup",
    textarea: "textbox",
    tfoot: "rowgroup",
    // WARNING: Only in certain context
    td: "cell",
    th: "columnheader",
    thead: "rowgroup",
    tr: "row",
    ul: "list"
};
var prohibitedAttributes = {
    caption: new Set([
        "aria-label",
        "aria-labelledby"
    ]),
    code: new Set([
        "aria-label",
        "aria-labelledby"
    ]),
    deletion: new Set([
        "aria-label",
        "aria-labelledby"
    ]),
    emphasis: new Set([
        "aria-label",
        "aria-labelledby"
    ]),
    generic: new Set([
        "aria-label",
        "aria-labelledby",
        "aria-roledescription"
    ]),
    insertion: new Set([
        "aria-label",
        "aria-labelledby"
    ]),
    paragraph: new Set([
        "aria-label",
        "aria-labelledby"
    ]),
    presentation: new Set([
        "aria-label",
        "aria-labelledby"
    ]),
    strong: new Set([
        "aria-label",
        "aria-labelledby"
    ]),
    subscript: new Set([
        "aria-label",
        "aria-labelledby"
    ]),
    superscript: new Set([
        "aria-label",
        "aria-labelledby"
    ])
};
/**
 *
 * @param element
 * @param role The role used for this element. This is specified to control whether you want to use the implicit or explicit role.
 */ function hasGlobalAriaAttributes(element, role) {
    // https://rawgit.com/w3c/aria/stable/#global_states
    // commented attributes are deprecated
    return [
        "aria-atomic",
        "aria-busy",
        "aria-controls",
        "aria-current",
        "aria-describedby",
        "aria-details",
        // "disabled",
        "aria-dropeffect",
        // "errormessage",
        "aria-flowto",
        "aria-grabbed",
        // "haspopup",
        "aria-hidden",
        // "invalid",
        "aria-keyshortcuts",
        "aria-label",
        "aria-labelledby",
        "aria-live",
        "aria-owns",
        "aria-relevant",
        "aria-roledescription"
    ].some(function(attributeName) {
        var _prohibitedAttributes;
        return element.hasAttribute(attributeName) && !((_prohibitedAttributes = prohibitedAttributes[role]) !== null && _prohibitedAttributes !== void 0 && _prohibitedAttributes.has(attributeName));
    });
}
function ignorePresentationalRole(element, implicitRole) {
    // https://rawgit.com/w3c/aria/stable/#conflict_resolution_presentation_none
    return hasGlobalAriaAttributes(element, implicitRole);
}
function getRole(element) {
    var explicitRole = getExplicitRole(element);
    if (explicitRole === null || explicitRole === "presentation") {
        var implicitRole = getImplicitRole(element);
        if (explicitRole !== "presentation" || ignorePresentationalRole(element, implicitRole || "")) {
            return implicitRole;
        }
    }
    return explicitRole;
}
function getImplicitRole(element) {
    var mappedByTag = localNameToRoleMappings[getLocalName(element)];
    if (mappedByTag !== undefined) {
        return mappedByTag;
    }
    switch(getLocalName(element)){
        case "a":
        case "area":
        case "link":
            if (element.hasAttribute("href")) {
                return "link";
            }
            break;
        case "img":
            if (element.getAttribute("alt") === "" && !ignorePresentationalRole(element, "img")) {
                return "presentation";
            }
            return "img";
        case "input":
            {
                var _ref = element, type = _ref.type;
                switch(type){
                    case "button":
                    case "image":
                    case "reset":
                    case "submit":
                        return "button";
                    case "checkbox":
                    case "radio":
                        return type;
                    case "range":
                        return "slider";
                    case "email":
                    case "tel":
                    case "text":
                    case "url":
                        if (element.hasAttribute("list")) {
                            return "combobox";
                        }
                        return "textbox";
                    case "search":
                        if (element.hasAttribute("list")) {
                            return "combobox";
                        }
                        return "searchbox";
                    case "number":
                        return "spinbutton";
                    default:
                        return null;
                }
            }
        case "select":
            if (element.hasAttribute("multiple") || element.size > 1) {
                return "listbox";
            }
            return "combobox";
    }
    return null;
}
function getExplicitRole(element) {
    var role = element.getAttribute("role");
    if (role !== null) {
        var explicitRole = role.trim().split(" ")[0];
        // String.prototype.split(sep, limit) will always return an array with at least one member
        // as long as limit is either undefined or > 0
        if (explicitRole.length > 0) {
            return explicitRole;
        }
    }
    return null;
} //# sourceMappingURL=getRole.js.map

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0Um9sZS5qcyIsInNvdXJjZXMiOlsiLi4vc291cmNlcy9nZXRSb2xlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIGh0dHBzOi8vdzNjLmdpdGh1Yi5pby9odG1sLWFyaWEvI2RvY3VtZW50LWNvbmZvcm1hbmNlLXJlcXVpcmVtZW50cy1mb3ItdXNlLW9mLWFyaWEtYXR0cmlidXRlcy1pbi1odG1sXG5cbi8qKlxuICogU2FmZSBFbGVtZW50LmxvY2FsTmFtZSBmb3IgYWxsIHN1cHBvcnRlZCBlbnZpcm9ubWVudHNcbiAqIEBwYXJhbSBlbGVtZW50XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRMb2NhbE5hbWUoZWxlbWVudDogRWxlbWVudCk6IHN0cmluZyB7XG5cdHJldHVybiAoXG5cdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlc3RyaWN0ZWQtcHJvcGVydGllcyAtLSBhY3R1YWwgZ3VhcmQgZm9yIGVudmlyb25tZW50cyB3aXRob3V0IGxvY2FsTmFtZVxuXHRcdGVsZW1lbnQubG9jYWxOYW1lID8/XG5cdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXJlc3RyaWN0ZWQtcHJvcGVydGllcyAtLSByZXF1aXJlZCBmb3IgdGhlIGZhbGxiYWNrXG5cdFx0ZWxlbWVudC50YWdOYW1lLnRvTG93ZXJDYXNlKClcblx0KTtcbn1cblxuY29uc3QgbG9jYWxOYW1lVG9Sb2xlTWFwcGluZ3M6IFJlY29yZDxzdHJpbmcsIHN0cmluZyB8IHVuZGVmaW5lZD4gPSB7XG5cdGFydGljbGU6IFwiYXJ0aWNsZVwiLFxuXHRhc2lkZTogXCJjb21wbGVtZW50YXJ5XCIsXG5cdGJ1dHRvbjogXCJidXR0b25cIixcblx0ZGF0YWxpc3Q6IFwibGlzdGJveFwiLFxuXHRkZDogXCJkZWZpbml0aW9uXCIsXG5cdGRldGFpbHM6IFwiZ3JvdXBcIixcblx0ZGlhbG9nOiBcImRpYWxvZ1wiLFxuXHRkdDogXCJ0ZXJtXCIsXG5cdGZpZWxkc2V0OiBcImdyb3VwXCIsXG5cdGZpZ3VyZTogXCJmaWd1cmVcIixcblx0Ly8gV0FSTklORzogT25seSB3aXRoIGFuIGFjY2Vzc2libGUgbmFtZVxuXHRmb3JtOiBcImZvcm1cIixcblx0Zm9vdGVyOiBcImNvbnRlbnRpbmZvXCIsXG5cdGgxOiBcImhlYWRpbmdcIixcblx0aDI6IFwiaGVhZGluZ1wiLFxuXHRoMzogXCJoZWFkaW5nXCIsXG5cdGg0OiBcImhlYWRpbmdcIixcblx0aDU6IFwiaGVhZGluZ1wiLFxuXHRoNjogXCJoZWFkaW5nXCIsXG5cdGhlYWRlcjogXCJiYW5uZXJcIixcblx0aHI6IFwic2VwYXJhdG9yXCIsXG5cdGh0bWw6IFwiZG9jdW1lbnRcIixcblx0bGVnZW5kOiBcImxlZ2VuZFwiLFxuXHRsaTogXCJsaXN0aXRlbVwiLFxuXHRtYXRoOiBcIm1hdGhcIixcblx0bWFpbjogXCJtYWluXCIsXG5cdG1lbnU6IFwibGlzdFwiLFxuXHRuYXY6IFwibmF2aWdhdGlvblwiLFxuXHRvbDogXCJsaXN0XCIsXG5cdG9wdGdyb3VwOiBcImdyb3VwXCIsXG5cdC8vIFdBUk5JTkc6IE9ubHkgaW4gY2VydGFpbiBjb250ZXh0XG5cdG9wdGlvbjogXCJvcHRpb25cIixcblx0b3V0cHV0OiBcInN0YXR1c1wiLFxuXHRwcm9ncmVzczogXCJwcm9ncmVzc2JhclwiLFxuXHQvLyBXQVJOSU5HOiBPbmx5IHdpdGggYW4gYWNjZXNzaWJsZSBuYW1lXG5cdHNlY3Rpb246IFwicmVnaW9uXCIsXG5cdHN1bW1hcnk6IFwiYnV0dG9uXCIsXG5cdHRhYmxlOiBcInRhYmxlXCIsXG5cdHRib2R5OiBcInJvd2dyb3VwXCIsXG5cdHRleHRhcmVhOiBcInRleHRib3hcIixcblx0dGZvb3Q6IFwicm93Z3JvdXBcIixcblx0Ly8gV0FSTklORzogT25seSBpbiBjZXJ0YWluIGNvbnRleHRcblx0dGQ6IFwiY2VsbFwiLFxuXHR0aDogXCJjb2x1bW5oZWFkZXJcIixcblx0dGhlYWQ6IFwicm93Z3JvdXBcIixcblx0dHI6IFwicm93XCIsXG5cdHVsOiBcImxpc3RcIixcbn07XG5cbmNvbnN0IHByb2hpYml0ZWRBdHRyaWJ1dGVzOiBSZWNvcmQ8c3RyaW5nLCBTZXQ8c3RyaW5nPj4gPSB7XG5cdGNhcHRpb246IG5ldyBTZXQoW1wiYXJpYS1sYWJlbFwiLCBcImFyaWEtbGFiZWxsZWRieVwiXSksXG5cdGNvZGU6IG5ldyBTZXQoW1wiYXJpYS1sYWJlbFwiLCBcImFyaWEtbGFiZWxsZWRieVwiXSksXG5cdGRlbGV0aW9uOiBuZXcgU2V0KFtcImFyaWEtbGFiZWxcIiwgXCJhcmlhLWxhYmVsbGVkYnlcIl0pLFxuXHRlbXBoYXNpczogbmV3IFNldChbXCJhcmlhLWxhYmVsXCIsIFwiYXJpYS1sYWJlbGxlZGJ5XCJdKSxcblx0Z2VuZXJpYzogbmV3IFNldChbXCJhcmlhLWxhYmVsXCIsIFwiYXJpYS1sYWJlbGxlZGJ5XCIsIFwiYXJpYS1yb2xlZGVzY3JpcHRpb25cIl0pLFxuXHRpbnNlcnRpb246IG5ldyBTZXQoW1wiYXJpYS1sYWJlbFwiLCBcImFyaWEtbGFiZWxsZWRieVwiXSksXG5cdHBhcmFncmFwaDogbmV3IFNldChbXCJhcmlhLWxhYmVsXCIsIFwiYXJpYS1sYWJlbGxlZGJ5XCJdKSxcblx0cHJlc2VudGF0aW9uOiBuZXcgU2V0KFtcImFyaWEtbGFiZWxcIiwgXCJhcmlhLWxhYmVsbGVkYnlcIl0pLFxuXHRzdHJvbmc6IG5ldyBTZXQoW1wiYXJpYS1sYWJlbFwiLCBcImFyaWEtbGFiZWxsZWRieVwiXSksXG5cdHN1YnNjcmlwdDogbmV3IFNldChbXCJhcmlhLWxhYmVsXCIsIFwiYXJpYS1sYWJlbGxlZGJ5XCJdKSxcblx0c3VwZXJzY3JpcHQ6IG5ldyBTZXQoW1wiYXJpYS1sYWJlbFwiLCBcImFyaWEtbGFiZWxsZWRieVwiXSksXG59O1xuXG4vKipcbiAqXG4gKiBAcGFyYW0gZWxlbWVudFxuICogQHBhcmFtIHJvbGUgVGhlIHJvbGUgdXNlZCBmb3IgdGhpcyBlbGVtZW50LiBUaGlzIGlzIHNwZWNpZmllZCB0byBjb250cm9sIHdoZXRoZXIgeW91IHdhbnQgdG8gdXNlIHRoZSBpbXBsaWNpdCBvciBleHBsaWNpdCByb2xlLlxuICovXG5mdW5jdGlvbiBoYXNHbG9iYWxBcmlhQXR0cmlidXRlcyhlbGVtZW50OiBFbGVtZW50LCByb2xlOiBzdHJpbmcpOiBib29sZWFuIHtcblx0Ly8gaHR0cHM6Ly9yYXdnaXQuY29tL3czYy9hcmlhL3N0YWJsZS8jZ2xvYmFsX3N0YXRlc1xuXHQvLyBjb21tZW50ZWQgYXR0cmlidXRlcyBhcmUgZGVwcmVjYXRlZFxuXHRyZXR1cm4gW1xuXHRcdFwiYXJpYS1hdG9taWNcIixcblx0XHRcImFyaWEtYnVzeVwiLFxuXHRcdFwiYXJpYS1jb250cm9sc1wiLFxuXHRcdFwiYXJpYS1jdXJyZW50XCIsXG5cdFx0XCJhcmlhLWRlc2NyaWJlZGJ5XCIsXG5cdFx0XCJhcmlhLWRldGFpbHNcIixcblx0XHQvLyBcImRpc2FibGVkXCIsXG5cdFx0XCJhcmlhLWRyb3BlZmZlY3RcIixcblx0XHQvLyBcImVycm9ybWVzc2FnZVwiLFxuXHRcdFwiYXJpYS1mbG93dG9cIixcblx0XHRcImFyaWEtZ3JhYmJlZFwiLFxuXHRcdC8vIFwiaGFzcG9wdXBcIixcblx0XHRcImFyaWEtaGlkZGVuXCIsXG5cdFx0Ly8gXCJpbnZhbGlkXCIsXG5cdFx0XCJhcmlhLWtleXNob3J0Y3V0c1wiLFxuXHRcdFwiYXJpYS1sYWJlbFwiLFxuXHRcdFwiYXJpYS1sYWJlbGxlZGJ5XCIsXG5cdFx0XCJhcmlhLWxpdmVcIixcblx0XHRcImFyaWEtb3duc1wiLFxuXHRcdFwiYXJpYS1yZWxldmFudFwiLFxuXHRcdFwiYXJpYS1yb2xlZGVzY3JpcHRpb25cIixcblx0XS5zb21lKChhdHRyaWJ1dGVOYW1lKSA9PiB7XG5cdFx0cmV0dXJuIChcblx0XHRcdGVsZW1lbnQuaGFzQXR0cmlidXRlKGF0dHJpYnV0ZU5hbWUpICYmXG5cdFx0XHQhcHJvaGliaXRlZEF0dHJpYnV0ZXNbcm9sZV0/LmhhcyhhdHRyaWJ1dGVOYW1lKVxuXHRcdCk7XG5cdH0pO1xufVxuXG5mdW5jdGlvbiBpZ25vcmVQcmVzZW50YXRpb25hbFJvbGUoXG5cdGVsZW1lbnQ6IEVsZW1lbnQsXG5cdGltcGxpY2l0Um9sZTogc3RyaW5nXG4pOiBib29sZWFuIHtcblx0Ly8gaHR0cHM6Ly9yYXdnaXQuY29tL3czYy9hcmlhL3N0YWJsZS8jY29uZmxpY3RfcmVzb2x1dGlvbl9wcmVzZW50YXRpb25fbm9uZVxuXHRyZXR1cm4gaGFzR2xvYmFsQXJpYUF0dHJpYnV0ZXMoZWxlbWVudCwgaW1wbGljaXRSb2xlKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0Um9sZShlbGVtZW50OiBFbGVtZW50KTogc3RyaW5nIHwgbnVsbCB7XG5cdGNvbnN0IGV4cGxpY2l0Um9sZSA9IGdldEV4cGxpY2l0Um9sZShlbGVtZW50KTtcblx0aWYgKGV4cGxpY2l0Um9sZSA9PT0gbnVsbCB8fCBleHBsaWNpdFJvbGUgPT09IFwicHJlc2VudGF0aW9uXCIpIHtcblx0XHRjb25zdCBpbXBsaWNpdFJvbGUgPSBnZXRJbXBsaWNpdFJvbGUoZWxlbWVudCk7XG5cdFx0aWYgKFxuXHRcdFx0ZXhwbGljaXRSb2xlICE9PSBcInByZXNlbnRhdGlvblwiIHx8XG5cdFx0XHRpZ25vcmVQcmVzZW50YXRpb25hbFJvbGUoZWxlbWVudCwgaW1wbGljaXRSb2xlIHx8IFwiXCIpXG5cdFx0KSB7XG5cdFx0XHRyZXR1cm4gaW1wbGljaXRSb2xlO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBleHBsaWNpdFJvbGU7XG59XG5cbmZ1bmN0aW9uIGdldEltcGxpY2l0Um9sZShlbGVtZW50OiBFbGVtZW50KTogc3RyaW5nIHwgbnVsbCB7XG5cdGNvbnN0IG1hcHBlZEJ5VGFnID0gbG9jYWxOYW1lVG9Sb2xlTWFwcGluZ3NbZ2V0TG9jYWxOYW1lKGVsZW1lbnQpXTtcblx0aWYgKG1hcHBlZEJ5VGFnICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gbWFwcGVkQnlUYWc7XG5cdH1cblxuXHRzd2l0Y2ggKGdldExvY2FsTmFtZShlbGVtZW50KSkge1xuXHRcdGNhc2UgXCJhXCI6XG5cdFx0Y2FzZSBcImFyZWFcIjpcblx0XHRjYXNlIFwibGlua1wiOlxuXHRcdFx0aWYgKGVsZW1lbnQuaGFzQXR0cmlidXRlKFwiaHJlZlwiKSkge1xuXHRcdFx0XHRyZXR1cm4gXCJsaW5rXCI7XG5cdFx0XHR9XG5cdFx0XHRicmVhaztcblx0XHRjYXNlIFwiaW1nXCI6XG5cdFx0XHRpZiAoXG5cdFx0XHRcdGVsZW1lbnQuZ2V0QXR0cmlidXRlKFwiYWx0XCIpID09PSBcIlwiICYmXG5cdFx0XHRcdCFpZ25vcmVQcmVzZW50YXRpb25hbFJvbGUoZWxlbWVudCwgXCJpbWdcIilcblx0XHRcdCkge1xuXHRcdFx0XHRyZXR1cm4gXCJwcmVzZW50YXRpb25cIjtcblx0XHRcdH1cblx0XHRcdHJldHVybiBcImltZ1wiO1xuXHRcdGNhc2UgXCJpbnB1dFwiOiB7XG5cdFx0XHRjb25zdCB7IHR5cGUgfSA9IGVsZW1lbnQgYXMgSFRNTElucHV0RWxlbWVudDtcblx0XHRcdHN3aXRjaCAodHlwZSkge1xuXHRcdFx0XHRjYXNlIFwiYnV0dG9uXCI6XG5cdFx0XHRcdGNhc2UgXCJpbWFnZVwiOlxuXHRcdFx0XHRjYXNlIFwicmVzZXRcIjpcblx0XHRcdFx0Y2FzZSBcInN1Ym1pdFwiOlxuXHRcdFx0XHRcdHJldHVybiBcImJ1dHRvblwiO1xuXHRcdFx0XHRjYXNlIFwiY2hlY2tib3hcIjpcblx0XHRcdFx0Y2FzZSBcInJhZGlvXCI6XG5cdFx0XHRcdFx0cmV0dXJuIHR5cGU7XG5cdFx0XHRcdGNhc2UgXCJyYW5nZVwiOlxuXHRcdFx0XHRcdHJldHVybiBcInNsaWRlclwiO1xuXHRcdFx0XHRjYXNlIFwiZW1haWxcIjpcblx0XHRcdFx0Y2FzZSBcInRlbFwiOlxuXHRcdFx0XHRjYXNlIFwidGV4dFwiOlxuXHRcdFx0XHRjYXNlIFwidXJsXCI6XG5cdFx0XHRcdFx0aWYgKGVsZW1lbnQuaGFzQXR0cmlidXRlKFwibGlzdFwiKSkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIFwiY29tYm9ib3hcIjtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIFwidGV4dGJveFwiO1xuXG5cdFx0XHRcdGNhc2UgXCJzZWFyY2hcIjpcblx0XHRcdFx0XHRpZiAoZWxlbWVudC5oYXNBdHRyaWJ1dGUoXCJsaXN0XCIpKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gXCJjb21ib2JveFwiO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gXCJzZWFyY2hib3hcIjtcblx0XHRcdFx0Y2FzZSBcIm51bWJlclwiOlxuXHRcdFx0XHRcdHJldHVybiBcInNwaW5idXR0b25cIjtcblx0XHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0XHRyZXR1cm4gbnVsbDtcblx0XHRcdH1cblx0XHR9XG5cdFx0Y2FzZSBcInNlbGVjdFwiOlxuXHRcdFx0aWYgKFxuXHRcdFx0XHRlbGVtZW50Lmhhc0F0dHJpYnV0ZShcIm11bHRpcGxlXCIpIHx8XG5cdFx0XHRcdChlbGVtZW50IGFzIEhUTUxTZWxlY3RFbGVtZW50KS5zaXplID4gMVxuXHRcdFx0KSB7XG5cdFx0XHRcdHJldHVybiBcImxpc3Rib3hcIjtcblx0XHRcdH1cblx0XHRcdHJldHVybiBcImNvbWJvYm94XCI7XG5cdH1cblx0cmV0dXJuIG51bGw7XG59XG5cbmZ1bmN0aW9uIGdldEV4cGxpY2l0Um9sZShlbGVtZW50OiBFbGVtZW50KTogc3RyaW5nIHwgbnVsbCB7XG5cdGNvbnN0IHJvbGUgPSBlbGVtZW50LmdldEF0dHJpYnV0ZShcInJvbGVcIik7XG5cdGlmIChyb2xlICE9PSBudWxsKSB7XG5cdFx0Y29uc3QgZXhwbGljaXRSb2xlID0gcm9sZS50cmltKCkuc3BsaXQoXCIgXCIpWzBdO1xuXHRcdC8vIFN0cmluZy5wcm90b3R5cGUuc3BsaXQoc2VwLCBsaW1pdCkgd2lsbCBhbHdheXMgcmV0dXJuIGFuIGFycmF5IHdpdGggYXQgbGVhc3Qgb25lIG1lbWJlclxuXHRcdC8vIGFzIGxvbmcgYXMgbGltaXQgaXMgZWl0aGVyIHVuZGVmaW5lZCBvciA+IDBcblx0XHRpZiAoZXhwbGljaXRSb2xlLmxlbmd0aCA+IDApIHtcblx0XHRcdHJldHVybiBleHBsaWNpdFJvbGU7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIG51bGw7XG59XG4iXSwibmFtZXMiOlsiZ2V0TG9jYWxOYW1lIiwiZWxlbWVudCIsImxvY2FsTmFtZSIsInRhZ05hbWUiLCJ0b0xvd2VyQ2FzZSIsImxvY2FsTmFtZVRvUm9sZU1hcHBpbmdzIiwiYXJ0aWNsZSIsImFzaWRlIiwiYnV0dG9uIiwiZGF0YWxpc3QiLCJkZCIsImRldGFpbHMiLCJkaWFsb2ciLCJkdCIsImZpZWxkc2V0IiwiZmlndXJlIiwiZm9ybSIsImZvb3RlciIsImgxIiwiaDIiLCJoMyIsImg0IiwiaDUiLCJoNiIsImhlYWRlciIsImhyIiwiaHRtbCIsImxlZ2VuZCIsImxpIiwibWF0aCIsIm1haW4iLCJtZW51IiwibmF2Iiwib2wiLCJvcHRncm91cCIsIm9wdGlvbiIsIm91dHB1dCIsInByb2dyZXNzIiwic2VjdGlvbiIsInN1bW1hcnkiLCJ0YWJsZSIsInRib2R5IiwidGV4dGFyZWEiLCJ0Zm9vdCIsInRkIiwidGgiLCJ0aGVhZCIsInRyIiwidWwiLCJwcm9oaWJpdGVkQXR0cmlidXRlcyIsImNhcHRpb24iLCJTZXQiLCJjb2RlIiwiZGVsZXRpb24iLCJlbXBoYXNpcyIsImdlbmVyaWMiLCJpbnNlcnRpb24iLCJwYXJhZ3JhcGgiLCJwcmVzZW50YXRpb24iLCJzdHJvbmciLCJzdWJzY3JpcHQiLCJzdXBlcnNjcmlwdCIsImhhc0dsb2JhbEFyaWFBdHRyaWJ1dGVzIiwicm9sZSIsInNvbWUiLCJhdHRyaWJ1dGVOYW1lIiwiaGFzQXR0cmlidXRlIiwiaGFzIiwiaWdub3JlUHJlc2VudGF0aW9uYWxSb2xlIiwiaW1wbGljaXRSb2xlIiwiZ2V0Um9sZSIsImV4cGxpY2l0Um9sZSIsImdldEV4cGxpY2l0Um9sZSIsImdldEltcGxpY2l0Um9sZSIsIm1hcHBlZEJ5VGFnIiwidW5kZWZpbmVkIiwiZ2V0QXR0cmlidXRlIiwidHlwZSIsInNp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