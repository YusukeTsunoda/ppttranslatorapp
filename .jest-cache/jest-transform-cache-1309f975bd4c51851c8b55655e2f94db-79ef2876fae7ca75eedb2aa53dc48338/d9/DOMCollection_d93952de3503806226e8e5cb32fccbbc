8ea27c4e6f31b1dc643def60c1073b5d
'use strict';
Object.defineProperty(exports, '__esModule', {
    value: true
});
exports.test = exports.serialize = exports.default = void 0;
var _collections = require('../collections');
/**
 * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ /* eslint-disable local/ban-types-eventually */ const SPACE = ' ';
const OBJECT_NAMES = [
    'DOMStringMap',
    'NamedNodeMap'
];
const ARRAY_REGEXP = /^(HTML\w*Collection|NodeList)$/;
const testName = (name)=>OBJECT_NAMES.indexOf(name) !== -1 || ARRAY_REGEXP.test(name);
const test = (val)=>val && val.constructor && !!val.constructor.name && testName(val.constructor.name);
exports.test = test;
const isNamedNodeMap = (collection)=>collection.constructor.name === 'NamedNodeMap';
const serialize = (collection, config, indentation, depth, refs, printer)=>{
    const name = collection.constructor.name;
    if (++depth > config.maxDepth) {
        return '[' + name + ']';
    }
    return (config.min ? '' : name + SPACE) + (OBJECT_NAMES.indexOf(name) !== -1 ? '{' + (0, _collections.printObjectProperties)(isNamedNodeMap(collection) ? Array.from(collection).reduce((props, attribute)=>{
        props[attribute.name] = attribute.value;
        return props;
    }, {}) : {
        ...collection
    }, config, indentation, depth, refs, printer) + '}' : '[' + (0, _collections.printListItems)(Array.from(collection), config, indentation, depth, refs, printer) + ']');
};
exports.serialize = serialize;
const plugin = {
    serialize,
    test
};
var _default = plugin;
exports.default = _default;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy95dXN1a2V0c3Vub2RhL0RvY3VtZW50cy9jdXJzb3IvcHB0dHJhbnNsYXRvcmFwcC9ub2RlX21vZHVsZXMvcHJldHR5LWZvcm1hdC9idWlsZC9wbHVnaW5zL0RPTUNvbGxlY3Rpb24uanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMudGVzdCA9IGV4cG9ydHMuc2VyaWFsaXplID0gZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX2NvbGxlY3Rpb25zID0gcmVxdWlyZSgnLi4vY29sbGVjdGlvbnMnKTtcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBsb2NhbC9iYW4tdHlwZXMtZXZlbnR1YWxseSAqL1xuY29uc3QgU1BBQ0UgPSAnICc7XG5jb25zdCBPQkpFQ1RfTkFNRVMgPSBbJ0RPTVN0cmluZ01hcCcsICdOYW1lZE5vZGVNYXAnXTtcbmNvbnN0IEFSUkFZX1JFR0VYUCA9IC9eKEhUTUxcXHcqQ29sbGVjdGlvbnxOb2RlTGlzdCkkLztcblxuY29uc3QgdGVzdE5hbWUgPSBuYW1lID0+XG4gIE9CSkVDVF9OQU1FUy5pbmRleE9mKG5hbWUpICE9PSAtMSB8fCBBUlJBWV9SRUdFWFAudGVzdChuYW1lKTtcblxuY29uc3QgdGVzdCA9IHZhbCA9PlxuICB2YWwgJiZcbiAgdmFsLmNvbnN0cnVjdG9yICYmXG4gICEhdmFsLmNvbnN0cnVjdG9yLm5hbWUgJiZcbiAgdGVzdE5hbWUodmFsLmNvbnN0cnVjdG9yLm5hbWUpO1xuXG5leHBvcnRzLnRlc3QgPSB0ZXN0O1xuXG5jb25zdCBpc05hbWVkTm9kZU1hcCA9IGNvbGxlY3Rpb24gPT5cbiAgY29sbGVjdGlvbi5jb25zdHJ1Y3Rvci5uYW1lID09PSAnTmFtZWROb2RlTWFwJztcblxuY29uc3Qgc2VyaWFsaXplID0gKGNvbGxlY3Rpb24sIGNvbmZpZywgaW5kZW50YXRpb24sIGRlcHRoLCByZWZzLCBwcmludGVyKSA9PiB7XG4gIGNvbnN0IG5hbWUgPSBjb2xsZWN0aW9uLmNvbnN0cnVjdG9yLm5hbWU7XG5cbiAgaWYgKCsrZGVwdGggPiBjb25maWcubWF4RGVwdGgpIHtcbiAgICByZXR1cm4gJ1snICsgbmFtZSArICddJztcbiAgfVxuXG4gIHJldHVybiAoXG4gICAgKGNvbmZpZy5taW4gPyAnJyA6IG5hbWUgKyBTUEFDRSkgK1xuICAgIChPQkpFQ1RfTkFNRVMuaW5kZXhPZihuYW1lKSAhPT0gLTFcbiAgICAgID8gJ3snICtcbiAgICAgICAgKDAsIF9jb2xsZWN0aW9ucy5wcmludE9iamVjdFByb3BlcnRpZXMpKFxuICAgICAgICAgIGlzTmFtZWROb2RlTWFwKGNvbGxlY3Rpb24pXG4gICAgICAgICAgICA/IEFycmF5LmZyb20oY29sbGVjdGlvbikucmVkdWNlKChwcm9wcywgYXR0cmlidXRlKSA9PiB7XG4gICAgICAgICAgICAgICAgcHJvcHNbYXR0cmlidXRlLm5hbWVdID0gYXR0cmlidXRlLnZhbHVlO1xuICAgICAgICAgICAgICAgIHJldHVybiBwcm9wcztcbiAgICAgICAgICAgICAgfSwge30pXG4gICAgICAgICAgICA6IHsuLi5jb2xsZWN0aW9ufSxcbiAgICAgICAgICBjb25maWcsXG4gICAgICAgICAgaW5kZW50YXRpb24sXG4gICAgICAgICAgZGVwdGgsXG4gICAgICAgICAgcmVmcyxcbiAgICAgICAgICBwcmludGVyXG4gICAgICAgICkgK1xuICAgICAgICAnfSdcbiAgICAgIDogJ1snICtcbiAgICAgICAgKDAsIF9jb2xsZWN0aW9ucy5wcmludExpc3RJdGVtcykoXG4gICAgICAgICAgQXJyYXkuZnJvbShjb2xsZWN0aW9uKSxcbiAgICAgICAgICBjb25maWcsXG4gICAgICAgICAgaW5kZW50YXRpb24sXG4gICAgICAgICAgZGVwdGgsXG4gICAgICAgICAgcmVmcyxcbiAgICAgICAgICBwcmludGVyXG4gICAgICAgICkgK1xuICAgICAgICAnXScpXG4gICk7XG59O1xuXG5leHBvcnRzLnNlcmlhbGl6ZSA9IHNlcmlhbGl6ZTtcbmNvbnN0IHBsdWdpbiA9IHtcbiAgc2VyaWFsaXplLFxuICB0ZXN0XG59O1xudmFyIF9kZWZhdWx0ID0gcGx1Z2luO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJ0ZXN0Iiwic2VyaWFsaXplIiwiZGVmYXVsdCIsIl9jb2xsZWN0aW9ucyIsInJlcXVpcmUiLCJTUEFDRSIsIk9CSkVDVF9OQU1FUyIsIkFSUkFZX1JFR0VYUCIsInRlc3ROYW1lIiwibmFtZSIsImluZGV4T2YiLCJ2YWwiLCJjb25zdHJ1Y3RvciIsImlzTmFtZWROb2RlTWFwIiwiY29sbGVjdGlvbiIsImNvbmZpZyIsImluZGVudGF0aW9uIiwiZGVwdGgiLCJyZWZzIiwicHJpbnRlciIsIm1heERlcHRoIiwibWluIiwicHJpbnRPYmplY3RQcm9wZXJ0aWVzIiwiQXJyYXkiLCJmcm9tIiwicmVkdWNlIiwicHJvcHMiLCJhdHRyaWJ1dGUiLCJwcmludExpc3RJdGVtcyIsInBsdWdpbiIsIl9kZWZhdWx0Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUVBQSxPQUFPQyxjQUFjLENBQUNDLFNBQVMsY0FBYztJQUMzQ0MsT0FBTztBQUNUO0FBQ0FELFFBQVFFLElBQUksR0FBR0YsUUFBUUcsU0FBUyxHQUFHSCxRQUFRSSxPQUFPLEdBQUcsS0FBSztBQUUxRCxJQUFJQyxlQUFlQyxRQUFRO0FBRTNCOzs7OztDQUtDLEdBRUQsNkNBQTZDLEdBQzdDLE1BQU1DLFFBQVE7QUFDZCxNQUFNQyxlQUFlO0lBQUM7SUFBZ0I7Q0FBZTtBQUNyRCxNQUFNQyxlQUFlO0FBRXJCLE1BQU1DLFdBQVdDLENBQUFBLE9BQ2ZILGFBQWFJLE9BQU8sQ0FBQ0QsVUFBVSxDQUFDLEtBQUtGLGFBQWFQLElBQUksQ0FBQ1M7QUFFekQsTUFBTVQsT0FBT1csQ0FBQUEsTUFDWEEsT0FDQUEsSUFBSUMsV0FBVyxJQUNmLENBQUMsQ0FBQ0QsSUFBSUMsV0FBVyxDQUFDSCxJQUFJLElBQ3RCRCxTQUFTRyxJQUFJQyxXQUFXLENBQUNILElBQUk7QUFFL0JYLFFBQVFFLElBQUksR0FBR0E7QUFFZixNQUFNYSxpQkFBaUJDLENBQUFBLGFBQ3JCQSxXQUFXRixXQUFXLENBQUNILElBQUksS0FBSztBQUVsQyxNQUFNUixZQUFZLENBQUNhLFlBQVlDLFFBQVFDLGFBQWFDLE9BQU9DLE1BQU1DO0lBQy9ELE1BQU1WLE9BQU9LLFdBQVdGLFdBQVcsQ0FBQ0gsSUFBSTtJQUV4QyxJQUFJLEVBQUVRLFFBQVFGLE9BQU9LLFFBQVEsRUFBRTtRQUM3QixPQUFPLE1BQU1YLE9BQU87SUFDdEI7SUFFQSxPQUNFLEFBQUNNLENBQUFBLE9BQU9NLEdBQUcsR0FBRyxLQUFLWixPQUFPSixLQUFJLElBQzdCQyxDQUFBQSxhQUFhSSxPQUFPLENBQUNELFVBQVUsQ0FBQyxJQUM3QixNQUNBLEFBQUMsQ0FBQSxHQUFHTixhQUFhbUIscUJBQXFCLEFBQUQsRUFDbkNULGVBQWVDLGNBQ1hTLE1BQU1DLElBQUksQ0FBQ1YsWUFBWVcsTUFBTSxDQUFDLENBQUNDLE9BQU9DO1FBQ3BDRCxLQUFLLENBQUNDLFVBQVVsQixJQUFJLENBQUMsR0FBR2tCLFVBQVU1QixLQUFLO1FBQ3ZDLE9BQU8yQjtJQUNULEdBQUcsQ0FBQyxLQUNKO1FBQUMsR0FBR1osVUFBVTtJQUFBLEdBQ2xCQyxRQUNBQyxhQUNBQyxPQUNBQyxNQUNBQyxXQUVGLE1BQ0EsTUFDQSxBQUFDLENBQUEsR0FBR2hCLGFBQWF5QixjQUFjLEFBQUQsRUFDNUJMLE1BQU1DLElBQUksQ0FBQ1YsYUFDWEMsUUFDQUMsYUFDQUMsT0FDQUMsTUFDQUMsV0FFRixHQUFFO0FBRVY7QUFFQXJCLFFBQVFHLFNBQVMsR0FBR0E7QUFDcEIsTUFBTTRCLFNBQVM7SUFDYjVCO0lBQ0FEO0FBQ0Y7QUFDQSxJQUFJOEIsV0FBV0Q7QUFDZi9CLFFBQVFJLE9BQU8sR0FBRzRCIn0=