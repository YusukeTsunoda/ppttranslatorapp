{"version":3,"sources":["/Users/yusuketsunoda/Documents/cursor/ppttranslatorapp/node_modules/jest-runner/build/index.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nObject.defineProperty(exports, 'CallbackTestRunner', {\n  enumerable: true,\n  get: function () {\n    return _types.CallbackTestRunner;\n  }\n});\nObject.defineProperty(exports, 'EmittingTestRunner', {\n  enumerable: true,\n  get: function () {\n    return _types.EmittingTestRunner;\n  }\n});\nexports.default = void 0;\nfunction _chalk() {\n  const data = _interopRequireDefault(require('chalk'));\n  _chalk = function () {\n    return data;\n  };\n  return data;\n}\nfunction _emittery() {\n  const data = _interopRequireDefault(require('emittery'));\n  _emittery = function () {\n    return data;\n  };\n  return data;\n}\nfunction _pLimit() {\n  const data = _interopRequireDefault(require('p-limit'));\n  _pLimit = function () {\n    return data;\n  };\n  return data;\n}\nfunction _jestUtil() {\n  const data = require('jest-util');\n  _jestUtil = function () {\n    return data;\n  };\n  return data;\n}\nfunction _jestWorker() {\n  const data = require('jest-worker');\n  _jestWorker = function () {\n    return data;\n  };\n  return data;\n}\nvar _runTest = _interopRequireDefault(require('./runTest'));\nvar _types = require('./types');\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {default: obj};\n}\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nclass TestRunner extends _types.EmittingTestRunner {\n  #eventEmitter = new (_emittery().default)();\n  async runTests(tests, watcher, options) {\n    return options.serial\n      ? this.#createInBandTestRun(tests, watcher)\n      : this.#createParallelTestRun(tests, watcher);\n  }\n  async #createInBandTestRun(tests, watcher) {\n    process.env.JEST_WORKER_ID = '1';\n    const mutex = (0, _pLimit().default)(1);\n    return tests.reduce(\n      (promise, test) =>\n        mutex(() =>\n          promise\n            .then(async () => {\n              if (watcher.isInterrupted()) {\n                throw new CancelRun();\n              }\n\n              // `deepCyclicCopy` used here to avoid mem-leak\n              const sendMessageToJest = (eventName, args) =>\n                this.#eventEmitter.emit(\n                  eventName,\n                  (0, _jestUtil().deepCyclicCopy)(args, {\n                    keepPrototype: false\n                  })\n                );\n              await this.#eventEmitter.emit('test-file-start', [test]);\n              return (0, _runTest.default)(\n                test.path,\n                this._globalConfig,\n                test.context.config,\n                test.context.resolver,\n                this._context,\n                sendMessageToJest\n              );\n            })\n            .then(\n              result =>\n                this.#eventEmitter.emit('test-file-success', [test, result]),\n              error =>\n                this.#eventEmitter.emit('test-file-failure', [test, error])\n            )\n        ),\n      Promise.resolve()\n    );\n  }\n  async #createParallelTestRun(tests, watcher) {\n    const resolvers = new Map();\n    for (const test of tests) {\n      if (!resolvers.has(test.context.config.id)) {\n        resolvers.set(test.context.config.id, {\n          config: test.context.config,\n          serializableModuleMap: test.context.moduleMap.toJSON()\n        });\n      }\n    }\n    const worker = new (_jestWorker().Worker)(require.resolve('./testWorker'), {\n      enableWorkerThreads: this._globalConfig.workerThreads,\n      exposedMethods: ['worker'],\n      forkOptions: {\n        serialization: 'json',\n        stdio: 'pipe'\n      },\n      // The workerIdleMemoryLimit should've been converted to a number during\n      // the normalization phase.\n      idleMemoryLimit:\n        typeof this._globalConfig.workerIdleMemoryLimit === 'number'\n          ? this._globalConfig.workerIdleMemoryLimit\n          : undefined,\n      maxRetries: 3,\n      numWorkers: this._globalConfig.maxWorkers,\n      setupArgs: [\n        {\n          serializableResolvers: Array.from(resolvers.values())\n        }\n      ]\n    });\n    if (worker.getStdout()) worker.getStdout().pipe(process.stdout);\n    if (worker.getStderr()) worker.getStderr().pipe(process.stderr);\n    const mutex = (0, _pLimit().default)(this._globalConfig.maxWorkers);\n\n    // Send test suites to workers continuously instead of all at once to track\n    // the start time of individual tests.\n    const runTestInWorker = test =>\n      mutex(async () => {\n        if (watcher.isInterrupted()) {\n          return Promise.reject();\n        }\n        await this.#eventEmitter.emit('test-file-start', [test]);\n        const promise = worker.worker({\n          config: test.context.config,\n          context: {\n            ...this._context,\n            changedFiles:\n              this._context.changedFiles &&\n              Array.from(this._context.changedFiles),\n            sourcesRelatedToTestsInChangedFiles:\n              this._context.sourcesRelatedToTestsInChangedFiles &&\n              Array.from(this._context.sourcesRelatedToTestsInChangedFiles)\n          },\n          globalConfig: this._globalConfig,\n          path: test.path\n        });\n        if (promise.UNSTABLE_onCustomMessage) {\n          // TODO: Get appropriate type for `onCustomMessage`\n          promise.UNSTABLE_onCustomMessage(([event, payload]) =>\n            this.#eventEmitter.emit(event, payload)\n          );\n        }\n        return promise;\n      });\n    const onInterrupt = new Promise((_, reject) => {\n      watcher.on('change', state => {\n        if (state.interrupted) {\n          reject(new CancelRun());\n        }\n      });\n    });\n    const runAllTests = Promise.all(\n      tests.map(test =>\n        runTestInWorker(test).then(\n          result =>\n            this.#eventEmitter.emit('test-file-success', [test, result]),\n          error => this.#eventEmitter.emit('test-file-failure', [test, error])\n        )\n      )\n    );\n    const cleanup = async () => {\n      const {forceExited} = await worker.end();\n      if (forceExited) {\n        console.error(\n          _chalk().default.yellow(\n            'A worker process has failed to exit gracefully and has been force exited. ' +\n              'This is likely caused by tests leaking due to improper teardown. ' +\n              'Try running with --detectOpenHandles to find leaks. ' +\n              'Active timers can also cause this, ensure that .unref() was called on them.'\n          )\n        );\n      }\n    };\n    return Promise.race([runAllTests, onInterrupt]).then(cleanup, cleanup);\n  }\n  on(eventName, listener) {\n    return this.#eventEmitter.on(eventName, listener);\n  }\n}\nexports.default = TestRunner;\nclass CancelRun extends Error {\n  constructor(message) {\n    super(message);\n    this.name = 'CancelRun';\n  }\n}\n"],"names":["Object","defineProperty","exports","value","enumerable","get","_types","CallbackTestRunner","EmittingTestRunner","default","_chalk","data","_interopRequireDefault","require","_emittery","_pLimit","_jestUtil","_jestWorker","_runTest","obj","__esModule","TestRunner","runTests","tests","watcher","options","serial","process","env","JEST_WORKER_ID","mutex","reduce","promise","test","then","isInterrupted","CancelRun","sendMessageToJest","eventName","args","emit","deepCyclicCopy","keepPrototype","path","_globalConfig","context","config","resolver","_context","result","error","Promise","resolve","resolvers","Map","has","id","set","serializableModuleMap","moduleMap","toJSON","worker","Worker","enableWorkerThreads","workerThreads","exposedMethods","forkOptions","serialization","stdio","idleMemoryLimit","workerIdleMemoryLimit","undefined","maxRetries","numWorkers","maxWorkers","setupArgs","serializableResolvers","Array","from","values","getStdout","pipe","stdout","getStderr","stderr","runTestInWorker","reject","changedFiles","sourcesRelatedToTestsInChangedFiles","globalConfig","UNSTABLE_onCustomMessage","event","payload","onInterrupt","_","on","state","interrupted","runAllTests","all","map","cleanup","forceExited","end","console","yellow","race","listener","Error","constructor","message","name"],"mappings":"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"}