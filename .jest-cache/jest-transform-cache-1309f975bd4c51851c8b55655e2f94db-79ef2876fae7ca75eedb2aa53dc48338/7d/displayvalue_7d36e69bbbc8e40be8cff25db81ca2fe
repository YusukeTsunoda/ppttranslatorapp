188cf0a03cab309528cc3768ef6265f3
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.queryByDisplayValue = exports.queryAllByDisplayValue = exports.getByDisplayValue = exports.getAllByDisplayValue = exports.findByDisplayValue = exports.findAllByDisplayValue = void 0;
var _queryHelpers = require("../query-helpers");
var _helpers = require("../helpers");
var _allUtils = require("./all-utils");
const queryAllByDisplayValue = (container, value, { exact = true, collapseWhitespace, trim, normalizer } = {})=>{
    (0, _helpers.checkContainerType)(container);
    const matcher = exact ? _allUtils.matches : _allUtils.fuzzyMatches;
    const matchNormalizer = (0, _allUtils.makeNormalizer)({
        collapseWhitespace,
        trim,
        normalizer
    });
    return Array.from(container.querySelectorAll(`input,textarea,select`)).filter((node)=>{
        if (node.tagName === 'SELECT') {
            const selectedOptions = Array.from(node.options).filter((option)=>option.selected);
            return selectedOptions.some((optionNode)=>matcher((0, _allUtils.getNodeText)(optionNode), optionNode, value, matchNormalizer));
        } else {
            return matcher(node.value, node, value, matchNormalizer);
        }
    });
};
const getMultipleError = (c, value)=>`Found multiple elements with the display value: ${value}.`;
const getMissingError = (c, value)=>`Unable to find an element with the display value: ${value}.`;
const queryAllByDisplayValueWithSuggestions = exports.queryAllByDisplayValue = (0, _queryHelpers.wrapAllByQueryWithSuggestion)(queryAllByDisplayValue, queryAllByDisplayValue.name, 'queryAll');
const [queryByDisplayValue, getAllByDisplayValue, getByDisplayValue, findAllByDisplayValue, findByDisplayValue] = (0, _allUtils.buildQueries)(queryAllByDisplayValue, getMultipleError, getMissingError);
exports.findByDisplayValue = findByDisplayValue;
exports.findAllByDisplayValue = findAllByDisplayValue;
exports.getByDisplayValue = getByDisplayValue;
exports.getAllByDisplayValue = getAllByDisplayValue;
exports.queryByDisplayValue = queryByDisplayValue;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy95dXN1a2V0c3Vub2RhL0RvY3VtZW50cy9jdXJzb3IvcHB0dHJhbnNsYXRvcmFwcC9ub2RlX21vZHVsZXMvQHRlc3RpbmctbGlicmFyeS9yZWFjdC9ub2RlX21vZHVsZXMvQHRlc3RpbmctbGlicmFyeS9kb20vZGlzdC9xdWVyaWVzL2Rpc3BsYXktdmFsdWUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLnF1ZXJ5QnlEaXNwbGF5VmFsdWUgPSBleHBvcnRzLnF1ZXJ5QWxsQnlEaXNwbGF5VmFsdWUgPSBleHBvcnRzLmdldEJ5RGlzcGxheVZhbHVlID0gZXhwb3J0cy5nZXRBbGxCeURpc3BsYXlWYWx1ZSA9IGV4cG9ydHMuZmluZEJ5RGlzcGxheVZhbHVlID0gZXhwb3J0cy5maW5kQWxsQnlEaXNwbGF5VmFsdWUgPSB2b2lkIDA7XG52YXIgX3F1ZXJ5SGVscGVycyA9IHJlcXVpcmUoXCIuLi9xdWVyeS1oZWxwZXJzXCIpO1xudmFyIF9oZWxwZXJzID0gcmVxdWlyZShcIi4uL2hlbHBlcnNcIik7XG52YXIgX2FsbFV0aWxzID0gcmVxdWlyZShcIi4vYWxsLXV0aWxzXCIpO1xuY29uc3QgcXVlcnlBbGxCeURpc3BsYXlWYWx1ZSA9IChjb250YWluZXIsIHZhbHVlLCB7XG4gIGV4YWN0ID0gdHJ1ZSxcbiAgY29sbGFwc2VXaGl0ZXNwYWNlLFxuICB0cmltLFxuICBub3JtYWxpemVyXG59ID0ge30pID0+IHtcbiAgKDAsIF9oZWxwZXJzLmNoZWNrQ29udGFpbmVyVHlwZSkoY29udGFpbmVyKTtcbiAgY29uc3QgbWF0Y2hlciA9IGV4YWN0ID8gX2FsbFV0aWxzLm1hdGNoZXMgOiBfYWxsVXRpbHMuZnV6enlNYXRjaGVzO1xuICBjb25zdCBtYXRjaE5vcm1hbGl6ZXIgPSAoMCwgX2FsbFV0aWxzLm1ha2VOb3JtYWxpemVyKSh7XG4gICAgY29sbGFwc2VXaGl0ZXNwYWNlLFxuICAgIHRyaW0sXG4gICAgbm9ybWFsaXplclxuICB9KTtcbiAgcmV0dXJuIEFycmF5LmZyb20oY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3JBbGwoYGlucHV0LHRleHRhcmVhLHNlbGVjdGApKS5maWx0ZXIobm9kZSA9PiB7XG4gICAgaWYgKG5vZGUudGFnTmFtZSA9PT0gJ1NFTEVDVCcpIHtcbiAgICAgIGNvbnN0IHNlbGVjdGVkT3B0aW9ucyA9IEFycmF5LmZyb20obm9kZS5vcHRpb25zKS5maWx0ZXIob3B0aW9uID0+IG9wdGlvbi5zZWxlY3RlZCk7XG4gICAgICByZXR1cm4gc2VsZWN0ZWRPcHRpb25zLnNvbWUob3B0aW9uTm9kZSA9PiBtYXRjaGVyKCgwLCBfYWxsVXRpbHMuZ2V0Tm9kZVRleHQpKG9wdGlvbk5vZGUpLCBvcHRpb25Ob2RlLCB2YWx1ZSwgbWF0Y2hOb3JtYWxpemVyKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBtYXRjaGVyKG5vZGUudmFsdWUsIG5vZGUsIHZhbHVlLCBtYXRjaE5vcm1hbGl6ZXIpO1xuICAgIH1cbiAgfSk7XG59O1xuY29uc3QgZ2V0TXVsdGlwbGVFcnJvciA9IChjLCB2YWx1ZSkgPT4gYEZvdW5kIG11bHRpcGxlIGVsZW1lbnRzIHdpdGggdGhlIGRpc3BsYXkgdmFsdWU6ICR7dmFsdWV9LmA7XG5jb25zdCBnZXRNaXNzaW5nRXJyb3IgPSAoYywgdmFsdWUpID0+IGBVbmFibGUgdG8gZmluZCBhbiBlbGVtZW50IHdpdGggdGhlIGRpc3BsYXkgdmFsdWU6ICR7dmFsdWV9LmA7XG5jb25zdCBxdWVyeUFsbEJ5RGlzcGxheVZhbHVlV2l0aFN1Z2dlc3Rpb25zID0gZXhwb3J0cy5xdWVyeUFsbEJ5RGlzcGxheVZhbHVlID0gKDAsIF9xdWVyeUhlbHBlcnMud3JhcEFsbEJ5UXVlcnlXaXRoU3VnZ2VzdGlvbikocXVlcnlBbGxCeURpc3BsYXlWYWx1ZSwgcXVlcnlBbGxCeURpc3BsYXlWYWx1ZS5uYW1lLCAncXVlcnlBbGwnKTtcbmNvbnN0IFtxdWVyeUJ5RGlzcGxheVZhbHVlLCBnZXRBbGxCeURpc3BsYXlWYWx1ZSwgZ2V0QnlEaXNwbGF5VmFsdWUsIGZpbmRBbGxCeURpc3BsYXlWYWx1ZSwgZmluZEJ5RGlzcGxheVZhbHVlXSA9ICgwLCBfYWxsVXRpbHMuYnVpbGRRdWVyaWVzKShxdWVyeUFsbEJ5RGlzcGxheVZhbHVlLCBnZXRNdWx0aXBsZUVycm9yLCBnZXRNaXNzaW5nRXJyb3IpO1xuZXhwb3J0cy5maW5kQnlEaXNwbGF5VmFsdWUgPSBmaW5kQnlEaXNwbGF5VmFsdWU7XG5leHBvcnRzLmZpbmRBbGxCeURpc3BsYXlWYWx1ZSA9IGZpbmRBbGxCeURpc3BsYXlWYWx1ZTtcbmV4cG9ydHMuZ2V0QnlEaXNwbGF5VmFsdWUgPSBnZXRCeURpc3BsYXlWYWx1ZTtcbmV4cG9ydHMuZ2V0QWxsQnlEaXNwbGF5VmFsdWUgPSBnZXRBbGxCeURpc3BsYXlWYWx1ZTtcbmV4cG9ydHMucXVlcnlCeURpc3BsYXlWYWx1ZSA9IHF1ZXJ5QnlEaXNwbGF5VmFsdWU7Il0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwicXVlcnlCeURpc3BsYXlWYWx1ZSIsInF1ZXJ5QWxsQnlEaXNwbGF5VmFsdWUiLCJnZXRCeURpc3BsYXlWYWx1ZSIsImdldEFsbEJ5RGlzcGxheVZhbHVlIiwiZmluZEJ5RGlzcGxheVZhbHVlIiwiZmluZEFsbEJ5RGlzcGxheVZhbHVlIiwiX3F1ZXJ5SGVscGVycyIsInJlcXVpcmUiLCJfaGVscGVycyIsIl9hbGxVdGlscyIsImNvbnRhaW5lciIsImV4YWN0IiwiY29sbGFwc2VXaGl0ZXNwYWNlIiwidHJpbSIsIm5vcm1hbGl6ZXIiLCJjaGVja0NvbnRhaW5lclR5cGUiLCJtYXRjaGVyIiwibWF0Y2hlcyIsImZ1enp5TWF0Y2hlcyIsIm1hdGNoTm9ybWFsaXplciIsIm1ha2VOb3JtYWxpemVyIiwiQXJyYXkiLCJmcm9tIiwicXVlcnlTZWxlY3RvckFsbCIsImZpbHRlciIsIm5vZGUiLCJ0YWdOYW1lIiwic2VsZWN0ZWRPcHRpb25zIiwib3B0aW9ucyIsIm9wdGlvbiIsInNlbGVjdGVkIiwic29tZSIsIm9wdGlvbk5vZGUiLCJnZXROb2RlVGV4dCIsImdldE11bHRpcGxlRXJyb3IiLCJjIiwiZ2V0TWlzc2luZ0Vycm9yIiwicXVlcnlBbGxCeURpc3BsYXlWYWx1ZVdpdGhTdWdnZXN0aW9ucyIsIndyYXBBbGxCeVF1ZXJ5V2l0aFN1Z2dlc3Rpb24iLCJuYW1lIiwiYnVpbGRRdWVyaWVzIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUVBQSxPQUFPQyxjQUFjLENBQUNDLFNBQVMsY0FBYztJQUMzQ0MsT0FBTztBQUNUO0FBQ0FELFFBQVFFLG1CQUFtQixHQUFHRixRQUFRRyxzQkFBc0IsR0FBR0gsUUFBUUksaUJBQWlCLEdBQUdKLFFBQVFLLG9CQUFvQixHQUFHTCxRQUFRTSxrQkFBa0IsR0FBR04sUUFBUU8scUJBQXFCLEdBQUcsS0FBSztBQUM1TCxJQUFJQyxnQkFBZ0JDLFFBQVE7QUFDNUIsSUFBSUMsV0FBV0QsUUFBUTtBQUN2QixJQUFJRSxZQUFZRixRQUFRO0FBQ3hCLE1BQU1OLHlCQUF5QixDQUFDUyxXQUFXWCxPQUFPLEVBQ2hEWSxRQUFRLElBQUksRUFDWkMsa0JBQWtCLEVBQ2xCQyxJQUFJLEVBQ0pDLFVBQVUsRUFDWCxHQUFHLENBQUMsQ0FBQztJQUNILENBQUEsR0FBR04sU0FBU08sa0JBQWtCLEFBQUQsRUFBR0w7SUFDakMsTUFBTU0sVUFBVUwsUUFBUUYsVUFBVVEsT0FBTyxHQUFHUixVQUFVUyxZQUFZO0lBQ2xFLE1BQU1DLGtCQUFrQixBQUFDLENBQUEsR0FBR1YsVUFBVVcsY0FBYyxBQUFELEVBQUc7UUFDcERSO1FBQ0FDO1FBQ0FDO0lBQ0Y7SUFDQSxPQUFPTyxNQUFNQyxJQUFJLENBQUNaLFVBQVVhLGdCQUFnQixDQUFDLENBQUMscUJBQXFCLENBQUMsR0FBR0MsTUFBTSxDQUFDQyxDQUFBQTtRQUM1RSxJQUFJQSxLQUFLQyxPQUFPLEtBQUssVUFBVTtZQUM3QixNQUFNQyxrQkFBa0JOLE1BQU1DLElBQUksQ0FBQ0csS0FBS0csT0FBTyxFQUFFSixNQUFNLENBQUNLLENBQUFBLFNBQVVBLE9BQU9DLFFBQVE7WUFDakYsT0FBT0gsZ0JBQWdCSSxJQUFJLENBQUNDLENBQUFBLGFBQWNoQixRQUFRLEFBQUMsQ0FBQSxHQUFHUCxVQUFVd0IsV0FBVyxBQUFELEVBQUdELGFBQWFBLFlBQVlqQyxPQUFPb0I7UUFDL0csT0FBTztZQUNMLE9BQU9ILFFBQVFTLEtBQUsxQixLQUFLLEVBQUUwQixNQUFNMUIsT0FBT29CO1FBQzFDO0lBQ0Y7QUFDRjtBQUNBLE1BQU1lLG1CQUFtQixDQUFDQyxHQUFHcEMsUUFBVSxDQUFDLGdEQUFnRCxFQUFFQSxNQUFNLENBQUMsQ0FBQztBQUNsRyxNQUFNcUMsa0JBQWtCLENBQUNELEdBQUdwQyxRQUFVLENBQUMsa0RBQWtELEVBQUVBLE1BQU0sQ0FBQyxDQUFDO0FBQ25HLE1BQU1zQyx3Q0FBd0N2QyxRQUFRRyxzQkFBc0IsR0FBRyxBQUFDLENBQUEsR0FBR0ssY0FBY2dDLDRCQUE0QixBQUFELEVBQUdyQyx3QkFBd0JBLHVCQUF1QnNDLElBQUksRUFBRTtBQUNwTCxNQUFNLENBQUN2QyxxQkFBcUJHLHNCQUFzQkQsbUJBQW1CRyx1QkFBdUJELG1CQUFtQixHQUFHLEFBQUMsQ0FBQSxHQUFHSyxVQUFVK0IsWUFBWSxBQUFELEVBQUd2Qyx3QkFBd0JpQyxrQkFBa0JFO0FBQ3hMdEMsUUFBUU0sa0JBQWtCLEdBQUdBO0FBQzdCTixRQUFRTyxxQkFBcUIsR0FBR0E7QUFDaENQLFFBQVFJLGlCQUFpQixHQUFHQTtBQUM1QkosUUFBUUssb0JBQW9CLEdBQUdBO0FBQy9CTCxRQUFRRSxtQkFBbUIsR0FBR0EifQ==