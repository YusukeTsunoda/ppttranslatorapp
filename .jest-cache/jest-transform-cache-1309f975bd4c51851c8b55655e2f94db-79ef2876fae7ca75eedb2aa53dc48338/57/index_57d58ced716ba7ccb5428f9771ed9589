588cac0d3af9b99b42fa8ad2288a202e
'use strict';
var isCallable = require('is-callable');
var toStr = Object.prototype.toString;
var hasOwnProperty = Object.prototype.hasOwnProperty;
/** @type {<This, A extends readonly unknown[]>(arr: A, iterator: (this: This | void, value: A[number], index: number, arr: A) => void, receiver: This | undefined) => void} */ var forEachArray = function forEachArray(array, iterator, receiver) {
    for(var i = 0, len = array.length; i < len; i++){
        if (hasOwnProperty.call(array, i)) {
            if (receiver == null) {
                iterator(array[i], i, array);
            } else {
                iterator.call(receiver, array[i], i, array);
            }
        }
    }
};
/** @type {<This, S extends string>(string: S, iterator: (this: This | void, value: S[number], index: number, string: S) => void, receiver: This | undefined) => void} */ var forEachString = function forEachString(string, iterator, receiver) {
    for(var i = 0, len = string.length; i < len; i++){
        // no such thing as a sparse string.
        if (receiver == null) {
            iterator(string.charAt(i), i, string);
        } else {
            iterator.call(receiver, string.charAt(i), i, string);
        }
    }
};
/** @type {<This, O>(obj: O, iterator: (this: This | void, value: O[keyof O], index: keyof O, obj: O) => void, receiver: This | undefined) => void} */ var forEachObject = function forEachObject(object, iterator, receiver) {
    for(var k in object){
        if (hasOwnProperty.call(object, k)) {
            if (receiver == null) {
                iterator(object[k], k, object);
            } else {
                iterator.call(receiver, object[k], k, object);
            }
        }
    }
};
/** @type {(x: unknown) => x is readonly unknown[]} */ function isArray(x) {
    return toStr.call(x) === '[object Array]';
}
/** @type {import('.')._internal} */ module.exports = function forEach(list, iterator, thisArg) {
    if (!isCallable(iterator)) {
        throw new TypeError('iterator must be a function');
    }
    var receiver;
    if (arguments.length >= 3) {
        receiver = thisArg;
    }
    if (isArray(list)) {
        forEachArray(list, iterator, receiver);
    } else if (typeof list === 'string') {
        forEachString(list, iterator, receiver);
    } else {
        forEachObject(list, iterator, receiver);
    }
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy95dXN1a2V0c3Vub2RhL0RvY3VtZW50cy9jdXJzb3IvcHB0dHJhbnNsYXRvcmFwcC9ub2RlX21vZHVsZXMvZm9yLWVhY2gvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaXNDYWxsYWJsZSA9IHJlcXVpcmUoJ2lzLWNhbGxhYmxlJyk7XG5cbnZhciB0b1N0ciA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG52YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuXG4vKiogQHR5cGUgezxUaGlzLCBBIGV4dGVuZHMgcmVhZG9ubHkgdW5rbm93bltdPihhcnI6IEEsIGl0ZXJhdG9yOiAodGhpczogVGhpcyB8IHZvaWQsIHZhbHVlOiBBW251bWJlcl0sIGluZGV4OiBudW1iZXIsIGFycjogQSkgPT4gdm9pZCwgcmVjZWl2ZXI6IFRoaXMgfCB1bmRlZmluZWQpID0+IHZvaWR9ICovXG52YXIgZm9yRWFjaEFycmF5ID0gZnVuY3Rpb24gZm9yRWFjaEFycmF5KGFycmF5LCBpdGVyYXRvciwgcmVjZWl2ZXIpIHtcbiAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gYXJyYXkubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwoYXJyYXksIGkpKSB7XG4gICAgICAgICAgICBpZiAocmVjZWl2ZXIgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGl0ZXJhdG9yKGFycmF5W2ldLCBpLCBhcnJheSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGl0ZXJhdG9yLmNhbGwocmVjZWl2ZXIsIGFycmF5W2ldLCBpLCBhcnJheSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59O1xuXG4vKiogQHR5cGUgezxUaGlzLCBTIGV4dGVuZHMgc3RyaW5nPihzdHJpbmc6IFMsIGl0ZXJhdG9yOiAodGhpczogVGhpcyB8IHZvaWQsIHZhbHVlOiBTW251bWJlcl0sIGluZGV4OiBudW1iZXIsIHN0cmluZzogUykgPT4gdm9pZCwgcmVjZWl2ZXI6IFRoaXMgfCB1bmRlZmluZWQpID0+IHZvaWR9ICovXG52YXIgZm9yRWFjaFN0cmluZyA9IGZ1bmN0aW9uIGZvckVhY2hTdHJpbmcoc3RyaW5nLCBpdGVyYXRvciwgcmVjZWl2ZXIpIHtcbiAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gc3RyaW5nLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIC8vIG5vIHN1Y2ggdGhpbmcgYXMgYSBzcGFyc2Ugc3RyaW5nLlxuICAgICAgICBpZiAocmVjZWl2ZXIgPT0gbnVsbCkge1xuICAgICAgICAgICAgaXRlcmF0b3Ioc3RyaW5nLmNoYXJBdChpKSwgaSwgc3RyaW5nKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGl0ZXJhdG9yLmNhbGwocmVjZWl2ZXIsIHN0cmluZy5jaGFyQXQoaSksIGksIHN0cmluZyk7XG4gICAgICAgIH1cbiAgICB9XG59O1xuXG4vKiogQHR5cGUgezxUaGlzLCBPPihvYmo6IE8sIGl0ZXJhdG9yOiAodGhpczogVGhpcyB8IHZvaWQsIHZhbHVlOiBPW2tleW9mIE9dLCBpbmRleDoga2V5b2YgTywgb2JqOiBPKSA9PiB2b2lkLCByZWNlaXZlcjogVGhpcyB8IHVuZGVmaW5lZCkgPT4gdm9pZH0gKi9cbnZhciBmb3JFYWNoT2JqZWN0ID0gZnVuY3Rpb24gZm9yRWFjaE9iamVjdChvYmplY3QsIGl0ZXJhdG9yLCByZWNlaXZlcikge1xuICAgIGZvciAodmFyIGsgaW4gb2JqZWN0KSB7XG4gICAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgaykpIHtcbiAgICAgICAgICAgIGlmIChyZWNlaXZlciA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgaXRlcmF0b3Iob2JqZWN0W2tdLCBrLCBvYmplY3QpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpdGVyYXRvci5jYWxsKHJlY2VpdmVyLCBvYmplY3Rba10sIGssIG9iamVjdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59O1xuXG4vKiogQHR5cGUgeyh4OiB1bmtub3duKSA9PiB4IGlzIHJlYWRvbmx5IHVua25vd25bXX0gKi9cbmZ1bmN0aW9uIGlzQXJyYXkoeCkge1xuICAgIHJldHVybiB0b1N0ci5jYWxsKHgpID09PSAnW29iamVjdCBBcnJheV0nO1xufVxuXG4vKiogQHR5cGUge2ltcG9ydCgnLicpLl9pbnRlcm5hbH0gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZm9yRWFjaChsaXN0LCBpdGVyYXRvciwgdGhpc0FyZykge1xuICAgIGlmICghaXNDYWxsYWJsZShpdGVyYXRvcikpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignaXRlcmF0b3IgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG4gICAgfVxuXG4gICAgdmFyIHJlY2VpdmVyO1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID49IDMpIHtcbiAgICAgICAgcmVjZWl2ZXIgPSB0aGlzQXJnO1xuICAgIH1cblxuICAgIGlmIChpc0FycmF5KGxpc3QpKSB7XG4gICAgICAgIGZvckVhY2hBcnJheShsaXN0LCBpdGVyYXRvciwgcmVjZWl2ZXIpO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGxpc3QgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGZvckVhY2hTdHJpbmcobGlzdCwgaXRlcmF0b3IsIHJlY2VpdmVyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBmb3JFYWNoT2JqZWN0KGxpc3QsIGl0ZXJhdG9yLCByZWNlaXZlcik7XG4gICAgfVxufTtcbiJdLCJuYW1lcyI6WyJpc0NhbGxhYmxlIiwicmVxdWlyZSIsInRvU3RyIiwiT2JqZWN0IiwicHJvdG90eXBlIiwidG9TdHJpbmciLCJoYXNPd25Qcm9wZXJ0eSIsImZvckVhY2hBcnJheSIsImFycmF5IiwiaXRlcmF0b3IiLCJyZWNlaXZlciIsImkiLCJsZW4iLCJsZW5ndGgiLCJjYWxsIiwiZm9yRWFjaFN0cmluZyIsInN0cmluZyIsImNoYXJBdCIsImZvckVhY2hPYmplY3QiLCJvYmplY3QiLCJrIiwiaXNBcnJheSIsIngiLCJtb2R1bGUiLCJleHBvcnRzIiwiZm9yRWFjaCIsImxpc3QiLCJ0aGlzQXJnIiwiVHlwZUVycm9yIiwiYXJndW1lbnRzIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUVBLElBQUlBLGFBQWFDLFFBQVE7QUFFekIsSUFBSUMsUUFBUUMsT0FBT0MsU0FBUyxDQUFDQyxRQUFRO0FBQ3JDLElBQUlDLGlCQUFpQkgsT0FBT0MsU0FBUyxDQUFDRSxjQUFjO0FBRXBELDZLQUE2SyxHQUM3SyxJQUFJQyxlQUFlLFNBQVNBLGFBQWFDLEtBQUssRUFBRUMsUUFBUSxFQUFFQyxRQUFRO0lBQzlELElBQUssSUFBSUMsSUFBSSxHQUFHQyxNQUFNSixNQUFNSyxNQUFNLEVBQUVGLElBQUlDLEtBQUtELElBQUs7UUFDOUMsSUFBSUwsZUFBZVEsSUFBSSxDQUFDTixPQUFPRyxJQUFJO1lBQy9CLElBQUlELFlBQVksTUFBTTtnQkFDbEJELFNBQVNELEtBQUssQ0FBQ0csRUFBRSxFQUFFQSxHQUFHSDtZQUMxQixPQUFPO2dCQUNIQyxTQUFTSyxJQUFJLENBQUNKLFVBQVVGLEtBQUssQ0FBQ0csRUFBRSxFQUFFQSxHQUFHSDtZQUN6QztRQUNKO0lBQ0o7QUFDSjtBQUVBLHVLQUF1SyxHQUN2SyxJQUFJTyxnQkFBZ0IsU0FBU0EsY0FBY0MsTUFBTSxFQUFFUCxRQUFRLEVBQUVDLFFBQVE7SUFDakUsSUFBSyxJQUFJQyxJQUFJLEdBQUdDLE1BQU1JLE9BQU9ILE1BQU0sRUFBRUYsSUFBSUMsS0FBS0QsSUFBSztRQUMvQyxvQ0FBb0M7UUFDcEMsSUFBSUQsWUFBWSxNQUFNO1lBQ2xCRCxTQUFTTyxPQUFPQyxNQUFNLENBQUNOLElBQUlBLEdBQUdLO1FBQ2xDLE9BQU87WUFDSFAsU0FBU0ssSUFBSSxDQUFDSixVQUFVTSxPQUFPQyxNQUFNLENBQUNOLElBQUlBLEdBQUdLO1FBQ2pEO0lBQ0o7QUFDSjtBQUVBLG9KQUFvSixHQUNwSixJQUFJRSxnQkFBZ0IsU0FBU0EsY0FBY0MsTUFBTSxFQUFFVixRQUFRLEVBQUVDLFFBQVE7SUFDakUsSUFBSyxJQUFJVSxLQUFLRCxPQUFRO1FBQ2xCLElBQUliLGVBQWVRLElBQUksQ0FBQ0ssUUFBUUMsSUFBSTtZQUNoQyxJQUFJVixZQUFZLE1BQU07Z0JBQ2xCRCxTQUFTVSxNQUFNLENBQUNDLEVBQUUsRUFBRUEsR0FBR0Q7WUFDM0IsT0FBTztnQkFDSFYsU0FBU0ssSUFBSSxDQUFDSixVQUFVUyxNQUFNLENBQUNDLEVBQUUsRUFBRUEsR0FBR0Q7WUFDMUM7UUFDSjtJQUNKO0FBQ0o7QUFFQSxvREFBb0QsR0FDcEQsU0FBU0UsUUFBUUMsQ0FBQztJQUNkLE9BQU9wQixNQUFNWSxJQUFJLENBQUNRLE9BQU87QUFDN0I7QUFFQSxrQ0FBa0MsR0FDbENDLE9BQU9DLE9BQU8sR0FBRyxTQUFTQyxRQUFRQyxJQUFJLEVBQUVqQixRQUFRLEVBQUVrQixPQUFPO0lBQ3JELElBQUksQ0FBQzNCLFdBQVdTLFdBQVc7UUFDdkIsTUFBTSxJQUFJbUIsVUFBVTtJQUN4QjtJQUVBLElBQUlsQjtJQUNKLElBQUltQixVQUFVaEIsTUFBTSxJQUFJLEdBQUc7UUFDdkJILFdBQVdpQjtJQUNmO0lBRUEsSUFBSU4sUUFBUUssT0FBTztRQUNmbkIsYUFBYW1CLE1BQU1qQixVQUFVQztJQUNqQyxPQUFPLElBQUksT0FBT2dCLFNBQVMsVUFBVTtRQUNqQ1gsY0FBY1csTUFBTWpCLFVBQVVDO0lBQ2xDLE9BQU87UUFDSFEsY0FBY1EsTUFBTWpCLFVBQVVDO0lBQ2xDO0FBQ0oifQ==