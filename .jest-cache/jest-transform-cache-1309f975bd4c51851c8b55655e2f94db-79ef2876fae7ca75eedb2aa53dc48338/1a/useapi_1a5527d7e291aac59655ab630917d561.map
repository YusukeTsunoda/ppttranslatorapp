{"version":3,"sources":["/Users/yusuketsunoda/Documents/cursor/ppttranslatorapp/worktrees/4-test-automation/lib/hooks/use-api.ts"],"sourcesContent":["import useSWR, { SWRConfiguration, SWRResponse } from 'swr';\nimport { useState } from 'react';\nimport { handleClientError } from '@/lib/utils/error-handler';\n\n// フェッチャー関数の型\ntype Fetcher<Data> = (...args: any[]) => Promise<Data>;\n\n// APIリクエストの状態\ninterface ApiState<Data, Error> {\n  data: Data | undefined;\n  error: Error | undefined;\n  isLoading: boolean;\n  isValidating: boolean;\n  mutate: SWRResponse<Data, Error>['mutate'];\n}\n\n// APIリクエストのオプション\ninterface ApiOptions<Data, Error> extends SWRConfiguration<Data, Error> {\n  onSuccess?: (data: Data) => void;\n  onError?: (error: Error) => void;\n  errorHandler?: (error: unknown) => void;\n}\n\n/**\n * SWRを使用したAPIフック\n * @param key キャッシュキー\n * @param fetcher フェッチャー関数\n * @param options オプション\n */\nexport function useApi<Data = any, Error = any>(\n  key: string | null,\n  fetcher: Fetcher<Data>,\n  options: ApiOptions<Data, Error> = {},\n): ApiState<Data, Error> {\n  const { onSuccess, onError, errorHandler = handleClientError, ...swrOptions } = options;\n\n  // SWRフックを使用\n  const { data, error, isLoading, isValidating, mutate } = useSWR<Data, Error>(key, fetcher, {\n    ...swrOptions,\n    onSuccess: (data) => {\n      onSuccess?.(data);\n    },\n    onError: (error) => {\n      // エラーハンドリング\n      errorHandler(error);\n      onError?.(error);\n    },\n  });\n\n  return {\n    data,\n    error,\n    isLoading,\n    isValidating,\n    mutate,\n  };\n}\n\n/**\n * APIリクエストを送信するフック\n * @param url エンドポイントURL\n * @param options オプション\n */\nexport function useApiRequest<Data = any, Error = any>(\n  url: string,\n  options: ApiOptions<Data, Error> & {\n    method?: 'GET' | 'POST' | 'PUT' | 'DELETE';\n    body?: any;\n    headers?: Record<string, string>;\n  } = {},\n): ApiState<Data, Error> {\n  const { method = 'GET', body, headers, ...apiOptions } = options;\n\n  // キャッシュキーの生成\n  const cacheKey = method === 'GET' ? url : null;\n\n  // フェッチャー関数\n  const fetcher = async (): Promise<Data> => {\n    const response = await fetch(url, {\n      method,\n      headers: {\n        'Content-Type': 'application/json',\n        ...headers,\n      },\n      body: body ? JSON.stringify(body) : undefined,\n      credentials: 'include',\n    });\n\n    if (!response.ok) {\n      const errorData = await response.json().catch(() => ({}));\n      throw new Error(errorData.error || `Request failed with status ${response.status}`);\n    }\n\n    return response.json();\n  };\n\n  return useApi<Data, Error>(cacheKey, fetcher, apiOptions);\n}\n\n/**\n * APIミューテーションを実行するフック\n * @param url エンドポイントURL\n * @param options オプション\n */\nexport function useApiMutation<Data = any, Error = any>(\n  url: string,\n  options: Omit<ApiOptions<Data, Error>, 'onSuccess' | 'onError'> & {\n    method?: 'POST' | 'PUT' | 'DELETE';\n    headers?: Record<string, string>;\n  } = {},\n) {\n  const { method = 'POST', headers, errorHandler = handleClientError } = options;\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<Error | undefined>(undefined);\n  const [data, setData] = useState<Data | undefined>(undefined);\n\n  // ミューテーション関数\n  const mutate = async (\n    body: any,\n    callbacks?: {\n      onSuccess?: (data: Data) => void;\n      onError?: (error: Error) => void;\n    },\n  ): Promise<Data | undefined> => {\n    setIsLoading(true);\n    setError(undefined);\n\n    try {\n      const response = await fetch(url, {\n        method,\n        headers: {\n          'Content-Type': 'application/json',\n          ...headers,\n        },\n        body: JSON.stringify(body),\n        credentials: 'include',\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        throw new Error(errorData.error || `Request failed with status ${response.status}`);\n      }\n\n      const responseData = await response.json();\n      setData(responseData);\n      callbacks?.onSuccess?.(responseData);\n      return responseData;\n    } catch (err) {\n      const typedError = err as Error;\n      setError(typedError as any);\n      errorHandler(err);\n      callbacks?.onError?.(typedError as any);\n      return undefined;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return {\n    mutate,\n    isLoading,\n    error,\n    data,\n  };\n}\n\n/**\n * ユーザープロファイルを取得するフック\n */\nexport function useUserProfile() {\n  return useApi('/api/profile', async () => {\n    const response = await fetch('/api/profile', {\n      credentials: 'include',\n    });\n\n    if (!response.ok) {\n      throw new Error('Failed to fetch user profile');\n    }\n\n    return response.json();\n  });\n}\n\n/**\n * ユーザープロファイルを更新するフック\n */\nexport function useUpdateProfile() {\n  return useApiMutation('/api/profile/update');\n}\n\n/**\n * 翻訳リクエストを送信するフック\n */\nexport function useTranslate() {\n  return useApiMutation('/api/translate');\n}\n"],"names":["useApi","useApiMutation","useApiRequest","useTranslate","useUpdateProfile","useUserProfile","key","fetcher","options","onSuccess","onError","errorHandler","handleClientError","swrOptions","data","error","isLoading","isValidating","mutate","useSWR","url","method","body","headers","apiOptions","cacheKey","response","fetch","JSON","stringify","undefined","credentials","ok","errorData","json","catch","Error","status","setIsLoading","useState","setError","setData","callbacks","responseData","err","typedError"],"mappings":"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"}