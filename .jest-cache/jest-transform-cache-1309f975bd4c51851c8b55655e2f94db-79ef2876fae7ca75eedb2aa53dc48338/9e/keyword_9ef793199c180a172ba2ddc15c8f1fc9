b1b21e638c2213cd08c6e83a5d82c003
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.isKeyword = isKeyword;
exports.isReservedWord = isReservedWord;
exports.isStrictBindOnlyReservedWord = isStrictBindOnlyReservedWord;
exports.isStrictBindReservedWord = isStrictBindReservedWord;
exports.isStrictReservedWord = isStrictReservedWord;
const reservedWords = {
    keyword: [
        "break",
        "case",
        "catch",
        "continue",
        "debugger",
        "default",
        "do",
        "else",
        "finally",
        "for",
        "function",
        "if",
        "return",
        "switch",
        "throw",
        "try",
        "var",
        "const",
        "while",
        "with",
        "new",
        "this",
        "super",
        "class",
        "extends",
        "export",
        "import",
        "null",
        "true",
        "false",
        "in",
        "instanceof",
        "typeof",
        "void",
        "delete"
    ],
    strict: [
        "implements",
        "interface",
        "let",
        "package",
        "private",
        "protected",
        "public",
        "static",
        "yield"
    ],
    strictBind: [
        "eval",
        "arguments"
    ]
};
const keywords = new Set(reservedWords.keyword);
const reservedWordsStrictSet = new Set(reservedWords.strict);
const reservedWordsStrictBindSet = new Set(reservedWords.strictBind);
function isReservedWord(word, inModule) {
    return inModule && word === "await" || word === "enum";
}
function isStrictReservedWord(word, inModule) {
    return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);
}
function isStrictBindOnlyReservedWord(word) {
    return reservedWordsStrictBindSet.has(word);
}
function isStrictBindReservedWord(word, inModule) {
    return isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word);
}
function isKeyword(word) {
    return keywords.has(word);
} //# sourceMappingURL=keyword.js.map

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9rZXl3b3JkLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHJlc2VydmVkV29yZHMgPSB7XG4gIGtleXdvcmQ6IFtcbiAgICBcImJyZWFrXCIsXG4gICAgXCJjYXNlXCIsXG4gICAgXCJjYXRjaFwiLFxuICAgIFwiY29udGludWVcIixcbiAgICBcImRlYnVnZ2VyXCIsXG4gICAgXCJkZWZhdWx0XCIsXG4gICAgXCJkb1wiLFxuICAgIFwiZWxzZVwiLFxuICAgIFwiZmluYWxseVwiLFxuICAgIFwiZm9yXCIsXG4gICAgXCJmdW5jdGlvblwiLFxuICAgIFwiaWZcIixcbiAgICBcInJldHVyblwiLFxuICAgIFwic3dpdGNoXCIsXG4gICAgXCJ0aHJvd1wiLFxuICAgIFwidHJ5XCIsXG4gICAgXCJ2YXJcIixcbiAgICBcImNvbnN0XCIsXG4gICAgXCJ3aGlsZVwiLFxuICAgIFwid2l0aFwiLFxuICAgIFwibmV3XCIsXG4gICAgXCJ0aGlzXCIsXG4gICAgXCJzdXBlclwiLFxuICAgIFwiY2xhc3NcIixcbiAgICBcImV4dGVuZHNcIixcbiAgICBcImV4cG9ydFwiLFxuICAgIFwiaW1wb3J0XCIsXG4gICAgXCJudWxsXCIsXG4gICAgXCJ0cnVlXCIsXG4gICAgXCJmYWxzZVwiLFxuICAgIFwiaW5cIixcbiAgICBcImluc3RhbmNlb2ZcIixcbiAgICBcInR5cGVvZlwiLFxuICAgIFwidm9pZFwiLFxuICAgIFwiZGVsZXRlXCIsXG4gIF0sXG4gIHN0cmljdDogW1xuICAgIFwiaW1wbGVtZW50c1wiLFxuICAgIFwiaW50ZXJmYWNlXCIsXG4gICAgXCJsZXRcIixcbiAgICBcInBhY2thZ2VcIixcbiAgICBcInByaXZhdGVcIixcbiAgICBcInByb3RlY3RlZFwiLFxuICAgIFwicHVibGljXCIsXG4gICAgXCJzdGF0aWNcIixcbiAgICBcInlpZWxkXCIsXG4gIF0sXG4gIHN0cmljdEJpbmQ6IFtcImV2YWxcIiwgXCJhcmd1bWVudHNcIl0sXG59O1xuY29uc3Qga2V5d29yZHMgPSBuZXcgU2V0KHJlc2VydmVkV29yZHMua2V5d29yZCk7XG5jb25zdCByZXNlcnZlZFdvcmRzU3RyaWN0U2V0ID0gbmV3IFNldChyZXNlcnZlZFdvcmRzLnN0cmljdCk7XG5jb25zdCByZXNlcnZlZFdvcmRzU3RyaWN0QmluZFNldCA9IG5ldyBTZXQocmVzZXJ2ZWRXb3Jkcy5zdHJpY3RCaW5kKTtcblxuLyoqXG4gKiBDaGVja3MgaWYgd29yZCBpcyBhIHJlc2VydmVkIHdvcmQgaW4gbm9uLXN0cmljdCBtb2RlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc1Jlc2VydmVkV29yZCh3b3JkOiBzdHJpbmcsIGluTW9kdWxlOiBib29sZWFuKTogYm9vbGVhbiB7XG4gIHJldHVybiAoaW5Nb2R1bGUgJiYgd29yZCA9PT0gXCJhd2FpdFwiKSB8fCB3b3JkID09PSBcImVudW1cIjtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgd29yZCBpcyBhIHJlc2VydmVkIHdvcmQgaW4gbm9uLWJpbmRpbmcgc3RyaWN0IG1vZGVcbiAqXG4gKiBJbmNsdWRlcyBub24tc3RyaWN0IHJlc2VydmVkIHdvcmRzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc1N0cmljdFJlc2VydmVkV29yZCh3b3JkOiBzdHJpbmcsIGluTW9kdWxlOiBib29sZWFuKTogYm9vbGVhbiB7XG4gIHJldHVybiBpc1Jlc2VydmVkV29yZCh3b3JkLCBpbk1vZHVsZSkgfHwgcmVzZXJ2ZWRXb3Jkc1N0cmljdFNldC5oYXMod29yZCk7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIHdvcmQgaXMgYSByZXNlcnZlZCB3b3JkIGluIGJpbmRpbmcgc3RyaWN0IG1vZGUsIGJ1dCBpdCBpcyBhbGxvd2VkIGFzXG4gKiBhIG5vcm1hbCBpZGVudGlmaWVyLlxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNTdHJpY3RCaW5kT25seVJlc2VydmVkV29yZCh3b3JkOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgcmV0dXJuIHJlc2VydmVkV29yZHNTdHJpY3RCaW5kU2V0Lmhhcyh3b3JkKTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgd29yZCBpcyBhIHJlc2VydmVkIHdvcmQgaW4gYmluZGluZyBzdHJpY3QgbW9kZVxuICpcbiAqIEluY2x1ZGVzIG5vbi1zdHJpY3QgcmVzZXJ2ZWQgd29yZHMgYW5kIG5vbi1iaW5kaW5nIHN0cmljdCByZXNlcnZlZCB3b3Jkc1xuICovXG5leHBvcnQgZnVuY3Rpb24gaXNTdHJpY3RCaW5kUmVzZXJ2ZWRXb3JkKFxuICB3b3JkOiBzdHJpbmcsXG4gIGluTW9kdWxlOiBib29sZWFuLFxuKTogYm9vbGVhbiB7XG4gIHJldHVybiAoXG4gICAgaXNTdHJpY3RSZXNlcnZlZFdvcmQod29yZCwgaW5Nb2R1bGUpIHx8IGlzU3RyaWN0QmluZE9ubHlSZXNlcnZlZFdvcmQod29yZClcbiAgKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzS2V5d29yZCh3b3JkOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgcmV0dXJuIGtleXdvcmRzLmhhcyh3b3JkKTtcbn1cbiJdLCJuYW1lcyI6WyJyZXNlcnZlZFdvcmRzIiwia2V5d29yZCIsInN0cmljdCIsInN0cmljdEJpbmQiLCJrZXl3b3JkcyIsIlNldCIsInJlc2VydmVkV29yZHNTdHJpY3RTZXQiLCJyZXNlcnZlZFdvcmRzU3RyaWN0QmluZFNldCIsImlzUmVzZXJ2ZWRXb3JkIiwid29yZCIsImluTW9kdWxlIiwiaXNTdHJpY3RSZXNlcnZlZFdvcmQiLCJoYXMiLCJpc1N0cmljdEJpbmRPbmx5UmVzZXJ2ZWRXb3JkIiwiaXNTdHJpY3RCaW5kUmVzZXJ2ZWRXb3JkIiwiaXNLZXl3b3JkIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQSxNQUFNQSxhQUFhLEdBQUc7SUFDcEJDLE9BQU8sRUFBRTtRQUNQLE9BQU87UUFDUCxNQUFNO1FBQ04sT0FBTztRQUNQLFVBQVU7UUFDVixVQUFVO1FBQ1YsU0FBUztRQUNULElBQUk7UUFDSixNQUFNO1FBQ04sU0FBUztRQUNULEtBQUs7UUFDTCxVQUFVO1FBQ1YsSUFBSTtRQUNKLFFBQVE7UUFDUixRQUFRO1FBQ1IsT0FBTztRQUNQLEtBQUs7UUFDTCxLQUFLO1FBQ0wsT0FBTztRQUNQLE9BQU87UUFDUCxNQUFNO1FBQ04sS0FBSztRQUNMLE1BQU07UUFDTixPQUFPO1FBQ1AsT0FBTztRQUNQLFNBQVM7UUFDVCxRQUFRO1FBQ1IsUUFBUTtRQUNSLE1BQU07UUFDTixNQUFNO1FBQ04sT0FBTztRQUNQLElBQUk7UUFDSixZQUFZO1FBQ1osUUFBUTtRQUNSLE1BQU07UUFDTixRQUFRO0tBQ1Q7SUFDREMsTUFBTSxFQUFFO1FBQ04sWUFBWTtRQUNaLFdBQVc7UUFDWCxLQUFLO1FBQ0wsU0FBUztRQUNULFNBQVM7UUFDVCxXQUFXO1FBQ1gsUUFBUTtRQUNSLFFBQVE7UUFDUixPQUFPO0tBQ1I7SUFDREMsVUFBVSxFQUFFO1FBQUMsTUFBTTtRQUFFLFdBQVc7S0FBQTtBQUNsQyxDQUFDO0FBQ0QsTUFBTUMsUUFBUSxHQUFHLElBQUlDLEdBQUcsQ0FBQ0wsYUFBYSxDQUFDQyxPQUFPLENBQUM7QUFDL0MsTUFBTUssc0JBQXNCLEdBQUcsSUFBSUQsR0FBRyxDQUFDTCxhQUFhLENBQUNFLE1BQU0sQ0FBQztBQUM1RCxNQUFNSywwQkFBMEIsR0FBRyxJQUFJRixHQUFHLENBQUNMLGFBQWEsQ0FBQ0csVUFBVSxDQUFDO0FBSzdELFNBQVNLLGNBQWNBLENBQUNDLElBQVksRUFBRUMsUUFBaUIsRUFBVztJQUN2RSxPQUFRQSxRQUFRLElBQUlELElBQUksS0FBSyxPQUFPLElBQUtBLElBQUksS0FBSyxNQUFNO0FBQzFEO0FBT08sU0FBU0Usb0JBQW9CQSxDQUFDRixJQUFZLEVBQUVDLFFBQWlCLEVBQVc7SUFDN0UsT0FBT0YsY0FBYyxDQUFDQyxJQUFJLEVBQUVDLFFBQVEsQ0FBQyxJQUFJSixzQkFBc0IsQ0FBQ00sR0FBRyxDQUFDSCxJQUFJLENBQUM7QUFDM0U7QUFNTyxTQUFTSSw0QkFBNEJBLENBQUNKLElBQVksRUFBVztJQUNsRSxPQUFPRiwwQkFBMEIsQ0FBQ0ssR0FBRyxDQUFDSCxJQUFJLENBQUM7QUFDN0M7QUFPTyxTQUFTSyx3QkFBd0JBLENBQ3RDTCxJQUFZLEVBQ1pDLFFBQWlCLEVBQ1I7SUFDVCxPQUNFQyxvQkFBb0IsQ0FBQ0YsSUFBSSxFQUFFQyxRQUFRLENBQUMsSUFBSUcsNEJBQTRCLENBQUNKLElBQUksQ0FBQztBQUU5RTtBQUVPLFNBQVNNLFNBQVNBLENBQUNOLElBQVksRUFBVztJQUMvQyxPQUFPTCxRQUFRLENBQUNRLEdBQUcsQ0FBQ0gsSUFBSSxDQUFDO0FBQzNCIn0=