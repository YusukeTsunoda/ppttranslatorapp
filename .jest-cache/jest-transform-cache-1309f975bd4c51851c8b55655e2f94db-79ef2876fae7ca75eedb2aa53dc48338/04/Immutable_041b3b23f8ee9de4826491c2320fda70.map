{"version":3,"sources":["/Users/yusuketsunoda/Documents/cursor/ppttranslatorapp/node_modules/pretty-format/build/plugins/Immutable.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.test = exports.serialize = exports.default = void 0;\n\nvar _collections = require('../collections');\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n// SENTINEL constants are from https://github.com/facebook/immutable-js\nconst IS_ITERABLE_SENTINEL = '@@__IMMUTABLE_ITERABLE__@@';\nconst IS_LIST_SENTINEL = '@@__IMMUTABLE_LIST__@@';\nconst IS_KEYED_SENTINEL = '@@__IMMUTABLE_KEYED__@@';\nconst IS_MAP_SENTINEL = '@@__IMMUTABLE_MAP__@@';\nconst IS_ORDERED_SENTINEL = '@@__IMMUTABLE_ORDERED__@@';\nconst IS_RECORD_SENTINEL = '@@__IMMUTABLE_RECORD__@@'; // immutable v4\n\nconst IS_SEQ_SENTINEL = '@@__IMMUTABLE_SEQ__@@';\nconst IS_SET_SENTINEL = '@@__IMMUTABLE_SET__@@';\nconst IS_STACK_SENTINEL = '@@__IMMUTABLE_STACK__@@';\n\nconst getImmutableName = name => 'Immutable.' + name;\n\nconst printAsLeaf = name => '[' + name + ']';\n\nconst SPACE = ' ';\nconst LAZY = 'â€¦'; // Seq is lazy if it calls a method like filter\n\nconst printImmutableEntries = (\n  val,\n  config,\n  indentation,\n  depth,\n  refs,\n  printer,\n  type\n) =>\n  ++depth > config.maxDepth\n    ? printAsLeaf(getImmutableName(type))\n    : getImmutableName(type) +\n      SPACE +\n      '{' +\n      (0, _collections.printIteratorEntries)(\n        val.entries(),\n        config,\n        indentation,\n        depth,\n        refs,\n        printer\n      ) +\n      '}'; // Record has an entries method because it is a collection in immutable v3.\n// Return an iterator for Immutable Record from version v3 or v4.\n\nfunction getRecordEntries(val) {\n  let i = 0;\n  return {\n    next() {\n      if (i < val._keys.length) {\n        const key = val._keys[i++];\n        return {\n          done: false,\n          value: [key, val.get(key)]\n        };\n      }\n\n      return {\n        done: true,\n        value: undefined\n      };\n    }\n  };\n}\n\nconst printImmutableRecord = (\n  val,\n  config,\n  indentation,\n  depth,\n  refs,\n  printer\n) => {\n  // _name property is defined only for an Immutable Record instance\n  // which was constructed with a second optional descriptive name arg\n  const name = getImmutableName(val._name || 'Record');\n  return ++depth > config.maxDepth\n    ? printAsLeaf(name)\n    : name +\n        SPACE +\n        '{' +\n        (0, _collections.printIteratorEntries)(\n          getRecordEntries(val),\n          config,\n          indentation,\n          depth,\n          refs,\n          printer\n        ) +\n        '}';\n};\n\nconst printImmutableSeq = (val, config, indentation, depth, refs, printer) => {\n  const name = getImmutableName('Seq');\n\n  if (++depth > config.maxDepth) {\n    return printAsLeaf(name);\n  }\n\n  if (val[IS_KEYED_SENTINEL]) {\n    return (\n      name +\n      SPACE +\n      '{' + // from Immutable collection of entries or from ECMAScript object\n      (val._iter || val._object\n        ? (0, _collections.printIteratorEntries)(\n            val.entries(),\n            config,\n            indentation,\n            depth,\n            refs,\n            printer\n          )\n        : LAZY) +\n      '}'\n    );\n  }\n\n  return (\n    name +\n    SPACE +\n    '[' +\n    (val._iter || // from Immutable collection of values\n    val._array || // from ECMAScript array\n    val._collection || // from ECMAScript collection in immutable v4\n    val._iterable // from ECMAScript collection in immutable v3\n      ? (0, _collections.printIteratorValues)(\n          val.values(),\n          config,\n          indentation,\n          depth,\n          refs,\n          printer\n        )\n      : LAZY) +\n    ']'\n  );\n};\n\nconst printImmutableValues = (\n  val,\n  config,\n  indentation,\n  depth,\n  refs,\n  printer,\n  type\n) =>\n  ++depth > config.maxDepth\n    ? printAsLeaf(getImmutableName(type))\n    : getImmutableName(type) +\n      SPACE +\n      '[' +\n      (0, _collections.printIteratorValues)(\n        val.values(),\n        config,\n        indentation,\n        depth,\n        refs,\n        printer\n      ) +\n      ']';\n\nconst serialize = (val, config, indentation, depth, refs, printer) => {\n  if (val[IS_MAP_SENTINEL]) {\n    return printImmutableEntries(\n      val,\n      config,\n      indentation,\n      depth,\n      refs,\n      printer,\n      val[IS_ORDERED_SENTINEL] ? 'OrderedMap' : 'Map'\n    );\n  }\n\n  if (val[IS_LIST_SENTINEL]) {\n    return printImmutableValues(\n      val,\n      config,\n      indentation,\n      depth,\n      refs,\n      printer,\n      'List'\n    );\n  }\n\n  if (val[IS_SET_SENTINEL]) {\n    return printImmutableValues(\n      val,\n      config,\n      indentation,\n      depth,\n      refs,\n      printer,\n      val[IS_ORDERED_SENTINEL] ? 'OrderedSet' : 'Set'\n    );\n  }\n\n  if (val[IS_STACK_SENTINEL]) {\n    return printImmutableValues(\n      val,\n      config,\n      indentation,\n      depth,\n      refs,\n      printer,\n      'Stack'\n    );\n  }\n\n  if (val[IS_SEQ_SENTINEL]) {\n    return printImmutableSeq(val, config, indentation, depth, refs, printer);\n  } // For compatibility with immutable v3 and v4, let record be the default.\n\n  return printImmutableRecord(val, config, indentation, depth, refs, printer);\n}; // Explicitly comparing sentinel properties to true avoids false positive\n// when mock identity-obj-proxy returns the key as the value for any key.\n\nexports.serialize = serialize;\n\nconst test = val =>\n  val &&\n  (val[IS_ITERABLE_SENTINEL] === true || val[IS_RECORD_SENTINEL] === true);\n\nexports.test = test;\nconst plugin = {\n  serialize,\n  test\n};\nvar _default = plugin;\nexports.default = _default;\n"],"names":["Object","defineProperty","exports","value","test","serialize","default","_collections","require","IS_ITERABLE_SENTINEL","IS_LIST_SENTINEL","IS_KEYED_SENTINEL","IS_MAP_SENTINEL","IS_ORDERED_SENTINEL","IS_RECORD_SENTINEL","IS_SEQ_SENTINEL","IS_SET_SENTINEL","IS_STACK_SENTINEL","getImmutableName","name","printAsLeaf","SPACE","LAZY","printImmutableEntries","val","config","indentation","depth","refs","printer","type","maxDepth","printIteratorEntries","entries","getRecordEntries","i","next","_keys","length","key","done","get","undefined","printImmutableRecord","_name","printImmutableSeq","_iter","_object","_array","_collection","_iterable","printIteratorValues","values","printImmutableValues","plugin","_default"],"mappings":"AAAA;AAEAA,OAAOC,cAAc,CAACC,SAAS,cAAc;IAC3CC,OAAO;AACT;AACAD,QAAQE,IAAI,GAAGF,QAAQG,SAAS,GAAGH,QAAQI,OAAO,GAAG,KAAK;AAE1D,IAAIC,eAAeC,QAAQ;AAE3B;;;;;CAKC,GACD,uEAAuE;AACvE,MAAMC,uBAAuB;AAC7B,MAAMC,mBAAmB;AACzB,MAAMC,oBAAoB;AAC1B,MAAMC,kBAAkB;AACxB,MAAMC,sBAAsB;AAC5B,MAAMC,qBAAqB,4BAA4B,eAAe;AAEtE,MAAMC,kBAAkB;AACxB,MAAMC,kBAAkB;AACxB,MAAMC,oBAAoB;AAE1B,MAAMC,mBAAmBC,CAAAA,OAAQ,eAAeA;AAEhD,MAAMC,cAAcD,CAAAA,OAAQ,MAAMA,OAAO;AAEzC,MAAME,QAAQ;AACd,MAAMC,OAAO,KAAK,+CAA+C;AAEjE,MAAMC,wBAAwB,CAC5BC,KACAC,QACAC,aACAC,OACAC,MACAC,SACAC,OAEA,EAAEH,QAAQF,OAAOM,QAAQ,GACrBX,YAAYF,iBAAiBY,SAC7BZ,iBAAiBY,QACjBT,QACA,MACA,AAAC,CAAA,GAAGd,aAAayB,oBAAoB,AAAD,EAClCR,IAAIS,OAAO,IACXR,QACAC,aACAC,OACAC,MACAC,WAEF,KAAK,2EAA2E;AACtF,iEAAiE;AAEjE,SAASK,iBAAiBV,GAAG;IAC3B,IAAIW,IAAI;IACR,OAAO;QACLC;YACE,IAAID,IAAIX,IAAIa,KAAK,CAACC,MAAM,EAAE;gBACxB,MAAMC,MAAMf,IAAIa,KAAK,CAACF,IAAI;gBAC1B,OAAO;oBACLK,MAAM;oBACNrC,OAAO;wBAACoC;wBAAKf,IAAIiB,GAAG,CAACF;qBAAK;gBAC5B;YACF;YAEA,OAAO;gBACLC,MAAM;gBACNrC,OAAOuC;YACT;QACF;IACF;AACF;AAEA,MAAMC,uBAAuB,CAC3BnB,KACAC,QACAC,aACAC,OACAC,MACAC;IAEA,kEAAkE;IAClE,oEAAoE;IACpE,MAAMV,OAAOD,iBAAiBM,IAAIoB,KAAK,IAAI;IAC3C,OAAO,EAAEjB,QAAQF,OAAOM,QAAQ,GAC5BX,YAAYD,QACZA,OACEE,QACA,MACA,AAAC,CAAA,GAAGd,aAAayB,oBAAoB,AAAD,EAClCE,iBAAiBV,MACjBC,QACAC,aACAC,OACAC,MACAC,WAEF;AACR;AAEA,MAAMgB,oBAAoB,CAACrB,KAAKC,QAAQC,aAAaC,OAAOC,MAAMC;IAChE,MAAMV,OAAOD,iBAAiB;IAE9B,IAAI,EAAES,QAAQF,OAAOM,QAAQ,EAAE;QAC7B,OAAOX,YAAYD;IACrB;IAEA,IAAIK,GAAG,CAACb,kBAAkB,EAAE;QAC1B,OACEQ,OACAE,QACA,MAAM,iEAAiE;QACtEG,CAAAA,IAAIsB,KAAK,IAAItB,IAAIuB,OAAO,GACrB,AAAC,CAAA,GAAGxC,aAAayB,oBAAoB,AAAD,EAClCR,IAAIS,OAAO,IACXR,QACAC,aACAC,OACAC,MACAC,WAEFP,IAAG,IACP;IAEJ;IAEA,OACEH,OACAE,QACA,MACCG,CAAAA,IAAIsB,KAAK,IAAI,sCAAsC;IACpDtB,IAAIwB,MAAM,IAAI,wBAAwB;IACtCxB,IAAIyB,WAAW,IAAI,6CAA6C;IAChEzB,IAAI0B,SAAS,CAAC,6CAA6C;OACvD,AAAC,CAAA,GAAG3C,aAAa4C,mBAAmB,AAAD,EACjC3B,IAAI4B,MAAM,IACV3B,QACAC,aACAC,OACAC,MACAC,WAEFP,IAAG,IACP;AAEJ;AAEA,MAAM+B,uBAAuB,CAC3B7B,KACAC,QACAC,aACAC,OACAC,MACAC,SACAC,OAEA,EAAEH,QAAQF,OAAOM,QAAQ,GACrBX,YAAYF,iBAAiBY,SAC7BZ,iBAAiBY,QACjBT,QACA,MACA,AAAC,CAAA,GAAGd,aAAa4C,mBAAmB,AAAD,EACjC3B,IAAI4B,MAAM,IACV3B,QACAC,aACAC,OACAC,MACAC,WAEF;AAEN,MAAMxB,YAAY,CAACmB,KAAKC,QAAQC,aAAaC,OAAOC,MAAMC;IACxD,IAAIL,GAAG,CAACZ,gBAAgB,EAAE;QACxB,OAAOW,sBACLC,KACAC,QACAC,aACAC,OACAC,MACAC,SACAL,GAAG,CAACX,oBAAoB,GAAG,eAAe;IAE9C;IAEA,IAAIW,GAAG,CAACd,iBAAiB,EAAE;QACzB,OAAO2C,qBACL7B,KACAC,QACAC,aACAC,OACAC,MACAC,SACA;IAEJ;IAEA,IAAIL,GAAG,CAACR,gBAAgB,EAAE;QACxB,OAAOqC,qBACL7B,KACAC,QACAC,aACAC,OACAC,MACAC,SACAL,GAAG,CAACX,oBAAoB,GAAG,eAAe;IAE9C;IAEA,IAAIW,GAAG,CAACP,kBAAkB,EAAE;QAC1B,OAAOoC,qBACL7B,KACAC,QACAC,aACAC,OACAC,MACAC,SACA;IAEJ;IAEA,IAAIL,GAAG,CAACT,gBAAgB,EAAE;QACxB,OAAO8B,kBAAkBrB,KAAKC,QAAQC,aAAaC,OAAOC,MAAMC;IAClE,EAAE,yEAAyE;IAE3E,OAAOc,qBAAqBnB,KAAKC,QAAQC,aAAaC,OAAOC,MAAMC;AACrE,GAAG,yEAAyE;AAC5E,yEAAyE;AAEzE3B,QAAQG,SAAS,GAAGA;AAEpB,MAAMD,OAAOoB,CAAAA,MACXA,OACCA,CAAAA,GAAG,CAACf,qBAAqB,KAAK,QAAQe,GAAG,CAACV,mBAAmB,KAAK,IAAG;AAExEZ,QAAQE,IAAI,GAAGA;AACf,MAAMkD,SAAS;IACbjD;IACAD;AACF;AACA,IAAImD,WAAWD;AACfpD,QAAQI,OAAO,GAAGiD"}