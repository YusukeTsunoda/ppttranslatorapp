4502a2841347382762467cc6d1c18995
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    AppError: function() {
        return AppError;
    },
    ErrorCodes: function() {
        return ErrorCodes;
    },
    createAuthError: function() {
        return createAuthError;
    },
    createDatabaseError: function() {
        return createDatabaseError;
    },
    createForbiddenError: function() {
        return createForbiddenError;
    },
    createNotFoundError: function() {
        return createNotFoundError;
    },
    createRateLimitError: function() {
        return createRateLimitError;
    },
    createValidationError: function() {
        return createValidationError;
    },
    getErrorMessage: function() {
        return getErrorMessage;
    },
    handleApiError: function() {
        return handleApiError;
    },
    handleClientError: function() {
        return handleClientError;
    },
    handleError: function() {
        return handleError;
    },
    isAppError: function() {
        return isAppError;
    },
    mapSessionErrorToAppError: function() {
        return mapSessionErrorToAppError;
    }
});
const _usetoast = require("@/components/ui/use-toast");
class AppError extends Error {
    type;
    code;
    context;
    originalError;
    constructor(details){
        super(details.message);
        Object.setPrototypeOf(this, AppError.prototype);
        this.name = 'AppError';
        this.type = details.type;
        this.code = details.code;
        this.context = details.context;
        this.originalError = details.originalError;
    }
}
const ErrorCodes = {
    UNAUTHORIZED: 'UNAUTHORIZED',
    FORBIDDEN: 'FORBIDDEN',
    NOT_FOUND: 'NOT_FOUND',
    VALIDATION_ERROR: 'VALIDATION_ERROR',
    RATE_LIMIT_EXCEEDED: 'RATE_LIMIT_EXCEEDED',
    DATABASE_ERROR: 'DATABASE_ERROR',
    API_ERROR: 'API_ERROR',
    NETWORK_ERROR: 'NETWORK_ERROR',
    UNKNOWN_ERROR: 'UNKNOWN_ERROR'
};
function isAppError(error) {
    return error instanceof AppError;
}
function handleError(error) {
    if (isAppError(error)) {
        return error;
    }
    if (error instanceof Error) {
        // ネットワークエラーの検出
        if (error.name === 'NetworkError' || error.message.includes('network')) {
            return new AppError({
                type: 'NETWORK',
                message: 'ネットワークエラーが発生しました。インターネット接続を確認してください。',
                originalError: error
            });
        }
        // データベースエラーの検出
        if (error.message.includes('prisma') || error.message.includes('database')) {
            return new AppError({
                type: 'SERVER',
                message: 'データベースエラーが発生しました。しばらく待ってから再試行してください。',
                code: ErrorCodes.DATABASE_ERROR,
                originalError: error
            });
        }
        // API関連エラーの検出
        if (error.message.includes('api') || error.message.includes('status')) {
            return new AppError({
                type: 'SERVER',
                message: 'APIエラーが発生しました。しばらく待ってから再試行してください。',
                code: ErrorCodes.API_ERROR,
                originalError: error
            });
        }
    }
    // 不明なエラー
    return new AppError({
        type: 'UNKNOWN',
        message: '予期せぬエラーが発生しました。しばらく待ってから再試行してください。',
        code: ErrorCodes.UNKNOWN_ERROR
    });
}
function getErrorMessage(error) {
    if (error instanceof Error && error.message) {
        return error.message;
    }
    return 'Unknown error occurred';
}
function createValidationError(message, context) {
    return new AppError({
        type: 'VALIDATION',
        message,
        code: ErrorCodes.VALIDATION_ERROR,
        context
    });
}
function createAuthError(message, code, context) {
    return new AppError({
        type: 'AUTH',
        message,
        code,
        context
    });
}
function createForbiddenError(message = 'この操作を実行する権限がありません。') {
    return new AppError({
        type: 'PERMISSION',
        message,
        code: ErrorCodes.FORBIDDEN
    });
}
function createNotFoundError(message) {
    return new AppError({
        type: 'NOT_FOUND',
        message,
        code: ErrorCodes.NOT_FOUND
    });
}
function createRateLimitError(message = 'リクエスト制限を超えました。しばらく待ってから再試行してください。') {
    return new AppError({
        type: 'SERVER',
        message,
        code: ErrorCodes.RATE_LIMIT_EXCEEDED
    });
}
function createDatabaseError(message, originalError) {
    return new AppError({
        type: 'SERVER',
        message,
        code: ErrorCodes.DATABASE_ERROR,
        originalError
    });
}
function mapSessionErrorToAppError(sessionError, message) {
    switch(sessionError){
        case 'EXPIRED':
            return createAuthError('セッションの有効期限が切れました', 'SESSION_EXPIRED');
        case 'INVALID':
            return createAuthError('無効なセッションです', 'SESSION_INVALID');
        case 'UNAUTHORIZED':
            return createAuthError('認証が必要です', 'UNAUTHORIZED');
        case 'NETWORK':
            return new AppError({
                type: 'NETWORK',
                message: 'ネットワークエラーが発生しました',
                originalError: new Error(message)
            });
        default:
            return createAuthError(message, 'AUTH_ERROR');
    }
}
function handleClientError(error, defaultMessage = '予期しないエラーが発生しました') {
    console.error('Client error:', error);
    let errorMessage = defaultMessage;
    let errorType = 'destructive';
    if (error instanceof AppError) {
        errorMessage = error.message;
        // エラータイプに応じた処理
        switch(error.type){
            case 'AUTH':
                break;
            case 'VALIDATION':
                // バリデーションエラーは警告として表示
                errorType = 'default';
                break;
            case 'NETWORK':
                break;
            default:
                break;
        }
    } else if (error instanceof Error) {
        errorMessage = error.message;
    }
    // トースト通知
    (0, _usetoast.toast)({
        title: 'エラー',
        description: errorMessage,
        variant: errorType
    });
}
function handleApiError(error, defaultMessage = 'Internal Server Error') {
    console.error('API error:', error);
    if (error instanceof AppError) {
        // エラータイプに応じたステータスコードを設定
        let status = 500;
        switch(error.type){
            case 'AUTH':
                status = 401;
                break;
            case 'VALIDATION':
                status = 400;
                break;
            case 'NOT_FOUND':
                status = 404;
                break;
            case 'PERMISSION':
                status = 403;
                break;
            case 'NETWORK':
                status = 502;
                break;
            default:
                status = 500;
        }
        return {
            error: error.message,
            code: error.code,
            status
        };
    }
    if (error instanceof Error) {
        return {
            error: error.message,
            status: 500
        };
    }
    return {
        error: defaultMessage,
        status: 500
    };
}

//# sourceMappingURL=data:application/json;base64,