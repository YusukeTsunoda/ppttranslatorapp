58df2e78a73e700d8ecc1da0423b0852
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.queryByPlaceholderText = exports.queryAllByPlaceholderText = exports.getByPlaceholderText = exports.getAllByPlaceholderText = exports.findByPlaceholderText = exports.findAllByPlaceholderText = void 0;
var _queryHelpers = require("../query-helpers");
var _helpers = require("../helpers");
var _allUtils = require("./all-utils");
const queryAllByPlaceholderText = (...args)=>{
    (0, _helpers.checkContainerType)(args[0]);
    return (0, _allUtils.queryAllByAttribute)('placeholder', ...args);
};
const getMultipleError = (c, text)=>`Found multiple elements with the placeholder text of: ${text}`;
const getMissingError = (c, text)=>`Unable to find an element with the placeholder text of: ${text}`;
const queryAllByPlaceholderTextWithSuggestions = exports.queryAllByPlaceholderText = (0, _queryHelpers.wrapAllByQueryWithSuggestion)(queryAllByPlaceholderText, queryAllByPlaceholderText.name, 'queryAll');
const [queryByPlaceholderText, getAllByPlaceholderText, getByPlaceholderText, findAllByPlaceholderText, findByPlaceholderText] = (0, _allUtils.buildQueries)(queryAllByPlaceholderText, getMultipleError, getMissingError);
exports.findByPlaceholderText = findByPlaceholderText;
exports.findAllByPlaceholderText = findAllByPlaceholderText;
exports.getByPlaceholderText = getByPlaceholderText;
exports.getAllByPlaceholderText = getAllByPlaceholderText;
exports.queryByPlaceholderText = queryByPlaceholderText;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy95dXN1a2V0c3Vub2RhL0RvY3VtZW50cy9jdXJzb3IvcHB0dHJhbnNsYXRvcmFwcC9ub2RlX21vZHVsZXMvQHRlc3RpbmctbGlicmFyeS9yZWFjdC9ub2RlX21vZHVsZXMvQHRlc3RpbmctbGlicmFyeS9kb20vZGlzdC9xdWVyaWVzL3BsYWNlaG9sZGVyLXRleHQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLnF1ZXJ5QnlQbGFjZWhvbGRlclRleHQgPSBleHBvcnRzLnF1ZXJ5QWxsQnlQbGFjZWhvbGRlclRleHQgPSBleHBvcnRzLmdldEJ5UGxhY2Vob2xkZXJUZXh0ID0gZXhwb3J0cy5nZXRBbGxCeVBsYWNlaG9sZGVyVGV4dCA9IGV4cG9ydHMuZmluZEJ5UGxhY2Vob2xkZXJUZXh0ID0gZXhwb3J0cy5maW5kQWxsQnlQbGFjZWhvbGRlclRleHQgPSB2b2lkIDA7XG52YXIgX3F1ZXJ5SGVscGVycyA9IHJlcXVpcmUoXCIuLi9xdWVyeS1oZWxwZXJzXCIpO1xudmFyIF9oZWxwZXJzID0gcmVxdWlyZShcIi4uL2hlbHBlcnNcIik7XG52YXIgX2FsbFV0aWxzID0gcmVxdWlyZShcIi4vYWxsLXV0aWxzXCIpO1xuY29uc3QgcXVlcnlBbGxCeVBsYWNlaG9sZGVyVGV4dCA9ICguLi5hcmdzKSA9PiB7XG4gICgwLCBfaGVscGVycy5jaGVja0NvbnRhaW5lclR5cGUpKGFyZ3NbMF0pO1xuICByZXR1cm4gKDAsIF9hbGxVdGlscy5xdWVyeUFsbEJ5QXR0cmlidXRlKSgncGxhY2Vob2xkZXInLCAuLi5hcmdzKTtcbn07XG5jb25zdCBnZXRNdWx0aXBsZUVycm9yID0gKGMsIHRleHQpID0+IGBGb3VuZCBtdWx0aXBsZSBlbGVtZW50cyB3aXRoIHRoZSBwbGFjZWhvbGRlciB0ZXh0IG9mOiAke3RleHR9YDtcbmNvbnN0IGdldE1pc3NpbmdFcnJvciA9IChjLCB0ZXh0KSA9PiBgVW5hYmxlIHRvIGZpbmQgYW4gZWxlbWVudCB3aXRoIHRoZSBwbGFjZWhvbGRlciB0ZXh0IG9mOiAke3RleHR9YDtcbmNvbnN0IHF1ZXJ5QWxsQnlQbGFjZWhvbGRlclRleHRXaXRoU3VnZ2VzdGlvbnMgPSBleHBvcnRzLnF1ZXJ5QWxsQnlQbGFjZWhvbGRlclRleHQgPSAoMCwgX3F1ZXJ5SGVscGVycy53cmFwQWxsQnlRdWVyeVdpdGhTdWdnZXN0aW9uKShxdWVyeUFsbEJ5UGxhY2Vob2xkZXJUZXh0LCBxdWVyeUFsbEJ5UGxhY2Vob2xkZXJUZXh0Lm5hbWUsICdxdWVyeUFsbCcpO1xuY29uc3QgW3F1ZXJ5QnlQbGFjZWhvbGRlclRleHQsIGdldEFsbEJ5UGxhY2Vob2xkZXJUZXh0LCBnZXRCeVBsYWNlaG9sZGVyVGV4dCwgZmluZEFsbEJ5UGxhY2Vob2xkZXJUZXh0LCBmaW5kQnlQbGFjZWhvbGRlclRleHRdID0gKDAsIF9hbGxVdGlscy5idWlsZFF1ZXJpZXMpKHF1ZXJ5QWxsQnlQbGFjZWhvbGRlclRleHQsIGdldE11bHRpcGxlRXJyb3IsIGdldE1pc3NpbmdFcnJvcik7XG5leHBvcnRzLmZpbmRCeVBsYWNlaG9sZGVyVGV4dCA9IGZpbmRCeVBsYWNlaG9sZGVyVGV4dDtcbmV4cG9ydHMuZmluZEFsbEJ5UGxhY2Vob2xkZXJUZXh0ID0gZmluZEFsbEJ5UGxhY2Vob2xkZXJUZXh0O1xuZXhwb3J0cy5nZXRCeVBsYWNlaG9sZGVyVGV4dCA9IGdldEJ5UGxhY2Vob2xkZXJUZXh0O1xuZXhwb3J0cy5nZXRBbGxCeVBsYWNlaG9sZGVyVGV4dCA9IGdldEFsbEJ5UGxhY2Vob2xkZXJUZXh0O1xuZXhwb3J0cy5xdWVyeUJ5UGxhY2Vob2xkZXJUZXh0ID0gcXVlcnlCeVBsYWNlaG9sZGVyVGV4dDsiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJxdWVyeUJ5UGxhY2Vob2xkZXJUZXh0IiwicXVlcnlBbGxCeVBsYWNlaG9sZGVyVGV4dCIsImdldEJ5UGxhY2Vob2xkZXJUZXh0IiwiZ2V0QWxsQnlQbGFjZWhvbGRlclRleHQiLCJmaW5kQnlQbGFjZWhvbGRlclRleHQiLCJmaW5kQWxsQnlQbGFjZWhvbGRlclRleHQiLCJfcXVlcnlIZWxwZXJzIiwicmVxdWlyZSIsIl9oZWxwZXJzIiwiX2FsbFV0aWxzIiwiYXJncyIsImNoZWNrQ29udGFpbmVyVHlwZSIsInF1ZXJ5QWxsQnlBdHRyaWJ1dGUiLCJnZXRNdWx0aXBsZUVycm9yIiwiYyIsInRleHQiLCJnZXRNaXNzaW5nRXJyb3IiLCJxdWVyeUFsbEJ5UGxhY2Vob2xkZXJUZXh0V2l0aFN1Z2dlc3Rpb25zIiwid3JhcEFsbEJ5UXVlcnlXaXRoU3VnZ2VzdGlvbiIsIm5hbWUiLCJidWlsZFF1ZXJpZXMiXSwibWFwcGluZ3MiOiJBQUFBO0FBRUFBLE9BQU9DLGNBQWMsQ0FBQ0MsU0FBUyxjQUFjO0lBQzNDQyxPQUFPO0FBQ1Q7QUFDQUQsUUFBUUUsc0JBQXNCLEdBQUdGLFFBQVFHLHlCQUF5QixHQUFHSCxRQUFRSSxvQkFBb0IsR0FBR0osUUFBUUssdUJBQXVCLEdBQUdMLFFBQVFNLHFCQUFxQixHQUFHTixRQUFRTyx3QkFBd0IsR0FBRyxLQUFLO0FBQzlNLElBQUlDLGdCQUFnQkMsUUFBUTtBQUM1QixJQUFJQyxXQUFXRCxRQUFRO0FBQ3ZCLElBQUlFLFlBQVlGLFFBQVE7QUFDeEIsTUFBTU4sNEJBQTRCLENBQUMsR0FBR1M7SUFDbkMsQ0FBQSxHQUFHRixTQUFTRyxrQkFBa0IsQUFBRCxFQUFHRCxJQUFJLENBQUMsRUFBRTtJQUN4QyxPQUFPLEFBQUMsQ0FBQSxHQUFHRCxVQUFVRyxtQkFBbUIsQUFBRCxFQUFHLGtCQUFrQkY7QUFDOUQ7QUFDQSxNQUFNRyxtQkFBbUIsQ0FBQ0MsR0FBR0MsT0FBUyxDQUFDLHNEQUFzRCxFQUFFQSxNQUFNO0FBQ3JHLE1BQU1DLGtCQUFrQixDQUFDRixHQUFHQyxPQUFTLENBQUMsd0RBQXdELEVBQUVBLE1BQU07QUFDdEcsTUFBTUUsMkNBQTJDbkIsUUFBUUcseUJBQXlCLEdBQUcsQUFBQyxDQUFBLEdBQUdLLGNBQWNZLDRCQUE0QixBQUFELEVBQUdqQiwyQkFBMkJBLDBCQUEwQmtCLElBQUksRUFBRTtBQUNoTSxNQUFNLENBQUNuQix3QkFBd0JHLHlCQUF5QkQsc0JBQXNCRywwQkFBMEJELHNCQUFzQixHQUFHLEFBQUMsQ0FBQSxHQUFHSyxVQUFVVyxZQUFZLEFBQUQsRUFBR25CLDJCQUEyQlksa0JBQWtCRztBQUMxTWxCLFFBQVFNLHFCQUFxQixHQUFHQTtBQUNoQ04sUUFBUU8sd0JBQXdCLEdBQUdBO0FBQ25DUCxRQUFRSSxvQkFBb0IsR0FBR0E7QUFDL0JKLFFBQVFLLHVCQUF1QixHQUFHQTtBQUNsQ0wsUUFBUUUsc0JBQXNCLEdBQUdBIn0=