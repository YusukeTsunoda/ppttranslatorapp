2dd03332f0e3a9ba02efa875d9135ef3
"use strict";
exports.__esModule = true;
exports.default = void 0;
function _typeof(o) {
    "@babel/helpers - typeof";
    return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o) {
        return typeof o;
    } : function(o) {
        return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o;
    }, _typeof(o);
}
function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}
function _defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
    }
}
function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    Object.defineProperty(Constructor, "prototype", {
        writable: false
    });
    return Constructor;
}
function _defineProperty(obj, key, value) {
    key = _toPropertyKey(key);
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _toPropertyKey(arg) {
    var key = _toPrimitive(arg, "string");
    return _typeof(key) === "symbol" ? key : String(key);
}
function _toPrimitive(input, hint) {
    if (_typeof(input) !== "object" || input === null) return input;
    var prim = input[Symbol.toPrimitive];
    if (prim !== undefined) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object") return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (hint === "string" ? String : Number)(input);
}
// for environments without Set we fallback to arrays with unique members
var SetLike = /*#__PURE__*/ function() {
    function SetLike() {
        var items = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
        _classCallCheck(this, SetLike);
        _defineProperty(this, "items", void 0);
        this.items = items;
    }
    _createClass(SetLike, [
        {
            key: "add",
            value: function add(value) {
                if (this.has(value) === false) {
                    this.items.push(value);
                }
                return this;
            }
        },
        {
            key: "clear",
            value: function clear() {
                this.items = [];
            }
        },
        {
            key: "delete",
            value: function _delete(value) {
                var previousLength = this.items.length;
                this.items = this.items.filter(function(item) {
                    return item !== value;
                });
                return previousLength !== this.items.length;
            }
        },
        {
            key: "forEach",
            value: function forEach(callbackfn) {
                var _this = this;
                this.items.forEach(function(item) {
                    callbackfn(item, item, _this);
                });
            }
        },
        {
            key: "has",
            value: function has(value) {
                return this.items.indexOf(value) !== -1;
            }
        },
        {
            key: "size",
            get: function get() {
                return this.items.length;
            }
        }
    ]);
    return SetLike;
}();
var _default = typeof Set === "undefined" ? Set : SetLike;
exports.default = _default; //# sourceMappingURL=SetLike.js.map

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2V0TGlrZS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vc291cmNlcy9wb2x5ZmlsbHMvU2V0TGlrZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJkZWNsYXJlIGdsb2JhbCB7XG5cdGNsYXNzIFNldDxUPiB7XG5cdFx0Ly8gZXMyMDE1LmNvbGxlY3Rpb24uZC50c1xuXHRcdGNvbnN0cnVjdG9yKGl0ZW1zPzogVFtdKTtcblx0XHRhZGQodmFsdWU6IFQpOiB0aGlzO1xuXHRcdGNsZWFyKCk6IHZvaWQ7XG5cdFx0ZGVsZXRlKHZhbHVlOiBUKTogYm9vbGVhbjtcblx0XHRmb3JFYWNoKFxuXHRcdFx0Y2FsbGJhY2tmbjogKHZhbHVlOiBULCB2YWx1ZTI6IFQsIHNldDogU2V0PFQ+KSA9PiB2b2lkLFxuXHRcdFx0dGhpc0FyZz86IHVua25vd24sXG5cdFx0KTogdm9pZDtcblx0XHRoYXModmFsdWU6IFQpOiBib29sZWFuO1xuXHRcdHJlYWRvbmx5IHNpemU6IG51bWJlcjtcblxuXHRcdC8vIGVzMjAxNS5pdGVyYWJsZS5kLnRzXG5cdFx0Ly8gbm8gIGltcGxlbWVubnRlZFxuXHR9XG59XG5cbi8vIGZvciBlbnZpcm9ubWVudHMgd2l0aG91dCBTZXQgd2UgZmFsbGJhY2sgdG8gYXJyYXlzIHdpdGggdW5pcXVlIG1lbWJlcnNcbmNsYXNzIFNldExpa2U8VD4gaW1wbGVtZW50cyBTZXQ8VD4ge1xuXHRwcml2YXRlIGl0ZW1zOiBUW107XG5cblx0Y29uc3RydWN0b3IoaXRlbXM6IFRbXSA9IFtdKSB7XG5cdFx0dGhpcy5pdGVtcyA9IGl0ZW1zO1xuXHR9XG5cblx0YWRkKHZhbHVlOiBUKTogdGhpcyB7XG5cdFx0aWYgKHRoaXMuaGFzKHZhbHVlKSA9PT0gZmFsc2UpIHtcblx0XHRcdHRoaXMuaXRlbXMucHVzaCh2YWx1ZSk7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cdGNsZWFyKCk6IHZvaWQge1xuXHRcdHRoaXMuaXRlbXMgPSBbXTtcblx0fVxuXHRkZWxldGUodmFsdWU6IFQpOiBib29sZWFuIHtcblx0XHRjb25zdCBwcmV2aW91c0xlbmd0aCA9IHRoaXMuaXRlbXMubGVuZ3RoO1xuXHRcdHRoaXMuaXRlbXMgPSB0aGlzLml0ZW1zLmZpbHRlcigoaXRlbSkgPT4gaXRlbSAhPT0gdmFsdWUpO1xuXG5cdFx0cmV0dXJuIHByZXZpb3VzTGVuZ3RoICE9PSB0aGlzLml0ZW1zLmxlbmd0aDtcblx0fVxuXHRmb3JFYWNoKGNhbGxiYWNrZm46ICh2YWx1ZTogVCwgdmFsdWUyOiBULCBzZXQ6IFNldDxUPikgPT4gdm9pZCk6IHZvaWQge1xuXHRcdHRoaXMuaXRlbXMuZm9yRWFjaCgoaXRlbSkgPT4ge1xuXHRcdFx0Y2FsbGJhY2tmbihpdGVtLCBpdGVtLCB0aGlzKTtcblx0XHR9KTtcblx0fVxuXHRoYXModmFsdWU6IFQpOiBib29sZWFuIHtcblx0XHRyZXR1cm4gdGhpcy5pdGVtcy5pbmRleE9mKHZhbHVlKSAhPT0gLTE7XG5cdH1cblxuXHRnZXQgc2l6ZSgpOiBudW1iZXIge1xuXHRcdHJldHVybiB0aGlzLml0ZW1zLmxlbmd0aDtcblx0fVxufVxuXG5leHBvcnQgZGVmYXVsdCB0eXBlb2YgU2V0ID09PSBcInVuZGVmaW5lZFwiID8gU2V0IDogU2V0TGlrZTtcbiJdLCJuYW1lcyI6WyJTZXRMaWtlIiwiaXRlbXMiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJ1bmRlZmluZWQiLCJfY2xhc3NDYWxsQ2hlY2siLCJfZGVmaW5lUHJvcGVydHkiLCJfY3JlYXRlQ2xhc3MiLCJrZXkiLCJ2YWx1ZSIsImFkZCIsImhhcyIsInB1c2giLCJjbGVhciIsIl9kZWxldGUiLCJwcmV2aW91c0xlbmd0aCIsImZpbHRlciIsIml0ZW0iLCJmb3JFYWNoIiwiY2FsbGJhY2tmbiIsIl90aGlzIiwiaW5kZXhPZiIsImdldCIsIl9kZWZhdWx0IiwiU2V0IiwiZXhwb3J0cyIsImRlZmF1bHQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFtQkEseUVBQUE7QUFBQSxJQUNNQSxPQUFPLEdBQUEsV0FBQSxHQUFBO0lBR1osU0FBQUEsUUFBQSxFQUE2QjtRQUFBLElBQWpCQyxLQUFVLEdBQUFDLFNBQUEsQ0FBQUMsTUFBQSxHQUFBLEtBQUFELFNBQUEsQ0FBQSxFQUFBLEtBQUFFLFNBQUEsR0FBQUYsU0FBQSxDQUFBLEVBQUEsR0FBRyxFQUFFO1FBQUFHLGVBQUEsQ0FBQSxJQUFBLEVBQUFMLE9BQUE7UUFBQU0sZUFBQSxDQUFBLElBQUEsRUFBQSxTQUFBLEtBQUE7UUFDMUIsSUFBSSxDQUFDTCxLQUFLLEdBQUdBLEtBQUs7SUFDbkI7SUFBQ00sWUFBQSxDQUFBUCxPQUFBLEVBQUE7UUFBQTtZQUFBUSxHQUFBLEVBQUE7WUFBQUMsS0FBQSxFQUVELFNBQUFDLElBQUlELEtBQVEsRUFBUTtnQkFDbkIsSUFBSSxJQUFJLENBQUNFLEdBQUcsQ0FBQ0YsS0FBSyxDQUFDLEtBQUssS0FBSyxFQUFFO29CQUM5QixJQUFJLENBQUNSLEtBQUssQ0FBQ1csSUFBSSxDQUFDSCxLQUFLLENBQUM7Z0JBQ3ZCO2dCQUNBLE9BQU8sSUFBSTtZQUNaO1FBQUM7UUFBQTtZQUFBRCxHQUFBLEVBQUE7WUFBQUMsS0FBQSxFQUNELFNBQUFJLE1BQUEsRUFBYztnQkFDYixJQUFJLENBQUNaLEtBQUssR0FBRyxFQUFFO1lBQ2hCO1FBQUM7UUFBQTtZQUFBTyxHQUFBLEVBQUE7WUFBQUMsS0FBQSxFQUNELFNBQUFLLFFBQU9MLEtBQVEsRUFBVztnQkFDekIsSUFBTU0sY0FBYyxHQUFHLElBQUksQ0FBQ2QsS0FBSyxDQUFDRSxNQUFNO2dCQUN4QyxJQUFJLENBQUNGLEtBQUssR0FBRyxJQUFJLENBQUNBLEtBQUssQ0FBQ2UsTUFBTSxDQUFDLFNBQUNDLElBQUk7b0JBQUEsT0FBS0EsSUFBSSxLQUFLUixLQUFLO2dCQUFBLEVBQUM7Z0JBRXhELE9BQU9NLGNBQWMsS0FBSyxJQUFJLENBQUNkLEtBQUssQ0FBQ0UsTUFBTTtZQUM1QztRQUFDO1FBQUE7WUFBQUssR0FBQSxFQUFBO1lBQUFDLEtBQUEsRUFDRCxTQUFBUyxRQUFRQyxVQUFzRCxFQUFRO2dCQUFBLElBQUFDLEtBQUEsR0FBQSxJQUFBO2dCQUNyRSxJQUFJLENBQUNuQixLQUFLLENBQUNpQixPQUFPLENBQUMsU0FBQ0QsSUFBSSxFQUFLO29CQUM1QkUsVUFBVSxDQUFDRixJQUFJLEVBQUVBLElBQUksRUFBRUcsS0FBSSxDQUFDO2dCQUM3QixDQUFDLENBQUM7WUFDSDtRQUFDO1FBQUE7WUFBQVosR0FBQSxFQUFBO1lBQUFDLEtBQUEsRUFDRCxTQUFBRSxJQUFJRixLQUFRLEVBQVc7Z0JBQ3RCLE9BQU8sSUFBSSxDQUFDUixLQUFLLENBQUNvQixPQUFPLENBQUNaLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUN4QztRQUFDO1FBQUE7WUFBQUQsR0FBQSxFQUFBO1lBQUFjLEdBQUEsRUFFRCxTQUFBQSxJQUFBLEVBQW1CO2dCQUNsQixPQUFPLElBQUksQ0FBQ3JCLEtBQUssQ0FBQ0UsTUFBTTtZQUN6QjtRQUFDO0tBQUE7SUFBQSxPQUFBSCxPQUFBO0FBQUE7QUFBQSxJQUFBdUIsUUFBQSxHQUdhLE9BQU9DLEdBQUcsS0FBSyxXQUFXLEdBQUdBLEdBQUcsR0FBR3hCLE9BQU87QUFBQXlCLE9BQUEsQ0FBQUMsT0FBQSxHQUFBSCxRQUFBIn0=