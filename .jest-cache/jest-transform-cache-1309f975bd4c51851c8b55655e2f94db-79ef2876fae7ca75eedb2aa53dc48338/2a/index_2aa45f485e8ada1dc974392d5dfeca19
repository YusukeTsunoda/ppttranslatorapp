e0f12b8dc3b86152dbf5651578cdf5ce
'use strict';
var GetIntrinsic = require('get-intrinsic');
var callBound = require('call-bound');
var inspect = require('object-inspect');
var $TypeError = require('es-errors/type');
var $Map = GetIntrinsic('%Map%', true);
/** @type {<K, V>(thisArg: Map<K, V>, key: K) => V} */ var $mapGet = callBound('Map.prototype.get', true);
/** @type {<K, V>(thisArg: Map<K, V>, key: K, value: V) => void} */ var $mapSet = callBound('Map.prototype.set', true);
/** @type {<K, V>(thisArg: Map<K, V>, key: K) => boolean} */ var $mapHas = callBound('Map.prototype.has', true);
/** @type {<K, V>(thisArg: Map<K, V>, key: K) => boolean} */ var $mapDelete = callBound('Map.prototype.delete', true);
/** @type {<K, V>(thisArg: Map<K, V>) => number} */ var $mapSize = callBound('Map.prototype.size', true);
/** @type {import('.')} */ module.exports = !!$Map && /** @type {Exclude<import('.'), false>} */ function getSideChannelMap() {
    /** @typedef {ReturnType<typeof getSideChannelMap>} Channel */ /** @typedef {Parameters<Channel['get']>[0]} K */ /** @typedef {Parameters<Channel['set']>[1]} V */ /** @type {Map<K, V> | undefined} */ var $m;
    /** @type {Channel} */ var channel = {
        assert: function(key) {
            if (!channel.has(key)) {
                throw new $TypeError('Side channel does not contain ' + inspect(key));
            }
        },
        'delete': function(key) {
            if ($m) {
                var result = $mapDelete($m, key);
                if ($mapSize($m) === 0) {
                    $m = void undefined;
                }
                return result;
            }
            return false;
        },
        get: function(key) {
            if ($m) {
                return $mapGet($m, key);
            }
        },
        has: function(key) {
            if ($m) {
                return $mapHas($m, key);
            }
            return false;
        },
        set: function(key, value) {
            if (!$m) {
                // @ts-expect-error TS can't handle narrowing a variable inside a closure
                $m = new $Map();
            }
            $mapSet($m, key, value);
        }
    };
    // @ts-expect-error TODO: figure out why TS is erroring here
    return channel;
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy95dXN1a2V0c3Vub2RhL0RvY3VtZW50cy9jdXJzb3IvcHB0dHJhbnNsYXRvcmFwcC9ub2RlX21vZHVsZXMvc2lkZS1jaGFubmVsLW1hcC9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBHZXRJbnRyaW5zaWMgPSByZXF1aXJlKCdnZXQtaW50cmluc2ljJyk7XG52YXIgY2FsbEJvdW5kID0gcmVxdWlyZSgnY2FsbC1ib3VuZCcpO1xudmFyIGluc3BlY3QgPSByZXF1aXJlKCdvYmplY3QtaW5zcGVjdCcpO1xuXG52YXIgJFR5cGVFcnJvciA9IHJlcXVpcmUoJ2VzLWVycm9ycy90eXBlJyk7XG52YXIgJE1hcCA9IEdldEludHJpbnNpYygnJU1hcCUnLCB0cnVlKTtcblxuLyoqIEB0eXBlIHs8SywgVj4odGhpc0FyZzogTWFwPEssIFY+LCBrZXk6IEspID0+IFZ9ICovXG52YXIgJG1hcEdldCA9IGNhbGxCb3VuZCgnTWFwLnByb3RvdHlwZS5nZXQnLCB0cnVlKTtcbi8qKiBAdHlwZSB7PEssIFY+KHRoaXNBcmc6IE1hcDxLLCBWPiwga2V5OiBLLCB2YWx1ZTogVikgPT4gdm9pZH0gKi9cbnZhciAkbWFwU2V0ID0gY2FsbEJvdW5kKCdNYXAucHJvdG90eXBlLnNldCcsIHRydWUpO1xuLyoqIEB0eXBlIHs8SywgVj4odGhpc0FyZzogTWFwPEssIFY+LCBrZXk6IEspID0+IGJvb2xlYW59ICovXG52YXIgJG1hcEhhcyA9IGNhbGxCb3VuZCgnTWFwLnByb3RvdHlwZS5oYXMnLCB0cnVlKTtcbi8qKiBAdHlwZSB7PEssIFY+KHRoaXNBcmc6IE1hcDxLLCBWPiwga2V5OiBLKSA9PiBib29sZWFufSAqL1xudmFyICRtYXBEZWxldGUgPSBjYWxsQm91bmQoJ01hcC5wcm90b3R5cGUuZGVsZXRlJywgdHJ1ZSk7XG4vKiogQHR5cGUgezxLLCBWPih0aGlzQXJnOiBNYXA8SywgVj4pID0+IG51bWJlcn0gKi9cbnZhciAkbWFwU2l6ZSA9IGNhbGxCb3VuZCgnTWFwLnByb3RvdHlwZS5zaXplJywgdHJ1ZSk7XG5cbi8qKiBAdHlwZSB7aW1wb3J0KCcuJyl9ICovXG5tb2R1bGUuZXhwb3J0cyA9ICEhJE1hcCAmJiAvKiogQHR5cGUge0V4Y2x1ZGU8aW1wb3J0KCcuJyksIGZhbHNlPn0gKi8gZnVuY3Rpb24gZ2V0U2lkZUNoYW5uZWxNYXAoKSB7XG5cdC8qKiBAdHlwZWRlZiB7UmV0dXJuVHlwZTx0eXBlb2YgZ2V0U2lkZUNoYW5uZWxNYXA+fSBDaGFubmVsICovXG5cdC8qKiBAdHlwZWRlZiB7UGFyYW1ldGVyczxDaGFubmVsWydnZXQnXT5bMF19IEsgKi9cblx0LyoqIEB0eXBlZGVmIHtQYXJhbWV0ZXJzPENoYW5uZWxbJ3NldCddPlsxXX0gViAqL1xuXG5cdC8qKiBAdHlwZSB7TWFwPEssIFY+IHwgdW5kZWZpbmVkfSAqLyB2YXIgJG07XG5cblx0LyoqIEB0eXBlIHtDaGFubmVsfSAqL1xuXHR2YXIgY2hhbm5lbCA9IHtcblx0XHRhc3NlcnQ6IGZ1bmN0aW9uIChrZXkpIHtcblx0XHRcdGlmICghY2hhbm5lbC5oYXMoa2V5KSkge1xuXHRcdFx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignU2lkZSBjaGFubmVsIGRvZXMgbm90IGNvbnRhaW4gJyArIGluc3BlY3Qoa2V5KSk7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHQnZGVsZXRlJzogZnVuY3Rpb24gKGtleSkge1xuXHRcdFx0aWYgKCRtKSB7XG5cdFx0XHRcdHZhciByZXN1bHQgPSAkbWFwRGVsZXRlKCRtLCBrZXkpO1xuXHRcdFx0XHRpZiAoJG1hcFNpemUoJG0pID09PSAwKSB7XG5cdFx0XHRcdFx0JG0gPSB2b2lkIHVuZGVmaW5lZDtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gcmVzdWx0O1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH0sXG5cdFx0Z2V0OiBmdW5jdGlvbiAoa2V5KSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgY29uc2lzdGVudC1yZXR1cm5cblx0XHRcdGlmICgkbSkge1xuXHRcdFx0XHRyZXR1cm4gJG1hcEdldCgkbSwga2V5KTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdGhhczogZnVuY3Rpb24gKGtleSkge1xuXHRcdFx0aWYgKCRtKSB7XG5cdFx0XHRcdHJldHVybiAkbWFwSGFzKCRtLCBrZXkpO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH0sXG5cdFx0c2V0OiBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuXHRcdFx0aWYgKCEkbSkge1xuXHRcdFx0XHQvLyBAdHMtZXhwZWN0LWVycm9yIFRTIGNhbid0IGhhbmRsZSBuYXJyb3dpbmcgYSB2YXJpYWJsZSBpbnNpZGUgYSBjbG9zdXJlXG5cdFx0XHRcdCRtID0gbmV3ICRNYXAoKTtcblx0XHRcdH1cblx0XHRcdCRtYXBTZXQoJG0sIGtleSwgdmFsdWUpO1xuXHRcdH1cblx0fTtcblxuXHQvLyBAdHMtZXhwZWN0LWVycm9yIFRPRE86IGZpZ3VyZSBvdXQgd2h5IFRTIGlzIGVycm9yaW5nIGhlcmVcblx0cmV0dXJuIGNoYW5uZWw7XG59O1xuIl0sIm5hbWVzIjpbIkdldEludHJpbnNpYyIsInJlcXVpcmUiLCJjYWxsQm91bmQiLCJpbnNwZWN0IiwiJFR5cGVFcnJvciIsIiRNYXAiLCIkbWFwR2V0IiwiJG1hcFNldCIsIiRtYXBIYXMiLCIkbWFwRGVsZXRlIiwiJG1hcFNpemUiLCJtb2R1bGUiLCJleHBvcnRzIiwiZ2V0U2lkZUNoYW5uZWxNYXAiLCIkbSIsImNoYW5uZWwiLCJhc3NlcnQiLCJrZXkiLCJoYXMiLCJyZXN1bHQiLCJ1bmRlZmluZWQiLCJnZXQiLCJzZXQiLCJ2YWx1ZSJdLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxJQUFJQSxlQUFlQyxRQUFRO0FBQzNCLElBQUlDLFlBQVlELFFBQVE7QUFDeEIsSUFBSUUsVUFBVUYsUUFBUTtBQUV0QixJQUFJRyxhQUFhSCxRQUFRO0FBQ3pCLElBQUlJLE9BQU9MLGFBQWEsU0FBUztBQUVqQyxvREFBb0QsR0FDcEQsSUFBSU0sVUFBVUosVUFBVSxxQkFBcUI7QUFDN0MsaUVBQWlFLEdBQ2pFLElBQUlLLFVBQVVMLFVBQVUscUJBQXFCO0FBQzdDLDBEQUEwRCxHQUMxRCxJQUFJTSxVQUFVTixVQUFVLHFCQUFxQjtBQUM3QywwREFBMEQsR0FDMUQsSUFBSU8sYUFBYVAsVUFBVSx3QkFBd0I7QUFDbkQsaURBQWlELEdBQ2pELElBQUlRLFdBQVdSLFVBQVUsc0JBQXNCO0FBRS9DLHdCQUF3QixHQUN4QlMsT0FBT0MsT0FBTyxHQUFHLENBQUMsQ0FBQ1AsUUFBUSx3Q0FBd0MsR0FBRyxTQUFTUTtJQUM5RSw0REFBNEQsR0FDNUQsK0NBQStDLEdBQy9DLCtDQUErQyxHQUUvQyxrQ0FBa0MsR0FBRyxJQUFJQztJQUV6QyxvQkFBb0IsR0FDcEIsSUFBSUMsVUFBVTtRQUNiQyxRQUFRLFNBQVVDLEdBQUc7WUFDcEIsSUFBSSxDQUFDRixRQUFRRyxHQUFHLENBQUNELE1BQU07Z0JBQ3RCLE1BQU0sSUFBSWIsV0FBVyxtQ0FBbUNELFFBQVFjO1lBQ2pFO1FBQ0Q7UUFDQSxVQUFVLFNBQVVBLEdBQUc7WUFDdEIsSUFBSUgsSUFBSTtnQkFDUCxJQUFJSyxTQUFTVixXQUFXSyxJQUFJRztnQkFDNUIsSUFBSVAsU0FBU0ksUUFBUSxHQUFHO29CQUN2QkEsS0FBSyxLQUFLTTtnQkFDWDtnQkFDQSxPQUFPRDtZQUNSO1lBQ0EsT0FBTztRQUNSO1FBQ0FFLEtBQUssU0FBVUosR0FBRztZQUNqQixJQUFJSCxJQUFJO2dCQUNQLE9BQU9SLFFBQVFRLElBQUlHO1lBQ3BCO1FBQ0Q7UUFDQUMsS0FBSyxTQUFVRCxHQUFHO1lBQ2pCLElBQUlILElBQUk7Z0JBQ1AsT0FBT04sUUFBUU0sSUFBSUc7WUFDcEI7WUFDQSxPQUFPO1FBQ1I7UUFDQUssS0FBSyxTQUFVTCxHQUFHLEVBQUVNLEtBQUs7WUFDeEIsSUFBSSxDQUFDVCxJQUFJO2dCQUNSLHlFQUF5RTtnQkFDekVBLEtBQUssSUFBSVQ7WUFDVjtZQUNBRSxRQUFRTyxJQUFJRyxLQUFLTTtRQUNsQjtJQUNEO0lBRUEsNERBQTREO0lBQzVELE9BQU9SO0FBQ1IifQ==