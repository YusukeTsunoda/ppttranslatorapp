971d4b29977a2ff25010fe2011a410b2
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var _actCompat = require("./act-compat");
var _pure = require("./pure");
Object.keys(_pure).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _pure[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _pure[key];
        }
    });
});
var _process$env;
// if we're running in a test runner that supports afterEach
// or teardown then we'll automatically run cleanup afterEach test
// this ensures that tests run in isolation from each other
// if you don't like this then either import the `pure` module
// or set the RTL_SKIP_AUTO_CLEANUP env variable to 'true'.
if (typeof process === 'undefined' || !((_process$env = process.env) != null && _process$env.RTL_SKIP_AUTO_CLEANUP)) {
    // ignore teardown() in code coverage because Jest does not support it
    /* istanbul ignore else */ if (typeof afterEach === 'function') {
        afterEach(()=>{
            (0, _pure.cleanup)();
        });
    } else if (typeof teardown === 'function') {
        // Block is guarded by `typeof` check.
        // eslint does not support `typeof` guards.
        // eslint-disable-next-line no-undef
        teardown(()=>{
            (0, _pure.cleanup)();
        });
    }
    // No test setup with other test runners available
    /* istanbul ignore else */ if (typeof beforeAll === 'function' && typeof afterAll === 'function') {
        // This matches the behavior of React < 18.
        let previousIsReactActEnvironment = (0, _actCompat.getIsReactActEnvironment)();
        beforeAll(()=>{
            previousIsReactActEnvironment = (0, _actCompat.getIsReactActEnvironment)();
            (0, _actCompat.setReactActEnvironment)(true);
        });
        afterAll(()=>{
            (0, _actCompat.setReactActEnvironment)(previousIsReactActEnvironment);
        });
    }
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy95dXN1a2V0c3Vub2RhL0RvY3VtZW50cy9jdXJzb3IvcHB0dHJhbnNsYXRvcmFwcC9ub2RlX21vZHVsZXMvQHRlc3RpbmctbGlicmFyeS9yZWFjdC9kaXN0L2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xudmFyIF9hY3RDb21wYXQgPSByZXF1aXJlKFwiLi9hY3QtY29tcGF0XCIpO1xudmFyIF9wdXJlID0gcmVxdWlyZShcIi4vcHVyZVwiKTtcbk9iamVjdC5rZXlzKF9wdXJlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgaWYgKGtleSA9PT0gXCJkZWZhdWx0XCIgfHwga2V5ID09PSBcIl9fZXNNb2R1bGVcIikgcmV0dXJuO1xuICBpZiAoa2V5IGluIGV4cG9ydHMgJiYgZXhwb3J0c1trZXldID09PSBfcHVyZVtrZXldKSByZXR1cm47XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIF9wdXJlW2tleV07XG4gICAgfVxuICB9KTtcbn0pO1xudmFyIF9wcm9jZXNzJGVudjtcbi8vIGlmIHdlJ3JlIHJ1bm5pbmcgaW4gYSB0ZXN0IHJ1bm5lciB0aGF0IHN1cHBvcnRzIGFmdGVyRWFjaFxuLy8gb3IgdGVhcmRvd24gdGhlbiB3ZSdsbCBhdXRvbWF0aWNhbGx5IHJ1biBjbGVhbnVwIGFmdGVyRWFjaCB0ZXN0XG4vLyB0aGlzIGVuc3VyZXMgdGhhdCB0ZXN0cyBydW4gaW4gaXNvbGF0aW9uIGZyb20gZWFjaCBvdGhlclxuLy8gaWYgeW91IGRvbid0IGxpa2UgdGhpcyB0aGVuIGVpdGhlciBpbXBvcnQgdGhlIGBwdXJlYCBtb2R1bGVcbi8vIG9yIHNldCB0aGUgUlRMX1NLSVBfQVVUT19DTEVBTlVQIGVudiB2YXJpYWJsZSB0byAndHJ1ZScuXG5pZiAodHlwZW9mIHByb2Nlc3MgPT09ICd1bmRlZmluZWQnIHx8ICEoKF9wcm9jZXNzJGVudiA9IHByb2Nlc3MuZW52KSAhPSBudWxsICYmIF9wcm9jZXNzJGVudi5SVExfU0tJUF9BVVRPX0NMRUFOVVApKSB7XG4gIC8vIGlnbm9yZSB0ZWFyZG93bigpIGluIGNvZGUgY292ZXJhZ2UgYmVjYXVzZSBKZXN0IGRvZXMgbm90IHN1cHBvcnQgaXRcbiAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgaWYgKHR5cGVvZiBhZnRlckVhY2ggPT09ICdmdW5jdGlvbicpIHtcbiAgICBhZnRlckVhY2goKCkgPT4ge1xuICAgICAgKDAsIF9wdXJlLmNsZWFudXApKCk7XG4gICAgfSk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIHRlYXJkb3duID09PSAnZnVuY3Rpb24nKSB7XG4gICAgLy8gQmxvY2sgaXMgZ3VhcmRlZCBieSBgdHlwZW9mYCBjaGVjay5cbiAgICAvLyBlc2xpbnQgZG9lcyBub3Qgc3VwcG9ydCBgdHlwZW9mYCBndWFyZHMuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gICAgdGVhcmRvd24oKCkgPT4ge1xuICAgICAgKDAsIF9wdXJlLmNsZWFudXApKCk7XG4gICAgfSk7XG4gIH1cblxuICAvLyBObyB0ZXN0IHNldHVwIHdpdGggb3RoZXIgdGVzdCBydW5uZXJzIGF2YWlsYWJsZVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICBpZiAodHlwZW9mIGJlZm9yZUFsbCA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgYWZ0ZXJBbGwgPT09ICdmdW5jdGlvbicpIHtcbiAgICAvLyBUaGlzIG1hdGNoZXMgdGhlIGJlaGF2aW9yIG9mIFJlYWN0IDwgMTguXG4gICAgbGV0IHByZXZpb3VzSXNSZWFjdEFjdEVudmlyb25tZW50ID0gKDAsIF9hY3RDb21wYXQuZ2V0SXNSZWFjdEFjdEVudmlyb25tZW50KSgpO1xuICAgIGJlZm9yZUFsbCgoKSA9PiB7XG4gICAgICBwcmV2aW91c0lzUmVhY3RBY3RFbnZpcm9ubWVudCA9ICgwLCBfYWN0Q29tcGF0LmdldElzUmVhY3RBY3RFbnZpcm9ubWVudCkoKTtcbiAgICAgICgwLCBfYWN0Q29tcGF0LnNldFJlYWN0QWN0RW52aXJvbm1lbnQpKHRydWUpO1xuICAgIH0pO1xuICAgIGFmdGVyQWxsKCgpID0+IHtcbiAgICAgICgwLCBfYWN0Q29tcGF0LnNldFJlYWN0QWN0RW52aXJvbm1lbnQpKHByZXZpb3VzSXNSZWFjdEFjdEVudmlyb25tZW50KTtcbiAgICB9KTtcbiAgfVxufSJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIl9hY3RDb21wYXQiLCJyZXF1aXJlIiwiX3B1cmUiLCJrZXlzIiwiZm9yRWFjaCIsImtleSIsImVudW1lcmFibGUiLCJnZXQiLCJfcHJvY2VzcyRlbnYiLCJwcm9jZXNzIiwiZW52IiwiUlRMX1NLSVBfQVVUT19DTEVBTlVQIiwiYWZ0ZXJFYWNoIiwiY2xlYW51cCIsInRlYXJkb3duIiwiYmVmb3JlQWxsIiwiYWZ0ZXJBbGwiLCJwcmV2aW91c0lzUmVhY3RBY3RFbnZpcm9ubWVudCIsImdldElzUmVhY3RBY3RFbnZpcm9ubWVudCIsInNldFJlYWN0QWN0RW52aXJvbm1lbnQiXSwibWFwcGluZ3MiOiJBQUFBO0FBRUFBLE9BQU9DLGNBQWMsQ0FBQ0MsU0FBUyxjQUFjO0lBQzNDQyxPQUFPO0FBQ1Q7QUFDQSxJQUFJQyxhQUFhQyxRQUFRO0FBQ3pCLElBQUlDLFFBQVFELFFBQVE7QUFDcEJMLE9BQU9PLElBQUksQ0FBQ0QsT0FBT0UsT0FBTyxDQUFDLFNBQVVDLEdBQUc7SUFDdEMsSUFBSUEsUUFBUSxhQUFhQSxRQUFRLGNBQWM7SUFDL0MsSUFBSUEsT0FBT1AsV0FBV0EsT0FBTyxDQUFDTyxJQUFJLEtBQUtILEtBQUssQ0FBQ0csSUFBSSxFQUFFO0lBQ25EVCxPQUFPQyxjQUFjLENBQUNDLFNBQVNPLEtBQUs7UUFDbENDLFlBQVk7UUFDWkMsS0FBSztZQUNILE9BQU9MLEtBQUssQ0FBQ0csSUFBSTtRQUNuQjtJQUNGO0FBQ0Y7QUFDQSxJQUFJRztBQUNKLDREQUE0RDtBQUM1RCxrRUFBa0U7QUFDbEUsMkRBQTJEO0FBQzNELDhEQUE4RDtBQUM5RCwyREFBMkQ7QUFDM0QsSUFBSSxPQUFPQyxZQUFZLGVBQWUsQ0FBRSxDQUFBLEFBQUNELENBQUFBLGVBQWVDLFFBQVFDLEdBQUcsQUFBRCxLQUFNLFFBQVFGLGFBQWFHLHFCQUFxQixBQUFELEdBQUk7SUFDbkgsc0VBQXNFO0lBQ3RFLHdCQUF3QixHQUN4QixJQUFJLE9BQU9DLGNBQWMsWUFBWTtRQUNuQ0EsVUFBVTtZQUNQLENBQUEsR0FBR1YsTUFBTVcsT0FBTyxBQUFEO1FBQ2xCO0lBQ0YsT0FBTyxJQUFJLE9BQU9DLGFBQWEsWUFBWTtRQUN6QyxzQ0FBc0M7UUFDdEMsMkNBQTJDO1FBQzNDLG9DQUFvQztRQUNwQ0EsU0FBUztZQUNOLENBQUEsR0FBR1osTUFBTVcsT0FBTyxBQUFEO1FBQ2xCO0lBQ0Y7SUFFQSxrREFBa0Q7SUFDbEQsd0JBQXdCLEdBQ3hCLElBQUksT0FBT0UsY0FBYyxjQUFjLE9BQU9DLGFBQWEsWUFBWTtRQUNyRSwyQ0FBMkM7UUFDM0MsSUFBSUMsZ0NBQWdDLEFBQUMsQ0FBQSxHQUFHakIsV0FBV2tCLHdCQUF3QixBQUFEO1FBQzFFSCxVQUFVO1lBQ1JFLGdDQUFnQyxBQUFDLENBQUEsR0FBR2pCLFdBQVdrQix3QkFBd0IsQUFBRDtZQUNyRSxDQUFBLEdBQUdsQixXQUFXbUIsc0JBQXNCLEFBQUQsRUFBRztRQUN6QztRQUNBSCxTQUFTO1lBQ04sQ0FBQSxHQUFHaEIsV0FBV21CLHNCQUFzQixBQUFELEVBQUdGO1FBQ3pDO0lBQ0Y7QUFDRiJ9