e9e6c43a640f7eb95dcf5d3197ccd120
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.queryByTitle = exports.queryAllByTitle = exports.getByTitle = exports.getAllByTitle = exports.findByTitle = exports.findAllByTitle = void 0;
var _queryHelpers = require("../query-helpers");
var _helpers = require("../helpers");
var _allUtils = require("./all-utils");
const isSvgTitle = (node)=>{
    var _node$parentElement;
    return node.tagName.toLowerCase() === 'title' && ((_node$parentElement = node.parentElement) == null ? void 0 : _node$parentElement.tagName.toLowerCase()) === 'svg';
};
const queryAllByTitle = (container, text, { exact = true, collapseWhitespace, trim, normalizer } = {})=>{
    (0, _helpers.checkContainerType)(container);
    const matcher = exact ? _allUtils.matches : _allUtils.fuzzyMatches;
    const matchNormalizer = (0, _allUtils.makeNormalizer)({
        collapseWhitespace,
        trim,
        normalizer
    });
    return Array.from(container.querySelectorAll('[title], svg > title')).filter((node)=>matcher(node.getAttribute('title'), node, text, matchNormalizer) || isSvgTitle(node) && matcher((0, _allUtils.getNodeText)(node), node, text, matchNormalizer));
};
const getMultipleError = (c, title)=>`Found multiple elements with the title: ${title}.`;
const getMissingError = (c, title)=>`Unable to find an element with the title: ${title}.`;
const queryAllByTitleWithSuggestions = exports.queryAllByTitle = (0, _queryHelpers.wrapAllByQueryWithSuggestion)(queryAllByTitle, queryAllByTitle.name, 'queryAll');
const [queryByTitle, getAllByTitle, getByTitle, findAllByTitle, findByTitle] = (0, _allUtils.buildQueries)(queryAllByTitle, getMultipleError, getMissingError);
exports.findByTitle = findByTitle;
exports.findAllByTitle = findAllByTitle;
exports.getByTitle = getByTitle;
exports.getAllByTitle = getAllByTitle;
exports.queryByTitle = queryByTitle;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy95dXN1a2V0c3Vub2RhL0RvY3VtZW50cy9jdXJzb3IvcHB0dHJhbnNsYXRvcmFwcC9ub2RlX21vZHVsZXMvQHRlc3RpbmctbGlicmFyeS9yZWFjdC9ub2RlX21vZHVsZXMvQHRlc3RpbmctbGlicmFyeS9kb20vZGlzdC9xdWVyaWVzL3RpdGxlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5xdWVyeUJ5VGl0bGUgPSBleHBvcnRzLnF1ZXJ5QWxsQnlUaXRsZSA9IGV4cG9ydHMuZ2V0QnlUaXRsZSA9IGV4cG9ydHMuZ2V0QWxsQnlUaXRsZSA9IGV4cG9ydHMuZmluZEJ5VGl0bGUgPSBleHBvcnRzLmZpbmRBbGxCeVRpdGxlID0gdm9pZCAwO1xudmFyIF9xdWVyeUhlbHBlcnMgPSByZXF1aXJlKFwiLi4vcXVlcnktaGVscGVyc1wiKTtcbnZhciBfaGVscGVycyA9IHJlcXVpcmUoXCIuLi9oZWxwZXJzXCIpO1xudmFyIF9hbGxVdGlscyA9IHJlcXVpcmUoXCIuL2FsbC11dGlsc1wiKTtcbmNvbnN0IGlzU3ZnVGl0bGUgPSBub2RlID0+IHtcbiAgdmFyIF9ub2RlJHBhcmVudEVsZW1lbnQ7XG4gIHJldHVybiBub2RlLnRhZ05hbWUudG9Mb3dlckNhc2UoKSA9PT0gJ3RpdGxlJyAmJiAoKF9ub2RlJHBhcmVudEVsZW1lbnQgPSBub2RlLnBhcmVudEVsZW1lbnQpID09IG51bGwgPyB2b2lkIDAgOiBfbm9kZSRwYXJlbnRFbGVtZW50LnRhZ05hbWUudG9Mb3dlckNhc2UoKSkgPT09ICdzdmcnO1xufTtcbmNvbnN0IHF1ZXJ5QWxsQnlUaXRsZSA9IChjb250YWluZXIsIHRleHQsIHtcbiAgZXhhY3QgPSB0cnVlLFxuICBjb2xsYXBzZVdoaXRlc3BhY2UsXG4gIHRyaW0sXG4gIG5vcm1hbGl6ZXJcbn0gPSB7fSkgPT4ge1xuICAoMCwgX2hlbHBlcnMuY2hlY2tDb250YWluZXJUeXBlKShjb250YWluZXIpO1xuICBjb25zdCBtYXRjaGVyID0gZXhhY3QgPyBfYWxsVXRpbHMubWF0Y2hlcyA6IF9hbGxVdGlscy5mdXp6eU1hdGNoZXM7XG4gIGNvbnN0IG1hdGNoTm9ybWFsaXplciA9ICgwLCBfYWxsVXRpbHMubWFrZU5vcm1hbGl6ZXIpKHtcbiAgICBjb2xsYXBzZVdoaXRlc3BhY2UsXG4gICAgdHJpbSxcbiAgICBub3JtYWxpemVyXG4gIH0pO1xuICByZXR1cm4gQXJyYXkuZnJvbShjb250YWluZXIucXVlcnlTZWxlY3RvckFsbCgnW3RpdGxlXSwgc3ZnID4gdGl0bGUnKSkuZmlsdGVyKG5vZGUgPT4gbWF0Y2hlcihub2RlLmdldEF0dHJpYnV0ZSgndGl0bGUnKSwgbm9kZSwgdGV4dCwgbWF0Y2hOb3JtYWxpemVyKSB8fCBpc1N2Z1RpdGxlKG5vZGUpICYmIG1hdGNoZXIoKDAsIF9hbGxVdGlscy5nZXROb2RlVGV4dCkobm9kZSksIG5vZGUsIHRleHQsIG1hdGNoTm9ybWFsaXplcikpO1xufTtcbmNvbnN0IGdldE11bHRpcGxlRXJyb3IgPSAoYywgdGl0bGUpID0+IGBGb3VuZCBtdWx0aXBsZSBlbGVtZW50cyB3aXRoIHRoZSB0aXRsZTogJHt0aXRsZX0uYDtcbmNvbnN0IGdldE1pc3NpbmdFcnJvciA9IChjLCB0aXRsZSkgPT4gYFVuYWJsZSB0byBmaW5kIGFuIGVsZW1lbnQgd2l0aCB0aGUgdGl0bGU6ICR7dGl0bGV9LmA7XG5jb25zdCBxdWVyeUFsbEJ5VGl0bGVXaXRoU3VnZ2VzdGlvbnMgPSBleHBvcnRzLnF1ZXJ5QWxsQnlUaXRsZSA9ICgwLCBfcXVlcnlIZWxwZXJzLndyYXBBbGxCeVF1ZXJ5V2l0aFN1Z2dlc3Rpb24pKHF1ZXJ5QWxsQnlUaXRsZSwgcXVlcnlBbGxCeVRpdGxlLm5hbWUsICdxdWVyeUFsbCcpO1xuY29uc3QgW3F1ZXJ5QnlUaXRsZSwgZ2V0QWxsQnlUaXRsZSwgZ2V0QnlUaXRsZSwgZmluZEFsbEJ5VGl0bGUsIGZpbmRCeVRpdGxlXSA9ICgwLCBfYWxsVXRpbHMuYnVpbGRRdWVyaWVzKShxdWVyeUFsbEJ5VGl0bGUsIGdldE11bHRpcGxlRXJyb3IsIGdldE1pc3NpbmdFcnJvcik7XG5leHBvcnRzLmZpbmRCeVRpdGxlID0gZmluZEJ5VGl0bGU7XG5leHBvcnRzLmZpbmRBbGxCeVRpdGxlID0gZmluZEFsbEJ5VGl0bGU7XG5leHBvcnRzLmdldEJ5VGl0bGUgPSBnZXRCeVRpdGxlO1xuZXhwb3J0cy5nZXRBbGxCeVRpdGxlID0gZ2V0QWxsQnlUaXRsZTtcbmV4cG9ydHMucXVlcnlCeVRpdGxlID0gcXVlcnlCeVRpdGxlOyJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInF1ZXJ5QnlUaXRsZSIsInF1ZXJ5QWxsQnlUaXRsZSIsImdldEJ5VGl0bGUiLCJnZXRBbGxCeVRpdGxlIiwiZmluZEJ5VGl0bGUiLCJmaW5kQWxsQnlUaXRsZSIsIl9xdWVyeUhlbHBlcnMiLCJyZXF1aXJlIiwiX2hlbHBlcnMiLCJfYWxsVXRpbHMiLCJpc1N2Z1RpdGxlIiwibm9kZSIsIl9ub2RlJHBhcmVudEVsZW1lbnQiLCJ0YWdOYW1lIiwidG9Mb3dlckNhc2UiLCJwYXJlbnRFbGVtZW50IiwiY29udGFpbmVyIiwidGV4dCIsImV4YWN0IiwiY29sbGFwc2VXaGl0ZXNwYWNlIiwidHJpbSIsIm5vcm1hbGl6ZXIiLCJjaGVja0NvbnRhaW5lclR5cGUiLCJtYXRjaGVyIiwibWF0Y2hlcyIsImZ1enp5TWF0Y2hlcyIsIm1hdGNoTm9ybWFsaXplciIsIm1ha2VOb3JtYWxpemVyIiwiQXJyYXkiLCJmcm9tIiwicXVlcnlTZWxlY3RvckFsbCIsImZpbHRlciIsImdldEF0dHJpYnV0ZSIsImdldE5vZGVUZXh0IiwiZ2V0TXVsdGlwbGVFcnJvciIsImMiLCJ0aXRsZSIsImdldE1pc3NpbmdFcnJvciIsInF1ZXJ5QWxsQnlUaXRsZVdpdGhTdWdnZXN0aW9ucyIsIndyYXBBbGxCeVF1ZXJ5V2l0aFN1Z2dlc3Rpb24iLCJuYW1lIiwiYnVpbGRRdWVyaWVzIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUVBQSxPQUFPQyxjQUFjLENBQUNDLFNBQVMsY0FBYztJQUMzQ0MsT0FBTztBQUNUO0FBQ0FELFFBQVFFLFlBQVksR0FBR0YsUUFBUUcsZUFBZSxHQUFHSCxRQUFRSSxVQUFVLEdBQUdKLFFBQVFLLGFBQWEsR0FBR0wsUUFBUU0sV0FBVyxHQUFHTixRQUFRTyxjQUFjLEdBQUcsS0FBSztBQUNsSixJQUFJQyxnQkFBZ0JDLFFBQVE7QUFDNUIsSUFBSUMsV0FBV0QsUUFBUTtBQUN2QixJQUFJRSxZQUFZRixRQUFRO0FBQ3hCLE1BQU1HLGFBQWFDLENBQUFBO0lBQ2pCLElBQUlDO0lBQ0osT0FBT0QsS0FBS0UsT0FBTyxDQUFDQyxXQUFXLE9BQU8sV0FBVyxBQUFDLENBQUEsQUFBQ0YsQ0FBQUEsc0JBQXNCRCxLQUFLSSxhQUFhLEFBQUQsS0FBTSxPQUFPLEtBQUssSUFBSUgsb0JBQW9CQyxPQUFPLENBQUNDLFdBQVcsRUFBQyxNQUFPO0FBQ2pLO0FBQ0EsTUFBTWIsa0JBQWtCLENBQUNlLFdBQVdDLE1BQU0sRUFDeENDLFFBQVEsSUFBSSxFQUNaQyxrQkFBa0IsRUFDbEJDLElBQUksRUFDSkMsVUFBVSxFQUNYLEdBQUcsQ0FBQyxDQUFDO0lBQ0gsQ0FBQSxHQUFHYixTQUFTYyxrQkFBa0IsQUFBRCxFQUFHTjtJQUNqQyxNQUFNTyxVQUFVTCxRQUFRVCxVQUFVZSxPQUFPLEdBQUdmLFVBQVVnQixZQUFZO0lBQ2xFLE1BQU1DLGtCQUFrQixBQUFDLENBQUEsR0FBR2pCLFVBQVVrQixjQUFjLEFBQUQsRUFBRztRQUNwRFI7UUFDQUM7UUFDQUM7SUFDRjtJQUNBLE9BQU9PLE1BQU1DLElBQUksQ0FBQ2IsVUFBVWMsZ0JBQWdCLENBQUMseUJBQXlCQyxNQUFNLENBQUNwQixDQUFBQSxPQUFRWSxRQUFRWixLQUFLcUIsWUFBWSxDQUFDLFVBQVVyQixNQUFNTSxNQUFNUyxvQkFBb0JoQixXQUFXQyxTQUFTWSxRQUFRLEFBQUMsQ0FBQSxHQUFHZCxVQUFVd0IsV0FBVyxBQUFELEVBQUd0QixPQUFPQSxNQUFNTSxNQUFNUztBQUNyTztBQUNBLE1BQU1RLG1CQUFtQixDQUFDQyxHQUFHQyxRQUFVLENBQUMsd0NBQXdDLEVBQUVBLE1BQU0sQ0FBQyxDQUFDO0FBQzFGLE1BQU1DLGtCQUFrQixDQUFDRixHQUFHQyxRQUFVLENBQUMsMENBQTBDLEVBQUVBLE1BQU0sQ0FBQyxDQUFDO0FBQzNGLE1BQU1FLGlDQUFpQ3hDLFFBQVFHLGVBQWUsR0FBRyxBQUFDLENBQUEsR0FBR0ssY0FBY2lDLDRCQUE0QixBQUFELEVBQUd0QyxpQkFBaUJBLGdCQUFnQnVDLElBQUksRUFBRTtBQUN4SixNQUFNLENBQUN4QyxjQUFjRyxlQUFlRCxZQUFZRyxnQkFBZ0JELFlBQVksR0FBRyxBQUFDLENBQUEsR0FBR0ssVUFBVWdDLFlBQVksQUFBRCxFQUFHeEMsaUJBQWlCaUMsa0JBQWtCRztBQUM5SXZDLFFBQVFNLFdBQVcsR0FBR0E7QUFDdEJOLFFBQVFPLGNBQWMsR0FBR0E7QUFDekJQLFFBQVFJLFVBQVUsR0FBR0E7QUFDckJKLFFBQVFLLGFBQWEsR0FBR0E7QUFDeEJMLFFBQVFFLFlBQVksR0FBR0EifQ==