bb2b9c7b98881508b28a819872c550db
"use strict";
// SWRのモック
jest.mock('swr', ()=>{
    const originalModule = jest.requireActual('swr');
    return {
        __esModule: true,
        default: jest.fn().mockImplementation((key, fetcher, options)=>{
            // キャッシュキーがnullまたは空の場合
            if (!key) {
                const emptyState = {
                    data: undefined,
                    error: undefined,
                    isLoading: false,
                    isValidating: false
                };
                return {
                    ...emptyState,
                    mutate: jest.fn().mockImplementation(async ()=>undefined)
                };
            }
            // モックの状態を管理するための変数
            const mockState = {
                data: {
                    success: true,
                    data: [
                        {
                            id: 1,
                            name: 'テストデータ'
                        }
                    ]
                },
                error: undefined,
                isLoading: false,
                isValidating: false
            };
            // mutate関数の実装
            const mutate = jest.fn().mockImplementation(async (data, options)=>{
                if (data !== undefined) {
                    mockState.data = data;
                    return data;
                } else if (fetcher) {
                    try {
                        // 実際のfetcher関数を呼び出す
                        mockState.isValidating = true;
                        const result = await fetcher();
                        mockState.data = result;
                        mockState.error = undefined;
                        return result;
                    } catch (error) {
                        // 型エラーを回避するために型ガードを使用
                        const errorObj = error instanceof Error ? error : new Error(String(error));
                        mockState.error = errorObj;
                        return undefined;
                    } finally{
                        mockState.isValidating = false;
                    }
                }
                return mockState.data;
            });
            return {
                ...mockState,
                mutate
            };
        })
    };
});
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _interop_require_default = require("@swc/helpers/_/_interop_require_default");
const _react = /*#__PURE__*/ _interop_require_default._(require("react"));
const _react1 = require("@testing-library/react");
const _useapi = require("@/lib/hooks/use-api");
const _globals = require("@jest/globals");
// 非同期処理の待機ヘルパー関数
async function wait(ms) {
    return new Promise((resolve)=>setTimeout(resolve, ms));
}
// fetchのモック
globalThis.fetch = jest.fn();
const mockFetch = globalThis.fetch;
describe('APIフック', ()=>{
    beforeEach(()=>{
        jest.clearAllMocks();
    });
    describe('useApiMutation', ()=>{
        it('ミューテーションを正しく実行する', async ()=>{
            const mockData = {
                id: 1,
                name: '更新されたデータ'
            };
            const updateData = {
                name: '更新されたデータ'
            };
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async ()=>mockData
            });
            const { result } = (0, _react1.renderHook)(()=>(0, _useapi.useApiMutation)('/api/test'));
            (0, _globals.expect)(result.current.isLoading).toBe(false);
            await (0, _react1.act)(async ()=>{
                await result.current.mutate(updateData);
            });
            (0, _globals.expect)(mockFetch).toHaveBeenCalledWith('/api/test', _globals.expect.objectContaining({
                method: 'POST',
                headers: _globals.expect.objectContaining({
                    'Content-Type': 'application/json'
                }),
                body: JSON.stringify(updateData),
                credentials: 'include'
            }));
            (0, _globals.expect)(result.current.data).toEqual(mockData);
            (0, _globals.expect)(result.current.error).toBeUndefined();
        });
        it('ミューテーションエラーを正しく処理する', async ()=>{
            mockFetch.mockResolvedValueOnce({
                ok: false,
                status: 500,
                statusText: 'Internal Server Error',
                json: async ()=>({
                        message: 'サーバーエラー'
                    })
            });
            const { result } = (0, _react1.renderHook)(()=>(0, _useapi.useApiMutation)('/api/test'));
            await (0, _react1.act)(async ()=>{
                await result.current.mutate({
                    name: 'テスト'
                });
            });
            (0, _globals.expect)(result.current.isLoading).toBe(false);
            (0, _globals.expect)(result.current.data).toBeUndefined();
            (0, _globals.expect)(result.current.error).toBeDefined();
            (0, _globals.expect)(result.current.error.status).toBe(500);
            (0, _globals.expect)(result.current.error.info).toEqual({
                message: 'サーバーエラー'
            });
        });
        it('ネットワークエラーを正しく処理する', async ()=>{
            // ネットワークエラーをシミュレート
            mockFetch.mockRejectedValueOnce(new Error('Network error'));
            const { result } = (0, _react1.renderHook)(()=>(0, _useapi.useApiMutation)('/api/test'));
            await (0, _react1.act)(async ()=>{
                await result.current.mutate({
                    name: 'テスト'
                });
            });
            (0, _globals.expect)(result.current.isLoading).toBe(false);
            (0, _globals.expect)(result.current.data).toBeUndefined();
            (0, _globals.expect)(result.current.error).toBeDefined();
            (0, _globals.expect)(result.current.error?.message).toContain('Network error');
        });
        it('タイムアウトエラーを正しく処理する', async ()=>{
            // タイムアウトをシミュレート
            mockFetch.mockImplementationOnce(()=>{
                return new Promise((_, reject)=>{
                    setTimeout(()=>{
                        reject(new Error('Request timeout'));
                    }, 100);
                });
            });
            // timeoutオプションはテスト用に追加した拡張オプションとして扱う
            const { result } = (0, _react1.renderHook)(()=>(0, _useapi.useApiMutation)('/api/test', {
                    headers: {
                        'X-Timeout': '50'
                    } // 実際のタイムアウトはヘッダーで設定すると仮定
                }));
            await (0, _react1.act)(async ()=>{
                await result.current.mutate({
                    name: 'テスト'
                }).catch(()=>{});
            });
            (0, _globals.expect)(result.current.isLoading).toBe(false);
            (0, _globals.expect)(result.current.data).toBeUndefined();
            (0, _globals.expect)(result.current.error).toBeDefined();
            if (result.current.error) {
                (0, _globals.expect)(result.current.error.message).toContain('timeout');
            }
        });
        it('カスタムメソッドを使用できる', async ()=>{
            const mockData = {
                id: 1,
                name: 'テストデータ'
            };
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async ()=>mockData
            });
            const { result } = (0, _react1.renderHook)(()=>(0, _useapi.useApiMutation)('/api/test', {
                    method: 'PUT'
                }));
            await (0, _react1.act)(async ()=>{
                await result.current.mutate({
                    name: 'テスト'
                });
            });
            (0, _globals.expect)(mockFetch).toHaveBeenCalledWith('/api/test', _globals.expect.objectContaining({
                method: 'PUT',
                headers: _globals.expect.objectContaining({
                    'Content-Type': 'application/json'
                }),
                body: JSON.stringify({
                    name: 'テスト'
                }),
                credentials: 'include'
            }));
        });
    });
    describe('useApiRequest', ()=>{
        it('GETリクエストが正しく動作する', async ()=>{
            const mockData = {
                success: true,
                data: [
                    {
                        id: 1,
                        name: 'テストデータ'
                    }
                ]
            };
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async ()=>mockData
            });
            const { result } = (0, _react1.renderHook)(()=>(0, _useapi.useApiRequest)('/api/test'));
            // SWRの初期データが設定されているか確認
            (0, _globals.expect)(result.current.data).toEqual({
                success: true,
                data: [
                    {
                        id: 1,
                        name: 'テストデータ'
                    }
                ]
            });
            // mutateを呼び出して再フェッチをシミュレート
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async ()=>({
                        success: true,
                        data: [
                            {
                                id: 1,
                                name: '更新データ'
                            }
                        ]
                    })
            });
            await (0, _react1.act)(async ()=>{
                await result.current.mutate();
            });
            // フェッチが正しいパラメータで呼ばれたか確認
            (0, _globals.expect)(mockFetch).toHaveBeenCalledWith('/api/test', _globals.expect.objectContaining({
                method: 'GET',
                headers: _globals.expect.objectContaining({
                    'Content-Type': 'application/json'
                }),
                credentials: 'include'
            }));
        });
        it('条件付きフェッチが正しく動作する', async ()=>{
            const mockData = {
                success: true,
                data: [
                    {
                        id: 1,
                        name: 'テストデータ'
                    }
                ]
            };
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async ()=>mockData
            });
            // 条件付きリクエストをテストするためのモック関数
            const conditionalRequest = (condition)=>{
                return condition ? '/api/test' : '';
            };
            // 条件がfalseの場合
            const { result: resultFalse } = (0, _react1.renderHook)(()=>(0, _useapi.useApiRequest)(conditionalRequest(false)));
            // データがロードされていないことを確認
            (0, _globals.expect)(resultFalse.current.data).toBeUndefined();
            (0, _globals.expect)(mockFetch).not.toHaveBeenCalled();
            // 条件がtrueの場合
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async ()=>mockData
            });
            const { result: resultTrue } = (0, _react1.renderHook)(()=>(0, _useapi.useApiRequest)(conditionalRequest(true)));
            // データがロードされていることを確認
            (0, _globals.expect)(resultTrue.current.data).toEqual({
                success: true,
                data: [
                    {
                        id: 1,
                        name: 'テストデータ'
                    }
                ]
            });
        });
        it('カスタムヘッダーを設定できる', async ()=>{
            const mockData = {
                success: true,
                data: [
                    {
                        id: 1,
                        name: 'テストデータ'
                    }
                ]
            };
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async ()=>mockData
            });
            const customHeaders = {
                'X-Custom-Header': 'test-value'
            };
            const { result } = (0, _react1.renderHook)(()=>(0, _useapi.useApiRequest)('/api/test', {
                    headers: customHeaders
                }));
            // mutateを呼び出して再フェッチをシミュレート
            await (0, _react1.act)(async ()=>{
                await result.current.mutate();
            });
            // fetchが正しいヘッダーで呼ばれたか確認
            (0, _globals.expect)(mockFetch).toHaveBeenCalledWith('/api/test', _globals.expect.objectContaining({
                method: 'GET',
                headers: _globals.expect.objectContaining({
                    'Content-Type': 'application/json',
                    'X-Custom-Header': 'test-value'
                }),
                credentials: 'include'
            }));
        });
        it('エラー時の再試行が正しく動作する', async ()=>{
            // 1回目はエラー、2回目は成功するシナリオ
            mockFetch.mockRejectedValueOnce(new Error('Network error')).mockResolvedValueOnce({
                ok: true,
                json: async ()=>({
                        success: true,
                        data: [
                            {
                                id: 1,
                                name: '再試行成功'
                            }
                        ]
                    })
            });
            // SWRのオプションとして有効なオプションを使用
            const { result } = (0, _react1.renderHook)(()=>(0, _useapi.useApiRequest)('/api/test', {
                    // SWRの標準オプションを使用
                    revalidateOnFocus: false,
                    revalidateIfStale: true,
                    // カスタムヘッダーで再試行設定をシミュレート
                    headers: {
                        'X-Retry-Count': '1',
                        'X-Retry-Delay': '100'
                    }
                }));
            // 初回エラー後の再試行をシミュレート
            await (0, _react1.act)(async ()=>{
                await wait(200); // 再試行の時間を待つ
                await result.current.mutate();
            });
            // 最終的に成功データが取得できることを確認
            (0, _globals.expect)(mockFetch).toHaveBeenCalledTimes(2);
            (0, _globals.expect)(result.current.error).toBeUndefined();
        });
    });
    describe('高度なエラー処理', ()=>{
        it('JSONパースエラーを正しく処理する', async ()=>{
            // JSONパースエラーをシミュレート
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async ()=>{
                    throw new SyntaxError('Unexpected token < in JSON');
                }
            });
            const { result } = (0, _react1.renderHook)(()=>(0, _useapi.useApiMutation)('/api/test'));
            await (0, _react1.act)(async ()=>{
                await result.current.mutate({
                    name: 'テスト'
                }).catch(()=>{});
            });
            (0, _globals.expect)(result.current.error).toBeDefined();
            (0, _globals.expect)(result.current.error?.message).toContain('JSON');
            (0, _globals.expect)(result.current.error instanceof SyntaxError).toBe(true);
        });
        it('CORS制限エラーを正しく処理する', async ()=>{
            // CORS制限エラーをシミュレート
            mockFetch.mockRejectedValueOnce(new TypeError('Failed to fetch: CORS policy'));
            const { result } = (0, _react1.renderHook)(()=>(0, _useapi.useApiMutation)('/api/test'));
            await (0, _react1.act)(async ()=>{
                await result.current.mutate({
                    name: 'テスト'
                }).catch(()=>{});
            });
            (0, _globals.expect)(result.current.error).toBeDefined();
            (0, _globals.expect)(result.current.error?.message).toContain('CORS');
        });
        it('エラーハンドリングが機能する', async ()=>{
            mockFetch.mockResolvedValueOnce({
                ok: false,
                status: 404,
                statusText: 'Not Found',
                json: async ()=>({
                        message: 'リソースが見つかりません'
                    })
            });
            // 直接フェッチャー関数を呼び出してテスト
            const fetcher = async ()=>{
                const response = await fetch('/api/test', {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    credentials: 'include'
                });
                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.message || `Request failed with status ${response.status}`);
                }
                return response.json();
            };
            // エラーが発生することを確認
            await (0, _globals.expect)(fetcher()).rejects.toThrow();
            // fetchが正しく呼ばれたか確認
            (0, _globals.expect)(mockFetch).toHaveBeenCalledWith('/api/test', _globals.expect.objectContaining({
                method: 'GET',
                credentials: 'include'
            }));
        });
        it('POSTリクエストを送信できる', async ()=>{
            const mockData = {
                success: true,
                id: 1
            };
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async ()=>mockData
            });
            const postData = {
                name: 'テストデータ'
            };
            // 直接フェッチャー関数を呼び出してテスト
            const fetcher = async ()=>{
                const response = await fetch('/api/test', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(postData),
                    credentials: 'include'
                });
                if (!response.ok) {
                    throw new Error(`Request failed with status ${response.status}`);
                }
                return response.json();
            };
            await fetcher();
            // fetchが正しいメソッドとボディで呼ばれたか確認
            (0, _globals.expect)(mockFetch).toHaveBeenCalledWith('/api/test', _globals.expect.objectContaining({
                method: 'POST',
                headers: _globals.expect.objectContaining({
                    'Content-Type': 'application/json'
                }),
                body: JSON.stringify(postData),
                credentials: 'include'
            }));
        });
    });
});

//# sourceMappingURL=data:application/json;base64,