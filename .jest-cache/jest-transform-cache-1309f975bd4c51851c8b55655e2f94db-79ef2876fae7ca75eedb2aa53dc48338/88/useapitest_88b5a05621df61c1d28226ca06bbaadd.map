{"version":3,"sources":["/Users/yusuketsunoda/Documents/cursor/ppttranslatorapp/worktrees/4-test-automation/tests/hooks/use-api.test.tsx"],"sourcesContent":["import React from 'react';\nimport { renderHook, act, waitFor } from '@testing-library/react';\nimport { useApiMutation, useApiRequest } from '@/lib/hooks/use-api';\nimport { expect } from '@jest/globals';\n\n// エラー型定義\ninterface ApiError extends Error {\n  status?: number;\n  info?: any;\n}\n\n// APIオプションの拡張型定義\ninterface ExtendedApiOptions {\n  method?: 'GET' | 'POST' | 'PUT' | 'DELETE';\n  headers?: Record<string, string>;\n  body?: any;\n  timeout?: number;\n  retryCount?: number;\n  retryDelay?: number;\n  dedupingInterval?: number;\n}\n\n// 非同期処理の待機ヘルパー関数\nasync function wait(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\n// fetchのモック\nglobalThis.fetch = jest.fn();\nconst mockFetch = globalThis.fetch as jest.Mock;\n\n// SWRのモック\njest.mock('swr', () => {\n  const originalModule = jest.requireActual('swr');\n  \n  return {\n    __esModule: true,\n    default: jest.fn().mockImplementation((key, fetcher, options) => {\n      // SWRのモック用の型定義\n      type MockSWRState = {\n        data: any;\n        error: Error | undefined;\n        isLoading: boolean;\n        isValidating: boolean;\n      };\n      \n      // キャッシュキーがnullまたは空の場合\n      if (!key) {\n        const emptyState: MockSWRState = {\n          data: undefined,\n          error: undefined,\n          isLoading: false,\n          isValidating: false\n        };\n        \n        return {\n          ...emptyState,\n          mutate: jest.fn().mockImplementation(async () => undefined),\n        };\n      }\n      \n      // モックの状態を管理するための変数\n      const mockState: MockSWRState = {\n        data: { success: true, data: [{ id: 1, name: 'テストデータ' }] },\n        error: undefined,\n        isLoading: false,\n        isValidating: false,\n      };\n      \n      // mutate関数の実装\n      const mutate = jest.fn().mockImplementation(async (data?: any, options?: any) => {\n        if (data !== undefined) {\n          mockState.data = data;\n          return data;\n        } else if (fetcher) {\n          try {\n            // 実際のfetcher関数を呼び出す\n            mockState.isValidating = true;\n            const result = await fetcher();\n            mockState.data = result;\n            mockState.error = undefined;\n            return result;\n          } catch (error) {\n            // 型エラーを回避するために型ガードを使用\n            const errorObj = error instanceof Error ? error : new Error(String(error));\n            mockState.error = errorObj;\n            return undefined;\n          } finally {\n            mockState.isValidating = false;\n          }\n        }\n        return mockState.data;\n      });\n      \n      return {\n        ...mockState,\n        mutate,\n      };\n    }),\n  };\n});\n\ndescribe('APIフック', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('useApiMutation', () => {\n    it('ミューテーションを正しく実行する', async () => {\n      const mockData = { id: 1, name: '更新されたデータ' };\n      const updateData = { name: '更新されたデータ' };\n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => mockData,\n      });\n\n      const { result } = renderHook(() => useApiMutation('/api/test'));\n\n      expect(result.current.isLoading).toBe(false);\n\n      await act(async () => {\n        await result.current.mutate(updateData);\n      });\n\n      expect(mockFetch).toHaveBeenCalledWith(\n        '/api/test',\n        expect.objectContaining({\n          method: 'POST',\n          headers: expect.objectContaining({\n            'Content-Type': 'application/json',\n          }),\n          body: JSON.stringify(updateData),\n          credentials: 'include',\n        }),\n      );\n      expect(result.current.data).toEqual(mockData);\n      expect(result.current.error).toBeUndefined();\n    });\n\n    it('ミューテーションエラーを正しく処理する', async () => {\n      mockFetch.mockResolvedValueOnce({\n        ok: false,\n        status: 500,\n        statusText: 'Internal Server Error',\n        json: async () => ({ message: 'サーバーエラー' }),\n      });\n\n      const { result } = renderHook(() => useApiMutation('/api/test'));\n\n      await act(async () => {\n        await result.current.mutate({ name: 'テスト' });\n      });\n\n      expect(result.current.isLoading).toBe(false);\n      expect(result.current.data).toBeUndefined();\n      expect(result.current.error).toBeDefined();\n      expect((result.current.error as ApiError).status).toBe(500);\n      expect((result.current.error as ApiError).info).toEqual({ message: 'サーバーエラー' });\n    });\n    \n    it('ネットワークエラーを正しく処理する', async () => {\n      // ネットワークエラーをシミュレート\n      mockFetch.mockRejectedValueOnce(new Error('Network error'));\n\n      const { result } = renderHook(() => useApiMutation('/api/test'));\n\n      await act(async () => {\n        await result.current.mutate({ name: 'テスト' });\n      });\n\n      expect(result.current.isLoading).toBe(false);\n      expect(result.current.data).toBeUndefined();\n      expect(result.current.error).toBeDefined();\n      expect(result.current.error?.message).toContain('Network error');\n    });\n    \n    it('タイムアウトエラーを正しく処理する', async () => {\n      // タイムアウトをシミュレート\n      mockFetch.mockImplementationOnce(() => {\n        return new Promise((_, reject) => {\n          setTimeout(() => {\n            reject(new Error('Request timeout'));\n          }, 100);\n        });\n      });\n\n      // timeoutオプションはテスト用に追加した拡張オプションとして扱う\n      const { result } = renderHook(() => useApiMutation('/api/test', { \n        headers: { 'X-Timeout': '50' } // 実際のタイムアウトはヘッダーで設定すると仮定\n      }));\n\n      await act(async () => {\n        await result.current.mutate({ name: 'テスト' }).catch(() => {});\n      });\n\n      expect(result.current.isLoading).toBe(false);\n      expect(result.current.data).toBeUndefined();\n      expect(result.current.error).toBeDefined();\n      if (result.current.error) {\n        expect(result.current.error.message).toContain('timeout');\n      }\n    });\n\n    it('カスタムメソッドを使用できる', async () => {\n      const mockData = { id: 1, name: 'テストデータ' };\n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => mockData,\n      });\n\n      const { result } = renderHook(() => useApiMutation('/api/test', { method: 'PUT' }));\n\n      await act(async () => {\n        await result.current.mutate({ name: 'テスト' });\n      });\n\n      expect(mockFetch).toHaveBeenCalledWith(\n        '/api/test',\n        expect.objectContaining({\n          method: 'PUT',\n          headers: expect.objectContaining({\n            'Content-Type': 'application/json',\n          }),\n          body: JSON.stringify({ name: 'テスト' }),\n          credentials: 'include',\n        }),\n      );\n    });\n  });\n\n  describe('useApiRequest', () => {\n    it('GETリクエストが正しく動作する', async () => {\n      const mockData = { success: true, data: [{ id: 1, name: 'テストデータ' }] };\n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => mockData,\n      });\n\n      const { result } = renderHook(() => useApiRequest('/api/test'));\n      \n      // SWRの初期データが設定されているか確認\n      expect(result.current.data).toEqual({ success: true, data: [{ id: 1, name: 'テストデータ' }] });\n      \n      // mutateを呼び出して再フェッチをシミュレート\n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => ({ success: true, data: [{ id: 1, name: '更新データ' }] }),\n      });\n      \n      await act(async () => {\n        await result.current.mutate();\n      });\n      \n      // フェッチが正しいパラメータで呼ばれたか確認\n      expect(mockFetch).toHaveBeenCalledWith(\n        '/api/test',\n        expect.objectContaining({\n          method: 'GET',\n          headers: expect.objectContaining({\n            'Content-Type': 'application/json',\n          }),\n          credentials: 'include',\n        }),\n      );\n    });\n    \n    it('条件付きフェッチが正しく動作する', async () => {\n      const mockData = { success: true, data: [{ id: 1, name: 'テストデータ' }] };\n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => mockData,\n      });\n\n      // 条件付きリクエストをテストするためのモック関数\n      const conditionalRequest = (condition: boolean): string => {\n        return condition ? '/api/test' : '';\n      };\n      \n      // 条件がfalseの場合\n      const { result: resultFalse } = renderHook(() => \n        useApiRequest(conditionalRequest(false))\n      );\n      \n      // データがロードされていないことを確認\n      expect(resultFalse.current.data).toBeUndefined();\n      expect(mockFetch).not.toHaveBeenCalled();\n      \n      // 条件がtrueの場合\n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => mockData,\n      });\n      \n      const { result: resultTrue } = renderHook(() => \n        useApiRequest(conditionalRequest(true))\n      );\n      \n      // データがロードされていることを確認\n      expect(resultTrue.current.data).toEqual({ success: true, data: [{ id: 1, name: 'テストデータ' }] });\n    });\n\n    it('カスタムヘッダーを設定できる', async () => {\n      const mockData = { success: true, data: [{ id: 1, name: 'テストデータ' }] };\n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => mockData,\n      });\n\n      const customHeaders = { 'X-Custom-Header': 'test-value' };\n      \n      const { result } = renderHook(() => \n        useApiRequest('/api/test', { headers: customHeaders })\n      );\n      \n      // mutateを呼び出して再フェッチをシミュレート\n      await act(async () => {\n        await result.current.mutate();\n      });\n      \n      // fetchが正しいヘッダーで呼ばれたか確認\n      expect(mockFetch).toHaveBeenCalledWith(\n        '/api/test',\n        expect.objectContaining({\n          method: 'GET',\n          headers: expect.objectContaining({\n            'Content-Type': 'application/json',\n            'X-Custom-Header': 'test-value'\n          }),\n          credentials: 'include',\n        }),\n      );\n    });\n    \n    it('エラー時の再試行が正しく動作する', async () => {\n      // 1回目はエラー、2回目は成功するシナリオ\n      mockFetch\n        .mockRejectedValueOnce(new Error('Network error'))\n        .mockResolvedValueOnce({\n          ok: true,\n          json: async () => ({ success: true, data: [{ id: 1, name: '再試行成功' }] }),\n        });\n\n      // SWRのオプションとして有効なオプションを使用\n      const { result } = renderHook(() => \n        useApiRequest('/api/test', { \n          // SWRの標準オプションを使用\n          revalidateOnFocus: false,\n          revalidateIfStale: true,\n          // カスタムヘッダーで再試行設定をシミュレート\n          headers: {\n            'X-Retry-Count': '1',\n            'X-Retry-Delay': '100'\n          }\n        })\n      );\n      \n      // 初回エラー後の再試行をシミュレート\n      await act(async () => {\n        await wait(200); // 再試行の時間を待つ\n        await result.current.mutate();\n      });\n      \n      // 最終的に成功データが取得できることを確認\n      expect(mockFetch).toHaveBeenCalledTimes(2);\n      expect(result.current.error).toBeUndefined();\n    });\n  });\n  \n  describe('高度なエラー処理', () => {\n    it('JSONパースエラーを正しく処理する', async () => {\n      // JSONパースエラーをシミュレート\n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => { throw new SyntaxError('Unexpected token < in JSON'); },\n      });\n\n      const { result } = renderHook(() => useApiMutation('/api/test'));\n\n      await act(async () => {\n        await result.current.mutate({ name: 'テスト' }).catch(() => {});\n      });\n\n      expect(result.current.error).toBeDefined();\n      expect(result.current.error?.message).toContain('JSON');\n      expect(result.current.error instanceof SyntaxError).toBe(true);\n    });\n    \n    it('CORS制限エラーを正しく処理する', async () => {\n      // CORS制限エラーをシミュレート\n      mockFetch.mockRejectedValueOnce(new TypeError('Failed to fetch: CORS policy'));\n\n      const { result } = renderHook(() => useApiMutation('/api/test'));\n\n      await act(async () => {\n        await result.current.mutate({ name: 'テスト' }).catch(() => {});\n      });\n\n      expect(result.current.error).toBeDefined();\n      expect(result.current.error?.message).toContain('CORS');\n    });\n\n    it('エラーハンドリングが機能する', async () => {\n      mockFetch.mockResolvedValueOnce({\n        ok: false,\n        status: 404,\n        statusText: 'Not Found',\n        json: async () => ({ message: 'リソースが見つかりません' }),\n      });\n\n      // 直接フェッチャー関数を呼び出してテスト\n      const fetcher = async () => {\n        const response = await fetch('/api/test', {\n          method: 'GET',\n          headers: { 'Content-Type': 'application/json' },\n          credentials: 'include',\n        });\n        \n        if (!response.ok) {\n          const errorData = await response.json();\n          throw new Error(errorData.message || `Request failed with status ${response.status}`);\n        }\n        \n        return response.json();\n      };\n      \n      // エラーが発生することを確認\n      await expect(fetcher()).rejects.toThrow();\n      \n      // fetchが正しく呼ばれたか確認\n      expect(mockFetch).toHaveBeenCalledWith(\n        '/api/test',\n        expect.objectContaining({\n          method: 'GET',\n          credentials: 'include',\n        }),\n      );\n    });\n    \n    it('POSTリクエストを送信できる', async () => {\n      const mockData = { success: true, id: 1 };\n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => mockData,\n      });\n\n      const postData = { name: 'テストデータ' };\n      \n      // 直接フェッチャー関数を呼び出してテスト\n      const fetcher = async () => {\n        const response = await fetch('/api/test', {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify(postData),\n          credentials: 'include',\n        });\n        \n        if (!response.ok) {\n          throw new Error(`Request failed with status ${response.status}`);\n        }\n        \n        return response.json();\n      };\n      \n      await fetcher();\n      \n      // fetchが正しいメソッドとボディで呼ばれたか確認\n      expect(mockFetch).toHaveBeenCalledWith(\n        '/api/test',\n        expect.objectContaining({\n          method: 'POST',\n          headers: expect.objectContaining({\n            'Content-Type': 'application/json',\n          }),\n          body: JSON.stringify(postData),\n          credentials: 'include',\n        }),\n      );\n    });\n  });\n});\n"],"names":["jest","mock","originalModule","requireActual","__esModule","default","fn","mockImplementation","key","fetcher","options","emptyState","data","undefined","error","isLoading","isValidating","mutate","mockState","success","id","name","result","errorObj","Error","String","wait","ms","Promise","resolve","setTimeout","globalThis","fetch","mockFetch","describe","beforeEach","clearAllMocks","it","mockData","updateData","mockResolvedValueOnce","ok","json","renderHook","useApiMutation","expect","current","toBe","act","toHaveBeenCalledWith","objectContaining","method","headers","body","JSON","stringify","credentials","toEqual","toBeUndefined","status","statusText","message","toBeDefined","info","mockRejectedValueOnce","toContain","mockImplementationOnce","_","reject","catch","useApiRequest","conditionalRequest","condition","resultFalse","not","toHaveBeenCalled","resultTrue","customHeaders","revalidateOnFocus","revalidateIfStale","toHaveBeenCalledTimes","SyntaxError","TypeError","response","errorData","rejects","toThrow","postData"],"mappings":"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"}