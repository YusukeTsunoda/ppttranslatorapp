{"version":3,"sources":["/Users/yusuketsunoda/Documents/cursor/ppttranslatorapp/node_modules/@testing-library/react/node_modules/@testing-library/dom/dist/queries/text.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.queryByText = exports.queryAllByText = exports.getByText = exports.getAllByText = exports.findByText = exports.findAllByText = void 0;\nvar _queryHelpers = require(\"../query-helpers\");\nvar _helpers = require(\"../helpers\");\nvar _allUtils = require(\"./all-utils\");\nconst queryAllByText = (container, text, {\n  selector = '*',\n  exact = true,\n  collapseWhitespace,\n  trim,\n  ignore = (0, _allUtils.getConfig)().defaultIgnore,\n  normalizer\n} = {}) => {\n  (0, _helpers.checkContainerType)(container);\n  const matcher = exact ? _allUtils.matches : _allUtils.fuzzyMatches;\n  const matchNormalizer = (0, _allUtils.makeNormalizer)({\n    collapseWhitespace,\n    trim,\n    normalizer\n  });\n  let baseArray = [];\n  if (typeof container.matches === 'function' && container.matches(selector)) {\n    baseArray = [container];\n  }\n  return [...baseArray, ...Array.from(container.querySelectorAll(selector))]\n  // TODO: `matches` according lib.dom.d.ts can get only `string` but according our code it can handle also boolean :)\n  .filter(node => !ignore || !node.matches(ignore)).filter(node => matcher((0, _allUtils.getNodeText)(node), node, text, matchNormalizer));\n};\nconst getMultipleError = (c, text) => `Found multiple elements with the text: ${text}`;\nconst getMissingError = (c, text, options = {}) => {\n  const {\n    collapseWhitespace,\n    trim,\n    normalizer,\n    selector\n  } = options;\n  const matchNormalizer = (0, _allUtils.makeNormalizer)({\n    collapseWhitespace,\n    trim,\n    normalizer\n  });\n  const normalizedText = matchNormalizer(text.toString());\n  const isNormalizedDifferent = normalizedText !== text.toString();\n  const isCustomSelector = (selector ?? '*') !== '*';\n  return `Unable to find an element with the text: ${isNormalizedDifferent ? `${normalizedText} (normalized from '${text}')` : text}${isCustomSelector ? `, which matches selector '${selector}'` : ''}. This could be because the text is broken up by multiple elements. In this case, you can provide a function for your text matcher to make your matcher more flexible.`;\n};\nconst queryAllByTextWithSuggestions = exports.queryAllByText = (0, _queryHelpers.wrapAllByQueryWithSuggestion)(queryAllByText, queryAllByText.name, 'queryAll');\nconst [queryByText, getAllByText, getByText, findAllByText, findByText] = (0, _allUtils.buildQueries)(queryAllByText, getMultipleError, getMissingError);\nexports.findByText = findByText;\nexports.findAllByText = findAllByText;\nexports.getByText = getByText;\nexports.getAllByText = getAllByText;\nexports.queryByText = queryByText;"],"names":["Object","defineProperty","exports","value","queryByText","queryAllByText","getByText","getAllByText","findByText","findAllByText","_queryHelpers","require","_helpers","_allUtils","container","text","selector","exact","collapseWhitespace","trim","ignore","getConfig","defaultIgnore","normalizer","checkContainerType","matcher","matches","fuzzyMatches","matchNormalizer","makeNormalizer","baseArray","Array","from","querySelectorAll","filter","node","getNodeText","getMultipleError","c","getMissingError","options","normalizedText","toString","isNormalizedDifferent","isCustomSelector","queryAllByTextWithSuggestions","wrapAllByQueryWithSuggestion","name","buildQueries"],"mappings":"AAAA;AAEAA,OAAOC,cAAc,CAACC,SAAS,cAAc;IAC3CC,OAAO;AACT;AACAD,QAAQE,WAAW,GAAGF,QAAQG,cAAc,GAAGH,QAAQI,SAAS,GAAGJ,QAAQK,YAAY,GAAGL,QAAQM,UAAU,GAAGN,QAAQO,aAAa,GAAG,KAAK;AAC5I,IAAIC,gBAAgBC,QAAQ;AAC5B,IAAIC,WAAWD,QAAQ;AACvB,IAAIE,YAAYF,QAAQ;AACxB,MAAMN,iBAAiB,CAACS,WAAWC,MAAM,EACvCC,WAAW,GAAG,EACdC,QAAQ,IAAI,EACZC,kBAAkB,EAClBC,IAAI,EACJC,SAAS,AAAC,CAAA,GAAGP,UAAUQ,SAAS,AAAD,IAAKC,aAAa,EACjDC,UAAU,EACX,GAAG,CAAC,CAAC;IACH,CAAA,GAAGX,SAASY,kBAAkB,AAAD,EAAGV;IACjC,MAAMW,UAAUR,QAAQJ,UAAUa,OAAO,GAAGb,UAAUc,YAAY;IAClE,MAAMC,kBAAkB,AAAC,CAAA,GAAGf,UAAUgB,cAAc,AAAD,EAAG;QACpDX;QACAC;QACAI;IACF;IACA,IAAIO,YAAY,EAAE;IAClB,IAAI,OAAOhB,UAAUY,OAAO,KAAK,cAAcZ,UAAUY,OAAO,CAACV,WAAW;QAC1Ec,YAAY;YAAChB;SAAU;IACzB;IACA,OAAO;WAAIgB;WAAcC,MAAMC,IAAI,CAAClB,UAAUmB,gBAAgB,CAACjB;KAAW,AAC1E,oHAAoH;KACnHkB,MAAM,CAACC,CAAAA,OAAQ,CAACf,UAAU,CAACe,KAAKT,OAAO,CAACN,SAASc,MAAM,CAACC,CAAAA,OAAQV,QAAQ,AAAC,CAAA,GAAGZ,UAAUuB,WAAW,AAAD,EAAGD,OAAOA,MAAMpB,MAAMa;AACzH;AACA,MAAMS,mBAAmB,CAACC,GAAGvB,OAAS,CAAC,uCAAuC,EAAEA,MAAM;AACtF,MAAMwB,kBAAkB,CAACD,GAAGvB,MAAMyB,UAAU,CAAC,CAAC;IAC5C,MAAM,EACJtB,kBAAkB,EAClBC,IAAI,EACJI,UAAU,EACVP,QAAQ,EACT,GAAGwB;IACJ,MAAMZ,kBAAkB,AAAC,CAAA,GAAGf,UAAUgB,cAAc,AAAD,EAAG;QACpDX;QACAC;QACAI;IACF;IACA,MAAMkB,iBAAiBb,gBAAgBb,KAAK2B,QAAQ;IACpD,MAAMC,wBAAwBF,mBAAmB1B,KAAK2B,QAAQ;IAC9D,MAAME,mBAAmB,AAAC5B,CAAAA,YAAY,GAAE,MAAO;IAC/C,OAAO,CAAC,yCAAyC,EAAE2B,wBAAwB,GAAGF,eAAe,mBAAmB,EAAE1B,KAAK,EAAE,CAAC,GAAGA,OAAO6B,mBAAmB,CAAC,0BAA0B,EAAE5B,SAAS,CAAC,CAAC,GAAG,GAAG,sKAAsK,CAAC;AAC9W;AACA,MAAM6B,gCAAgC3C,QAAQG,cAAc,GAAG,AAAC,CAAA,GAAGK,cAAcoC,4BAA4B,AAAD,EAAGzC,gBAAgBA,eAAe0C,IAAI,EAAE;AACpJ,MAAM,CAAC3C,aAAaG,cAAcD,WAAWG,eAAeD,WAAW,GAAG,AAAC,CAAA,GAAGK,UAAUmC,YAAY,AAAD,EAAG3C,gBAAgBgC,kBAAkBE;AACxIrC,QAAQM,UAAU,GAAGA;AACrBN,QAAQO,aAAa,GAAGA;AACxBP,QAAQI,SAAS,GAAGA;AACpBJ,QAAQK,YAAY,GAAGA;AACvBL,QAAQE,WAAW,GAAGA"}