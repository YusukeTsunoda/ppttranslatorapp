954d68d17da69c7fb78b50d3a0340e9c
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.queryByText = exports.queryAllByText = exports.getByText = exports.getAllByText = exports.findByText = exports.findAllByText = void 0;
var _queryHelpers = require("../query-helpers");
var _helpers = require("../helpers");
var _allUtils = require("./all-utils");
const queryAllByText = (container, text, { selector = '*', exact = true, collapseWhitespace, trim, ignore = (0, _allUtils.getConfig)().defaultIgnore, normalizer } = {})=>{
    (0, _helpers.checkContainerType)(container);
    const matcher = exact ? _allUtils.matches : _allUtils.fuzzyMatches;
    const matchNormalizer = (0, _allUtils.makeNormalizer)({
        collapseWhitespace,
        trim,
        normalizer
    });
    let baseArray = [];
    if (typeof container.matches === 'function' && container.matches(selector)) {
        baseArray = [
            container
        ];
    }
    return [
        ...baseArray,
        ...Array.from(container.querySelectorAll(selector))
    ]// TODO: `matches` according lib.dom.d.ts can get only `string` but according our code it can handle also boolean :)
    .filter((node)=>!ignore || !node.matches(ignore)).filter((node)=>matcher((0, _allUtils.getNodeText)(node), node, text, matchNormalizer));
};
const getMultipleError = (c, text)=>`Found multiple elements with the text: ${text}`;
const getMissingError = (c, text, options = {})=>{
    const { collapseWhitespace, trim, normalizer, selector } = options;
    const matchNormalizer = (0, _allUtils.makeNormalizer)({
        collapseWhitespace,
        trim,
        normalizer
    });
    const normalizedText = matchNormalizer(text.toString());
    const isNormalizedDifferent = normalizedText !== text.toString();
    const isCustomSelector = (selector ?? '*') !== '*';
    return `Unable to find an element with the text: ${isNormalizedDifferent ? `${normalizedText} (normalized from '${text}')` : text}${isCustomSelector ? `, which matches selector '${selector}'` : ''}. This could be because the text is broken up by multiple elements. In this case, you can provide a function for your text matcher to make your matcher more flexible.`;
};
const queryAllByTextWithSuggestions = exports.queryAllByText = (0, _queryHelpers.wrapAllByQueryWithSuggestion)(queryAllByText, queryAllByText.name, 'queryAll');
const [queryByText, getAllByText, getByText, findAllByText, findByText] = (0, _allUtils.buildQueries)(queryAllByText, getMultipleError, getMissingError);
exports.findByText = findByText;
exports.findAllByText = findAllByText;
exports.getByText = getByText;
exports.getAllByText = getAllByText;
exports.queryByText = queryByText;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy95dXN1a2V0c3Vub2RhL0RvY3VtZW50cy9jdXJzb3IvcHB0dHJhbnNsYXRvcmFwcC9ub2RlX21vZHVsZXMvQHRlc3RpbmctbGlicmFyeS9yZWFjdC9ub2RlX21vZHVsZXMvQHRlc3RpbmctbGlicmFyeS9kb20vZGlzdC9xdWVyaWVzL3RleHQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLnF1ZXJ5QnlUZXh0ID0gZXhwb3J0cy5xdWVyeUFsbEJ5VGV4dCA9IGV4cG9ydHMuZ2V0QnlUZXh0ID0gZXhwb3J0cy5nZXRBbGxCeVRleHQgPSBleHBvcnRzLmZpbmRCeVRleHQgPSBleHBvcnRzLmZpbmRBbGxCeVRleHQgPSB2b2lkIDA7XG52YXIgX3F1ZXJ5SGVscGVycyA9IHJlcXVpcmUoXCIuLi9xdWVyeS1oZWxwZXJzXCIpO1xudmFyIF9oZWxwZXJzID0gcmVxdWlyZShcIi4uL2hlbHBlcnNcIik7XG52YXIgX2FsbFV0aWxzID0gcmVxdWlyZShcIi4vYWxsLXV0aWxzXCIpO1xuY29uc3QgcXVlcnlBbGxCeVRleHQgPSAoY29udGFpbmVyLCB0ZXh0LCB7XG4gIHNlbGVjdG9yID0gJyonLFxuICBleGFjdCA9IHRydWUsXG4gIGNvbGxhcHNlV2hpdGVzcGFjZSxcbiAgdHJpbSxcbiAgaWdub3JlID0gKDAsIF9hbGxVdGlscy5nZXRDb25maWcpKCkuZGVmYXVsdElnbm9yZSxcbiAgbm9ybWFsaXplclxufSA9IHt9KSA9PiB7XG4gICgwLCBfaGVscGVycy5jaGVja0NvbnRhaW5lclR5cGUpKGNvbnRhaW5lcik7XG4gIGNvbnN0IG1hdGNoZXIgPSBleGFjdCA/IF9hbGxVdGlscy5tYXRjaGVzIDogX2FsbFV0aWxzLmZ1enp5TWF0Y2hlcztcbiAgY29uc3QgbWF0Y2hOb3JtYWxpemVyID0gKDAsIF9hbGxVdGlscy5tYWtlTm9ybWFsaXplcikoe1xuICAgIGNvbGxhcHNlV2hpdGVzcGFjZSxcbiAgICB0cmltLFxuICAgIG5vcm1hbGl6ZXJcbiAgfSk7XG4gIGxldCBiYXNlQXJyYXkgPSBbXTtcbiAgaWYgKHR5cGVvZiBjb250YWluZXIubWF0Y2hlcyA9PT0gJ2Z1bmN0aW9uJyAmJiBjb250YWluZXIubWF0Y2hlcyhzZWxlY3RvcikpIHtcbiAgICBiYXNlQXJyYXkgPSBbY29udGFpbmVyXTtcbiAgfVxuICByZXR1cm4gWy4uLmJhc2VBcnJheSwgLi4uQXJyYXkuZnJvbShjb250YWluZXIucXVlcnlTZWxlY3RvckFsbChzZWxlY3RvcikpXVxuICAvLyBUT0RPOiBgbWF0Y2hlc2AgYWNjb3JkaW5nIGxpYi5kb20uZC50cyBjYW4gZ2V0IG9ubHkgYHN0cmluZ2AgYnV0IGFjY29yZGluZyBvdXIgY29kZSBpdCBjYW4gaGFuZGxlIGFsc28gYm9vbGVhbiA6KVxuICAuZmlsdGVyKG5vZGUgPT4gIWlnbm9yZSB8fCAhbm9kZS5tYXRjaGVzKGlnbm9yZSkpLmZpbHRlcihub2RlID0+IG1hdGNoZXIoKDAsIF9hbGxVdGlscy5nZXROb2RlVGV4dCkobm9kZSksIG5vZGUsIHRleHQsIG1hdGNoTm9ybWFsaXplcikpO1xufTtcbmNvbnN0IGdldE11bHRpcGxlRXJyb3IgPSAoYywgdGV4dCkgPT4gYEZvdW5kIG11bHRpcGxlIGVsZW1lbnRzIHdpdGggdGhlIHRleHQ6ICR7dGV4dH1gO1xuY29uc3QgZ2V0TWlzc2luZ0Vycm9yID0gKGMsIHRleHQsIG9wdGlvbnMgPSB7fSkgPT4ge1xuICBjb25zdCB7XG4gICAgY29sbGFwc2VXaGl0ZXNwYWNlLFxuICAgIHRyaW0sXG4gICAgbm9ybWFsaXplcixcbiAgICBzZWxlY3RvclxuICB9ID0gb3B0aW9ucztcbiAgY29uc3QgbWF0Y2hOb3JtYWxpemVyID0gKDAsIF9hbGxVdGlscy5tYWtlTm9ybWFsaXplcikoe1xuICAgIGNvbGxhcHNlV2hpdGVzcGFjZSxcbiAgICB0cmltLFxuICAgIG5vcm1hbGl6ZXJcbiAgfSk7XG4gIGNvbnN0IG5vcm1hbGl6ZWRUZXh0ID0gbWF0Y2hOb3JtYWxpemVyKHRleHQudG9TdHJpbmcoKSk7XG4gIGNvbnN0IGlzTm9ybWFsaXplZERpZmZlcmVudCA9IG5vcm1hbGl6ZWRUZXh0ICE9PSB0ZXh0LnRvU3RyaW5nKCk7XG4gIGNvbnN0IGlzQ3VzdG9tU2VsZWN0b3IgPSAoc2VsZWN0b3IgPz8gJyonKSAhPT0gJyonO1xuICByZXR1cm4gYFVuYWJsZSB0byBmaW5kIGFuIGVsZW1lbnQgd2l0aCB0aGUgdGV4dDogJHtpc05vcm1hbGl6ZWREaWZmZXJlbnQgPyBgJHtub3JtYWxpemVkVGV4dH0gKG5vcm1hbGl6ZWQgZnJvbSAnJHt0ZXh0fScpYCA6IHRleHR9JHtpc0N1c3RvbVNlbGVjdG9yID8gYCwgd2hpY2ggbWF0Y2hlcyBzZWxlY3RvciAnJHtzZWxlY3Rvcn0nYCA6ICcnfS4gVGhpcyBjb3VsZCBiZSBiZWNhdXNlIHRoZSB0ZXh0IGlzIGJyb2tlbiB1cCBieSBtdWx0aXBsZSBlbGVtZW50cy4gSW4gdGhpcyBjYXNlLCB5b3UgY2FuIHByb3ZpZGUgYSBmdW5jdGlvbiBmb3IgeW91ciB0ZXh0IG1hdGNoZXIgdG8gbWFrZSB5b3VyIG1hdGNoZXIgbW9yZSBmbGV4aWJsZS5gO1xufTtcbmNvbnN0IHF1ZXJ5QWxsQnlUZXh0V2l0aFN1Z2dlc3Rpb25zID0gZXhwb3J0cy5xdWVyeUFsbEJ5VGV4dCA9ICgwLCBfcXVlcnlIZWxwZXJzLndyYXBBbGxCeVF1ZXJ5V2l0aFN1Z2dlc3Rpb24pKHF1ZXJ5QWxsQnlUZXh0LCBxdWVyeUFsbEJ5VGV4dC5uYW1lLCAncXVlcnlBbGwnKTtcbmNvbnN0IFtxdWVyeUJ5VGV4dCwgZ2V0QWxsQnlUZXh0LCBnZXRCeVRleHQsIGZpbmRBbGxCeVRleHQsIGZpbmRCeVRleHRdID0gKDAsIF9hbGxVdGlscy5idWlsZFF1ZXJpZXMpKHF1ZXJ5QWxsQnlUZXh0LCBnZXRNdWx0aXBsZUVycm9yLCBnZXRNaXNzaW5nRXJyb3IpO1xuZXhwb3J0cy5maW5kQnlUZXh0ID0gZmluZEJ5VGV4dDtcbmV4cG9ydHMuZmluZEFsbEJ5VGV4dCA9IGZpbmRBbGxCeVRleHQ7XG5leHBvcnRzLmdldEJ5VGV4dCA9IGdldEJ5VGV4dDtcbmV4cG9ydHMuZ2V0QWxsQnlUZXh0ID0gZ2V0QWxsQnlUZXh0O1xuZXhwb3J0cy5xdWVyeUJ5VGV4dCA9IHF1ZXJ5QnlUZXh0OyJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInF1ZXJ5QnlUZXh0IiwicXVlcnlBbGxCeVRleHQiLCJnZXRCeVRleHQiLCJnZXRBbGxCeVRleHQiLCJmaW5kQnlUZXh0IiwiZmluZEFsbEJ5VGV4dCIsIl9xdWVyeUhlbHBlcnMiLCJyZXF1aXJlIiwiX2hlbHBlcnMiLCJfYWxsVXRpbHMiLCJjb250YWluZXIiLCJ0ZXh0Iiwic2VsZWN0b3IiLCJleGFjdCIsImNvbGxhcHNlV2hpdGVzcGFjZSIsInRyaW0iLCJpZ25vcmUiLCJnZXRDb25maWciLCJkZWZhdWx0SWdub3JlIiwibm9ybWFsaXplciIsImNoZWNrQ29udGFpbmVyVHlwZSIsIm1hdGNoZXIiLCJtYXRjaGVzIiwiZnV6enlNYXRjaGVzIiwibWF0Y2hOb3JtYWxpemVyIiwibWFrZU5vcm1hbGl6ZXIiLCJiYXNlQXJyYXkiLCJBcnJheSIsImZyb20iLCJxdWVyeVNlbGVjdG9yQWxsIiwiZmlsdGVyIiwibm9kZSIsImdldE5vZGVUZXh0IiwiZ2V0TXVsdGlwbGVFcnJvciIsImMiLCJnZXRNaXNzaW5nRXJyb3IiLCJvcHRpb25zIiwibm9ybWFsaXplZFRleHQiLCJ0b1N0cmluZyIsImlzTm9ybWFsaXplZERpZmZlcmVudCIsImlzQ3VzdG9tU2VsZWN0b3IiLCJxdWVyeUFsbEJ5VGV4dFdpdGhTdWdnZXN0aW9ucyIsIndyYXBBbGxCeVF1ZXJ5V2l0aFN1Z2dlc3Rpb24iLCJuYW1lIiwiYnVpbGRRdWVyaWVzIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUVBQSxPQUFPQyxjQUFjLENB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