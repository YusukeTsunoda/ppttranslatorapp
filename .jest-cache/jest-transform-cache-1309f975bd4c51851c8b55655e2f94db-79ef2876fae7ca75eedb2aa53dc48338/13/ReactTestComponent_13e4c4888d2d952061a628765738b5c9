53db1a818c21072b807f3f2ef9a960d7
'use strict';
Object.defineProperty(exports, '__esModule', {
    value: true
});
exports.test = exports.serialize = exports.default = void 0;
var _markup = require('./lib/markup');
var global = function() {
    if (typeof globalThis !== 'undefined') {
        return globalThis;
    } else if (typeof global !== 'undefined') {
        return global;
    } else if (typeof self !== 'undefined') {
        return self;
    } else if (typeof window !== 'undefined') {
        return window;
    } else {
        return Function('return this')();
    }
}();
var Symbol = global['jest-symbol-do-not-touch'] || global.Symbol;
const testSymbol = typeof Symbol === 'function' && Symbol.for ? Symbol.for('react.test.json') : 0xea71357;
const getPropKeys = (object)=>{
    const { props } = object;
    return props ? Object.keys(props).filter((key)=>props[key] !== undefined).sort() : [];
};
const serialize = (object, config, indentation, depth, refs, printer)=>++depth > config.maxDepth ? (0, _markup.printElementAsLeaf)(object.type, config) : (0, _markup.printElement)(object.type, object.props ? (0, _markup.printProps)(getPropKeys(object), object.props, config, indentation + config.indent, depth, refs, printer) : '', object.children ? (0, _markup.printChildren)(object.children, config, indentation + config.indent, depth, refs, printer) : '', config, indentation);
exports.serialize = serialize;
const test = (val)=>val && val.$$typeof === testSymbol;
exports.test = test;
const plugin = {
    serialize,
    test
};
var _default = plugin;
exports.default = _default;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy95dXN1a2V0c3Vub2RhL0RvY3VtZW50cy9jdXJzb3IvcHB0dHJhbnNsYXRvcmFwcC9ub2RlX21vZHVsZXMvcHJldHR5LWZvcm1hdC9idWlsZC9wbHVnaW5zL1JlYWN0VGVzdENvbXBvbmVudC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy50ZXN0ID0gZXhwb3J0cy5zZXJpYWxpemUgPSBleHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfbWFya3VwID0gcmVxdWlyZSgnLi9saWIvbWFya3VwJyk7XG5cbnZhciBnbG9iYWwgPSAoZnVuY3Rpb24gKCkge1xuICBpZiAodHlwZW9mIGdsb2JhbFRoaXMgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIGdsb2JhbFRoaXM7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gZ2xvYmFsO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiBzZWxmO1xuICB9IGVsc2UgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIHdpbmRvdztcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcbiAgfVxufSkoKTtcblxudmFyIFN5bWJvbCA9IGdsb2JhbFsnamVzdC1zeW1ib2wtZG8tbm90LXRvdWNoJ10gfHwgZ2xvYmFsLlN5bWJvbDtcbmNvbnN0IHRlc3RTeW1ib2wgPVxuICB0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmIFN5bWJvbC5mb3JcbiAgICA/IFN5bWJvbC5mb3IoJ3JlYWN0LnRlc3QuanNvbicpXG4gICAgOiAweGVhNzEzNTc7XG5cbmNvbnN0IGdldFByb3BLZXlzID0gb2JqZWN0ID0+IHtcbiAgY29uc3Qge3Byb3BzfSA9IG9iamVjdDtcbiAgcmV0dXJuIHByb3BzXG4gICAgPyBPYmplY3Qua2V5cyhwcm9wcylcbiAgICAgICAgLmZpbHRlcihrZXkgPT4gcHJvcHNba2V5XSAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAuc29ydCgpXG4gICAgOiBbXTtcbn07XG5cbmNvbnN0IHNlcmlhbGl6ZSA9IChvYmplY3QsIGNvbmZpZywgaW5kZW50YXRpb24sIGRlcHRoLCByZWZzLCBwcmludGVyKSA9PlxuICArK2RlcHRoID4gY29uZmlnLm1heERlcHRoXG4gICAgPyAoMCwgX21hcmt1cC5wcmludEVsZW1lbnRBc0xlYWYpKG9iamVjdC50eXBlLCBjb25maWcpXG4gICAgOiAoMCwgX21hcmt1cC5wcmludEVsZW1lbnQpKFxuICAgICAgICBvYmplY3QudHlwZSxcbiAgICAgICAgb2JqZWN0LnByb3BzXG4gICAgICAgICAgPyAoMCwgX21hcmt1cC5wcmludFByb3BzKShcbiAgICAgICAgICAgICAgZ2V0UHJvcEtleXMob2JqZWN0KSxcbiAgICAgICAgICAgICAgb2JqZWN0LnByb3BzLFxuICAgICAgICAgICAgICBjb25maWcsXG4gICAgICAgICAgICAgIGluZGVudGF0aW9uICsgY29uZmlnLmluZGVudCxcbiAgICAgICAgICAgICAgZGVwdGgsXG4gICAgICAgICAgICAgIHJlZnMsXG4gICAgICAgICAgICAgIHByaW50ZXJcbiAgICAgICAgICAgIClcbiAgICAgICAgICA6ICcnLFxuICAgICAgICBvYmplY3QuY2hpbGRyZW5cbiAgICAgICAgICA/ICgwLCBfbWFya3VwLnByaW50Q2hpbGRyZW4pKFxuICAgICAgICAgICAgICBvYmplY3QuY2hpbGRyZW4sXG4gICAgICAgICAgICAgIGNvbmZpZyxcbiAgICAgICAgICAgICAgaW5kZW50YXRpb24gKyBjb25maWcuaW5kZW50LFxuICAgICAgICAgICAgICBkZXB0aCxcbiAgICAgICAgICAgICAgcmVmcyxcbiAgICAgICAgICAgICAgcHJpbnRlclxuICAgICAgICAgICAgKVxuICAgICAgICAgIDogJycsXG4gICAgICAgIGNvbmZpZyxcbiAgICAgICAgaW5kZW50YXRpb25cbiAgICAgICk7XG5cbmV4cG9ydHMuc2VyaWFsaXplID0gc2VyaWFsaXplO1xuXG5jb25zdCB0ZXN0ID0gdmFsID0+IHZhbCAmJiB2YWwuJCR0eXBlb2YgPT09IHRlc3RTeW1ib2w7XG5cbmV4cG9ydHMudGVzdCA9IHRlc3Q7XG5jb25zdCBwbHVnaW4gPSB7XG4gIHNlcmlhbGl6ZSxcbiAgdGVzdFxufTtcbnZhciBfZGVmYXVsdCA9IHBsdWdpbjtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0O1xuIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwidGVzdCIsInNlcmlhbGl6ZSIsImRlZmF1bHQiLCJfbWFya3VwIiwicmVxdWlyZSIsImdsb2JhbCIsImdsb2JhbFRoaXMiLCJzZWxmIiwid2luZG93IiwiRnVuY3Rpb24iLCJTeW1ib2wiLCJ0ZXN0U3ltYm9sIiwiZm9yIiwiZ2V0UHJvcEtleXMiLCJvYmplY3QiLCJwcm9wcyIsImtleXMiLCJmaWx0ZXIiLCJrZXkiLCJ1bmRlZmluZWQiLCJzb3J0IiwiY29uZmlnIiwiaW5kZW50YXRpb24iLCJkZXB0aCIsInJlZnMiLCJwcmludGVyIiwibWF4RGVwdGgiLCJwcmludEVsZW1lbnRBc0xlYWYiLCJ0eXBlIiwicHJpbnRFbGVtZW50IiwicHJpbnRQcm9wcyIsImluZGVudCIsImNoaWxkcmVuIiwicHJpbnRDaGlsZHJlbiIsInZhbCIsIiQkdHlwZW9mIiwicGx1Z2luIiwiX2RlZmF1bHQiXSwibWFwcGluZ3MiOiJBQUFBO0FBRUFBLE9BQU9DLGNBQWMsQ0FBQ0MsU0FBUyxjQUFjO0lBQzNDQyxPQUFPO0FBQ1Q7QUFDQUQsUUFBUUUsSUFBSSxHQUFHRixRQUFRRyxTQUFTLEdBQUdILFFBQVFJLE9BQU8sR0FBRyxLQUFLO0FBRTFELElBQUlDLFVBQVVDLFFBQVE7QUFFdEIsSUFBSUMsU0FBUyxBQUFDO0lBQ1osSUFBSSxPQUFPQyxlQUFlLGFBQWE7UUFDckMsT0FBT0E7SUFDVCxPQUFPLElBQUksT0FBT0QsV0FBVyxhQUFhO1FBQ3hDLE9BQU9BO0lBQ1QsT0FBTyxJQUFJLE9BQU9FLFNBQVMsYUFBYTtRQUN0QyxPQUFPQTtJQUNULE9BQU8sSUFBSSxPQUFPQyxXQUFXLGFBQWE7UUFDeEMsT0FBT0E7SUFDVCxPQUFPO1FBQ0wsT0FBT0MsU0FBUztJQUNsQjtBQUNGO0FBRUEsSUFBSUMsU0FBU0wsTUFBTSxDQUFDLDJCQUEyQixJQUFJQSxPQUFPSyxNQUFNO0FBQ2hFLE1BQU1DLGFBQ0osT0FBT0QsV0FBVyxjQUFjQSxPQUFPRSxHQUFHLEdBQ3RDRixPQUFPRSxHQUFHLENBQUMscUJBQ1g7QUFFTixNQUFNQyxjQUFjQyxDQUFBQTtJQUNsQixNQUFNLEVBQUNDLEtBQUssRUFBQyxHQUFHRDtJQUNoQixPQUFPQyxRQUNIbkIsT0FBT29CLElBQUksQ0FBQ0QsT0FDVEUsTUFBTSxDQUFDQyxDQUFBQSxNQUFPSCxLQUFLLENBQUNHLElBQUksS0FBS0MsV0FDN0JDLElBQUksS0FDUCxFQUFFO0FBQ1I7QUFFQSxNQUFNbkIsWUFBWSxDQUFDYSxRQUFRTyxRQUFRQyxhQUFhQyxPQUFPQyxNQUFNQyxVQUMzRCxFQUFFRixRQUFRRixPQUFPSyxRQUFRLEdBQ3JCLEFBQUMsQ0FBQSxHQUFHdkIsUUFBUXdCLGtCQUFrQixBQUFELEVBQUdiLE9BQU9jLElBQUksRUFBRVAsVUFDN0MsQUFBQyxDQUFBLEdBQUdsQixRQUFRMEIsWUFBWSxBQUFELEVBQ3JCZixPQUFPYyxJQUFJLEVBQ1hkLE9BQU9DLEtBQUssR0FDUixBQUFDLENBQUEsR0FBR1osUUFBUTJCLFVBQVUsQUFBRCxFQUNuQmpCLFlBQVlDLFNBQ1pBLE9BQU9DLEtBQUssRUFDWk0sUUFDQUMsY0FBY0QsT0FBT1UsTUFBTSxFQUMzQlIsT0FDQUMsTUFDQUMsV0FFRixJQUNKWCxPQUFPa0IsUUFBUSxHQUNYLEFBQUMsQ0FBQSxHQUFHN0IsUUFBUThCLGFBQWEsQUFBRCxFQUN0Qm5CLE9BQU9rQixRQUFRLEVBQ2ZYLFFBQ0FDLGNBQWNELE9BQU9VLE1BQU0sRUFDM0JSLE9BQ0FDLE1BQ0FDLFdBRUYsSUFDSkosUUFDQUM7QUFHUnhCLFFBQVFHLFNBQVMsR0FBR0E7QUFFcEIsTUFBTUQsT0FBT2tDLENBQUFBLE1BQU9BLE9BQU9BLElBQUlDLFFBQVEsS0FBS3hCO0FBRTVDYixRQUFRRSxJQUFJLEdBQUdBO0FBQ2YsTUFBTW9DLFNBQVM7SUFDYm5DO0lBQ0FEO0FBQ0Y7QUFDQSxJQUFJcUMsV0FBV0Q7QUFDZnRDLFFBQVFJLE9BQU8sR0FBR21DIn0=