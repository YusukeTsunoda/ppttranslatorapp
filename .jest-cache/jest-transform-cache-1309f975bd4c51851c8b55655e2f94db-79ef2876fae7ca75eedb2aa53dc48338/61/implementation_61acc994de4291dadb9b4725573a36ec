b5563db33a9a29ff551d617093ae1f24
'use strict';
/* eslint no-invalid-this: 1 */ var ERROR_MESSAGE = 'Function.prototype.bind called on incompatible ';
var toStr = Object.prototype.toString;
var max = Math.max;
var funcType = '[object Function]';
var concatty = function concatty(a, b) {
    var arr = [];
    for(var i = 0; i < a.length; i += 1){
        arr[i] = a[i];
    }
    for(var j = 0; j < b.length; j += 1){
        arr[j + a.length] = b[j];
    }
    return arr;
};
var slicy = function slicy(arrLike, offset) {
    var arr = [];
    for(var i = offset || 0, j = 0; i < arrLike.length; i += 1, j += 1){
        arr[j] = arrLike[i];
    }
    return arr;
};
var joiny = function(arr, joiner) {
    var str = '';
    for(var i = 0; i < arr.length; i += 1){
        str += arr[i];
        if (i + 1 < arr.length) {
            str += joiner;
        }
    }
    return str;
};
module.exports = function bind(that) {
    var target = this;
    if (typeof target !== 'function' || toStr.apply(target) !== funcType) {
        throw new TypeError(ERROR_MESSAGE + target);
    }
    var args = slicy(arguments, 1);
    var bound;
    var binder = function() {
        if (this instanceof bound) {
            var result = target.apply(this, concatty(args, arguments));
            if (Object(result) === result) {
                return result;
            }
            return this;
        }
        return target.apply(that, concatty(args, arguments));
    };
    var boundLength = max(0, target.length - args.length);
    var boundArgs = [];
    for(var i = 0; i < boundLength; i++){
        boundArgs[i] = '$' + i;
    }
    bound = Function('binder', 'return function (' + joiny(boundArgs, ',') + '){ return binder.apply(this,arguments); }')(binder);
    if (target.prototype) {
        var Empty = function Empty() {};
        Empty.prototype = target.prototype;
        bound.prototype = new Empty();
        Empty.prototype = null;
    }
    return bound;
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy95dXN1a2V0c3Vub2RhL0RvY3VtZW50cy9jdXJzb3IvcHB0dHJhbnNsYXRvcmFwcC9ub2RlX21vZHVsZXMvZnVuY3Rpb24tYmluZC9pbXBsZW1lbnRhdGlvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbi8qIGVzbGludCBuby1pbnZhbGlkLXRoaXM6IDEgKi9cblxudmFyIEVSUk9SX01FU1NBR0UgPSAnRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQgY2FsbGVkIG9uIGluY29tcGF0aWJsZSAnO1xudmFyIHRvU3RyID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcbnZhciBtYXggPSBNYXRoLm1heDtcbnZhciBmdW5jVHlwZSA9ICdbb2JqZWN0IEZ1bmN0aW9uXSc7XG5cbnZhciBjb25jYXR0eSA9IGZ1bmN0aW9uIGNvbmNhdHR5KGEsIGIpIHtcbiAgICB2YXIgYXJyID0gW107XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGEubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgYXJyW2ldID0gYVtpXTtcbiAgICB9XG4gICAgZm9yICh2YXIgaiA9IDA7IGogPCBiLmxlbmd0aDsgaiArPSAxKSB7XG4gICAgICAgIGFycltqICsgYS5sZW5ndGhdID0gYltqXTtcbiAgICB9XG5cbiAgICByZXR1cm4gYXJyO1xufTtcblxudmFyIHNsaWN5ID0gZnVuY3Rpb24gc2xpY3koYXJyTGlrZSwgb2Zmc2V0KSB7XG4gICAgdmFyIGFyciA9IFtdO1xuICAgIGZvciAodmFyIGkgPSBvZmZzZXQgfHwgMCwgaiA9IDA7IGkgPCBhcnJMaWtlLmxlbmd0aDsgaSArPSAxLCBqICs9IDEpIHtcbiAgICAgICAgYXJyW2pdID0gYXJyTGlrZVtpXTtcbiAgICB9XG4gICAgcmV0dXJuIGFycjtcbn07XG5cbnZhciBqb2lueSA9IGZ1bmN0aW9uIChhcnIsIGpvaW5lcikge1xuICAgIHZhciBzdHIgPSAnJztcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyci5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBzdHIgKz0gYXJyW2ldO1xuICAgICAgICBpZiAoaSArIDEgPCBhcnIubGVuZ3RoKSB7XG4gICAgICAgICAgICBzdHIgKz0gam9pbmVyO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBzdHI7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGJpbmQodGhhdCkge1xuICAgIHZhciB0YXJnZXQgPSB0aGlzO1xuICAgIGlmICh0eXBlb2YgdGFyZ2V0ICE9PSAnZnVuY3Rpb24nIHx8IHRvU3RyLmFwcGx5KHRhcmdldCkgIT09IGZ1bmNUeXBlKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRVJST1JfTUVTU0FHRSArIHRhcmdldCk7XG4gICAgfVxuICAgIHZhciBhcmdzID0gc2xpY3koYXJndW1lbnRzLCAxKTtcblxuICAgIHZhciBib3VuZDtcbiAgICB2YXIgYmluZGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcyBpbnN0YW5jZW9mIGJvdW5kKSB7XG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gdGFyZ2V0LmFwcGx5KFxuICAgICAgICAgICAgICAgIHRoaXMsXG4gICAgICAgICAgICAgICAgY29uY2F0dHkoYXJncywgYXJndW1lbnRzKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGlmIChPYmplY3QocmVzdWx0KSA9PT0gcmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0YXJnZXQuYXBwbHkoXG4gICAgICAgICAgICB0aGF0LFxuICAgICAgICAgICAgY29uY2F0dHkoYXJncywgYXJndW1lbnRzKVxuICAgICAgICApO1xuXG4gICAgfTtcblxuICAgIHZhciBib3VuZExlbmd0aCA9IG1heCgwLCB0YXJnZXQubGVuZ3RoIC0gYXJncy5sZW5ndGgpO1xuICAgIHZhciBib3VuZEFyZ3MgPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJvdW5kTGVuZ3RoOyBpKyspIHtcbiAgICAgICAgYm91bmRBcmdzW2ldID0gJyQnICsgaTtcbiAgICB9XG5cbiAgICBib3VuZCA9IEZ1bmN0aW9uKCdiaW5kZXInLCAncmV0dXJuIGZ1bmN0aW9uICgnICsgam9pbnkoYm91bmRBcmdzLCAnLCcpICsgJyl7IHJldHVybiBiaW5kZXIuYXBwbHkodGhpcyxhcmd1bWVudHMpOyB9JykoYmluZGVyKTtcblxuICAgIGlmICh0YXJnZXQucHJvdG90eXBlKSB7XG4gICAgICAgIHZhciBFbXB0eSA9IGZ1bmN0aW9uIEVtcHR5KCkge307XG4gICAgICAgIEVtcHR5LnByb3RvdHlwZSA9IHRhcmdldC5wcm90b3R5cGU7XG4gICAgICAgIGJvdW5kLnByb3RvdHlwZSA9IG5ldyBFbXB0eSgpO1xuICAgICAgICBFbXB0eS5wcm90b3R5cGUgPSBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiBib3VuZDtcbn07XG4iXSwibmFtZXMiOlsiRVJST1JfTUVTU0FHRSIsInRvU3RyIiwiT2JqZWN0IiwicHJvdG90eXBlIiwidG9TdHJpbmciLCJtYXgiLCJNYXRoIiwiZnVuY1R5cGUiLCJjb25jYXR0eSIsImEiLCJiIiwiYXJyIiwiaSIsImxlbmd0aCIsImoiLCJzbGljeSIsImFyckxpa2UiLCJvZmZzZXQiLCJqb2lueSIsImpvaW5lciIsInN0ciIsIm1vZHVsZSIsImV4cG9ydHMiLCJiaW5kIiwidGhhdCIsInRhcmdldCIsImFwcGx5IiwiVHlwZUVycm9yIiwiYXJncyIsImFyZ3VtZW50cyIsImJvdW5kIiwiYmluZGVyIiwicmVzdWx0IiwiYm91bmRMZW5ndGgiLCJib3VuZEFyZ3MiLCJGdW5jdGlvbiIsIkVtcHR5Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUVBLDZCQUE2QixHQUU3QixJQUFJQSxnQkFBZ0I7QUFDcEIsSUFBSUMsUUFBUUMsT0FBT0MsU0FBUyxDQUFDQyxRQUFRO0FB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