{"version":3,"sources":["/Users/yusuketsunoda/Documents/cursor/ppttranslatorapp/worktrees/cicd-setup/tests/api/upload/route.test.ts"],"sourcesContent":["import { POST } from '@/app/api/upload/route';\nimport { NextRequest } from 'next/server';\nimport { getToken } from 'next-auth/jwt';\nimport { createPrismaMock, createMockUser, clearAllMocks } from '@/tests/helpers/mockSetup';\nimport * as uploadHelpers from '@/lib/utils/upload-helpers';\nimport { v4 as uuidv4 } from 'uuid';\nimport path from 'path';\n\n// getTokenのモック\njest.mock('next-auth/jwt', () => ({\n  getToken: jest.fn(),\n}));\n\n// upload-helpersのモック\njest.mock('@/lib/utils/upload-helpers', () => ({\n  uploadFilesToUserDir: jest.fn(),\n  processFiles: jest.fn(),\n}));\n\n// console.logのモック\nconst mockConsoleLog = jest.spyOn(console, 'log').mockImplementation();\nconst mockConsoleError = jest.spyOn(console, 'error').mockImplementation();\n\nconst prismaMock = createPrismaMock();\nconst getTokenMock = getToken as jest.Mock;\n\ndescribe('POST /api/upload', () => {\n  beforeEach(() => {\n    clearAllMocks();\n  });\n\n  afterEach(() => {\n    mockConsoleLog.mockClear();\n    mockConsoleError.mockClear();\n  });\n\n  it('should upload file successfully', async () => {\n    const mockUser = createMockUser({\n      id: 'test-user-id',\n    });\n\n    getTokenMock.mockResolvedValue({\n      sub: mockUser.id,\n    });\n\n    const mockFile = {\n      filepath: path.join('public', 'uploads', mockUser.id, 'test.pptx'),\n      originalFilename: 'test.pptx',\n      newFilename: '1234567890_test.pptx',\n      size: 1024,\n      mimetype: 'application/vnd.openxmlformats-officedocument.presentationml.presentation',\n      hash: uuidv4(),\n    };\n\n    (uploadHelpers.uploadFilesToUserDir as jest.Mock).mockResolvedValue([\n      {},\n      { file: mockFile },\n    ]);\n\n    (uploadHelpers.processFiles as jest.Mock).mockReturnValue([mockFile]);\n\n    const createdFile = {\n      id: mockFile.hash,\n      userId: mockUser.id,\n      originalName: mockFile.originalFilename,\n      storagePath: mockFile.filepath,\n      fileSize: mockFile.size,\n      mimeType: mockFile.mimetype,\n      createdAt: new Date(),\n    };\n\n    prismaMock.file.create.mockResolvedValue(createdFile);\n    prismaMock.activityLog.create.mockResolvedValue({\n      id: 'test-activity-id',\n      userId: mockUser.id,\n      type: 'FILE_UPLOAD',\n      description: '1個のファイルをアップロードしました',\n    });\n\n    const formData = new FormData();\n    formData.append('file', new Blob(['test file content']), 'test.pptx');\n\n    const req = new NextRequest('http://localhost/api/upload', {\n      method: 'POST',\n      body: formData,\n    });\n\n    const response = await POST(req);\n    const responseBody = await response.json();\n\n    expect(response.status).toBe(200);\n    expect(responseBody.success).toBe(true);\n    expect(responseBody.files).toHaveLength(1);\n    expect(responseBody.files[0]).toEqual({\n      id: createdFile.id,\n      originalName: createdFile.originalName,\n      size: createdFile.fileSize,\n      mimeType: createdFile.mimeType,\n      createdAt: createdFile.createdAt.toISOString(),\n    });\n\n    expect(prismaMock.file.create).toHaveBeenCalledWith({\n      data: {\n        id: mockFile.hash,\n        userId: mockUser.id,\n        originalName: mockFile.originalFilename,\n        storagePath: mockFile.filepath,\n        fileSize: mockFile.size,\n        mimeType: mockFile.mimetype,\n      },\n    });\n\n    expect(prismaMock.activityLog.create).toHaveBeenCalledWith({\n      data: {\n        userId: mockUser.id,\n        type: 'FILE_UPLOAD',\n        description: '1個のファイルをアップロードしました',\n        metadata: {\n          fileCount: 1,\n          fileIds: [createdFile.id],\n        },\n      },\n    });\n  });\n\n  it('should return 401 if not authenticated', async () => {\n    getTokenMock.mockResolvedValue(null);\n\n    const formData = new FormData();\n    formData.append('file', new Blob(['test file content']), 'test.pptx');\n\n    const req = new NextRequest('http://localhost/api/upload', {\n      method: 'POST',\n      body: formData,\n    });\n\n    const response = await POST(req);\n    const responseBody = await response.json();\n\n    expect(response.status).toBe(401);\n    expect(responseBody.error).toBe('認証が必要です');\n  });\n\n  it('should return 400 if no files uploaded', async () => {\n    const mockUser = createMockUser({\n      id: 'test-user-id',\n    });\n\n    getTokenMock.mockResolvedValue({\n      sub: mockUser.id,\n    });\n\n    (uploadHelpers.uploadFilesToUserDir as jest.Mock).mockResolvedValue([{}, {}]);\n    (uploadHelpers.processFiles as jest.Mock).mockReturnValue([]);\n\n    const formData = new FormData();\n    const req = new NextRequest('http://localhost/api/upload', {\n      method: 'POST',\n      body: formData,\n    });\n\n    const response = await POST(req);\n    const responseBody = await response.json();\n\n    expect(response.status).toBe(400);\n    expect(responseBody.error).toBe('ファイルがアップロードされていません');\n  });\n\n  it('should handle upload errors', async () => {\n    const mockUser = createMockUser({\n      id: 'test-user-id',\n    });\n\n    getTokenMock.mockResolvedValue({\n      sub: mockUser.id,\n    });\n\n    (uploadHelpers.uploadFilesToUserDir as jest.Mock).mockRejectedValue(\n      new Error('Upload failed')\n    );\n\n    const formData = new FormData();\n    formData.append('file', new Blob(['test file content']), 'test.pptx');\n\n    const req = new NextRequest('http://localhost/api/upload', {\n      method: 'POST',\n      body: formData,\n    });\n\n    const response = await POST(req);\n    const responseBody = await response.json();\n\n    expect(response.status).toBe(500);\n    expect(responseBody.error).toBe('ファイルアップロード中にエラーが発生しました');\n    expect(mockConsoleError).toHaveBeenCalled();\n  });\n\n  it('should handle database errors', async () => {\n    const mockUser = createMockUser({\n      id: 'test-user-id',\n    });\n\n    getTokenMock.mockResolvedValue({\n      sub: mockUser.id,\n    });\n\n    const mockFile = {\n      filepath: path.join('public', 'uploads', mockUser.id, 'test.pptx'),\n      originalFilename: 'test.pptx',\n      newFilename: '1234567890_test.pptx',\n      size: 1024,\n      mimetype: 'application/vnd.openxmlformats-officedocument.presentationml.presentation',\n      hash: uuidv4(),\n    };\n\n    (uploadHelpers.uploadFilesToUserDir as jest.Mock).mockResolvedValue([\n      {},\n      { file: mockFile },\n    ]);\n    (uploadHelpers.processFiles as jest.Mock).mockReturnValue([mockFile]);\n\n    prismaMock.file.create.mockRejectedValue(new Error('Database error'));\n\n    const formData = new FormData();\n    formData.append('file', new Blob(['test file content']), 'test.pptx');\n\n    const req = new NextRequest('http://localhost/api/upload', {\n      method: 'POST',\n      body: formData,\n    });\n\n    const response = await POST(req);\n    const responseBody = await response.json();\n\n    expect(response.status).toBe(500);\n    expect(responseBody.error).toBe('ファイルアップロード中にエラーが発生しました');\n    expect(mockConsoleError).toHaveBeenCalled();\n  });\n}); "],"names":["jest","mock","getToken","fn","uploadFilesToUserDir","processFiles","mockConsoleLog","spyOn","console","mockImplementation","mockConsoleError","prismaMock","createPrismaMock","getTokenMock","describe","beforeEach","clearAllMocks","afterEach","mockClear","it","mockUser","createMockUser","id","mockResolvedValue","sub","mockFile","filepath","path","join","originalFilename","newFilename","size","mimetype","hash","uuidv4","uploadHelpers","file","mockReturnValue","createdFile","userId","originalName","storagePath","fileSize","mimeType","createdAt","Date","create","activityLog","type","description","formData","FormData","append","Blob","req","NextRequest","method","body","response","POST","responseBody","json","expect","status","toBe","success","files","toHaveLength","toEqual","toISOString","toHaveBeenCalledWith","data","metadata","fileCount","fileIds","error","mockRejectedValue","Error","toHaveBeenCalled"],"mappings":"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"}