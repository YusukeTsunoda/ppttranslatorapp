{"version":3,"sources":["/Users/yusuketsunoda/Documents/cursor/ppttranslatorapp/worktrees/cicd-setup/tests/api/auth/reset-password/confirm/route.test.ts"],"sourcesContent":["import { POST } from '@/app/api/auth/reset-password/confirm/route';\nimport { hashPassword } from '@/lib/auth/password';\nimport { NextRequest } from 'next/server';\nimport { createPrismaMock, createMockUser, clearAllMocks } from '@/tests/helpers/mockSetup';\n\n// hashPasswordのモック\njest.mock('@/lib/auth/password', () => ({\n  hashPassword: jest.fn(),\n}));\n\n// console.logのモック\nconst mockConsoleLog = jest.spyOn(console, 'log').mockImplementation();\nconst mockConsoleError = jest.spyOn(console, 'error').mockImplementation();\n\nconst prismaMock = createPrismaMock();\nconst hashPasswordMock = hashPassword as jest.Mock;\n\ndescribe('POST /api/auth/reset-password/confirm', () => {\n  beforeEach(() => {\n    clearAllMocks();\n    hashPasswordMock.mockResolvedValue('new_hashed_password');\n  });\n\n  afterEach(() => {\n    mockConsoleLog.mockClear();\n    mockConsoleError.mockClear();\n  });\n\n  it('should reset password successfully for dummy user', async () => {\n    const requestBody = {\n      token: 'any-token', // Currently ignored by the API\n      password: 'newValidPassword123',\n    };\n    const req = new NextRequest('http://localhost/api/auth/reset-password/confirm', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: { 'Content-Type': 'application/json' },\n    });\n\n    const mockUser = createMockUser({\n      id: 'dummy-user-id',\n      email: 'dummy@example.com',\n      name: 'Dummy User',\n      password: 'old_hashed_password',\n    });\n    prismaMock.user.findFirst.mockResolvedValue(mockUser);\n    prismaMock.user.update.mockResolvedValue(mockUser);\n\n    const response = await POST(req as Request);\n    const responseBody = await response.json();\n\n    expect(response.status).toBe(200);\n    expect(responseBody.success).toBe(true);\n    expect(prismaMock.user.findFirst).toHaveBeenCalledWith({\n      where: { email: 'dummy@example.com' },\n    });\n    expect(hashPasswordMock).toHaveBeenCalledWith(requestBody.password);\n    expect(prismaMock.user.update).toHaveBeenCalledWith({\n      where: { id: mockUser.id },\n      data: {\n        password: 'new_hashed_password',\n        updatedAt: expect.any(Date),\n      },\n    });\n  });\n\n  it('should return 400 if token is invalid (dummy user not found)', async () => {\n    const requestBody = {\n      token: 'invalid-token',\n      password: 'newValidPassword123',\n    };\n    const req = new NextRequest('http://localhost/api/auth/reset-password/confirm', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: { 'Content-Type': 'application/json' },\n    });\n\n    prismaMock.user.findFirst.mockResolvedValue(null);\n\n    const response = await POST(req as Request);\n    const responseBody = await response.json();\n\n    expect(response.status).toBe(400);\n    expect(responseBody.error).toBe('トークンが無効か有効期限が切れています');\n    expect(hashPasswordMock).not.toHaveBeenCalled();\n    expect(prismaMock.user.update).not.toHaveBeenCalled();\n  });\n\n  it('should return error for invalid input (e.g., short password)', async () => {\n    const requestBody = {\n      token: 'any-token',\n      password: 'short',\n    };\n    const req = new NextRequest('http://localhost/api/auth/reset-password/confirm', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: { 'Content-Type': 'application/json' },\n    });\n\n    const response = await POST(req as Request);\n    const responseBody = await response.json();\n\n    expect(response.status).toBe(500);\n    expect(responseBody.error).toBe('パスワードのリセットに失敗しました');\n  });\n\n  it('should return 500 if hashPassword fails', async () => {\n    const requestBody = {\n      token: 'any-token',\n      password: 'newValidPassword123',\n    };\n    const req = new NextRequest('http://localhost/api/auth/reset-password/confirm', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: { 'Content-Type': 'application/json' },\n    });\n\n    const mockUser = createMockUser({ id: 'dummy-user-id' });\n    prismaMock.user.findFirst.mockResolvedValue(mockUser);\n    hashPasswordMock.mockRejectedValue(new Error('Hashing failed'));\n\n    const response = await POST(req as Request);\n    const responseBody = await response.json();\n\n    expect(response.status).toBe(500);\n    expect(responseBody.error).toBe('パスワードのリセットに失敗しました');\n    expect(prismaMock.user.update).not.toHaveBeenCalled();\n  });\n\n  it('should return 500 if prisma.user.update fails', async () => {\n    const requestBody = {\n      token: 'any-token',\n      password: 'newValidPassword123',\n    };\n    const req = new NextRequest('http://localhost/api/auth/reset-password/confirm', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: { 'Content-Type': 'application/json' },\n    });\n\n    const mockUser = createMockUser({ id: 'dummy-user-id' });\n    prismaMock.user.findFirst.mockResolvedValue(mockUser);\n    hashPasswordMock.mockResolvedValue('new_hashed_password');\n    prismaMock.user.update.mockRejectedValue(new Error('DB update failed'));\n\n    const response = await POST(req as Request);\n    const responseBody = await response.json();\n\n    expect(response.status).toBe(500);\n    expect(responseBody.error).toBe('パスワードのリセットに失敗しました');\n  });\n\n  it('should validate request body structure', async () => {\n    const invalidRequests = [\n      { password: 'validPassword123' }, // missing token\n      { token: 'valid-token' }, // missing password\n      {}, // empty body\n    ];\n\n    for (const body of invalidRequests) {\n      const req = new NextRequest('http://localhost/api/auth/reset-password/confirm', {\n        method: 'POST',\n        body: JSON.stringify(body),\n        headers: { 'Content-Type': 'application/json' },\n      });\n\n      const response = await POST(req as Request);\n      const responseBody = await response.json();\n\n      expect(response.status).toBe(500);\n      expect(responseBody.error).toBe('パスワードのリセットに失敗しました');\n      expect(mockConsoleError).toHaveBeenCalled();\n    }\n  });\n\n  it('should validate password requirements', async () => {\n    const invalidPasswords = [\n      'short', // too short\n      '12345678', // only numbers\n      'abcdefgh', // only lowercase\n      'ABCDEFGH', // only uppercase\n    ];\n\n    for (const password of invalidPasswords) {\n      const req = new NextRequest('http://localhost/api/auth/reset-password/confirm', {\n        method: 'POST',\n        body: JSON.stringify({ token: 'valid-token', password }),\n        headers: { 'Content-Type': 'application/json' },\n      });\n\n      const response = await POST(req as Request);\n      const responseBody = await response.json();\n\n      expect(response.status).toBe(500);\n      expect(responseBody.error).toBe('パスワードのリセットに失敗しました');\n    }\n  });\n\n  it('should log password reset activity', async () => {\n    const requestBody = {\n      token: 'valid-token',\n      password: 'newValidPassword123',\n    };\n    const req = new NextRequest('http://localhost/api/auth/reset-password/confirm', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: { 'Content-Type': 'application/json' },\n    });\n\n    const mockUser = createMockUser({\n      id: 'test-user-id',\n      email: 'dummy@example.com',\n    });\n\n    prismaMock.user.findFirst.mockResolvedValue(mockUser);\n    prismaMock.user.update.mockResolvedValue(mockUser);\n\n    await POST(req as Request);\n\n    expect(mockConsoleLog).toHaveBeenCalledWith('Password reset:', expect.objectContaining({\n      userId: mockUser.id,\n      action: 'update_password',\n      timestamp: expect.any(String),\n    }));\n  });\n\n  it('should handle database unique constraint violations', async () => {\n    const requestBody = {\n      token: 'valid-token',\n      password: 'newValidPassword123',\n    };\n    const req = new NextRequest('http://localhost/api/auth/reset-password/confirm', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: { 'Content-Type': 'application/json' },\n    });\n\n    const mockUser = createMockUser({ id: 'test-user-id' });\n    prismaMock.user.findFirst.mockResolvedValue(mockUser);\n    prismaMock.user.update.mockRejectedValue(new Error('P2002')); // Prisma unique constraint error\n\n    const response = await POST(req as Request);\n    const responseBody = await response.json();\n\n    expect(response.status).toBe(500);\n    expect(responseBody.error).toBe('パスワードのリセットに失敗しました');\n    expect(mockConsoleError).toHaveBeenCalled();\n  });\n}); "],"names":["jest","mock","hashPassword","fn","mockConsoleLog","spyOn","console","mockImplementation","mockConsoleError","prismaMock","createPrismaMock","hashPasswordMock","describe","beforeEach","clearAllMocks","mockResolvedValue","afterEach","mockClear","it","requestBody","token","password","req","NextRequest","method","body","JSON","stringify","headers","mockUser","createMockUser","id","email","name","user","findFirst","update","response","POST","responseBody","json","expect","status","toBe","success","toHaveBeenCalledWith","where","data","updatedAt","any","Date","error","not","toHaveBeenCalled","mockRejectedValue","Error","invalidRequests","invalidPasswords","objectContaining","userId","action","timestamp","String"],"mappings":"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"}