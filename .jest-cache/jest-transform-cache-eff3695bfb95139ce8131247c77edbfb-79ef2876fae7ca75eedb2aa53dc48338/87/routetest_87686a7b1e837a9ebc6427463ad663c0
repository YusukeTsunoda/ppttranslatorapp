8c0c97f8ddca2fbcb3d2abdc9029b64a
"use strict";
// hashPasswordのモック
jest.mock('@/lib/auth/password', ()=>({
        hashPassword: jest.fn()
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _route = require("@/app/api/auth/reset-password/confirm/route");
const _password = require("@/lib/auth/password");
const _server = require("next/server");
const _mockSetup = require("@/tests/helpers/mockSetup");
// console.logのモック
const mockConsoleLog = jest.spyOn(console, 'log').mockImplementation();
const mockConsoleError = jest.spyOn(console, 'error').mockImplementation();
const prismaMock = (0, _mockSetup.createPrismaMock)();
const hashPasswordMock = _password.hashPassword;
describe('POST /api/auth/reset-password/confirm', ()=>{
    beforeEach(()=>{
        (0, _mockSetup.clearAllMocks)();
        hashPasswordMock.mockResolvedValue('new_hashed_password');
    });
    afterEach(()=>{
        mockConsoleLog.mockClear();
        mockConsoleError.mockClear();
    });
    it('should reset password successfully for dummy user', async ()=>{
        const requestBody = {
            token: 'any-token',
            password: 'newValidPassword123'
        };
        const req = new _server.NextRequest('http://localhost/api/auth/reset-password/confirm', {
            method: 'POST',
            body: JSON.stringify(requestBody),
            headers: {
                'Content-Type': 'application/json'
            }
        });
        const mockUser = (0, _mockSetup.createMockUser)({
            id: 'dummy-user-id',
            email: 'dummy@example.com',
            name: 'Dummy User',
            password: 'old_hashed_password'
        });
        prismaMock.user.findFirst.mockResolvedValue(mockUser);
        prismaMock.user.update.mockResolvedValue(mockUser);
        const response = await (0, _route.POST)(req);
        const responseBody = await response.json();
        expect(response.status).toBe(200);
        expect(responseBody.success).toBe(true);
        expect(prismaMock.user.findFirst).toHaveBeenCalledWith({
            where: {
                email: 'dummy@example.com'
            }
        });
        expect(hashPasswordMock).toHaveBeenCalledWith(requestBody.password);
        expect(prismaMock.user.update).toHaveBeenCalledWith({
            where: {
                id: mockUser.id
            },
            data: {
                password: 'new_hashed_password',
                updatedAt: expect.any(Date)
            }
        });
    });
    it('should return 400 if token is invalid (dummy user not found)', async ()=>{
        const requestBody = {
            token: 'invalid-token',
            password: 'newValidPassword123'
        };
        const req = new _server.NextRequest('http://localhost/api/auth/reset-password/confirm', {
            method: 'POST',
            body: JSON.stringify(requestBody),
            headers: {
                'Content-Type': 'application/json'
            }
        });
        prismaMock.user.findFirst.mockResolvedValue(null);
        const response = await (0, _route.POST)(req);
        const responseBody = await response.json();
        expect(response.status).toBe(400);
        expect(responseBody.error).toBe('トークンが無効か有効期限が切れています');
        expect(hashPasswordMock).not.toHaveBeenCalled();
        expect(prismaMock.user.update).not.toHaveBeenCalled();
    });
    it('should return error for invalid input (e.g., short password)', async ()=>{
        const requestBody = {
            token: 'any-token',
            password: 'short'
        };
        const req = new _server.NextRequest('http://localhost/api/auth/reset-password/confirm', {
            method: 'POST',
            body: JSON.stringify(requestBody),
            headers: {
                'Content-Type': 'application/json'
            }
        });
        const response = await (0, _route.POST)(req);
        const responseBody = await response.json();
        expect(response.status).toBe(500);
        expect(responseBody.error).toBe('パスワードのリセットに失敗しました');
    });
    it('should return 500 if hashPassword fails', async ()=>{
        const requestBody = {
            token: 'any-token',
            password: 'newValidPassword123'
        };
        const req = new _server.NextRequest('http://localhost/api/auth/reset-password/confirm', {
            method: 'POST',
            body: JSON.stringify(requestBody),
            headers: {
                'Content-Type': 'application/json'
            }
        });
        const mockUser = (0, _mockSetup.createMockUser)({
            id: 'dummy-user-id'
        });
        prismaMock.user.findFirst.mockResolvedValue(mockUser);
        hashPasswordMock.mockRejectedValue(new Error('Hashing failed'));
        const response = await (0, _route.POST)(req);
        const responseBody = await response.json();
        expect(response.status).toBe(500);
        expect(responseBody.error).toBe('パスワードのリセットに失敗しました');
        expect(prismaMock.user.update).not.toHaveBeenCalled();
    });
    it('should return 500 if prisma.user.update fails', async ()=>{
        const requestBody = {
            token: 'any-token',
            password: 'newValidPassword123'
        };
        const req = new _server.NextRequest('http://localhost/api/auth/reset-password/confirm', {
            method: 'POST',
            body: JSON.stringify(requestBody),
            headers: {
                'Content-Type': 'application/json'
            }
        });
        const mockUser = (0, _mockSetup.createMockUser)({
            id: 'dummy-user-id'
        });
        prismaMock.user.findFirst.mockResolvedValue(mockUser);
        hashPasswordMock.mockResolvedValue('new_hashed_password');
        prismaMock.user.update.mockRejectedValue(new Error('DB update failed'));
        const response = await (0, _route.POST)(req);
        const responseBody = await response.json();
        expect(response.status).toBe(500);
        expect(responseBody.error).toBe('パスワードのリセットに失敗しました');
    });
    it('should validate request body structure', async ()=>{
        const invalidRequests = [
            {
                password: 'validPassword123'
            },
            {
                token: 'valid-token'
            },
            {}
        ];
        for (const body of invalidRequests){
            const req = new _server.NextRequest('http://localhost/api/auth/reset-password/confirm', {
                method: 'POST',
                body: JSON.stringify(body),
                headers: {
                    'Content-Type': 'application/json'
                }
            });
            const response = await (0, _route.POST)(req);
            const responseBody = await response.json();
            expect(response.status).toBe(500);
            expect(responseBody.error).toBe('パスワードのリセットに失敗しました');
            expect(mockConsoleError).toHaveBeenCalled();
        }
    });
    it('should validate password requirements', async ()=>{
        const invalidPasswords = [
            'short',
            '12345678',
            'abcdefgh',
            'ABCDEFGH'
        ];
        for (const password of invalidPasswords){
            const req = new _server.NextRequest('http://localhost/api/auth/reset-password/confirm', {
                method: 'POST',
                body: JSON.stringify({
                    token: 'valid-token',
                    password
                }),
                headers: {
                    'Content-Type': 'application/json'
                }
            });
            const response = await (0, _route.POST)(req);
            const responseBody = await response.json();
            expect(response.status).toBe(500);
            expect(responseBody.error).toBe('パスワードのリセットに失敗しました');
        }
    });
    it('should log password reset activity', async ()=>{
        const requestBody = {
            token: 'valid-token',
            password: 'newValidPassword123'
        };
        const req = new _server.NextRequest('http://localhost/api/auth/reset-password/confirm', {
            method: 'POST',
            body: JSON.stringify(requestBody),
            headers: {
                'Content-Type': 'application/json'
            }
        });
        const mockUser = (0, _mockSetup.createMockUser)({
            id: 'test-user-id',
            email: 'dummy@example.com'
        });
        prismaMock.user.findFirst.mockResolvedValue(mockUser);
        prismaMock.user.update.mockResolvedValue(mockUser);
        await (0, _route.POST)(req);
        expect(mockConsoleLog).toHaveBeenCalledWith('Password reset:', expect.objectContaining({
            userId: mockUser.id,
            action: 'update_password',
            timestamp: expect.any(String)
        }));
    });
    it('should handle database unique constraint violations', async ()=>{
        const requestBody = {
            token: 'valid-token',
            password: 'newValidPassword123'
        };
        const req = new _server.NextRequest('http://localhost/api/auth/reset-password/confirm', {
            method: 'POST',
            body: JSON.stringify(requestBody),
            headers: {
                'Content-Type': 'application/json'
            }
        });
        const mockUser = (0, _mockSetup.createMockUser)({
            id: 'test-user-id'
        });
        prismaMock.user.findFirst.mockResolvedValue(mockUser);
        prismaMock.user.update.mockRejectedValue(new Error('P2002')); // Prisma unique constraint error
        const response = await (0, _route.POST)(req);
        const responseBody = await response.json();
        expect(response.status).toBe(500);
        expect(responseBody.error).toBe('パスワードのリセットに失敗しました');
        expect(mockConsoleError).toHaveBeenCalled();
    });
});

//# sourceMappingURL=data:application/json;base64,