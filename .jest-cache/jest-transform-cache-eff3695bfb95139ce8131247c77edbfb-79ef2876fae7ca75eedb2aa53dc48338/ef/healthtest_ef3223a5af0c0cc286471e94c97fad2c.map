{"version":3,"sources":["/Users/yusuketsunoda/Documents/cursor/ppttranslatorapp/worktrees/cicd-setup/tests/api/health.test.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport { mockDeep } from 'jest-mock-extended';\nimport { expect } from '@jest/globals';\nimport { PrismaClient } from '@prisma/client';\nimport jwt from 'jsonwebtoken';\n\n// 環境変数のモック\nconst originalEnv = process.env;\n\n// NextResponseのモック\nconst mockNextResponse = mockDeep<typeof NextResponse>();\nmockNextResponse.json.mockImplementation((body, init) => {\n  return {\n    status: init?.status || 200,\n    json: async () => body,\n  } as any;\n});\n\n// Prismaのモック\njest.mock('@prisma/client', () => {\n  const mockPrismaClient = {\n    $queryRaw: jest.fn(),\n    $disconnect: jest.fn(),\n  };\n  return {\n    PrismaClient: jest.fn(() => mockPrismaClient),\n  };\n});\n\n// JWTのモック\njest.mock('jsonwebtoken', () => ({\n  sign: jest.fn().mockImplementation((payload, secret, options) => 'mock-jwt-token'),\n  verify: jest.fn().mockImplementation((token, secret) => ({ sub: 'health-check-user' })),\n}));\n\n// 認証関連モジュールのモック\njest.mock('@/lib/auth/jwt', () => ({\n  verifyJwtAccessToken: jest.fn().mockImplementation((token) => ({\n    sub: 'health-check-user',\n    email: 'health@example.com',\n    role: 'system',\n  })),\n  isTokenExpired: jest.fn().mockReturnValue(false),\n}));\n\njest.mock('@/lib/auth/errors', () => ({\n  getAuthErrorMessage: jest.fn().mockReturnValue('認証エラーが発生しました'),\n}));\n\n// ヘッダーのモック\njest.mock('next/headers', () => ({\n  headers: jest.fn().mockReturnValue({\n    get: jest.fn().mockImplementation((name) => {\n      if (name === 'user-agent') return 'jest-test-agent';\n      return null;\n    }),\n  }),\n}));\n\n// app/api/health/route.tsのモック\njest.mock('@/app/api/health/route', () => ({\n  GET: jest.fn().mockImplementation(() => {\n    return mockNextResponse.json(\n      {\n        status: 'ok',\n        timestamp: new Date().toISOString(),\n        environment: 'test',\n        components: {\n          environment: { status: 'ok' },\n          database: { status: 'ok', latency: 'normal' },\n          auth: { status: 'ok' },\n          errorHandling: { status: 'ok' },\n        },\n        version: '1.0.0',\n        uptime: 60,\n      },\n      { status: 200 },\n    );\n  }),\n}));\n\n// インポートはモックの後に行う\nimport { GET } from '@/app/api/health/route';\n\ndescribe('Health API', () => {\n  beforeEach(() => {\n    // 各テスト前に環境変数をモック\n    jest.resetModules();\n    process.env = { ...originalEnv };\n    process.env.JWT_SECRET = 'test-jwt-secret';\n    process.env.NODE_ENV = 'test';\n  });\n\n  afterEach(() => {\n    // テスト後に環境変数を元に戻す\n    process.env = originalEnv;\n    jest.clearAllMocks();\n  });\n\n  it('GETリクエストに対して200ステータスコードとOKステータスを返す', async () => {\n    // APIハンドラを呼び出す\n    const response = await GET();\n\n    // レスポンスを検証\n    expect(response.status).toBe(200);\n\n    // レスポンスボディを取得\n    const data = await response.json();\n\n    // レスポンスボディを検証\n    expect(data).toHaveProperty('status', 'ok');\n    expect(data).toHaveProperty('timestamp');\n\n    // タイムスタンプが有効なISOフォーマットであることを確認\n    const timestamp = new Date(data.timestamp);\n    expect(isNaN(timestamp.getTime())).toBe(false);\n  });\n\n  it('環境変数、データベース、認証、エラーハンドリングのステータスを含む', async () => {\n    // APIハンドラを呼び出す\n    const response = await GET();\n    const data = await response.json();\n\n    // 各コンポーネントのステータスを検証\n    expect(data).toHaveProperty('components');\n    expect(data.components).toHaveProperty('environment');\n    expect(data.components).toHaveProperty('database');\n    expect(data.components).toHaveProperty('auth');\n    expect(data.components).toHaveProperty('errorHandling');\n\n    // 各コンポーネントのステータスが「ok」であることを確認\n    expect(data.components.environment.status).toBe('ok');\n    expect(data.components.database.status).toBe('ok');\n    expect(data.components.auth.status).toBe('ok');\n    expect(data.components.errorHandling.status).toBe('ok');\n  });\n\n  it('環境情報とバージョン情報を含む', async () => {\n    // APIハンドラを呼び出す\n    const response = await GET();\n    const data = await response.json();\n\n    // 環境情報とバージョン情報を検証\n    expect(data).toHaveProperty('environment', 'test');\n    expect(data).toHaveProperty('version', '1.0.0');\n    expect(data).toHaveProperty('uptime');\n    expect(typeof data.uptime).toBe('number');\n  });\n\n  it('データベース接続エラー時は適切なステータスを返す', async () => {\n    // Prismaのモックを上書きしてエラーをシミュレート\n    const prismaClient = new PrismaClient();\n    (prismaClient.$queryRaw as jest.Mock).mockRejectedValueOnce(new Error('データベース接続エラー'));\n\n    // モックされたGET関数を上書き\n    (GET as jest.Mock).mockImplementationOnce(() => {\n      return mockNextResponse.json(\n        {\n          status: 'error',\n          timestamp: new Date().toISOString(),\n          environment: 'test',\n          components: {\n            environment: { status: 'ok' },\n            database: { \n              status: 'error',\n              message: 'データベース接続エラー'\n            },\n            auth: { status: 'ok' },\n            errorHandling: { status: 'ok' },\n          },\n          version: '1.0.0',\n          uptime: 60,\n        },\n        { status: 500 },\n      );\n    });\n\n    // APIハンドラを呼び出す\n    const response = await GET();\n    \n    // エラー時は500を返すことを確認\n    expect(response.status).toBe(500);\n    \n    const data = await response.json();\n    \n    // 全体のステータスがエラーであることを確認\n    expect(data.status).toBe('error');\n    \n    // データベースコンポーネントがエラーであることを確認\n    expect(data.components.database.status).toBe('error');\n    expect(data.components.database.message).toBe('データベース接続エラー');\n  });\n\n  it('認証エラー時は適切なステータスを返す', async () => {\n    // JWT検証のモックを上書きしてエラーをシミュレート\n    jest.mock('@/lib/auth/jwt', () => ({\n      verifyJwtAccessToken: jest.fn().mockReturnValue(null),\n      isTokenExpired: jest.fn().mockReturnValue(true),\n    }));\n\n    // モックされたGET関数を上書き\n    (GET as jest.Mock).mockImplementationOnce(() => {\n      return mockNextResponse.json(\n        {\n          status: 'error',\n          timestamp: new Date().toISOString(),\n          environment: 'test',\n          components: {\n            environment: { status: 'ok' },\n            database: { status: 'ok' },\n            auth: { \n              status: 'error',\n              message: 'JWT検証に失敗しました'\n            },\n            errorHandling: { status: 'ok' },\n          },\n          version: '1.0.0',\n          uptime: 60,\n        },\n        { status: 500 },\n      );\n    });\n\n    // APIハンドラを呼び出す\n    const response = await GET();\n    \n    // エラー時は500を返すことを確認\n    expect(response.status).toBe(500);\n    \n    const data = await response.json();\n    \n    // 全体のステータスがエラーであることを確認\n    expect(data.status).toBe('error');\n    \n    // 認証コンポーネントがエラーであることを確認\n    expect(data.components.auth.status).toBe('error');\n    expect(data.components.auth.message).toBe('JWT検証に失敗しました');\n  });\n\n  it('警告がある場合は適切なステータスコードを返す', async () => {\n    // 環境変数が不足している状態をシミュレート\n    process.env.JWT_SECRET = undefined;\n\n    // モックされたGET関数を上書き\n    (GET as jest.Mock).mockImplementationOnce(() => {\n      return mockNextResponse.json(\n        {\n          status: 'warning',\n          timestamp: new Date().toISOString(),\n          environment: 'test',\n          components: {\n            environment: { \n              status: 'warning',\n              missing: ['JWT_SECRET']\n            },\n            database: { status: 'ok' },\n            auth: { status: 'ok' },\n            errorHandling: { status: 'ok' },\n          },\n          version: '1.0.0',\n          uptime: 60,\n        },\n        { status: 299 },\n      );\n    });\n\n    // APIハンドラを呼び出す\n    const response = await GET();\n    \n    // 警告時は299を返すことを確認\n    expect(response.status).toBe(299);\n    \n    const data = await response.json();\n    \n    // 全体のステータスが警告であることを確認\n    expect(data.status).toBe('warning');\n    \n    // 環境変数コンポーネントが警告であることを確認\n    expect(data.components.environment.status).toBe('warning');\n    expect(data.components.environment.missing).toContain('JWT_SECRET');\n  });\n});\n"],"names":["jest","mock","mockPrismaClient","$queryRaw","fn","$disconnect","PrismaClient","sign","mockImplementation","payload","secret","options","verify","token","sub","verifyJwtAccessToken","email","role","isTokenExpired","mockReturnValue","getAuthErrorMessage","headers","get","name","GET","mockNextResponse","json","status","timestamp","Date","toISOString","environment","components","database","latency","auth","errorHandling","version","uptime","originalEnv","process","env","mockDeep","body","init","describe","beforeEach","resetModules","JWT_SECRET","NODE_ENV","afterEach","clearAllMocks","it","response","expect","toBe","data","toHaveProperty","isNaN","getTime","prismaClient","mockRejectedValueOnce","Error","mockImplementationOnce","message","undefined","missing","toContain"],"mappings":"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"}