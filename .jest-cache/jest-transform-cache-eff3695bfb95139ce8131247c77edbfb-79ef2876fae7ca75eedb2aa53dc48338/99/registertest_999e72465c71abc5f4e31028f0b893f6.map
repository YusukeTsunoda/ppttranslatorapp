{"version":3,"sources":["/Users/yusuketsunoda/Documents/cursor/ppttranslatorapp/worktrees/cicd-setup/tests/api/auth/register.test.ts"],"sourcesContent":["import { POST } from '@/app/api/auth/register/route';\nimport { NextRequest } from 'next/server';\nimport { createPrismaMock, createMockUser, clearAllMocks } from '@/tests/helpers/mockSetup';\nimport { hashPassword } from '@/lib/auth/password';\n\n// hashPasswordのモック\njest.mock('@/lib/auth/password', () => ({\n  hashPassword: jest.fn(),\n}));\n\nconst prismaMock = createPrismaMock();\nconst hashPasswordMock = hashPassword as jest.Mock;\n\ndescribe('POST /api/auth/register', () => {\n  beforeEach(() => {\n    clearAllMocks();\n    hashPasswordMock.mockResolvedValue('hashed_password');\n  });\n\n  it('should register a new user successfully', async () => {\n    const requestBody = {\n      email: 'test@example.com',\n      password: 'password123',\n      name: 'Test User',\n    };\n    const req = new NextRequest('http://localhost/api/auth/register', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: { 'Content-Type': 'application/json' },\n    });\n\n    prismaMock.user.findUnique.mockResolvedValue(null);\n    const createdUser = createMockUser({\n      id: 'generated-uuid',\n      email: requestBody.email,\n      name: requestBody.name,\n      password: 'hashed_password',\n      credits: 15,\n    });\n    prismaMock.user.create.mockResolvedValue(createdUser);\n\n    const response = await POST(req as NextRequest);\n    const responseBody = await response.json();\n\n    expect(response.status).toBe(200);\n    expect(responseBody.success).toBe(true);\n    expect(responseBody.userId).toBe(createdUser.id);\n\n    expect(prismaMock.user.findUnique).toHaveBeenCalledWith({\n      where: { email: requestBody.email },\n    });\n    expect(hashPasswordMock).toHaveBeenCalledWith(requestBody.password);\n    expect(prismaMock.user.create).toHaveBeenCalledWith(\n      expect.objectContaining({\n        data: expect.objectContaining({\n          email: requestBody.email,\n          name: requestBody.name,\n          password: 'hashed_password',\n          credits: 15,\n        }),\n      })\n    );\n  });\n\n  it('should return 400 if email already exists', async () => {\n    const requestBody = {\n      email: 'existing@example.com',\n      password: 'password123',\n      name: 'Existing User',\n    };\n    const req = new NextRequest('http://localhost/api/auth/register', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: { 'Content-Type': 'application/json' },\n    });\n\n    prismaMock.user.findUnique.mockResolvedValue(createMockUser({\n      email: requestBody.email,\n      name: requestBody.name,\n    }));\n\n    const response = await POST(req as NextRequest);\n    const responseBody = await response.json();\n\n    expect(response.status).toBe(400);\n    expect(responseBody.error).toBe('このメールアドレスは既に登録されています');\n    expect(prismaMock.user.create).not.toHaveBeenCalled();\n  });\n\n  it('should return 500 if hashing password fails', async () => {\n    const requestBody = {\n      email: 'test2@example.com',\n      password: 'password123',\n      name: 'Test User 2',\n    };\n    const req = new NextRequest('http://localhost/api/auth/register', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: { 'Content-Type': 'application/json' },\n    });\n\n    prismaMock.user.findUnique.mockResolvedValue(null);\n    hashPasswordMock.mockRejectedValue(new Error('Hashing failed'));\n\n    const response = await POST(req as NextRequest);\n    const responseBody = await response.json();\n\n    expect(response.status).toBe(500);\n    expect(responseBody.error).toBe('ユーザー登録中にエラーが発生しました');\n    expect(prismaMock.user.create).not.toHaveBeenCalled();\n  });\n\n  it('should return 500 if creating user fails', async () => {\n    const requestBody = {\n      email: 'test3@example.com',\n      password: 'password123',\n      name: 'Test User 3',\n    };\n    const req = new NextRequest('http://localhost/api/auth/register', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: { 'Content-Type': 'application/json' },\n    });\n\n    prismaMock.user.findUnique.mockResolvedValue(null);\n    hashPasswordMock.mockResolvedValue('hashed_password_for_test3');\n    prismaMock.user.create.mockRejectedValue(new Error('DB error'));\n\n    const response = await POST(req as NextRequest);\n    const responseBody = await response.json();\n\n    expect(response.status).toBe(500);\n    expect(responseBody.error).toBe('ユーザー登録中にエラーが発生しました');\n  });\n\n  // TODO: リクエストボディのバリデーションに関するテストケースを追加\n  // (例: email, password, name が欠落している場合など。現状のAPIは自前でバリデーションしていないため、\n  //  NextRequestの挙動や、将来的なバリデーションライブラリ導入時にテスト追加を検討)\n}); "],"names":["jest","mock","hashPassword","fn","prismaMock","createPrismaMock","hashPasswordMock","describe","beforeEach","clearAllMocks","mockResolvedValue","it","requestBody","email","password","name","req","NextRequest","method","body","JSON","stringify","headers","user","findUnique","createdUser","createMockUser","id","credits","create","response","POST","responseBody","json","expect","status","toBe","success","userId","toHaveBeenCalledWith","where","objectContaining","data","error","not","toHaveBeenCalled","mockRejectedValue","Error"],"mappings":"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"}