456d6100d95813d11e5b15b5d93c9e6b
"use strict";
// hashPasswordのモック
jest.mock('@/lib/auth/password', ()=>({
        hashPassword: jest.fn()
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _route = require("@/app/api/auth/register/route");
const _server = require("next/server");
const _mockSetup = require("@/tests/helpers/mockSetup");
const _password = require("@/lib/auth/password");
const prismaMock = (0, _mockSetup.createPrismaMock)();
const hashPasswordMock = _password.hashPassword;
describe('POST /api/auth/register', ()=>{
    beforeEach(()=>{
        (0, _mockSetup.clearAllMocks)();
        hashPasswordMock.mockResolvedValue('hashed_password');
    });
    it('should register a new user successfully', async ()=>{
        const requestBody = {
            email: 'test@example.com',
            password: 'password123',
            name: 'Test User'
        };
        const req = new _server.NextRequest('http://localhost/api/auth/register', {
            method: 'POST',
            body: JSON.stringify(requestBody),
            headers: {
                'Content-Type': 'application/json'
            }
        });
        prismaMock.user.findUnique.mockResolvedValue(null);
        const createdUser = (0, _mockSetup.createMockUser)({
            id: 'generated-uuid',
            email: requestBody.email,
            name: requestBody.name,
            password: 'hashed_password',
            credits: 15
        });
        prismaMock.user.create.mockResolvedValue(createdUser);
        const response = await (0, _route.POST)(req);
        const responseBody = await response.json();
        expect(response.status).toBe(200);
        expect(responseBody.success).toBe(true);
        expect(responseBody.userId).toBe(createdUser.id);
        expect(prismaMock.user.findUnique).toHaveBeenCalledWith({
            where: {
                email: requestBody.email
            }
        });
        expect(hashPasswordMock).toHaveBeenCalledWith(requestBody.password);
        expect(prismaMock.user.create).toHaveBeenCalledWith(expect.objectContaining({
            data: expect.objectContaining({
                email: requestBody.email,
                name: requestBody.name,
                password: 'hashed_password',
                credits: 15
            })
        }));
    });
    it('should return 400 if email already exists', async ()=>{
        const requestBody = {
            email: 'existing@example.com',
            password: 'password123',
            name: 'Existing User'
        };
        const req = new _server.NextRequest('http://localhost/api/auth/register', {
            method: 'POST',
            body: JSON.stringify(requestBody),
            headers: {
                'Content-Type': 'application/json'
            }
        });
        prismaMock.user.findUnique.mockResolvedValue((0, _mockSetup.createMockUser)({
            email: requestBody.email,
            name: requestBody.name
        }));
        const response = await (0, _route.POST)(req);
        const responseBody = await response.json();
        expect(response.status).toBe(400);
        expect(responseBody.error).toBe('このメールアドレスは既に登録されています');
        expect(prismaMock.user.create).not.toHaveBeenCalled();
    });
    it('should return 500 if hashing password fails', async ()=>{
        const requestBody = {
            email: 'test2@example.com',
            password: 'password123',
            name: 'Test User 2'
        };
        const req = new _server.NextRequest('http://localhost/api/auth/register', {
            method: 'POST',
            body: JSON.stringify(requestBody),
            headers: {
                'Content-Type': 'application/json'
            }
        });
        prismaMock.user.findUnique.mockResolvedValue(null);
        hashPasswordMock.mockRejectedValue(new Error('Hashing failed'));
        const response = await (0, _route.POST)(req);
        const responseBody = await response.json();
        expect(response.status).toBe(500);
        expect(responseBody.error).toBe('ユーザー登録中にエラーが発生しました');
        expect(prismaMock.user.create).not.toHaveBeenCalled();
    });
    it('should return 500 if creating user fails', async ()=>{
        const requestBody = {
            email: 'test3@example.com',
            password: 'password123',
            name: 'Test User 3'
        };
        const req = new _server.NextRequest('http://localhost/api/auth/register', {
            method: 'POST',
            body: JSON.stringify(requestBody),
            headers: {
                'Content-Type': 'application/json'
            }
        });
        prismaMock.user.findUnique.mockResolvedValue(null);
        hashPasswordMock.mockResolvedValue('hashed_password_for_test3');
        prismaMock.user.create.mockRejectedValue(new Error('DB error'));
        const response = await (0, _route.POST)(req);
        const responseBody = await response.json();
        expect(response.status).toBe(500);
        expect(responseBody.error).toBe('ユーザー登録中にエラーが発生しました');
    });
// TODO: リクエストボディのバリデーションに関するテストケースを追加
// (例: email, password, name が欠落している場合など。現状のAPIは自前でバリデーションしていないため、
//  NextRequestの挙動や、将来的なバリデーションライブラリ導入時にテスト追加を検討)
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy95dXN1a2V0c3Vub2RhL0RvY3VtZW50cy9jdXJzb3IvcHB0dHJhbnNsYXRvcmFwcC93b3JrdHJlZXMvY2ljZC1zZXR1cC90ZXN0cy9hcGkvYXV0aC9yZWdpc3Rlci50ZXN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBPU1QgfSBmcm9tICdAL2FwcC9hcGkvYXV0aC9yZWdpc3Rlci9yb3V0ZSc7XG5pbXBvcnQgeyBOZXh0UmVxdWVzdCB9IGZyb20gJ25leHQvc2VydmVyJztcbmltcG9ydCB7IGNyZWF0ZVByaXNtYU1vY2ssIGNyZWF0ZU1vY2tVc2VyLCBjbGVhckFsbE1vY2tzIH0gZnJvbSAnQC90ZXN0cy9oZWxwZXJzL21vY2tTZXR1cCc7XG5pbXBvcnQgeyBoYXNoUGFzc3dvcmQgfSBmcm9tICdAL2xpYi9hdXRoL3Bhc3N3b3JkJztcblxuLy8gaGFzaFBhc3N3b3Jk44Gu44Oi44OD44KvXG5qZXN0Lm1vY2soJ0AvbGliL2F1dGgvcGFzc3dvcmQnLCAoKSA9PiAoe1xuICBoYXNoUGFzc3dvcmQ6IGplc3QuZm4oKSxcbn0pKTtcblxuY29uc3QgcHJpc21hTW9jayA9IGNyZWF0ZVByaXNtYU1vY2soKTtcbmNvbnN0IGhhc2hQYXNzd29yZE1vY2sgPSBoYXNoUGFzc3dvcmQgYXMgamVzdC5Nb2NrO1xuXG5kZXNjcmliZSgnUE9TVCAvYXBpL2F1dGgvcmVnaXN0ZXInLCAoKSA9PiB7XG4gIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgIGNsZWFyQWxsTW9ja3MoKTtcbiAgICBoYXNoUGFzc3dvcmRNb2NrLm1vY2tSZXNvbHZlZFZhbHVlKCdoYXNoZWRfcGFzc3dvcmQnKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCByZWdpc3RlciBhIG5ldyB1c2VyIHN1Y2Nlc3NmdWxseScsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCByZXF1ZXN0Qm9keSA9IHtcbiAgICAgIGVtYWlsOiAndGVzdEBleGFtcGxlLmNvbScsXG4gICAgICBwYXNzd29yZDogJ3Bhc3N3b3JkMTIzJyxcbiAgICAgIG5hbWU6ICdUZXN0IFVzZXInLFxuICAgIH07XG4gICAgY29uc3QgcmVxID0gbmV3IE5leHRSZXF1ZXN0KCdodHRwOi8vbG9jYWxob3N0L2FwaS9hdXRoL3JlZ2lzdGVyJywge1xuICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShyZXF1ZXN0Qm9keSksXG4gICAgICBoZWFkZXJzOiB7ICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicgfSxcbiAgICB9KTtcblxuICAgIHByaXNtYU1vY2sudXNlci5maW5kVW5pcXVlLm1vY2tSZXNvbHZlZFZhbHVlKG51bGwpO1xuICAgIGNvbnN0IGNyZWF0ZWRVc2VyID0gY3JlYXRlTW9ja1VzZXIoe1xuICAgICAgaWQ6ICdnZW5lcmF0ZWQtdXVpZCcsXG4gICAgICBlbWFpbDogcmVxdWVzdEJvZHkuZW1haWwsXG4gICAgICBuYW1lOiByZXF1ZXN0Qm9keS5uYW1lLFxuICAgICAgcGFzc3dvcmQ6ICdoYXNoZWRfcGFzc3dvcmQnLFxuICAgICAgY3JlZGl0czogMTUsXG4gICAgfSk7XG4gICAgcHJpc21hTW9jay51c2VyLmNyZWF0ZS5tb2NrUmVzb2x2ZWRWYWx1ZShjcmVhdGVkVXNlcik7XG5cbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IFBPU1QocmVxIGFzIE5leHRSZXF1ZXN0KTtcbiAgICBjb25zdCByZXNwb25zZUJvZHkgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG5cbiAgICBleHBlY3QocmVzcG9uc2Uuc3RhdHVzKS50b0JlKDIwMCk7XG4gICAgZXhwZWN0KHJlc3BvbnNlQm9keS5zdWNjZXNzKS50b0JlKHRydWUpO1xuICAgIGV4cGVjdChyZXNwb25zZUJvZHkudXNlcklkKS50b0JlKGNyZWF0ZWRVc2VyLmlkKTtcblxuICAgIGV4cGVjdChwcmlzbWFNb2NrLnVzZXIuZmluZFVuaXF1ZSkudG9IYXZlQmVlbkNhbGxlZFdpdGgoe1xuICAgICAgd2hlcmU6IHsgZW1haWw6IHJlcXVlc3RCb2R5LmVtYWlsIH0sXG4gICAgfSk7XG4gICAgZXhwZWN0KGhhc2hQYXNzd29yZE1vY2spLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKHJlcXVlc3RCb2R5LnBhc3N3b3JkKTtcbiAgICBleHBlY3QocHJpc21hTW9jay51c2VyLmNyZWF0ZSkudG9IYXZlQmVlbkNhbGxlZFdpdGgoXG4gICAgICBleHBlY3Qub2JqZWN0Q29udGFpbmluZyh7XG4gICAgICAgIGRhdGE6IGV4cGVjdC5vYmplY3RDb250YWluaW5nKHtcbiAgICAgICAgICBlbWFpbDogcmVxdWVzdEJvZHkuZW1haWwsXG4gICAgICAgICAgbmFtZTogcmVxdWVzdEJvZHkubmFtZSxcbiAgICAgICAgICBwYXNzd29yZDogJ2hhc2hlZF9wYXNzd29yZCcsXG4gICAgICAgICAgY3JlZGl0czogMTUsXG4gICAgICAgIH0pLFxuICAgICAgfSlcbiAgICApO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIHJldHVybiA0MDAgaWYgZW1haWwgYWxyZWFkeSBleGlzdHMnLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgcmVxdWVzdEJvZHkgPSB7XG4gICAgICBlbWFpbDogJ2V4aXN0aW5nQGV4YW1wbGUuY29tJyxcbiAgICAgIHBhc3N3b3JkOiAncGFzc3dvcmQxMjMnLFxuICAgICAgbmFtZTogJ0V4aXN0aW5nIFVzZXInLFxuICAgIH07XG4gICAgY29uc3QgcmVxID0gbmV3IE5leHRSZXF1ZXN0KCdodHRwOi8vbG9jYWxob3N0L2FwaS9hdXRoL3JlZ2lzdGVyJywge1xuICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShyZXF1ZXN0Qm9keSksXG4gICAgICBoZWFkZXJzOiB7ICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicgfSxcbiAgICB9KTtcblxuICAgIHByaXNtYU1vY2sudXNlci5maW5kVW5pcXVlLm1vY2tSZXNvbHZlZFZhbHVlKGNyZWF0ZU1vY2tVc2VyKHtcbiAgICAgIGVtYWlsOiByZXF1ZXN0Qm9keS5lbWFpbCxcbiAgICAgIG5hbWU6IHJlcXVlc3RCb2R5Lm5hbWUsXG4gICAgfSkpO1xuXG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBQT1NUKHJlcSBhcyBOZXh0UmVxdWVzdCk7XG4gICAgY29uc3QgcmVzcG9uc2VCb2R5ID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuXG4gICAgZXhwZWN0KHJlc3BvbnNlLnN0YXR1cykudG9CZSg0MDApO1xuICAgIGV4cGVjdChyZXNwb25zZUJvZHkuZXJyb3IpLnRvQmUoJ+OBk+OBruODoeODvOODq+OCouODieODrOOCueOBr+aXouOBq+eZu+mMsuOBleOCjOOBpuOBhOOBvuOBmScpO1xuICAgIGV4cGVjdChwcmlzbWFNb2NrLnVzZXIuY3JlYXRlKS5ub3QudG9IYXZlQmVlbkNhbGxlZCgpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIHJldHVybiA1MDAgaWYgaGFzaGluZyBwYXNzd29yZCBmYWlscycsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCByZXF1ZXN0Qm9keSA9IHtcbiAgICAgIGVtYWlsOiAndGVzdDJAZXhhbXBsZS5jb20nLFxuICAgICAgcGFzc3dvcmQ6ICdwYXNzd29yZDEyMycsXG4gICAgICBuYW1lOiAnVGVzdCBVc2VyIDInLFxuICAgIH07XG4gICAgY29uc3QgcmVxID0gbmV3IE5leHRSZXF1ZXN0KCdodHRwOi8vbG9jYWxob3N0L2FwaS9hdXRoL3JlZ2lzdGVyJywge1xuICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShyZXF1ZXN0Qm9keSksXG4gICAgICBoZWFkZXJzOiB7ICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicgfSxcbiAgICB9KTtcblxuICAgIHByaXNtYU1vY2sudXNlci5maW5kVW5pcXVlLm1vY2tSZXNvbHZlZFZhbHVlKG51bGwpO1xuICAgIGhhc2hQYXNzd29yZE1vY2subW9ja1JlamVjdGVkVmFsdWUobmV3IEVycm9yKCdIYXNoaW5nIGZhaWxlZCcpKTtcblxuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgUE9TVChyZXEgYXMgTmV4dFJlcXVlc3QpO1xuICAgIGNvbnN0IHJlc3BvbnNlQm9keSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcblxuICAgIGV4cGVjdChyZXNwb25zZS5zdGF0dXMpLnRvQmUoNTAwKTtcbiAgICBleHBlY3QocmVzcG9uc2VCb2R5LmVycm9yKS50b0JlKCfjg6bjg7zjgrbjg7znmbvpjLLkuK3jgavjgqjjg6njg7zjgYznmbrnlJ/jgZfjgb7jgZfjgZ8nKTtcbiAgICBleHBlY3QocHJpc21hTW9jay51c2VyLmNyZWF0ZSkubm90LnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCByZXR1cm4gNTAwIGlmIGNyZWF0aW5nIHVzZXIgZmFpbHMnLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgcmVxdWVzdEJvZHkgPSB7XG4gICAgICBlbWFpbDogJ3Rlc3QzQGV4YW1wbGUuY29tJyxcbiAgICAgIHBhc3N3b3JkOiAncGFzc3dvcmQxMjMnLFxuICAgICAgbmFtZTogJ1Rlc3QgVXNlciAzJyxcbiAgICB9O1xuICAgIGNvbnN0IHJlcSA9IG5ldyBOZXh0UmVxdWVzdCgnaHR0cDovL2xvY2FsaG9zdC9hcGkvYXV0aC9yZWdpc3RlcicsIHtcbiAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkocmVxdWVzdEJvZHkpLFxuICAgICAgaGVhZGVyczogeyAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nIH0sXG4gICAgfSk7XG5cbiAgICBwcmlzbWFNb2NrLnVzZXIuZmluZFVuaXF1ZS5tb2NrUmVzb2x2ZWRWYWx1ZShudWxsKTtcbiAgICBoYXNoUGFzc3dvcmRNb2NrLm1vY2tSZXNvbHZlZFZhbHVlKCdoYXNoZWRfcGFzc3dvcmRfZm9yX3Rlc3QzJyk7XG4gICAgcHJpc21hTW9jay51c2VyLmNyZWF0ZS5tb2NrUmVqZWN0ZWRWYWx1ZShuZXcgRXJyb3IoJ0RCIGVycm9yJykpO1xuXG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBQT1NUKHJlcSBhcyBOZXh0UmVxdWVzdCk7XG4gICAgY29uc3QgcmVzcG9uc2VCb2R5ID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuXG4gICAgZXhwZWN0KHJlc3BvbnNlLnN0YXR1cykudG9CZSg1MDApO1xuICAgIGV4cGVjdChyZXNwb25zZUJvZHkuZXJyb3IpLnRvQmUoJ+ODpuODvOOCtuODvOeZu+mMsuS4reOBq+OCqOODqeODvOOBjOeZuueUn+OBl+OBvuOBl+OBnycpO1xuICB9KTtcblxuICAvLyBUT0RPOiDjg6rjgq/jgqjjgrnjg4jjg5zjg4fjgqPjga7jg5Djg6rjg4fjg7zjgrfjg6fjg7PjgavplqLjgZnjgovjg4bjgrnjg4jjgrHjg7zjgrnjgpLov73liqBcbiAgLy8gKOS+izogZW1haWwsIHBhc3N3b3JkLCBuYW1lIOOBjOasoOiQveOBl+OBpuOBhOOCi+WgtOWQiOOBquOBqeOAguePvueKtuOBrkFQSeOBr+iHquWJjeOBp+ODkOODquODh+ODvOOCt+ODp+ODs+OBl+OBpuOBhOOBquOBhOOBn+OCgeOAgVxuICAvLyAgTmV4dFJlcXVlc3Tjga7mjJnli5XjgoTjgIHlsIbmnaXnmoTjgarjg5Djg6rjg4fjg7zjgrfjg6fjg7Pjg6njgqTjg5bjg6njg6rlsI7lhaXmmYLjgavjg4bjgrnjg4jov73liqDjgpLmpJzoqI4pXG59KTsgIl0sIm5hbWVzIjpbImplc3QiLCJtb2NrIiwiaGFzaFBhc3N3b3JkIiwiZm4iLCJwcmlzbWFNb2NrIiwiY3JlYXRlUHJpc21hTW9jayIsImhhc2hQYXNzd29yZE1vY2siLCJkZXNjcmliZSIsImJlZm9yZUVhY2giLCJjbGVhckFsbE1vY2tzIiwibW9ja1Jlc29sdmVkVmFsdWUiLCJpdCIsInJlcXVlc3RCb2R5IiwiZW1haWwiLCJwYXNzd29yZCIsIm5hbWUiLCJyZXEiLCJOZXh0UmVxdWVzdCIsIm1ldGhvZCIsImJvZHkiLCJKU09OIiwic3RyaW5naWZ5IiwiaGVhZGVycyIsInVzZXIiLCJmaW5kVW5pcXVlIiwiY3JlYXRlZFVzZXIiLCJjcmVhdGVNb2NrVXNlciIsImlkIiwiY3JlZGl0cyIsImNyZWF0ZSIsInJlc3BvbnNlIiwiUE9TVCIsInJlc3BvbnNlQm9keSIsImpzb24iLCJleHBlY3QiLCJzdGF0dXMiLCJ0b0JlIiwic3VjY2VzcyIsInVzZXJJZCIsInRvSGF2ZUJlZW5DYWxsZWRXaXRoIiwid2hlcmUiLCJvYmplY3RDb250YWluaW5nIiwiZGF0YSIsImVycm9yIiwibm90IiwidG9IYXZlQmVlbkNhbGxlZCIsIm1vY2tSZWplY3RlZFZhbHVlIiwiRXJyb3IiXSwibWFwcGluZ3MiOiI7QUFLQSxtQkFBbUI7QUFDbkJBLEtBQUtDLElBQUksQ0FBQyx1QkFBdUIsSUFBTyxDQUFBO1FBQ3RDQyxjQUFjRixLQUFLRyxFQUFFO0lBQ3ZCLENBQUE7Ozs7dUJBUnFCO3dCQUNPOzJCQUNvQzswQkFDbkM7QUFPN0IsTUFBTUMsYUFBYUMsSUFBQUEsMkJBQWdCO0FBQ25DLE1BQU1DLG1CQUFtQkosc0JBQVk7QUFFckNLLFNBQVMsMkJBQTJCO0lBQ2xDQyxXQUFXO1FBQ1RDLElBQUFBLHdCQUFhO1FBQ2JILGlCQUFpQkksaUJBQWlCLENBQUM7SUFDckM7SUFFQUMsR0FBRywyQ0FBMkM7UUFDNUMsTUFBTUMsY0FBYztZQUNsQkMsT0FBTztZQUNQQyxVQUFVO1lBQ1ZDLE1BQU07UUFDUjtRQUNBLE1BQU1DLE1BQU0sSUFBSUMsbUJBQVcsQ0FBQyxzQ0FBc0M7WUFDaEVDLFFBQVE7WUFDUkMsTUFBTUMsS0FBS0MsU0FBUyxDQUFDVDtZQUNyQlUsU0FBUztnQkFBRSxnQkFBZ0I7WUFBbUI7UUFDaEQ7UUFFQWxCLFdBQVdtQixJQUFJLENBQUNDLFVBQVUsQ0FBQ2QsaUJBQWlCLENBQUM7UUFDN0MsTUFBTWUsY0FBY0MsSUFBQUEseUJBQWMsRUFBQztZQUNqQ0MsSUFBSTtZQUNKZCxPQUFPRCxZQUFZQyxLQUFLO1lBQ3hCRSxNQUFNSCxZQUFZRyxJQUFJO1lBQ3RCRCxVQUFVO1lBQ1ZjLFNBQVM7UUFDWDtRQUNBeEIsV0FBV21CLElBQUksQ0FBQ00sTUFBTSxDQUFDbkIsaUJBQWlCLENBQUNlO1FBRXpDLE1BQU1LLFdBQVcsTUFBTUMsSUFBQUEsV0FBSSxFQUFDZjtRQUM1QixNQUFNZ0IsZUFBZSxNQUFNRixTQUFTRyxJQUFJO1FBRXhDQyxPQUFPSixTQUFTSyxNQUFNLEVBQUVDLElBQUksQ0FBQztRQUM3QkYsT0FBT0YsYUFBYUssT0FBTyxFQUFFRCxJQUFJLENBQUM7UUFDbENGLE9BQU9GLGFBQWFNLE1BQU0sRUFBRUYsSUFBSSxDQUFDWCxZQUFZRSxFQUFFO1FBRS9DTyxPQUFPOUIsV0FBV21CLElBQUksQ0FBQ0MsVUFBVSxFQUFFZSxvQkFBb0IsQ0FBQztZQUN0REMsT0FBTztnQkFBRTNCLE9BQU9ELFlBQVlDLEtBQUs7WUFBQztRQUNwQztRQUNBcUIsT0FBTzVCLGtCQUFrQmlDLG9CQUFvQixDQUFDM0IsWUFBWUUsUUFBUTtRQUNsRW9CLE9BQU85QixXQUFXbUIsSUFBSSxDQUFDTSxNQUFNLEVBQUVVLG9CQUFvQixDQUNqREwsT0FBT08sZ0JBQWdCLENBQUM7WUFDdEJDLE1BQU1SLE9BQU9PLGdCQUFnQixDQUFDO2dCQUM1QjVCLE9BQU9ELFlBQVlDLEtBQUs7Z0JBQ3hCRSxNQUFNSCxZQUFZRyxJQUFJO2dCQUN0QkQsVUFBVTtnQkFDVmMsU0FBUztZQUNYO1FBQ0Y7SUFFSjtJQUVBakIsR0FBRyw2Q0FBNkM7UUFDOUMsTUFBTUMsY0FBYztZQUNsQkMsT0FBTztZQUNQQyxVQUFVO1lBQ1ZDLE1BQU07UUFDUjtRQUNBLE1BQU1DLE1BQU0sSUFBSUMsbUJBQVcsQ0FBQyxzQ0FBc0M7WUFDaEVDLFFBQVE7WUFDUkMsTUFBTUMsS0FBS0MsU0FBUyxDQUFDVDtZQUNyQlUsU0FBUztnQkFBRSxnQkFBZ0I7WUFBbUI7UUFDaEQ7UUFFQWxCLFdBQVdtQixJQUFJLENBQUNDLFVBQVUsQ0FBQ2QsaUJBQWlCLENBQUNnQixJQUFBQSx5QkFBYyxFQUFDO1lBQzFEYixPQUFPRCxZQUFZQyxLQUFLO1lBQ3hCRSxNQUFNSCxZQUFZRyxJQUFJO1FBQ3hCO1FBRUEsTUFBTWUsV0FBVyxNQUFNQyxJQUFBQSxXQUFJLEVBQUNmO1FBQzVCLE1BQU1nQixlQUFlLE1BQU1GLFNBQVNHLElBQUk7UUFFeENDLE9BQU9KLFNBQVNLLE1BQU0sRUFBRUMsSUFBSSxDQUFDO1FBQzdCRixPQUFPRixhQUFhVyxLQUFLLEVBQUVQLElBQUksQ0FBQztRQUNoQ0YsT0FBTzlCLFdBQVdtQixJQUFJLENBQUNNLE1BQU0sRUFBRWUsR0FBRyxDQUFDQyxnQkFBZ0I7SUFDckQ7SUFFQWxDLEdBQUcsK0NBQStDO1FBQ2hELE1BQU1DLGNBQWM7WUFDbEJDLE9BQU87WUFDUEMsVUFBVTtZQUNWQyxNQUFNO1FBQ1I7UUFDQSxNQUFNQyxNQUFNLElBQUlDLG1CQUFXLENBQUMsc0NBQXNDO1lBQ2hFQyxRQUFRO1lBQ1JDLE1BQU1DLEtBQUtDLFNBQVMsQ0FBQ1Q7WUFDckJVLFNBQVM7Z0JBQUUsZ0JBQWdCO1lBQW1CO1FBQ2hEO1FBRUFsQixXQUFXbUIsSUFBSSxDQUFDQyxVQUFVLENBQUNkLGlCQUFpQixDQUFDO1FBQzdDSixpQkFBaUJ3QyxpQkFBaUIsQ0FBQyxJQUFJQyxNQUFNO1FBRTdDLE1BQU1qQixXQUFXLE1BQU1DLElBQUFBLFdBQUksRUFBQ2Y7UUFDNUIsTUFBTWdCLGVBQWUsTUFBTUYsU0FBU0csSUFBSTtRQUV4Q0MsT0FBT0osU0FBU0ssTUFBTSxFQUFFQyxJQUFJLENBQUM7UUFDN0JGLE9BQU9GLGFBQWFXLEtBQUssRUFBRVAsSUFBSSxDQUFDO1FBQ2hDRixPQUFPOUIsV0FBV21CLElBQUksQ0FBQ00sTUFBTSxFQUFFZSxHQUFHLENBQUNDLGdCQUFnQjtJQUNyRDtJQUVBbEMsR0FBRyw0Q0FBNEM7UUFDN0MsTUFBTUMsY0FBYztZQUNsQkMsT0FBTztZQUNQQyxVQUFVO1lBQ1ZDLE1BQU07UUFDUjtRQUNBLE1BQU1DLE1BQU0sSUFBSUMsbUJBQVcsQ0FBQyxzQ0FBc0M7WUFDaEVDLFFBQVE7WUFDUkMsTUFBTUMsS0FBS0MsU0FBUyxDQUFDVDtZQUNyQlUsU0FBUztnQkFBRSxnQkFBZ0I7WUFBbUI7UUFDaEQ7UUFFQWxCLFdBQVdtQixJQUFJLENBQUNDLFVBQVUsQ0FBQ2QsaUJBQWlCLENBQUM7UUFDN0NKLGlCQUFpQkksaUJBQWlCLENBQUM7UUFDbkNOLFdBQVdtQixJQUFJLENBQUNNLE1BQU0sQ0FBQ2lCLGlCQUFpQixDQUFDLElBQUlDLE1BQU07UUFFbkQsTUFBTWpCLFdBQVcsTUFBTUMsSUFBQUEsV0FBSSxFQUFDZjtRQUM1QixNQUFNZ0IsZUFBZSxNQUFNRixTQUFTRyxJQUFJO1FBRXhDQyxPQUFPSixTQUFTSyxNQUFNLEVBQUVDLElBQUksQ0FBQztRQUM3QkYsT0FBT0YsYUFBYVcsS0FBSyxFQUFFUCxJQUFJLENBQUM7SUFDbEM7QUFFQSxzQ0FBc0M7QUFDdEMsa0VBQWtFO0FBQ2xFLGlEQUFpRDtBQUNuRCJ9