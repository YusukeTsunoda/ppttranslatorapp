{"version":3,"sources":["/Users/yusuketsunoda/Documents/cursor/ppttranslatorapp/worktrees/cicd-setup/app/api/auth/register/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { hashPassword } from '@/lib/auth/password';\nimport { prisma } from '@/lib/db/prisma';\nimport { v4 as uuidv4 } from 'uuid';\n\n// Node.jsランタイムを明示的に指定\n// bcryptjsを使用するため、Edge Runtimeでは動作しません\nexport const runtime = 'nodejs';\n\nexport async function POST(request: NextRequest) {\n  try {\n    const { email, password, name } = await request.json();\n\n    // メールアドレスの重複チェック\n    const existingUser = await prisma.user.findUnique({\n      where: { email },\n    });\n\n    if (existingUser) {\n      return NextResponse.json({ error: 'このメールアドレスは既に登録されています' }, { status: 400 });\n    }\n\n    // パスワードのハッシュ化\n    const hashedPassword = await hashPassword(password);\n\n    // ユーザーの作成\n    const user = await prisma.user.create({\n      data: {\n        id: uuidv4(),\n        email,\n        name,\n        password: hashedPassword,\n        credits: 15,\n        updatedAt: new Date(),\n      },\n    });\n\n    // アクティビティログの記録\n    // ActivityLogモデルが存在しないためコメントアウト\n    /*\n    await prisma.activityLog.create({\n      data: {\n        userId: user.id,\n        action: 'sign_up',\n        ipAddress: request.headers.get('x-forwarded-for') || 'unknown',\n        metadata: {\n          email: user.email\n        }\n      }\n    }).catch((error: Error) => {\n      console.error('Error creating activity log:', error);\n    });\n    */\n\n    // 代わりにコンソールにログを出力\n    console.log('User registered:', {\n      userId: user.id,\n      action: 'sign_up',\n      ipAddress: request.headers.get('x-forwarded-for') || 'unknown',\n      email: user.email,\n    });\n\n    return NextResponse.json({ success: true, userId: user.id });\n  } catch (error) {\n    console.error('Registration error:', error);\n    return NextResponse.json({ error: 'ユーザー登録中にエラーが発生しました' }, { status: 500 });\n  }\n}\n"],"names":["POST","runtime","request","email","password","name","json","existingUser","prisma","user","findUnique","where","NextResponse","error","status","hashedPassword","hashPassword","create","data","id","uuidv4","credits","updatedAt","Date","console","log","userId","action","ipAddress","headers","get","success"],"mappings":";;;;;;;;;;;IASsBA,IAAI;eAAJA;;IAFTC,OAAO;eAAPA;;;wBAP6B;0BACb;wBACN;sBACM;AAItB,MAAMA,UAAU;AAEhB,eAAeD,KAAKE,OAAoB;IAC7C,IAAI;QACF,MAAM,EAAEC,KAAK,EAAEC,QAAQ,EAAEC,IAAI,EAAE,GAAG,MAAMH,QAAQI,IAAI;QAEpD,iBAAiB;QACjB,MAAMC,eAAe,MAAMC,cAAM,CAACC,IAAI,CAACC,UAAU,CAAC;YAChDC,OAAO;gBAAER;YAAM;QACjB;QAEA,IAAII,cAAc;YAChB,OAAOK,oBAAY,CAACN,IAAI,CAAC;gBAAEO,OAAO;YAAuB,GAAG;gBAAEC,QAAQ;YAAI;QAC5E;QAEA,cAAc;QACd,MAAMC,iBAAiB,MAAMC,IAAAA,sBAAY,EAACZ;QAE1C,UAAU;QACV,MAAMK,OAAO,MAAMD,cAAM,CAACC,IAAI,CAACQ,MAAM,CAAC;YACpCC,MAAM;gBACJC,IAAIC,IAAAA,QAAM;gBACVjB;gBACAE;gBACAD,UAAUW;gBACVM,SAAS;gBACTC,WAAW,IAAIC;YACjB;QACF;QAEA,eAAe;QACf,gCAAgC;QAChC;;;;;;;;;;;;;IAaA,GAEA,kBAAkB;QAClBC,QAAQC,GAAG,CAAC,oBAAoB;YAC9BC,QAAQjB,KAAKU,EAAE;YACfQ,QAAQ;YACRC,WAAW1B,QAAQ2B,OAAO,CAACC,GAAG,CAAC,sBAAsB;YACrD3B,OAAOM,KAAKN,KAAK;QACnB;QAEA,OAAOS,oBAAY,CAACN,IAAI,CAAC;YAAEyB,SAAS;YAAML,QAAQjB,KAAKU,EAAE;QAAC;IAC5D,EAAE,OAAON,OAAO;QACdW,QAAQX,KAAK,CAAC,uBAAuBA;QACrC,OAAOD,oBAAY,CAACN,IAAI,CAAC;YAAEO,OAAO;QAAqB,GAAG;YAAEC,QAAQ;QAAI;IAC1E;AACF"}