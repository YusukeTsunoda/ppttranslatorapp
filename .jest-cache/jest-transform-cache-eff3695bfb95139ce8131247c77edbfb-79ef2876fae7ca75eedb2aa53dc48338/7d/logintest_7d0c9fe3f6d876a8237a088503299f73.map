{"version":3,"sources":["/Users/yusuketsunoda/Documents/cursor/ppttranslatorapp/worktrees/cicd-setup/tests/api/auth/login.test.ts"],"sourcesContent":["import { NextRequest } from 'next/server';\nimport { POST } from '@/app/api/auth/login/route';\nimport { comparePasswords } from '@/lib/auth/session';\nimport { prisma } from '@/lib/db/prisma';\n\n// モックの設定\njest.mock('@/lib/auth/session', () => ({\n  comparePasswords: jest.fn(),\n}));\n\njest.mock('@/lib/db/prisma', () => ({\n  prisma: {\n    user: {\n      findUnique: jest.fn(),\n    },\n    $connect: jest.fn(),\n    $disconnect: jest.fn(),\n  },\n}));\n\n// NextRequestのモック\nconst createMockRequest = (body: any) => {\n  return {\n    json: jest.fn().mockResolvedValue(body),\n    ip: '127.0.0.1',\n    headers: {\n      get: jest.fn().mockReturnValue('Mozilla/5.0 Test User Agent'),\n    },\n  } as unknown as NextRequest;\n};\n\ndescribe('Login API', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n\n    // データベース接続のモックをデフォルトで成功に設定\n    (prisma.$connect as jest.Mock).mockResolvedValue(undefined);\n    (prisma.$disconnect as jest.Mock).mockResolvedValue(undefined);\n  });\n\n  describe('POST /api/auth/login', () => {\n    it('正常なログインリクエストを処理できる', async () => {\n      // ユーザーが存在し、パスワードが一致する場合のモック設定\n      (prisma.user.findUnique as jest.Mock).mockResolvedValue({\n        id: 'test-user-id',\n        email: 'test@example.com',\n        password: 'hashed_password',\n        name: 'Test User',\n      });\n      (comparePasswords as jest.Mock).mockResolvedValue(true);\n\n      const req = new Request('http://localhost:3000/api/auth/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          email: 'test@example.com',\n          password: 'password123',\n        }),\n      });\n\n      const response = await POST(req as unknown as NextRequest);\n      const responseData = await response.json();\n      \n      // レスポンスのステータスコードを確認\n      expect(response.status).toBe(200);\n      \n      // レスポンスのデータを確認\n      expect(responseData.success).toBe(true);\n      expect(responseData.user).toEqual({\n        id: 'test-user-id',\n        email: 'test@example.com',\n        name: 'Test User',\n      });\n    });\n\n    it('必須フィールドが欠けている場合は400エラーを返す', async () => {\n      const req = new Request('http://localhost:3000/api/auth/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          email: 'test@example.com',\n          // パスワードを省略\n        }),\n      });\n\n      const response = await POST(req as unknown as NextRequest);\n      expect(response.status).toBe(400);\n\n      const data = await response.json();\n      expect(data.error).toBe('メールアドレスとパスワードは必須です');\n    });\n\n    it('存在しないユーザーの場合は401エラーを返す', async () => {\n      // ユーザーが存在しない場合のモック設定\n      (prisma.user.findUnique as jest.Mock).mockResolvedValue(null);\n\n      const req = new Request('http://localhost:3000/api/auth/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          email: 'nonexistent@example.com',\n          password: 'password123',\n        }),\n      });\n\n      const response = await POST(req as unknown as NextRequest);\n      expect(response.status).toBe(401);\n\n      const data = await response.json();\n      expect(data.error).toBe('メールアドレスまたはパスワードが正しくありません');\n    });\n\n    it('パスワードが一致しない場合は401エラーを返す', async () => {\n      // ユーザーは存在するがパスワードが一致しない場合のモック設定\n      (prisma.user.findUnique as jest.Mock).mockResolvedValue({\n        id: 'test-user-id',\n        email: 'test@example.com',\n        password: 'hashed_password',\n        name: 'Test User',\n      });\n      (comparePasswords as jest.Mock).mockResolvedValue(false);\n\n      const req = new Request('http://localhost:3000/api/auth/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          email: 'test@example.com',\n          password: 'wrong_password',\n        }),\n      });\n\n      const response = await POST(req as unknown as NextRequest);\n      expect(response.status).toBe(401);\n\n      const data = await response.json();\n      expect(data.error).toBe('メールアドレスまたはパスワードが正しくありません');\n    });\n\n    it('データベース接続エラーの場合は500エラーを返す', async () => {\n      // データベース接続エラーのモック設定\n      (prisma.$connect as jest.Mock).mockRejectedValue(new Error('DB connection failed'));\n\n      const req = new Request('http://localhost:3000/api/auth/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          email: 'test@example.com',\n          password: 'password123',\n        }),\n      });\n\n      const response = await POST(req as unknown as NextRequest);\n      expect(response.status).toBe(500);\n\n      const data = await response.json();\n      expect(data.error).toBe('データベース接続エラー');\n    });\n\n    it('予期せぬエラーの場合は500エラーを返す', async () => {\n      // 予期せぬエラーのモック設定\n      (prisma.user.findUnique as jest.Mock).mockRejectedValue(new Error('Unexpected error'));\n\n      const req = new Request('http://localhost:3000/api/auth/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          email: 'test@example.com',\n          password: 'password123',\n        }),\n      });\n\n      const response = await POST(req as unknown as NextRequest);\n      expect(response.status).toBe(500);\n\n      const data = await response.json();\n      expect(data.error).toBe('ログイン処理中にエラーが発生しました');\n    });\n  });\n});\n"],"names":["jest","mock","comparePasswords","fn","prisma","user","findUnique","$connect","$disconnect","createMockRequest","body","json","mockResolvedValue","ip","headers","get","mockReturnValue","describe","beforeEach","clearAllMocks","undefined","it","id","email","password","name","req","Request","method","JSON","stringify","response","POST","responseData","expect","status","toBe","success","toEqual","data","error","mockRejectedValue","Error"],"mappings":"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"}