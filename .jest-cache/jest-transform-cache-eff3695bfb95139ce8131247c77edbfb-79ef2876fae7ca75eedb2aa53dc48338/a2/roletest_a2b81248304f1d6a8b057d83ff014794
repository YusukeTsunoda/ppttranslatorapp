99972ab26d7018ce0cb037f36c06c974
"use strict";
// getServerSession のモック
jest.mock('next-auth', ()=>({
        ...jest.requireActual('next-auth'),
        getServerSession: jest.fn()
    }));
// Prisma Client のモック
jest.mock('@/lib/db/prisma', ()=>({
        prisma: (0, _jestmockextended.mockDeep)()
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _route = require("@/app/api/user/role/route");
const _nextauth = require("next-auth");
const _prisma = require("@/lib/db/prisma");
const _server = require("next/server");
const _jestmockextended = require("jest-mock-extended");
const _authoptions = require("@/lib/auth/auth-options");
const _client = require("@prisma/client");
const getServerSessionMock = _nextauth.getServerSession;
const prismaMock = _prisma.prisma;
describe('GET /api/user/role', ()=>{
    const mockUserId = 'user-role-test-id';
    // NextRequestのモックはGETでは通常不要だが、型合わせのためにダミーを渡すことがある
    const mockRequest = new _server.NextRequest('http://localhost/api/user/role');
    beforeEach(()=>{
        jest.clearAllMocks();
    });
    it('should return isAdmin true and role ADMIN for admin user', async ()=>{
        getServerSessionMock.mockResolvedValue({
            user: {
                id: mockUserId
            }
        });
        prismaMock.user.findUnique.mockResolvedValue({
            role: _client.UserRole.ADMIN
        });
        const response = await (0, _route.GET)(mockRequest);
        const responseBody = await response.json();
        expect(response.status).toBe(200);
        expect(responseBody.isAdmin).toBe(true);
        expect(responseBody.role).toBe(_client.UserRole.ADMIN);
        expect(getServerSessionMock).toHaveBeenCalledWith(_authoptions.authOptions);
        expect(prismaMock.user.findUnique).toHaveBeenCalledWith({
            where: {
                id: mockUserId
            },
            select: {
                role: true
            }
        });
    });
    it('should return isAdmin false and role USER for non-admin user', async ()=>{
        getServerSessionMock.mockResolvedValue({
            user: {
                id: mockUserId
            }
        });
        prismaMock.user.findUnique.mockResolvedValue({
            role: _client.UserRole.USER
        });
        const response = await (0, _route.GET)(mockRequest);
        const responseBody = await response.json();
        expect(response.status).toBe(200);
        expect(responseBody.isAdmin).toBe(false);
        expect(responseBody.role).toBe(_client.UserRole.USER);
    });
    it('should return 401 with isAdmin false and role null if not authenticated', async ()=>{
        getServerSessionMock.mockResolvedValue(null); // No session
        const response = await (0, _route.GET)(mockRequest);
        const responseBody = await response.json();
        expect(response.status).toBe(401);
        expect(responseBody.isAdmin).toBe(false);
        expect(responseBody.role).toBeNull();
        expect(prismaMock.user.findUnique).not.toHaveBeenCalled();
    });
    it('should return 404 with isAdmin false and role null if user not found', async ()=>{
        getServerSessionMock.mockResolvedValue({
            user: {
                id: mockUserId
            }
        });
        prismaMock.user.findUnique.mockResolvedValue(null); // User not found
        const response = await (0, _route.GET)(mockRequest);
        const responseBody = await response.json();
        expect(response.status).toBe(404);
        expect(responseBody.isAdmin).toBe(false);
        expect(responseBody.role).toBeNull();
    });
    it('should return 500 if prisma.user.findUnique fails', async ()=>{
        getServerSessionMock.mockResolvedValue({
            user: {
                id: mockUserId
            }
        });
        prismaMock.user.findUnique.mockRejectedValue(new Error('DB query failed'));
        const response = await (0, _route.GET)(mockRequest);
        const responseBody = await response.json();
        expect(response.status).toBe(500);
        expect(responseBody.error).toBe('ユーザーロールの取得に失敗しました');
    });
});

//# sourceMappingURL=data:application/json;base64,