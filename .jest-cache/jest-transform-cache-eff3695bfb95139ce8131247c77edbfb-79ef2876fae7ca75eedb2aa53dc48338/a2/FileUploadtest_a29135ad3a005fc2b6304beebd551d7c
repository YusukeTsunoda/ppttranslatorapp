f0b71e793d7c9ccec15056139e2bc1bd
/// <reference path="../../../jest.d.ts" />
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _interop_require_default = require("@swc/helpers/_/_interop_require_default");
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default._(require("react"));
const _react1 = require("@testing-library/react");
const _FileUpload = require("@/app/(dashboard)/translate/components/FileUpload");
require("@testing-library/jest-dom");
describe('FileUploadComponent', ()=>{
    const mockOnUploadComplete = jest.fn();
    beforeEach(()=>{
        jest.clearAllMocks();
    });
    it('正しくレンダリングされること', ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_FileUpload.FileUploadComponent, {
            onUploadComplete: mockOnUploadComplete
        }));
        expect(_react1.screen.getByTestId('upload-area')).toBeInTheDocument();
        expect(_react1.screen.getByTestId('file-input')).toBeInTheDocument();
        expect(_react1.screen.getByTestId('upload-text')).toHaveTextContent('ファイルをアップロード');
        expect(_react1.screen.getByTestId('file-select-button')).toHaveTextContent('ファイルを選択');
    });
    it('ファイル選択ボタンをクリックするとファイル選択ダイアログが開くこと', ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_FileUpload.FileUploadComponent, {
            onUploadComplete: mockOnUploadComplete
        }));
        const fileInput = _react1.screen.getByTestId('file-input');
        const clickSpy = jest.spyOn(fileInput, 'click');
        _react1.fireEvent.click(_react1.screen.getByTestId('file-select-button'));
        expect(clickSpy).toHaveBeenCalled();
    });
    it('ファイルが選択されたときにonUploadCompleteが呼ばれること', ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_FileUpload.FileUploadComponent, {
            onUploadComplete: mockOnUploadComplete
        }));
        const file = new File([
            'dummy content'
        ], 'test.pptx', {
            type: 'application/vnd.openxmlformats-officedocument.presentationml.presentation'
        });
        const fileInput = _react1.screen.getByTestId('file-input');
        _react1.fireEvent.change(fileInput, {
            target: {
                files: [
                    file
                ]
            }
        });
        expect(mockOnUploadComplete).toHaveBeenCalledWith(file);
    });
    it('ドラッグ&ドロップでファイルをアップロードできること', ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_FileUpload.FileUploadComponent, {
            onUploadComplete: mockOnUploadComplete
        }));
        const file = new File([
            'dummy content'
        ], 'test.pptx', {
            type: 'application/vnd.openxmlformats-officedocument.presentationml.presentation'
        });
        const uploadArea = _react1.screen.getByTestId('upload-area');
        // ドラッグオーバーイベントをシミュレート
        _react1.fireEvent.dragOver(uploadArea);
        // ドロップイベントをシミュレート
        _react1.fireEvent.drop(uploadArea, {
            dataTransfer: {
                files: [
                    file
                ]
            }
        });
        expect(mockOnUploadComplete).toHaveBeenCalledWith(file);
    });
    it('ドラッグ&ドロップ中にスタイルが変わること', ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_FileUpload.FileUploadComponent, {
            onUploadComplete: mockOnUploadComplete
        }));
        const uploadArea = _react1.screen.getByTestId('upload-area');
        // 初期状態ではドラッグオーバースタイルが適用されていないこと
        expect(uploadArea.className).toContain('border-gray-300');
        // ドラッグオーバー時にスタイルが変わること
        _react1.fireEvent.dragOver(uploadArea);
        expect(uploadArea.className).toContain('border-primary');
        // ドラッグリーブ時に元のスタイルに戻ること
        _react1.fireEvent.dragLeave(uploadArea);
        expect(uploadArea.className).toContain('border-gray-300');
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy95dXN1a2V0c3Vub2RhL0RvY3VtZW50cy9jdXJzb3IvcHB0dHJhbnNsYXRvcmFwcC93b3JrdHJlZXMvY2ljZC1zZXR1cC90ZXN0cy9hcHAvdHJhbnNsYXRlL2NvbXBvbmVudHMvRmlsZVVwbG9hZC50ZXN0LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vLi4vLi4vamVzdC5kLnRzXCIgLz5cblxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHJlbmRlciwgc2NyZWVuLCBmaXJlRXZlbnQgfSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0JztcbmltcG9ydCB7IEZpbGVVcGxvYWRDb21wb25lbnQgfSBmcm9tICdAL2FwcC8oZGFzaGJvYXJkKS90cmFuc2xhdGUvY29tcG9uZW50cy9GaWxlVXBsb2FkJztcbmltcG9ydCAnQHRlc3RpbmctbGlicmFyeS9qZXN0LWRvbSc7XG5cbmRlc2NyaWJlKCdGaWxlVXBsb2FkQ29tcG9uZW50JywgKCkgPT4ge1xuICBjb25zdCBtb2NrT25VcGxvYWRDb21wbGV0ZSA9IGplc3QuZm4oKTtcblxuICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICBqZXN0LmNsZWFyQWxsTW9ja3MoKTtcbiAgfSk7XG5cbiAgaXQoJ+ato+OBl+OBj+ODrOODs+ODgOODquODs+OCsOOBleOCjOOCi+OBk+OBqCcsICgpID0+IHtcbiAgICByZW5kZXIoPEZpbGVVcGxvYWRDb21wb25lbnQgb25VcGxvYWRDb21wbGV0ZT17bW9ja09uVXBsb2FkQ29tcGxldGV9IC8+KTtcblxuICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXN0SWQoJ3VwbG9hZC1hcmVhJykpLnRvQmVJblRoZURvY3VtZW50KCk7XG4gICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRlc3RJZCgnZmlsZS1pbnB1dCcpKS50b0JlSW5UaGVEb2N1bWVudCgpO1xuICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXN0SWQoJ3VwbG9hZC10ZXh0JykpLnRvSGF2ZVRleHRDb250ZW50KCfjg5XjgqHjgqTjg6vjgpLjgqLjg4Pjg5fjg63jg7zjg4knKTtcbiAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGVzdElkKCdmaWxlLXNlbGVjdC1idXR0b24nKSkudG9IYXZlVGV4dENvbnRlbnQoJ+ODleOCoeOCpOODq+OCkumBuOaKnicpO1xuICB9KTtcblxuICBpdCgn44OV44Kh44Kk44Or6YG45oqe44Oc44K/44Oz44KS44Kv44Oq44OD44Kv44GZ44KL44Go44OV44Kh44Kk44Or6YG45oqe44OA44Kk44Ki44Ot44Kw44GM6ZaL44GP44GT44GoJywgKCkgPT4ge1xuICAgIHJlbmRlcig8RmlsZVVwbG9hZENvbXBvbmVudCBvblVwbG9hZENvbXBsZXRlPXttb2NrT25VcGxvYWRDb21wbGV0ZX0gLz4pO1xuXG4gICAgY29uc3QgZmlsZUlucHV0ID0gc2NyZWVuLmdldEJ5VGVzdElkKCdmaWxlLWlucHV0Jyk7XG4gICAgY29uc3QgY2xpY2tTcHkgPSBqZXN0LnNweU9uKGZpbGVJbnB1dCwgJ2NsaWNrJyk7XG5cbiAgICBmaXJlRXZlbnQuY2xpY2soc2NyZWVuLmdldEJ5VGVzdElkKCdmaWxlLXNlbGVjdC1idXR0b24nKSk7XG5cbiAgICBleHBlY3QoY2xpY2tTcHkpLnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgfSk7XG5cbiAgaXQoJ+ODleOCoeOCpOODq+OBjOmBuOaKnuOBleOCjOOBn+OBqOOBjeOBq29uVXBsb2FkQ29tcGxldGXjgYzlkbzjgbDjgozjgovjgZPjgagnLCAoKSA9PiB7XG4gICAgcmVuZGVyKDxGaWxlVXBsb2FkQ29tcG9uZW50IG9uVXBsb2FkQ29tcGxldGU9e21vY2tPblVwbG9hZENvbXBsZXRlfSAvPik7XG5cbiAgICBjb25zdCBmaWxlID0gbmV3IEZpbGUoWydkdW1teSBjb250ZW50J10sICd0ZXN0LnBwdHgnLCB7XG4gICAgICB0eXBlOiAnYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LnByZXNlbnRhdGlvbm1sLnByZXNlbnRhdGlvbicsXG4gICAgfSk7XG4gICAgY29uc3QgZmlsZUlucHV0ID0gc2NyZWVuLmdldEJ5VGVzdElkKCdmaWxlLWlucHV0Jyk7XG5cbiAgICBmaXJlRXZlbnQuY2hhbmdlKGZpbGVJbnB1dCwgeyB0YXJnZXQ6IHsgZmlsZXM6IFtmaWxlXSB9IH0pO1xuXG4gICAgZXhwZWN0KG1vY2tPblVwbG9hZENvbXBsZXRlKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChmaWxlKTtcbiAgfSk7XG5cbiAgaXQoJ+ODieODqeODg+OCsCbjg4njg63jg4Pjg5fjgafjg5XjgqHjgqTjg6vjgpLjgqLjg4Pjg5fjg63jg7zjg4njgafjgY3jgovjgZPjgagnLCAoKSA9PiB7XG4gICAgcmVuZGVyKDxGaWxlVXBsb2FkQ29tcG9uZW50IG9uVXBsb2FkQ29tcGxldGU9e21vY2tPblVwbG9hZENvbXBsZXRlfSAvPik7XG5cbiAgICBjb25zdCBmaWxlID0gbmV3IEZpbGUoWydkdW1teSBjb250ZW50J10sICd0ZXN0LnBwdHgnLCB7XG4gICAgICB0eXBlOiAnYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LnByZXNlbnRhdGlvbm1sLnByZXNlbnRhdGlvbicsXG4gICAgfSk7XG4gICAgY29uc3QgdXBsb2FkQXJlYSA9IHNjcmVlbi5nZXRCeVRlc3RJZCgndXBsb2FkLWFyZWEnKTtcblxuICAgIC8vIOODieODqeODg+OCsOOCquODvOODkOODvOOCpOODmeODs+ODiOOCkuOCt+ODn+ODpeODrOODvOODiFxuICAgIGZpcmVFdmVudC5kcmFnT3Zlcih1cGxvYWRBcmVhKTtcblxuICAgIC8vIOODieODreODg+ODl+OCpOODmeODs+ODiOOCkuOCt+ODn+ODpeODrOODvOODiFxuICAgIGZpcmVFdmVudC5kcm9wKHVwbG9hZEFyZWEsIHtcbiAgICAgIGRhdGFUcmFuc2Zlcjoge1xuICAgICAgICBmaWxlczogW2ZpbGVdLFxuICAgICAgfSxcbiAgICB9KTtcblxuICAgIGV4cGVjdChtb2NrT25VcGxvYWRDb21wbGV0ZSkudG9IYXZlQmVlbkNhbGxlZFdpdGgoZmlsZSk7XG4gIH0pO1xuXG4gIGl0KCfjg4njg6njg4PjgrAm44OJ44Ot44OD44OX5Lit44Gr44K544K/44Kk44Or44GM5aSJ44KP44KL44GT44GoJywgKCkgPT4ge1xuICAgIHJlbmRlcig8RmlsZVVwbG9hZENvbXBvbmVudCBvblVwbG9hZENvbXBsZXRlPXttb2NrT25VcGxvYWRDb21wbGV0ZX0gLz4pO1xuXG4gICAgY29uc3QgdXBsb2FkQXJlYSA9IHNjcmVlbi5nZXRCeVRlc3RJZCgndXBsb2FkLWFyZWEnKTtcblxuICAgIC8vIOWIneacn+eKtuaFi+OBp+OBr+ODieODqeODg+OCsOOCquODvOODkOODvOOCueOCv+OCpOODq+OBjOmBqeeUqOOBleOCjOOBpuOBhOOBquOBhOOBk+OBqFxuICAgIGV4cGVjdCh1cGxvYWRBcmVhLmNsYXNzTmFtZSkudG9Db250YWluKCdib3JkZXItZ3JheS0zMDAnKTtcblxuICAgIC8vIOODieODqeODg+OCsOOCquODvOODkOODvOaZguOBq+OCueOCv+OCpOODq+OBjOWkieOCj+OCi+OBk+OBqFxuICAgIGZpcmVFdmVudC5kcmFnT3Zlcih1cGxvYWRBcmVhKTtcbiAgICBleHBlY3QodXBsb2FkQXJlYS5jbGFzc05hbWUpLnRvQ29udGFpbignYm9yZGVyLXByaW1hcnknKTtcblxuICAgIC8vIOODieODqeODg+OCsOODquODvOODluaZguOBq+WFg+OBruOCueOCv+OCpOODq+OBq+aIu+OCi+OBk+OBqFxuICAgIGZpcmVFdmVudC5kcmFnTGVhdmUodXBsb2FkQXJlYSk7XG4gICAgZXhwZWN0KHVwbG9hZEFyZWEuY2xhc3NOYW1lKS50b0NvbnRhaW4oJ2JvcmRlci1ncmF5LTMwMCcpO1xuICB9KTtcbn0pO1xuIl0sIm5hbWVzIjpbImRlc2NyaWJlIiwibW9ja09uVXBsb2FkQ29tcGxldGUiLCJqZXN0IiwiZm4iLCJiZWZvcmVFYWNoIiwiY2xlYXJBbGxNb2NrcyIsIml0IiwicmVuZGVyIiwiRmlsZVVwbG9hZENvbXBvbmVudCIsIm9uVXBsb2FkQ29tcGxldGUiLCJleHBlY3QiLCJzY3JlZW4iLCJnZXRCeVRlc3RJZCIsInRvQmVJblRoZURvY3VtZW50IiwidG9IYXZlVGV4dENvbnRlbnQiLCJmaWxlSW5wdXQiLCJjbGlja1NweSIsInNweU9uIiwiZmlyZUV2ZW50IiwiY2xpY2siLCJ0b0hhdmVCZWVuQ2FsbGVkIiwiZmlsZSIsIkZpbGUiLCJ0eXBlIiwiY2hhbmdlIiwidGFyZ2V0IiwiZmlsZXMiLCJ0b0hhdmVCZWVuQ2FsbGVkV2l0aCIsInVwbG9hZEFyZWEiLCJkcmFnT3ZlciIsImRyb3AiLCJkYXRhVHJhbnNmZXIiLCJjbGFzc05hbWUiLCJ0b0NvbnRhaW4iLCJkcmFnTGVhdmUiXSwibWFwcGluZ3MiOiJBQUFBLDJDQUEyQzs7Ozs7OztnRUFFekI7d0JBQ3dCOzRCQUNOO1FBQzdCO0FBRVBBLFNBQVMsdUJBQXVCO0lBQzlCLE1BQU1DLHVCQUF1QkMsS0FBS0MsRUFBRTtJQUVwQ0MsV0FBVztRQUNURixLQUFLRyxhQUFhO0lBQ3BCO0lBRUFDLEdBQUcsa0JBQWtCO1FBQ25CQyxJQUFBQSxjQUFNLGdCQUFDLHFCQUFDQywrQkFBbUI7WUFBQ0Msa0JBQWtCUjs7UUFFOUNTLE9BQU9DLGNBQU0sQ0FBQ0MsV0FBVyxDQUFDLGdCQUFnQkMsaUJBQWlCO1FBQzNESCxPQUFPQyxjQUFNLENBQUNDLFdBQVcsQ0FBQyxlQUFlQyxpQkFBaUI7UUFDMURILE9BQU9DLGNBQU0sQ0FBQ0MsV0FBVyxDQUFDLGdCQUFnQkUsaUJBQWlCLENBQUM7UUFDNURKLE9BQU9DLGNBQU0sQ0FBQ0MsV0FBVyxDQUFDLHVCQUF1QkUsaUJBQWlCLENBQUM7SUFDckU7SUFFQVIsR0FBRyxxQ0FBcUM7UUFDdENDLElBQUFBLGNBQU0sZ0JBQUMscUJBQUNDLCtCQUFtQjtZQUFDQyxrQkFBa0JSOztRQUU5QyxNQUFNYyxZQUFZSixjQUFNLENBQUNDLFdBQVcsQ0FBQztRQUNyQyxNQUFNSSxXQUFXZCxLQUFLZSxLQUFLLENBQUNGLFdBQVc7UUFFdkNHLGlCQUFTLENBQUNDLEtBQUssQ0FBQ1IsY0FBTSxDQUFDQyxXQUFXLENBQUM7UUFFbkNGLE9BQU9NLFVBQVVJLGdCQUFnQjtJQUNuQztJQUVBZCxHQUFHLHdDQUF3QztRQUN6Q0MsSUFBQUEsY0FBTSxnQkFBQyxxQkFBQ0MsK0JBQW1CO1lBQUNDLGtCQUFrQlI7O1FBRTlDLE1BQU1vQixPQUFPLElBQUlDLEtBQUs7WUFBQztTQUFnQixFQUFFLGFBQWE7WUFDcERDLE1BQU07UUFDUjtRQUNBLE1BQU1SLFlBQVlKLGNBQU0sQ0FBQ0MsV0FBVyxDQUFDO1FBRXJDTSxpQkFBUyxDQUFDTSxNQUFNLENBQUNULFdBQVc7WUFBRVUsUUFBUTtnQkFBRUMsT0FBTztvQkFBQ0w7aUJBQUs7WUFBQztRQUFFO1FBRXhEWCxPQUFPVCxzQkFBc0IwQixvQkFBb0IsQ0FBQ047SUFDcEQ7SUFFQWYsR0FBRyw4QkFBOEI7UUFDL0JDLElBQUFBLGNBQU0sZ0JBQUMscUJBQUNDLCtCQUFtQjtZQUFDQyxrQkFBa0JSOztRQUU5QyxNQUFNb0IsT0FBTyxJQUFJQyxLQUFLO1lBQUM7U0FBZ0IsRUFBRSxhQUFhO1lBQ3BEQyxNQUFNO1FBQ1I7UUFDQSxNQUFNSyxhQUFhakIsY0FBTSxDQUFDQyxXQUFXLENBQUM7UUFFdEMsc0JBQXNCO1FBQ3RCTSxpQkFBUyxDQUFDVyxRQUFRLENBQUNEO1FBRW5CLGtCQUFrQjtRQUNsQlYsaUJBQVMsQ0FBQ1ksSUFBSSxDQUFDRixZQUFZO1lBQ3pCRyxjQUFjO2dCQUNaTCxPQUFPO29CQUFDTDtpQkFBSztZQUNmO1FBQ0Y7UUFFQVgsT0FBT1Qsc0JBQXNCMEIsb0JBQW9CLENBQUNOO0lBQ3BEO0lBRUFmLEdBQUcseUJBQXlCO1FBQzFCQyxJQUFBQSxjQUFNLGdCQUFDLHFCQUFDQywrQkFBbUI7WUFBQ0Msa0JBQWtCUjs7UUFFOUMsTUFBTTJCLGFBQWFqQixjQUFNLENBQUNDLFdBQVcsQ0FBQztRQUV0QyxnQ0FBZ0M7UUFDaENGLE9BQU9rQixXQUFXSSxTQUFTLEVBQUVDLFNBQVMsQ0FBQztRQUV2Qyx1QkFBdUI7UUFDdkJmLGlCQUFTLENBQUNXLFFBQVEsQ0FBQ0Q7UUFDbkJsQixPQUFPa0IsV0FBV0ksU0FBUyxFQUFFQyxTQUFTLENBQUM7UUFFdkMsdUJBQXVCO1FBQ3ZCZixpQkFBUyxDQUFDZ0IsU0FBUyxDQUFDTjtRQUNwQmxCLE9BQU9rQixXQUFXSSxTQUFTLEVBQUVDLFNBQVMsQ0FBQztJQUN6QztBQUNGIn0=