4b3c98567acdd4d21f1b1b8cea2e984b
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    useApi: function() {
        return useApi;
    },
    useApiMutation: function() {
        return useApiMutation;
    },
    useApiRequest: function() {
        return useApiRequest;
    },
    useTranslate: function() {
        return useTranslate;
    },
    useUpdateProfile: function() {
        return useUpdateProfile;
    },
    useUserProfile: function() {
        return useUserProfile;
    }
});
const _interop_require_default = require("@swc/helpers/_/_interop_require_default");
const _swr = /*#__PURE__*/ _interop_require_default._(require("swr"));
const _react = require("react");
const _errorhandler = require("@/lib/utils/error-handler");
function useApi(key, fetcher, options = {}) {
    const { onSuccess, onError, errorHandler = _errorhandler.handleClientError, ...swrOptions } = options;
    // SWRフックを使用
    const { data, error, isLoading, isValidating, mutate } = (0, _swr.default)(key, fetcher, {
        ...swrOptions,
        onSuccess: (data)=>{
            onSuccess === null || onSuccess === void 0 ? void 0 : onSuccess(data);
        },
        onError: (error)=>{
            // エラーハンドリング
            errorHandler(error);
            onError === null || onError === void 0 ? void 0 : onError(error);
        }
    });
    return {
        data,
        error,
        isLoading,
        isValidating,
        mutate
    };
}
function useApiRequest(url, options = {}) {
    const { method = 'GET', body, headers, ...apiOptions } = options;
    // キャッシュキーの生成
    const cacheKey = method === 'GET' ? url : null;
    // フェッチャー関数
    const fetcher = async ()=>{
        const response = await fetch(url, {
            method,
            headers: {
                'Content-Type': 'application/json',
                ...headers
            },
            body: body ? JSON.stringify(body) : undefined,
            credentials: 'include'
        });
        if (!response.ok) {
            const errorData = await response.json().catch(()=>({}));
            throw new Error(errorData.error || `Request failed with status ${response.status}`);
        }
        return response.json();
    };
    return useApi(cacheKey, fetcher, apiOptions);
}
function useApiMutation(url, options = {}) {
    const { method = 'POST', headers, errorHandler = _errorhandler.handleClientError } = options;
    const [isLoading, setIsLoading] = (0, _react.useState)(false);
    const [error, setError] = (0, _react.useState)(undefined);
    const [data, setData] = (0, _react.useState)(undefined);
    // ミューテーション関数
    const mutate = async (body, callbacks)=>{
        setIsLoading(true);
        setError(undefined);
        try {
            var _callbacks_onSuccess;
            const response = await fetch(url, {
                method,
                headers: {
                    'Content-Type': 'application/json',
                    ...headers
                },
                body: JSON.stringify(body),
                credentials: 'include'
            });
            if (!response.ok) {
                const errorData = await response.json().catch(()=>({}));
                throw new Error(errorData.error || `Request failed with status ${response.status}`);
            }
            const responseData = await response.json();
            setData(responseData);
            callbacks === null || callbacks === void 0 ? void 0 : (_callbacks_onSuccess = callbacks.onSuccess) === null || _callbacks_onSuccess === void 0 ? void 0 : _callbacks_onSuccess.call(callbacks, responseData);
            return responseData;
        } catch (err) {
            var _callbacks_onError;
            const typedError = err;
            setError(typedError);
            errorHandler(err);
            callbacks === null || callbacks === void 0 ? void 0 : (_callbacks_onError = callbacks.onError) === null || _callbacks_onError === void 0 ? void 0 : _callbacks_onError.call(callbacks, typedError);
            return undefined;
        } finally{
            setIsLoading(false);
        }
    };
    return {
        mutate,
        isLoading,
        error,
        data
    };
}
function useUserProfile() {
    return useApi('/api/profile', async ()=>{
        const response = await fetch('/api/profile', {
            credentials: 'include'
        });
        if (!response.ok) {
            throw new Error('Failed to fetch user profile');
        }
        return response.json();
    });
}
function useUpdateProfile() {
    return useApiMutation('/api/profile/update');
}
function useTranslate() {
    return useApiMutation('/api/translate');
}

//# sourceMappingURL=data:application/json;base64,