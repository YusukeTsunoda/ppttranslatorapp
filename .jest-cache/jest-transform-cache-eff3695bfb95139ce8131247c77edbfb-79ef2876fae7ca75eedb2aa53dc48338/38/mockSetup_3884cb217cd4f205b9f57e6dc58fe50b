8fc5d49147526329570d4f9ce5cebd61
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    clearAllMocks: function() {
        return clearAllMocks;
    },
    createMockUser: function() {
        return createMockUser;
    },
    createPrismaMock: function() {
        return createPrismaMock;
    },
    createSessionMock: function() {
        return createSessionMock;
    }
});
const _client = require("@prisma/client");
const _jestmockextended = require("jest-mock-extended");
const createPrismaMock = ()=>{
    jest.mock('@/lib/db/prisma', ()=>({
            prisma: prismaMock
        }));
    const prismaMock = (0, _jestmockextended.mockDeep)();
    return prismaMock;
};
const createSessionMock = ()=>{
    jest.mock('next-auth', ()=>{
        return {
            __esModule: true,
            getServerSession: ()=>sessionMock()
        };
    });
    const sessionMock = jest.fn().mockResolvedValue(null);
    return sessionMock;
};
const clearAllMocks = ()=>{
    jest.clearAllMocks();
};
const createMockUser = (overrides = {})=>({
        id: 'test-user-id',
        email: 'test@example.com',
        name: 'Test User',
        password: 'hashed_password',
        credits: 10,
        createdAt: new Date(),
        updatedAt: new Date(),
        role: _client.UserRole.USER,
        deletedAt: null,
        emailVerified: null,
        stripeCustomerId: null,
        stripePriceId: null,
        stripeCurrentPeriodEnd: null,
        stripeSubscriptionId: null,
        magicLinkToken: null,
        magicLinkExpiresAt: null,
        passwordResetToken: null,
        passwordResetExpiresAt: null,
        image: null,
        ...overrides
    });

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy95dXN1a2V0c3Vub2RhL0RvY3VtZW50cy9jdXJzb3IvcHB0dHJhbnNsYXRvcmFwcC93b3JrdHJlZXMvY2ljZC1zZXR1cC90ZXN0cy9oZWxwZXJzL21vY2tTZXR1cC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQcmlzbWFDbGllbnQsIFVzZXJSb2xlIH0gZnJvbSAnQHByaXNtYS9jbGllbnQnO1xuaW1wb3J0IHsgbW9ja0RlZXAsIERlZXBNb2NrUHJveHkgfSBmcm9tICdqZXN0LW1vY2stZXh0ZW5kZWQnO1xuaW1wb3J0IHsgZ2V0U2VydmVyU2Vzc2lvbiB9IGZyb20gJ25leHQtYXV0aCc7XG5cbi8vIFByaXNtYSBDbGllbnTjga7jg6Ljg4Pjgq/kvZzmiJBcbmV4cG9ydCBjb25zdCBjcmVhdGVQcmlzbWFNb2NrID0gKCkgPT4ge1xuICBjb25zdCBwcmlzbWFNb2NrID0gbW9ja0RlZXA8UHJpc21hQ2xpZW50PigpO1xuICBqZXN0Lm1vY2soJ0AvbGliL2RiL3ByaXNtYScsICgpID0+ICh7XG4gICAgcHJpc21hOiBwcmlzbWFNb2NrLFxuICB9KSk7XG4gIHJldHVybiBwcmlzbWFNb2NrIGFzIHVua25vd24gYXMgRGVlcE1vY2tQcm94eTxQcmlzbWFDbGllbnQ+O1xufTtcblxuLy8gZ2V0U2VydmVyU2Vzc2lvbuOBruODouODg+OCr+S9nOaIkFxuZXhwb3J0IGNvbnN0IGNyZWF0ZVNlc3Npb25Nb2NrID0gKCkgPT4ge1xuICBjb25zdCBzZXNzaW9uTW9jayA9IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZShudWxsKTtcbiAgamVzdC5tb2NrKCduZXh0LWF1dGgnLCAoKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIF9fZXNNb2R1bGU6IHRydWUsXG4gICAgICBnZXRTZXJ2ZXJTZXNzaW9uOiAoKSA9PiBzZXNzaW9uTW9jaygpLFxuICAgIH07XG4gIH0pO1xuICByZXR1cm4gc2Vzc2lvbk1vY2s7XG59O1xuXG4vLyDlhbHpgJrjga7jg6Ljg4Pjgq/jgq/jg6rjgqJcbmV4cG9ydCBjb25zdCBjbGVhckFsbE1vY2tzID0gKCkgPT4ge1xuICBqZXN0LmNsZWFyQWxsTW9ja3MoKTtcbn07XG5cbi8vIOWFsemAmuOBruODpuODvOOCtuODvOODouODg+OCr+ODh+ODvOOCv1xuZXhwb3J0IGNvbnN0IGNyZWF0ZU1vY2tVc2VyID0gKG92ZXJyaWRlcyA9IHt9KSA9PiAoe1xuICBpZDogJ3Rlc3QtdXNlci1pZCcsXG4gIGVtYWlsOiAndGVzdEBleGFtcGxlLmNvbScsXG4gIG5hbWU6ICdUZXN0IFVzZXInLFxuICBwYXNzd29yZDogJ2hhc2hlZF9wYXNzd29yZCcsXG4gIGNyZWRpdHM6IDEwLFxuICBjcmVhdGVkQXQ6IG5ldyBEYXRlKCksXG4gIHVwZGF0ZWRBdDogbmV3IERhdGUoKSxcbiAgcm9sZTogVXNlclJvbGUuVVNFUixcbiAgZGVsZXRlZEF0OiBudWxsLFxuICBlbWFpbFZlcmlmaWVkOiBudWxsLFxuICBzdHJpcGVDdXN0b21lcklkOiBudWxsLFxuICBzdHJpcGVQcmljZUlkOiBudWxsLFxuICBzdHJpcGVDdXJyZW50UGVyaW9kRW5kOiBudWxsLFxuICBzdHJpcGVTdWJzY3JpcHRpb25JZDogbnVsbCxcbiAgbWFnaWNMaW5rVG9rZW46IG51bGwsXG4gIG1hZ2ljTGlua0V4cGlyZXNBdDogbnVsbCxcbiAgcGFzc3dvcmRSZXNldFRva2VuOiBudWxsLFxuICBwYXNzd29yZFJlc2V0RXhwaXJlc0F0OiBudWxsLFxuICBpbWFnZTogbnVsbCxcbiAgLi4ub3ZlcnJpZGVzLFxufSk7ICJdLCJuYW1lcyI6WyJjbGVhckFsbE1vY2tzIiwiY3JlYXRlTW9ja1VzZXIiLCJjcmVhdGVQcmlzbWFNb2NrIiwiY3JlYXRlU2Vzc2lvbk1vY2siLCJqZXN0IiwibW9jayIsInByaXNtYSIsInByaXNtYU1vY2siLCJtb2NrRGVlcCIsIl9fZXNNb2R1bGUiLCJnZXRTZXJ2ZXJTZXNzaW9uIiwic2Vzc2lvbk1vY2siLCJmbiIsIm1vY2tSZXNvbHZlZFZhbHVlIiwib3ZlcnJpZGVzIiwiaWQiLCJlbWFpbCIsIm5hbWUiLCJwYXNzd29yZCIsImNyZWRpdHMiLCJjcmVhdGVkQXQiLCJEYXRlIiwidXBkYXRlZEF0Iiwicm9sZSIsIlVzZXJSb2xlIiwiVVNFUiIsImRlbGV0ZWRBdCIsImVtYWlsVmVyaWZpZWQiLCJzdHJpcGVDdXN0b21lcklkIiwic3RyaXBlUHJpY2VJZCIsInN0cmlwZUN1cnJlbnRQZXJpb2RFbmQiLCJzdHJpcGVTdWJzY3JpcHRpb25JZCIsIm1hZ2ljTGlua1Rva2VuIiwibWFnaWNMaW5rRXhwaXJlc0F0IiwicGFzc3dvcmRSZXNldFRva2VuIiwicGFzc3dvcmRSZXNldEV4cGlyZXNBdCIsImltYWdlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztJQTBCYUEsYUFBYTtlQUFiQTs7SUFLQUMsY0FBYztlQUFkQTs7SUExQkFDLGdCQUFnQjtlQUFoQkE7O0lBU0FDLGlCQUFpQjtlQUFqQkE7Ozt3QkFkMEI7a0NBQ0M7QUFJakMsTUFBTUQsbUJBQW1CO0lBRTlCRSxLQUFLQyxJQUFJLENBQUMsbUJBQW1CLElBQU8sQ0FBQTtZQUNsQ0MsUUFBUUM7UUFDVixDQUFBO0lBSEEsTUFBTUEsYUFBYUMsSUFBQUEsMEJBQVE7SUFJM0IsT0FBT0Q7QUFDVDtBQUdPLE1BQU1KLG9CQUFvQjtJQUUvQkMsS0FBS0MsSUFBSSxDQUFDLGFBQWE7UUFDckIsT0FBTztZQUNMSSxZQUFZO1lBQ1pDLGtCQUFrQixJQUFNQztRQUMxQjtJQUNGO0lBTkEsTUFBTUEsY0FBY1AsS0FBS1EsRUFBRSxHQUFHQyxpQkFBaUIsQ0FBQztJQU9oRCxPQUFPRjtBQUNUO0FBR08sTUFBTVgsZ0JBQWdCO0lBQzNCSSxLQUFLSixhQUFhO0FBQ3BCO0FBR08sTUFBTUMsaUJBQWlCLENBQUNhLFlBQVksQ0FBQyxDQUFDLEdBQU0sQ0FBQTtRQUNqREMsSUFBSTtRQUNKQyxPQUFPO1FBQ1BDLE1BQU07UUFDTkMsVUFBVTtRQUNWQyxTQUFTO1FBQ1RDLFdBQVcsSUFBSUM7UUFDZkMsV0FBVyxJQUFJRDtRQUNmRSxNQUFNQyxnQkFBUSxDQUFDQyxJQUFJO1FBQ25CQyxXQUFXO1FBQ1hDLGVBQWU7UUFDZkMsa0JBQWtCO1FBQ2xCQyxlQUFlO1FBQ2ZDLHdCQUF3QjtRQUN4QkMsc0JBQXNCO1FBQ3RCQyxnQkFBZ0I7UUFDaEJDLG9CQUFvQjtRQUNwQkMsb0JBQW9CO1FBQ3BCQyx3QkFBd0I7UUFDeEJDLE9BQU87UUFDUCxHQUFHdEIsU0FBUztJQUNkLENBQUEifQ==