{"version":3,"sources":["/Users/yusuketsunoda/Documents/cursor/ppttranslatorapp/worktrees/cicd-setup/tests/api/upload.test.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { mockDeep } from 'jest-mock-extended';\nimport { expect } from '@jest/globals';\nimport { FilePathManager } from '@/lib/utils/file-utils';\n\n// FilePathManagerのモック\njest.mock('@/lib/utils/file-utils', () => ({\n  FilePathManager: jest.fn().mockImplementation(() => ({\n    ensurePath: jest.fn().mockResolvedValue(undefined),\n    getTempPath: jest.fn().mockReturnValue('tmp/users/test-user/uploads/test-file_original.pptx'),\n  })),\n  filePathManager: {\n    ensurePath: jest.fn().mockResolvedValue(undefined),\n    getTempPath: jest.fn().mockReturnValue('tmp/users/test-user/uploads/test-file_original.pptx'),\n  },\n}));\n\n// fs/promisesのモック\njest.mock('fs/promises', () => ({\n  writeFile: jest.fn().mockResolvedValue(undefined),\n  mkdir: jest.fn().mockResolvedValue(undefined),\n}));\n\n// auth/sessionのモック\njest.mock('@/lib/auth/session', () => ({\n  getServerSession: jest.fn().mockResolvedValue({\n    user: {\n      id: 'test-user',\n      email: 'test@example.com',\n    },\n  }),\n}));\n\n// モックレスポンスの作成\nconst mockSuccessResponse = {\n  status: 200,\n  json: async () => ({\n    success: true,\n    fileId: 'test-file-id',\n    fileName: 'test.pptx',\n    fileSize: 123,\n  }),\n};\n\nconst mockErrorResponse = {\n  status: 400,\n  json: async () => ({ error: 'No file uploaded' }),\n};\n\n// FormDataのモック\nclass MockFormData {\n  private data = new Map();\n\n  append(key: string, value: any) {\n    this.data.set(key, value);\n  }\n\n  get(key: string) {\n    return this.data.get(key);\n  }\n}\n\n// app/api/upload/route.tsのモック\njest.mock('@/app/api/upload/route', () => ({\n  POST: jest.fn().mockImplementation(async (req) => {\n    // モックの実装\n    const formData = await req.formData();\n    const file = formData.get('file');\n\n    if (!file) {\n      return mockErrorResponse;\n    }\n\n    return mockSuccessResponse;\n  }),\n}));\n\n// インポートはモックの後に行う\nimport { POST } from '@/app/api/upload/route';\n\ndescribe('Upload API', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  it('ファイルがアップロードされた場合、成功レスポンスを返す', async () => {\n    // モックのFormDataを作成\n    const formData = new MockFormData();\n    formData.append('file', {\n      name: 'test.pptx',\n      size: 123,\n      type: 'application/vnd.openxmlformats-officedocument.presentationml.presentation',\n    });\n\n    // モックのリクエストオブジェクトを作成\n    const mockReq = {\n      formData: jest.fn().mockResolvedValue(formData),\n    };\n\n    // APIハンドラを呼び出す\n    const response = await POST(mockReq as unknown as NextRequest);\n\n    // レスポンスを検証\n    expect(response.status).toBe(200);\n\n    // レスポンスボディを取得\n    const data = await response.json();\n\n    // レスポンスボディを検証\n    expect(data.success).toBe(true);\n    expect(data.fileId).toBeDefined();\n    expect(data.fileName).toBe('test.pptx');\n  });\n\n  it('ファイルがアップロードされていない場合、エラーレスポンスを返す', async () => {\n    // 空のFormDataを作成\n    const formData = new MockFormData();\n\n    // モックのリクエストオブジェクトを作成\n    const mockReq = {\n      formData: jest.fn().mockResolvedValue(formData),\n    };\n\n    // APIハンドラを呼び出す\n    const response = await POST(mockReq as unknown as NextRequest);\n\n    // レスポンスを検証\n    expect(response.status).toBe(400);\n\n    // レスポンスボディを取得\n    const data = await response.json();\n\n    // レスポンスボディを検証\n    expect(data.error).toBe('No file uploaded');\n  });\n});\n"],"names":["jest","mock","FilePathManager","fn","mockImplementation","ensurePath","mockResolvedValue","undefined","getTempPath","mockReturnValue","filePathManager","writeFile","mkdir","getServerSession","user","id","email","POST","req","formData","file","get","mockErrorResponse","mockSuccessResponse","status","json","success","fileId","fileName","fileSize","error","MockFormData","append","key","value","data","set","Map","describe","beforeEach","clearAllMocks","it","name","size","type","mockReq","response","expect","toBe","toBeDefined"],"mappings":"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"}