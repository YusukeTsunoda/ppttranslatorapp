7b1d445cfd40e1cf431fa77a1882a988
// Node.jsランタイムを明示的に指定
// ファイルシステム操作を含むため、Edge Runtimeでは動作しません
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    GET: function() {
        return GET;
    },
    runtime: function() {
        return runtime;
    }
});
const _server = require("next/server");
const _fs = require("fs");
const _nextauth = require("next-auth");
const _authoptions = require("@/lib/auth/auth-options");
const _fileutils = require("@/lib/utils/file-utils");
const runtime = 'nodejs';
async function GET(request, { params }) {
    try {
        // セッションチェック
        const session = await (0, _nextauth.getServerSession)(_authoptions.authOptions);
        if (!session || !session.user) {
            return _server.NextResponse.json({
                error: '認証が必要です'
            }, {
                status: 401
            });
        }
        // セッションのユーザーIDとパラメータのユーザーIDが一致するか確認
        if (session.user.id.toString() !== params.userId) {
            return _server.NextResponse.json({
                error: 'アクセス権限がありません'
            }, {
                status: 403
            });
        }
        // ファイル名からファイルIDを抽出
        const fileIdMatch = params.filename.match(/^([^_]+)/);
        const fileId = fileIdMatch ? fileIdMatch[1] : params.filename;
        // ファイルタイプの判定（translated か original か）
        const isTranslated = params.filename.includes('_translated');
        const fileType = isTranslated ? 'translated' : 'original';
        // ファイルパスの構築 - 実際のファイルを検索
        let filePath = '';
        let fileExists = false;
        // ファイルを検索
        const actualFilePath = await _fileutils.filePathManager.findActualFilePath(params.userId, fileId, fileType);
        if (actualFilePath) {
            filePath = actualFilePath;
            fileExists = true;
            console.log(`File found: ${filePath}`);
        } else {
            console.error('File not found for:', {
                userId: params.userId,
                filename: params.filename,
                fileId,
                fileType
            });
        }
        // ファイルが見つからない場合
        if (!fileExists) {
            console.error('File not found in any location for:', {
                userId: params.userId,
                filename: params.filename,
                fileId,
                fileType
            });
            return _server.NextResponse.json({
                error: 'ファイルが見つかりません',
                details: '指定されたファイルが見つかりませんでした。再度アップロードしてください。'
            }, {
                status: 404
            });
        }
        // ファイルの読み込みとログ記録
        try {
            const fileBuffer = await _fs.promises.readFile(filePath);
            await (0, _fileutils.logFileOperation)(params.userId, 'access', fileId, true);
            // レスポンスヘッダーの設定
            const headers = new Headers();
            headers.set('Content-Type', 'application/vnd.openxmlformats-officedocument.presentationml.presentation');
            headers.set('Content-Disposition', `attachment; filename="${params.filename}"`);
            // ファイルをレスポンスとして返す
            return new _server.NextResponse(fileBuffer, {
                headers
            });
        } catch (readError) {
            console.error('Error reading file:', readError);
            if (readError instanceof Error) {
                await (0, _fileutils.logFileOperation)(params.userId, 'access', fileId, false, readError.message);
            }
            throw readError;
        }
    } catch (error) {
        console.error('Download error:', error);
        return _server.NextResponse.json({
            error: 'ファイルのダウンロードに失敗しました',
            details: error instanceof Error ? error.message : '不明なエラーが発生しました'
        }, {
            status: 500
        });
    }
}

//# sourceMappingURL=data:application/json;base64,