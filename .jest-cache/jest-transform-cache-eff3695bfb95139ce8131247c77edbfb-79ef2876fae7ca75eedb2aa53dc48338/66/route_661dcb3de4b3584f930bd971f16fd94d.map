{"version":3,"sources":["/Users/yusuketsunoda/Documents/cursor/ppttranslatorapp/worktrees/cicd-setup/app/api/download/[userId]/[filename]/route.ts"],"sourcesContent":["// Node.jsランタイムを明示的に指定\n// ファイルシステム操作を含むため、Edge Runtimeでは動作しません\nexport const runtime = 'nodejs';\n\nimport { NextRequest, NextResponse } from 'next/server';\nimport { promises as fs } from 'fs';\nimport { join } from 'path';\nimport { getServerSession } from 'next-auth';\nimport { authOptions } from '@/lib/auth/auth-options';\nimport { filePathManager, logFileOperation, withRetry } from '@/lib/utils/file-utils';\n\nexport async function GET(request: NextRequest, { params }: { params: { userId: string; filename: string } }) {\n  try {\n    // セッションチェック\n    const session = await getServerSession(authOptions);\n    if (!session || !session.user) {\n      return NextResponse.json({ error: '認証が必要です' }, { status: 401 });\n    }\n\n    // セッションのユーザーIDとパラメータのユーザーIDが一致するか確認\n    if (session.user.id.toString() !== params.userId) {\n      return NextResponse.json({ error: 'アクセス権限がありません' }, { status: 403 });\n    }\n\n    // ファイル名からファイルIDを抽出\n    const fileIdMatch = params.filename.match(/^([^_]+)/);\n    const fileId = fileIdMatch ? fileIdMatch[1] : params.filename;\n\n    // ファイルタイプの判定（translated か original か）\n    const isTranslated = params.filename.includes('_translated');\n    const fileType = isTranslated ? 'translated' : 'original';\n\n    // ファイルパスの構築 - 実際のファイルを検索\n    let filePath: string = '';\n    let fileExists = false;\n\n    // ファイルを検索\n    const actualFilePath = await filePathManager.findActualFilePath(\n      params.userId,\n      fileId,\n      fileType as 'translated' | 'original',\n    );\n    if (actualFilePath) {\n      filePath = actualFilePath;\n      fileExists = true;\n      console.log(`File found: ${filePath}`);\n    } else {\n      console.error('File not found for:', {\n        userId: params.userId,\n        filename: params.filename,\n        fileId,\n        fileType,\n      });\n    }\n\n    // ファイルが見つからない場合\n    if (!fileExists) {\n      console.error('File not found in any location for:', {\n        userId: params.userId,\n        filename: params.filename,\n        fileId,\n        fileType,\n      });\n      return NextResponse.json(\n        {\n          error: 'ファイルが見つかりません',\n          details: '指定されたファイルが見つかりませんでした。再度アップロードしてください。',\n        },\n        { status: 404 },\n      );\n    }\n\n    // ファイルの読み込みとログ記録\n    try {\n      const fileBuffer = await fs.readFile(filePath);\n      await logFileOperation(params.userId, 'access', fileId, true);\n\n      // レスポンスヘッダーの設定\n      const headers = new Headers();\n      headers.set('Content-Type', 'application/vnd.openxmlformats-officedocument.presentationml.presentation');\n      headers.set('Content-Disposition', `attachment; filename=\"${params.filename}\"`);\n\n      // ファイルをレスポンスとして返す\n      return new NextResponse(fileBuffer, {\n        headers,\n      });\n    } catch (readError) {\n      console.error('Error reading file:', readError);\n      if (readError instanceof Error) {\n        await logFileOperation(params.userId, 'access', fileId, false, readError.message);\n      }\n      throw readError;\n    }\n  } catch (error) {\n    console.error('Download error:', error);\n    return NextResponse.json(\n      {\n        error: 'ファイルのダウンロードに失敗しました',\n        details: error instanceof Error ? error.message : '不明なエラーが発生しました',\n      },\n      { status: 500 },\n    );\n  }\n}\n"],"names":["GET","runtime","request","params","session","getServerSession","authOptions","user","NextResponse","json","error","status","id","toString","userId","fileIdMatch","filename","match","fileId","isTranslated","includes","fileType","filePath","fileExists","actualFilePath","filePathManager","findActualFilePath","console","log","details","fileBuffer","fs","readFile","logFileOperation","headers","Headers","set","readError","Error","message"],"mappings":"AAAA,sBAAsB;AACtB,uCAAuC;;;;;;;;;;;;IAUjBA,GAAG;eAAHA;;IATTC,OAAO;eAAPA;;;wBAE6B;oBACX;0BAEE;6BACL;2BACiC;AAPtD,MAAMA,UAAU;AAShB,eAAeD,IAAIE,OAAoB,EAAE,EAAEC,MAAM,EAAoD;IAC1G,IAAI;QACF,YAAY;QACZ,MAAMC,UAAU,MAAMC,IAAAA,0BAAgB,EAACC,wBAAW;QAClD,IAAI,CAACF,WAAW,CAACA,QAAQG,IAAI,EAAE;YAC7B,OAAOC,oBAAY,CAACC,IAAI,CAAC;gBAAEC,OAAO;YAAU,GAAG;gBAAEC,QAAQ;YAAI;QAC/D;QAEA,oCAAoC;QACpC,IAAIP,QAAQG,IAAI,CAACK,EAAE,CAACC,QAAQ,OAAOV,OAAOW,MAAM,EAAE;YAChD,OAAON,oBAAY,CAACC,IAAI,CAAC;gBAAEC,OAAO;YAAe,GAAG;gBAAEC,QAAQ;YAAI;QACpE;QAEA,mBAAmB;QACnB,MAAMI,cAAcZ,OAAOa,QAAQ,CAACC,KAAK,CAAC;QAC1C,MAAMC,SAASH,cAAcA,WAAW,CAAC,EAAE,GAAGZ,OAAOa,QAAQ;QAE7D,sCAAsC;QACtC,MAAMG,eAAehB,OAAOa,QAAQ,CAACI,QAAQ,CAAC;QAC9C,MAAMC,WAAWF,eAAe,eAAe;QAE/C,yBAAyB;QACzB,IAAIG,WAAmB;QACvB,IAAIC,aAAa;QAEjB,UAAU;QACV,MAAMC,iBAAiB,MAAMC,0BAAe,CAACC,kBAAkB,CAC7DvB,OAAOW,MAAM,EACbI,QACAG;QAEF,IAAIG,gBAAgB;YAClBF,WAAWE;YACXD,aAAa;YACbI,QAAQC,GAAG,CAAC,CAAC,YAAY,EAAEN,UAAU;QACvC,OAAO;YACLK,QAAQjB,KAAK,CAAC,uBAAuB;gBACnCI,QAAQX,OAAOW,MAAM;gBACrBE,UAAUb,OAAOa,QAAQ;gBACzBE;gBACAG;YACF;QACF;QAEA,gBAAgB;QAChB,IAAI,CAACE,YAAY;YACfI,QAAQjB,KAAK,CAAC,uCAAuC;gBACnDI,QAAQX,OAAOW,MAAM;gBACrBE,UAAUb,OAAOa,QAAQ;gBACzBE;gBACAG;YACF;YACA,OAAOb,oBAAY,CAACC,IAAI,CACtB;gBACEC,OAAO;gBACPmB,SAAS;YACX,GACA;gBAAElB,QAAQ;YAAI;QAElB;QAEA,iBAAiB;QACjB,IAAI;YACF,MAAMmB,aAAa,MAAMC,YAAE,CAACC,QAAQ,CAACV;YACrC,MAAMW,IAAAA,2BAAgB,EAAC9B,OAAOW,MAAM,EAAE,UAAUI,QAAQ;YAExD,eAAe;YACf,MAAMgB,UAAU,IAAIC;YACpBD,QAAQE,GAAG,CAAC,gBAAgB;YAC5BF,QAAQE,GAAG,CAAC,uBAAuB,CAAC,sBAAsB,EAAEjC,OAAOa,QAAQ,CAAC,CAAC,CAAC;YAE9E,kBAAkB;YAClB,OAAO,IAAIR,oBAAY,CAACsB,YAAY;gBAClCI;YACF;QACF,EAAE,OAAOG,WAAW;YAClBV,QAAQjB,KAAK,CAAC,uBAAuB2B;YACrC,IAAIA,qBAAqBC,OAAO;gBAC9B,MAAML,IAAAA,2BAAgB,EAAC9B,OAAOW,MAAM,EAAE,UAAUI,QAAQ,OAAOmB,UAAUE,OAAO;YAClF;YACA,MAAMF;QACR;IACF,EAAE,OAAO3B,OAAO;QACdiB,QAAQjB,KAAK,CAAC,mBAAmBA;QACjC,OAAOF,oBAAY,CAACC,IAAI,CACtB;YACEC,OAAO;YACPmB,SAASnB,iBAAiB4B,QAAQ5B,MAAM6B,OAAO,GAAG;QACpD,GACA;YAAE5B,QAAQ;QAAI;IAElB;AACF"}