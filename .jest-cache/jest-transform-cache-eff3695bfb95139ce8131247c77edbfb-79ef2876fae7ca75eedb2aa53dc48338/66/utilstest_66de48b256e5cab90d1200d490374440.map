{"version":3,"sources":["/Users/yusuketsunoda/Documents/cursor/ppttranslatorapp/worktrees/cicd-setup/tests/lib/translation/utils.test.ts"],"sourcesContent":["import { describe, expect, it } from '@jest/globals';\nimport { cleanTranslatedText, validateTranslationRequest, preprocessText, generateTranslationPrompt } from '@/lib/translation/utils';\n\ndescribe('Translation Utilities', () => {\n  describe('cleanTranslatedText', () => {\n    it('余分なプレフィックスを削除する', () => {\n      const inputs = [\n        'Translation: Hello',\n        'Translated text: Hello',\n        'The translation is: Hello',\n        'In English: Hello',\n        'In Japanese: こんにちは',\n        'The text \"Hello\" translates to: こんにちは',\n      ];\n\n      inputs.forEach(input => {\n        const cleaned = cleanTranslatedText(input);\n        expect(cleaned).toBe('Hello');\n      });\n    });\n\n    it('引用符を適切に処理する', () => {\n      const inputs = [\n        '\"Hello\"',\n        '\"こんにちは\"',\n        'The text \"Hello\" in English is: \"World\"',\n      ];\n\n      const expected = [\n        'Hello',\n        'こんにちは',\n        'World',\n      ];\n\n      inputs.forEach((input, index) => {\n        const cleaned = cleanTranslatedText(input);\n        expect(cleaned).toBe(expected[index]);\n      });\n    });\n\n    it('空白を適切に処理する', () => {\n      const inputs = [\n        '  Hello  ',\n        '\\nHello\\n',\n        '\\tHello\\t',\n      ];\n\n      inputs.forEach(input => {\n        const cleaned = cleanTranslatedText(input);\n        expect(cleaned).toBe('Hello');\n      });\n    });\n  });\n\n  describe('validateTranslationRequest', () => {\n    it('有効なリクエストを検証する', () => {\n      const validRequest = {\n        texts: ['Hello'],\n        sourceLanguage: 'en',\n        targetLanguage: 'ja',\n        fileId: 'test-file-id',\n        slides: [\n          {\n            index: 0,\n            texts: [{ text: 'Hello', index: 0 }],\n          },\n        ],\n      };\n\n      const result = validateTranslationRequest(validRequest);\n      expect(result.isValid).toBe(true);\n      expect(result.error).toBeNull();\n    });\n\n    it('必須フィールドが欠けている場合はエラーを返す', () => {\n      const invalidRequests = [\n        { sourceLanguage: 'en', targetLanguage: 'ja' }, // textsが欠けている\n        { texts: ['Hello'], targetLanguage: 'ja' }, // sourceLanguageが欠けている\n        { texts: ['Hello'], sourceLanguage: 'en' }, // targetLanguageが欠けている\n        { texts: ['Hello'], sourceLanguage: 'en', targetLanguage: 'ja' }, // fileIdが欠けている\n      ];\n\n      invalidRequests.forEach(request => {\n        const result = validateTranslationRequest(request);\n        expect(result.isValid).toBe(false);\n        expect(result.error).toBeDefined();\n      });\n    });\n\n    it('不正なデータ型の場合はエラーを返す', () => {\n      const invalidRequests = [\n        { texts: 'Hello', sourceLanguage: 'en', targetLanguage: 'ja', fileId: 'test' }, // textsが配列でない\n        { texts: ['Hello'], sourceLanguage: 123, targetLanguage: 'ja', fileId: 'test' }, // sourceLanguageが文字列でない\n        { texts: ['Hello'], sourceLanguage: 'en', targetLanguage: true, fileId: 'test' }, // targetLanguageが文字列でない\n        { texts: ['Hello'], sourceLanguage: 'en', targetLanguage: 'ja', fileId: 123 }, // fileIdが文字列でない\n      ];\n\n      invalidRequests.forEach(request => {\n        const result = validateTranslationRequest(request);\n        expect(result.isValid).toBe(false);\n        expect(result.error).toBeDefined();\n      });\n    });\n\n    it('空の配列や文字列の場合はエラーを返す', () => {\n      const invalidRequests = [\n        { texts: [], sourceLanguage: 'en', targetLanguage: 'ja', fileId: 'test' }, // 空の配列\n        { texts: [''], sourceLanguage: 'en', targetLanguage: 'ja', fileId: 'test' }, // 空の文字列\n        { texts: ['Hello'], sourceLanguage: '', targetLanguage: 'ja', fileId: 'test' }, // 空のsourceLanguage\n        { texts: ['Hello'], sourceLanguage: 'en', targetLanguage: '', fileId: 'test' }, // 空のtargetLanguage\n        { texts: ['Hello'], sourceLanguage: 'en', targetLanguage: 'ja', fileId: '' }, // 空のfileId\n      ];\n\n      invalidRequests.forEach(request => {\n        const result = validateTranslationRequest(request);\n        expect(result.isValid).toBe(false);\n        expect(result.error).toBeDefined();\n      });\n    });\n  });\n\n  describe('preprocessText', () => {\n    it('前後の空白を削除する', () => {\n      const inputs = [\n        '  Hello  ',\n        '\\tHello\\t',\n        '\\nHello\\n',\n      ];\n\n      inputs.forEach(input => {\n        const processed = preprocessText(input);\n        expect(processed).toBe('Hello');\n      });\n    });\n\n    it('連続する空白を1つにまとめる', () => {\n      const input = 'Hello    World   !';\n      const processed = preprocessText(input);\n      expect(processed).toBe('Hello World !');\n    });\n\n    it('連続する改行を1つにまとめる', () => {\n      const input = 'Hello\\n\\n\\nWorld\\r\\n\\r\\n!';\n      const processed = preprocessText(input);\n      expect(processed).toBe('Hello\\nWorld\\n!');\n    });\n\n    it('複合的な空白と改行を処理する', () => {\n      const input = '  Hello  \\n\\n  World  \\r\\n\\r\\n  !  ';\n      const processed = preprocessText(input);\n      expect(processed).toBe('Hello\\nWorld\\n!');\n    });\n  });\n\n  describe('generateTranslationPrompt', () => {\n    it('基本的な翻訳プロンプトを生成する', () => {\n      const text = 'Hello World';\n      const sourceLang = 'en';\n      const targetLang = 'ja';\n\n      const prompt = generateTranslationPrompt(text, sourceLang, targetLang);\n\n      expect(prompt).toContain('テキスト: \"Hello World\"');\n      expect(prompt).toContain('enからjaに翻訳');\n      expect(prompt).toContain('自然なjaに翻訳');\n    });\n\n    it('特殊文字を含むテキストのプロンプトを生成する', () => {\n      const text = 'Hello\\nWorld!@#$%';\n      const sourceLang = 'en';\n      const targetLang = 'ja';\n\n      const prompt = generateTranslationPrompt(text, sourceLang, targetLang);\n\n      expect(prompt).toContain('テキスト: \"Hello\\nWorld!@#$%\"');\n      expect(prompt).toContain('フォーマットや記号は保持');\n    });\n\n    it('異なる言語ペアのプロンプトを生成する', () => {\n      const testCases = [\n        { text: 'Hello', source: 'en', target: 'ja' },\n        { text: 'Bonjour', source: 'fr', target: 'en' },\n        { text: 'こんにちは', source: 'ja', target: 'en' },\n      ];\n\n      testCases.forEach(({ text, source, target }) => {\n        const prompt = generateTranslationPrompt(text, source, target);\n        expect(prompt).toContain(`${source}から${target}に翻訳`);\n        expect(prompt).toContain(`自然な${target}に翻訳`);\n        expect(prompt).toContain(`テキスト: \"${text}\"`);\n      });\n    });\n  });\n}); "],"names":["describe","it","inputs","forEach","input","cleaned","cleanTranslatedText","expect","toBe","expected","index","validRequest","texts","sourceLanguage","targetLanguage","fileId","slides","text","result","validateTranslationRequest","isValid","error","toBeNull","invalidRequests","request","toBeDefined","processed","preprocessText","sourceLang","targetLang","prompt","generateTranslationPrompt","toContain","testCases","source","target"],"mappings":"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"}