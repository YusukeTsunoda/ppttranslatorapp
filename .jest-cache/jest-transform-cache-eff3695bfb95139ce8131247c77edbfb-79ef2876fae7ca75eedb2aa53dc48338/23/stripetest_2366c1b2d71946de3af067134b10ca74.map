{"version":3,"sources":["/Users/yusuketsunoda/Documents/cursor/ppttranslatorapp/worktrees/cicd-setup/tests/lib/payments/stripe.test.ts"],"sourcesContent":["import {\n  stripe,\n  createCheckoutSession,\n  createCustomerPortalSession,\n  handleSubscriptionUpdated,\n  handleSubscriptionDeleted,\n  validateStripeSignature,\n  getStripePrices,\n  getStripeProducts\n} from '@/lib/payments/stripe';\n\n// コンソール出力をモック\nconst originalConsoleLog = console.log;\nlet consoleOutput: any[] = [];\n\ndescribe('Stripe決済ユーティリティ', () => {\n  beforeEach(() => {\n    // コンソール出力をキャプチャ\n    consoleOutput = [];\n    console.log = jest.fn((...args) => {\n      consoleOutput.push(args);\n    });\n  });\n\n  afterEach(() => {\n    // コンソール出力を元に戻す\n    console.log = originalConsoleLog;\n  });\n\n  describe('createCheckoutSession', () => {\n    it('チェックアウトセッションを作成できる', async () => {\n      const params = {\n        userId: 'test-user-id',\n        priceId: 'test-price-id',\n        email: 'test@example.com',\n        successUrl: 'https://example.com/success',\n        cancelUrl: 'https://example.com/cancel',\n      };\n\n      const result = await createCheckoutSession(params);\n      \n      // 結果を検証\n      expect(result).toHaveProperty('url');\n      expect(result.url).toBe(params.successUrl);\n      \n      // コンソール出力を検証\n      expect(consoleOutput.length).toBeTruthy();\n      expect(consoleOutput[0][0]).toBe('Dummy checkout session created:');\n      expect(consoleOutput[0][1]).toEqual({\n        userId: params.userId,\n        priceId: params.priceId,\n        email: params.email,\n      });\n    });\n  });\n\n  describe('createCustomerPortalSession', () => {\n    it('カスタマーポータルセッションを作成できる', async () => {\n      const user = { id: 'test-user-id', email: 'test@example.com' };\n      \n      const result = await createCustomerPortalSession(user);\n      \n      // 結果を検証\n      expect(result).toHaveProperty('url');\n      expect(result.url).toBe('/dashboard');\n      \n      // コンソール出力を検証\n      expect(consoleOutput.length).toBeTruthy();\n      expect(consoleOutput[0][0]).toBe('Dummy customer portal session created:');\n      expect(consoleOutput[0][1]).toEqual(user);\n    });\n  });\n\n  describe('handleSubscriptionUpdated', () => {\n    it('サブスクリプション更新を処理できる', async () => {\n      const subscription = {\n        id: 'sub_123',\n        metadata: { userId: 'test-user-id' },\n        status: 'active',\n      };\n      \n      const result = await handleSubscriptionUpdated(subscription);\n      \n      // 結果を検証\n      expect(result).toHaveProperty('userId');\n      expect(result).toHaveProperty('status');\n      expect(result).toHaveProperty('priceId');\n      expect(result.userId).toBe(subscription.metadata.userId);\n      expect(result.status).toBe('active');\n      \n      // コンソール出力を検証\n      expect(consoleOutput.length).toBeTruthy();\n      expect(consoleOutput[0][0]).toBe('Dummy subscription updated:');\n      expect(consoleOutput[0][1]).toEqual(subscription);\n    });\n\n    it('メタデータがない場合はデフォルト値を使用する', async () => {\n      const subscription = {\n        id: 'sub_123',\n        status: 'active',\n      };\n      \n      const result = await handleSubscriptionUpdated(subscription);\n      \n      expect(result.userId).toBe('dummy-user-id');\n    });\n  });\n\n  describe('handleSubscriptionDeleted', () => {\n    it('サブスクリプション削除を処理できる', async () => {\n      const subscription = {\n        id: 'sub_123',\n        status: 'canceled',\n      };\n      \n      const result = await handleSubscriptionDeleted(subscription);\n      \n      // 結果を検証\n      expect(result).toBe(true);\n      \n      // コンソール出力を検証\n      expect(consoleOutput.length).toBeTruthy();\n      expect(consoleOutput[0][0]).toBe('Dummy subscription deleted:');\n      expect(consoleOutput[0][1]).toEqual(subscription);\n    });\n  });\n\n  describe('validateStripeSignature', () => {\n    it('Stripe署名を検証できる', async () => {\n      const payload = 'test-payload';\n      const signature = 'test-signature';\n      const webhookSecret = 'test-webhook-secret';\n      \n      const result = await validateStripeSignature(payload, signature, webhookSecret);\n      \n      // 結果を検証\n      expect(result).toHaveProperty('type');\n      expect(result.type).toBe('dummy.event');\n      \n      // コンソール出力を検証\n      expect(consoleOutput.length).toBeTruthy();\n      expect(consoleOutput[0][0]).toBe('Dummy stripe signature validation');\n    });\n  });\n\n  describe('getStripePrices', () => {\n    it('Stripe料金プランを取得できる', async () => {\n      const prices = await getStripePrices();\n      \n      // 結果を検証\n      expect(Array.isArray(prices)).toBe(true);\n      expect(prices.length).toBe(2);\n      \n      // 各料金プランの構造を検証\n      prices.forEach(price => {\n        expect(price).toHaveProperty('id');\n        expect(price).toHaveProperty('product');\n        expect(price).toHaveProperty('unit_amount');\n        expect(price).toHaveProperty('currency');\n        expect(price).toHaveProperty('recurring');\n      });\n      \n      // 具体的な値を検証\n      expect(prices[0].id).toBe('price_dummy_monthly');\n      expect(prices[1].id).toBe('price_dummy_yearly');\n    });\n  });\n\n  describe('getStripeProducts', () => {\n    it('Stripe製品を取得できる', async () => {\n      const products = await getStripeProducts();\n      \n      // 結果を検証\n      expect(Array.isArray(products)).toBe(true);\n      expect(products.length).toBe(2);\n      \n      // 各製品の構造を検証\n      products.forEach(product => {\n        expect(product).toHaveProperty('id');\n        expect(product).toHaveProperty('name');\n        expect(product).toHaveProperty('description');\n      });\n      \n      // 具体的な値を検証\n      expect(products[0].id).toBe('prod_dummy_basic');\n      expect(products[1].id).toBe('prod_dummy_premium');\n    });\n  });\n});\n"],"names":["originalConsoleLog","console","log","consoleOutput","describe","beforeEach","jest","fn","args","push","afterEach","it","params","userId","priceId","email","successUrl","cancelUrl","result","createCheckoutSession","expect","toHaveProperty","url","toBe","length","toBeTruthy","toEqual","user","id","createCustomerPortalSession","subscription","metadata","status","handleSubscriptionUpdated","handleSubscriptionDeleted","payload","signature","webhookSecret","validateStripeSignature","type","prices","getStripePrices","Array","isArray","forEach","price","products","getStripeProducts","product"],"mappings":"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"}