{"version":3,"sources":["/Users/yusuketsunoda/Documents/cursor/ppttranslatorapp/worktrees/cicd-setup/lib/utils/activity-logger.ts"],"sourcesContent":["/*\nimport { prisma } from '@/lib/db/prisma';\nimport { Prisma, ActivityAction } from '@prisma/client';\nimport {\n  createDatabaseError,\n  createValidationError,\n  createNotFoundError,\n} from '@/lib/utils/error-handler';\n\nexport { ActivityAction };\n\nexport interface ActivityLogData {\n  userId: string;\n  action: ActivityAction;\n  metadata?: Record<string, any>;\n}\n\n// メモリキャッシュの実装\nconst userCache = new Map<string, { id: string; expiresAt: number }>();\nconst CACHE_TTL = 5 * 60 * 1000; // 5分\n\nasync function getUserFromCache(userId: string) {\n  const cached = userCache.get(userId);\n  if (cached && cached.expiresAt > Date.now()) {\n    return { id: cached.id };\n  }\n\n  // @ts-ignore - Prismaの型定義と実際のプロパティの間に不一致があるため\n  const user = await prisma.user.findUnique({ where: { id: userId } });\n  if (user) {\n    userCache.set(userId, {\n      id: user.id,\n      expiresAt: Date.now() + CACHE_TTL,\n    });\n  }\n  return user;\n}\n\nexport async function logActivity({\n  userId,\n  action,\n  metadata\n}: ActivityLogData) {\n  if (!userId || !action) {\n    throw createValidationError('必須パラメータが不足しています。');\n  }\n\n  try {\n    // キャッシュを使用してユーザーの存在確認\n    const user = await getUserFromCache(userId);\n\n    if (!user) {\n      throw createNotFoundError('指定されたユーザーが見つかりません。');\n    }\n\n    const ipAddress = process.env.NODE_ENV === 'development' \n      ? '127.0.0.1' \n      : // 本番環境では適切なIPアドレス取得ロジックを実装\n        '0.0.0.0';\n\n    await prisma.activityLog.create({\n      data: {\n        userId,\n        action,\n        ipAddress,\n        metadata: metadata as Prisma.InputJsonValue | undefined,\n      },\n    });\n  } catch (error) {\n    if (error instanceof Error) {\n      if (error.message.includes('prisma')) {\n        throw createDatabaseError('アクティビティログの保存に失敗しました。');\n      }\n      throw error;\n    }\n    throw error;\n  }\n}\n\nexport async function getUserActivityLogs(userId: string, limit = 50, cursor?: string) {\n  if (!userId) {\n    throw createValidationError('ユーザーIDが指定されていません。');\n  }\n\n  try {\n    // キャッシュを使用してユーザーの存在確認\n    const user = await getUserFromCache(userId);\n\n    if (!user) {\n      throw createNotFoundError('指定されたユーザーが見つかりません。');\n    }\n\n    // カーソルベースのページネーションを実装\n    const logs = await prisma.activityLog.findMany({\n      where: { userId },\n      orderBy: {\n        createdAt: 'desc',\n      },\n      take: limit,\n      ...(cursor ? {\n        cursor: {\n          id: cursor,\n        },\n        skip: 1,\n      } : {}),\n    });\n\n    const nextCursor = logs.length === limit ? logs[logs.length - 1].id : undefined;\n\n    return {\n      logs,\n      nextCursor,\n    };\n  } catch (error) {\n    if (error instanceof Error) {\n      if (error.message.includes('prisma')) {\n        throw createDatabaseError('アクティビティログの取得に失敗しました。');\n      }\n      throw error;\n    }\n    throw error;\n  }\n}\n*/\n\n// ActivityLogモデルが存在しないため、一時的にダミー実装を提供\nimport { Prisma } from '@prisma/client';\n\nexport enum ActivityAction {\n  sign_in = 'sign_in',\n  sign_up = 'sign_up',\n  sign_out = 'sign_out',\n  update_account = 'update_account',\n  update_password = 'update_password',\n  delete_account = 'delete_account',\n  file_upload = 'file_upload',\n  translation = 'translation',\n  download = 'download',\n  settings_change = 'settings_change',\n  file_access = 'file_access',\n}\n\nexport interface ActivityLogData {\n  userId: string;\n  action: ActivityAction;\n  metadata?: Record<string, any>;\n}\n\nexport async function logActivity(data: ActivityLogData): Promise<void> {\n  console.log('Activity logged (dummy):', data);\n  return;\n}\n\nexport async function getUserActivityLogs(userId: string, limit = 50, cursor?: string) {\n  console.log('Get user activity logs (dummy):', { userId, limit, cursor });\n  return {\n    logs: [],\n    nextCursor: undefined,\n  };\n}\n"],"names":["ActivityAction","getUserActivityLogs","logActivity","data","console","log","userId","limit","cursor","logs","nextCursor","undefined"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2HA,GAEA,sCAAsC;;;;;;;;;;;;IAG1BA,cAAc;eAAdA;;IAyBUC,mBAAmB;eAAnBA;;IALAC,WAAW;eAAXA;;;AApBf,IAAA,AAAKF,wCAAAA;;;;;;;;;;;;WAAAA;;AAoBL,eAAeE,YAAYC,IAAqB;IACrDC,QAAQC,GAAG,CAAC,4BAA4BF;IACxC;AACF;AAEO,eAAeF,oBAAoBK,MAAc,EAAEC,QAAQ,EAAE,EAAEC,MAAe;IACnFJ,QAAQC,GAAG,CAAC,mCAAmC;QAAEC;QAAQC;QAAOC;IAAO;IACvE,OAAO;QACLC,MAAM,EAAE;QACRC,YAAYC;IACd;AACF"}