{"version":3,"sources":["/Users/yusuketsunoda/Documents/cursor/ppttranslatorapp/worktrees/cicd-setup/tests/lib/auth/jwt.test.ts"],"sourcesContent":["import { signJwtAccessToken, verifyJwtAccessToken, isTokenExpired, getUserIdFromToken } from '@/lib/auth/jwt';\nimport jwt from 'jsonwebtoken';\n\n// テスト用の環境変数をモック\nconst originalEnv = process.env;\n\ndescribe('JWT認証ユーティリティ', () => {\n  beforeEach(() => {\n    // 各テスト前に環境変数をモック\n    jest.resetModules();\n    process.env = { ...originalEnv };\n    process.env.JWT_SECRET = 'test-jwt-secret-for-unit-tests';\n  });\n\n  afterEach(() => {\n    // テスト後に環境変数を元に戻す\n    process.env = originalEnv;\n  });\n\n  describe('signJwtAccessToken', () => {\n    it('有効なペイロードからJWTトークンを生成できる', () => {\n      const payload = {\n        sub: 'user-123',\n        email: 'test@example.com',\n        role: 'user'\n      };\n\n      const token = signJwtAccessToken(payload);\n      \n      // トークンが文字列であることを確認\n      expect(typeof token).toBe('string');\n      // JWTの形式（xxx.yyy.zzz）に従っていることを確認\n      expect(token.split('.')).toHaveLength(3);\n    });\n\n    it('emailがnullの場合でもトークンを生成できる', () => {\n      const payload = {\n        sub: 'user-123',\n        email: null,\n        role: 'user'\n      };\n\n      const token = signJwtAccessToken(payload);\n      \n      expect(typeof token).toBe('string');\n      expect(token.split('.')).toHaveLength(3);\n    });\n\n    it('JWT_SECRETが未定義の場合はエラーをスローする', () => {\n      // JWT_SECRETを削除\n      delete process.env.JWT_SECRET;\n\n      const payload = {\n        sub: 'user-123',\n        email: 'test@example.com',\n        role: 'user'\n      };\n\n      expect(() => signJwtAccessToken(payload)).toThrow('JWT_SECRET is not defined');\n    });\n  });\n\n  describe('verifyJwtAccessToken', () => {\n    it('有効なトークンを検証できる', () => {\n      const payload = {\n        sub: 'user-123',\n        email: 'test@example.com',\n        role: 'user'\n      };\n\n      const token = signJwtAccessToken(payload);\n      const decoded = verifyJwtAccessToken(token);\n      \n      expect(decoded).not.toBeNull();\n      expect(decoded?.sub).toBe(payload.sub);\n      expect(decoded?.email).toBe(payload.email);\n      expect(decoded?.role).toBe(payload.role);\n    });\n\n    it('無効なトークンの場合はnullを返す', () => {\n      const invalidToken = 'invalid.token.format';\n      \n      const decoded = verifyJwtAccessToken(invalidToken);\n      expect(decoded).toBeNull();\n    });\n\n    it('JWT_SECRETが未定義の場合はnullを返す', () => {\n      const payload = {\n        sub: 'user-123',\n        email: 'test@example.com',\n        role: 'user'\n      };\n\n      const token = signJwtAccessToken(payload);\n      \n      // JWT_SECRETを削除\n      delete process.env.JWT_SECRET;\n      \n      const decoded = verifyJwtAccessToken(token);\n      expect(decoded).toBeNull();\n    });\n  });\n\n  describe('isTokenExpired', () => {\n    it('有効期限内のトークンはfalseを返す', () => {\n      const payload = {\n        sub: 'user-123',\n        email: 'test@example.com',\n        role: 'user'\n      };\n      \n      // 有効期限を1時間後に設定\n      const token = jwt.sign(payload, 'test-secret', { expiresIn: '1h' });\n      \n      expect(isTokenExpired(token)).toBe(false);\n    });\n    \n    it('有効期限切れのトークンはtrueを返す', () => {\n      const payload = {\n        sub: 'user-123',\n        email: 'test@example.com',\n        role: 'user'\n      };\n      \n      // 有効期限を過去に設定（-1秒）\n      const token = jwt.sign(payload, 'test-secret', { expiresIn: '-1s' });\n      \n      expect(isTokenExpired(token)).toBe(true);\n    });\n    \n    it('無効なトークンはtrueを返す', () => {\n      const invalidToken = 'invalid.token.format';\n      \n      expect(isTokenExpired(invalidToken)).toBe(true);\n    });\n    \n    it('expクレームがないトークンはtrueを返す', () => {\n      // expクレームなしでトークンを生成\n      const payload = {\n        sub: 'user-123',\n        email: 'test@example.com'\n      };\n      \n      const token = jwt.sign(payload, 'test-secret');\n      \n      expect(isTokenExpired(token)).toBe(true);\n    });\n  });\n  \n  describe('getUserIdFromToken', () => {\n    it('有効なトークンからユーザーIDを抽出できる', () => {\n      const userId = 'user-123';\n      const payload = {\n        sub: userId,\n        email: 'test@example.com',\n        role: 'user'\n      };\n      \n      const token = jwt.sign(payload, 'test-secret');\n      \n      expect(getUserIdFromToken(token)).toBe(userId);\n    });\n    \n    it('subクレームがないトークンはnullを返す', () => {\n      // subクレームなしでトークンを生成\n      const payload = {\n        email: 'test@example.com',\n        role: 'user'\n      };\n      \n      const token = jwt.sign(payload, 'test-secret');\n      \n      expect(getUserIdFromToken(token)).toBeNull();\n    });\n    \n    it('無効なトークンはnullを返す', () => {\n      const invalidToken = 'invalid.token.format';\n      \n      expect(getUserIdFromToken(invalidToken)).toBeNull();\n    });\n  });\n});\n"],"names":["originalEnv","process","env","describe","beforeEach","jest","resetModules","JWT_SECRET","afterEach","it","payload","sub","email","role","token","signJwtAccessToken","expect","toBe","split","toHaveLength","toThrow","decoded","verifyJwtAccessToken","not","toBeNull","invalidToken","jwt","sign","expiresIn","isTokenExpired","userId","getUserIdFromToken"],"mappings":"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"}