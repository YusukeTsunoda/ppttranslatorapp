64f8627df010d7e9e18733a2cb2b7271
"use strict";
// PPTXパーサーのモック
jest.mock('@/lib/pptx/parser', ()=>({
        PPTXParser: {
            getInstance: jest.fn().mockReturnValue({
                parsePPTX: jest.fn().mockResolvedValue({
                    success: true,
                    slides: [
                        {
                            id: 'slide1',
                            title: 'テストスライド1',
                            content: 'スライド1のコンテンツ'
                        },
                        {
                            id: 'slide2',
                            title: 'テストスライド2',
                            content: 'スライド2のコンテンツ'
                        }
                    ],
                    metadata: {
                        title: 'テストプレゼンテーション',
                        author: 'テストユーザー',
                        totalSlides: 2
                    }
                })
            })
        }
    }));
// 認証のモック
jest.mock('@/lib/auth/auth', ()=>({
        auth: jest.fn().mockResolvedValue({
            user: {
                id: 'test-user',
                email: 'test@example.com'
            }
        })
    }));
// fs/promisesのモック
jest.mock('fs/promises', ()=>({
        mkdir: jest.fn().mockResolvedValue(undefined),
        writeFile: jest.fn().mockResolvedValue(undefined),
        readdir: jest.fn().mockResolvedValue([
            'file1.pptx',
            'file2.pptx'
        ]),
        unlink: jest.fn().mockResolvedValue(undefined),
        rm: jest.fn().mockResolvedValue(undefined)
    }));
// uuidのモック
jest.mock('uuid', ()=>({
        v4: jest.fn().mockReturnValue('test-uuid')
    }));
// app/api/pptx/parse/route.tsのモック
jest.mock('@/app/api/pptx/parse/route', ()=>{
    // モック用のレスポンス生成関数
    const mockJsonResponse = (data, status = 200)=>{
        return {
            json: ()=>Promise.resolve(data),
            status
        };
    };
    return {
        POST: jest.fn().mockImplementation(async (req)=>{
            const formData = await req.formData();
            const file = formData.get('file');
            if (!file) {
                return mockJsonResponse({
                    success: false,
                    error: 'ファイルが指定されていません'
                }, 400);
            }
            if (file.type !== 'application/vnd.openxmlformats-officedocument.presentationml.presentation') {
                return mockJsonResponse({
                    success: false,
                    error: 'PPTXファイルのみアップロード可能です'
                }, 400);
            }
            return mockJsonResponse({
                success: true,
                fileId: 'test-uuid',
                slides: [
                    {
                        id: 'slide1',
                        title: 'テストスライド1',
                        content: 'スライド1のコンテンツ'
                    },
                    {
                        id: 'slide2',
                        title: 'テストスライド2',
                        content: 'スライド2のコンテンツ'
                    }
                ],
                metadata: {
                    title: 'テストプレゼンテーション',
                    author: 'テストユーザー',
                    totalSlides: 2
                }
            });
        }),
        GET: jest.fn().mockImplementation(()=>{
            return mockJsonResponse({
                success: true,
                message: 'PPTXパーサーAPIは正常に動作しています'
            });
        })
    };
});
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _interop_require_default = require("@swc/helpers/_/_interop_require_default");
const _globals = require("@jest/globals");
const _path = /*#__PURE__*/ _interop_require_default._(require("path"));
const _route = require("@/app/api/pptx/parse/route");
describe('PPTX Parse API', ()=>{
    beforeEach(()=>{
        jest.clearAllMocks();
        // 認証モックのデフォルト設定
        const authModule = require('@/lib/auth/auth');
        authModule.auth.mockResolvedValue({
            user: {
                id: 'test-user'
            }
        });
        // PPTXParserモックのデフォルト設定
        const PPTXParserModule = require('@/lib/pptx/parser');
        PPTXParserModule.PPTXParser.getInstance.mockReturnValue({
            parsePPTX: jest.fn().mockResolvedValue({
                success: true,
                slides: [
                    {
                        index: 1,
                        texts: [
                            {
                                text: 'Hello World'
                            }
                        ]
                    }
                ]
            })
        });
        // fsモックのデフォルト設定
        const fsModule = require('fs/promises');
        fsModule.mkdir.mockResolvedValue(undefined);
        fsModule.writeFile.mockResolvedValue(undefined);
        fsModule.readdir.mockResolvedValue([
            'file1.pptx',
            'file2.pptx'
        ]);
        fsModule.rm.mockResolvedValue(undefined);
        // pathモックのデフォルト設定
        _path.default.join.mockImplementation((...args)=>args.join('/'));
    });
    describe('POST /api/pptx/parse', ()=>{
        it('認証されていない場合はエラーを返す', async ()=>{
            // 認証モックを未認証状態に設定
            const authModule = require('@/lib/auth/auth');
            authModule.auth.mockResolvedValueOnce(null);
            const mockFile = new File([
                'dummy content'
            ], 'test.pptx', {
                type: 'application/vnd.openxmlformats-officedocument.presentationml.presentation'
            });
            const formData = new FormData();
            formData.append('file', mockFile);
            const mockReq = {
                formData: jest.fn().mockResolvedValue(formData)
            };
            const response = await (0, _route.POST)(mockReq);
            (0, _globals.expect)(response.status).toBe(401);
            const data = await response.json();
            (0, _globals.expect)(data.success).toBe(false);
            (0, _globals.expect)(data.error).toBe('ログインしてください');
        });
        it('ファイルサイズが制限を超える場合はエラーを返す', async ()=>{
            const mockFile = new File([
                'dummy content'.repeat(1000000)
            ], 'test.pptx', {
                type: 'application/vnd.openxmlformats-officedocument.presentationml.presentation'
            });
            Object.defineProperty(mockFile, 'size', {
                value: 21 * 1024 * 1024
            }); // 21MB
            const formData = new FormData();
            formData.append('file', mockFile);
            const mockReq = {
                formData: jest.fn().mockResolvedValue(formData)
            };
            const response = await (0, _route.POST)(mockReq);
            (0, _globals.expect)(response.status).toBe(400);
            const data = await response.json();
            (0, _globals.expect)(data.success).toBe(false);
            (0, _globals.expect)(data.error).toBe('ファイルサイズは20MB以下にしてください');
        });
        it('一時ファイル作成に失敗した場合はエラーを返す', async ()=>{
            const mockFile = new File([
                'dummy content'
            ], 'test.pptx', {
                type: 'application/vnd.openxmlformats-officedocument.presentationml.presentation'
            });
            const formData = new FormData();
            formData.append('file', mockFile);
            const mockReq = {
                formData: jest.fn().mockResolvedValue(formData)
            };
            // mkdirをエラーにする
            const fsModule = require('fs/promises');
            fsModule.mkdir.mockRejectedValueOnce(new Error('ディレクトリ作成エラー'));
            const response = await (0, _route.POST)(mockReq);
            (0, _globals.expect)(response.status).toBe(500);
            const data = await response.json();
            (0, _globals.expect)(data.success).toBe(false);
            (0, _globals.expect)(data.error).toBe('ディレクトリ作成エラー');
        });
        it('パース処理に失敗した場合はエラーを返す', async ()=>{
            const mockFile = new File([
                'dummy content'
            ], 'test.pptx', {
                type: 'application/vnd.openxmlformats-officedocument.presentationml.presentation'
            });
            const formData = new FormData();
            formData.append('file', mockFile);
            const mockReq = {
                formData: jest.fn().mockResolvedValue(formData)
            };
            // パース処理をエラーにする
            const PPTXParserModule = require('@/lib/pptx/parser');
            PPTXParserModule.PPTXParser.getInstance().parsePPTX.mockRejectedValueOnce(new Error('パースエラー'));
            const response = await (0, _route.POST)(mockReq);
            (0, _globals.expect)(response.status).toBe(500);
            const data = await response.json();
            (0, _globals.expect)(data.success).toBe(false);
            (0, _globals.expect)(data.error).toBe('パースエラー');
        });
        it('一時ファイルが正しくクリーンアップされる', async ()=>{
            const mockFile = new File([
                'dummy content'
            ], 'test.pptx', {
                type: 'application/vnd.openxmlformats-officedocument.presentationml.presentation'
            });
            const formData = new FormData();
            formData.append('file', mockFile);
            const mockReq = {
                formData: jest.fn().mockResolvedValue(formData)
            };
            await (0, _route.POST)(mockReq);
            // 一時ファイルとディレクトリの削除が呼ばれたことを確認
            const fsModule = require('fs/promises');
            (0, _globals.expect)(fsModule.unlink).toHaveBeenCalled();
            (0, _globals.expect)(fsModule.rm).toHaveBeenCalledWith(_globals.expect.stringContaining('test-uuid'), {
                recursive: true
            });
        });
        it('正常なPPTXファイルを解析できる', async ()=>{
            // テスト用のファイルデータを作成
            const file = new File([
                'test content'
            ], 'test.pptx', {
                type: 'application/vnd.openxmlformats-officedocument.presentationml.presentation'
            });
            // FormDataの作成
            const formData = new FormData();
            formData.append('file', file);
            // リクエストの作成
            const req = new Request('http://localhost:3000/api/pptx/parse', {
                method: 'POST',
                body: formData
            });
            // APIハンドラを呼び出す
            const response = await (0, _route.POST)(req);
            (0, _globals.expect)(response.status).toBe(200);
            const data = await response.json();
            (0, _globals.expect)(data.success).toBe(true);
            (0, _globals.expect)(data.slides).toHaveLength(1);
            (0, _globals.expect)(data.slides[0].texts[0].text).toBe('Hello World');
        });
        it('認証されていない場合は401エラーを返す', async ()=>{
            // 認証モックをnullに設定
            const authModule = require('@/lib/auth/auth');
            authModule.auth.mockResolvedValueOnce(null);
            const file = new File([
                'test content'
            ], 'test.pptx', {
                type: 'application/vnd.openxmlformats-officedocument.presentationml.presentation'
            });
            const formData = new FormData();
            formData.append('file', file);
            const req = new Request('http://localhost:3000/api/pptx/parse', {
                method: 'POST',
                body: formData
            });
            const response = await (0, _route.POST)(req);
            (0, _globals.expect)(response.status).toBe(401);
            const data = await response.json();
            (0, _globals.expect)(data.success).toBe(false);
            (0, _globals.expect)(data.error).toBe('ログインしてください');
        });
        it('ファイルが指定されていない場合は400エラーを返す', async ()=>{
            const formData = new FormData();
            const req = new Request('http://localhost:3000/api/pptx/parse', {
                method: 'POST',
                body: formData
            });
            const response = await (0, _route.POST)(req);
            (0, _globals.expect)(response.status).toBe(400);
            const data = await response.json();
            (0, _globals.expect)(data.success).toBe(false);
            (0, _globals.expect)(data.error).toBe('ファイルが指定されていません');
        });
        it('不正なファイルタイプの場合は400エラーを返す', async ()=>{
            const file = new File([
                'test content'
            ], 'test.txt', {
                type: 'text/plain'
            });
            const formData = new FormData();
            formData.append('file', file);
            const req = new Request('http://localhost:3000/api/pptx/parse', {
                method: 'POST',
                body: formData
            });
            const response = await (0, _route.POST)(req);
            (0, _globals.expect)(response.status).toBe(400);
            const data = await response.json();
            (0, _globals.expect)(data.success).toBe(false);
            (0, _globals.expect)(data.error).toBe('PPTXファイルのみアップロード可能です');
        });
        it('メタデータの詳細な検証を行う', async ()=>{
            const mockFile = new File([
                'dummy content'
            ], 'test.pptx', {
                type: 'application/vnd.openxmlformats-officedocument.presentationml.presentation'
            });
            const formData = new FormData();
            formData.append('file', mockFile);
            const mockReq = {
                formData: jest.fn().mockResolvedValue(formData)
            };
            const response = await (0, _route.POST)(mockReq);
            const data = await response.json();
            (0, _globals.expect)(data.success).toBe(true);
            (0, _globals.expect)(data.metadata).toEqual({
                title: 'テストプレゼンテーション',
                author: 'テストユーザー',
                totalSlides: 2
            });
            (0, _globals.expect)(data.metadata).toHaveProperty('title');
            (0, _globals.expect)(data.metadata).toHaveProperty('author');
            (0, _globals.expect)(data.metadata).toHaveProperty('totalSlides');
        });
        it('スライドの構造の詳細な検証を行う', async ()=>{
            const mockFile = new File([
                'dummy content'
            ], 'test.pptx', {
                type: 'application/vnd.openxmlformats-officedocument.presentationml.presentation'
            });
            const formData = new FormData();
            formData.append('file', mockFile);
            const mockReq = {
                formData: jest.fn().mockResolvedValue(formData)
            };
            const response = await (0, _route.POST)(mockReq);
            const data = await response.json();
            (0, _globals.expect)(data.success).toBe(true);
            (0, _globals.expect)(Array.isArray(data.slides)).toBe(true);
            data.slides.forEach((slide)=>{
                (0, _globals.expect)(slide).toHaveProperty('id');
                (0, _globals.expect)(slide).toHaveProperty('title');
                (0, _globals.expect)(slide).toHaveProperty('content');
                (0, _globals.expect)(typeof slide.id).toBe('string');
                (0, _globals.expect)(typeof slide.title).toBe('string');
                (0, _globals.expect)(typeof slide.content).toBe('string');
            });
        });
        it('空のスライドを含むPPTXファイルを処理する', async ()=>{
            // PPTXパーサーのモックを一時的に変更
            const PPTXParserModule = require('@/lib/pptx/parser');
            PPTXParserModule.PPTXParser.getInstance().parsePPTX.mockResolvedValueOnce({
                success: true,
                slides: [
                    {
                        id: 'empty-slide',
                        title: '',
                        content: '',
                        texts: []
                    },
                    {
                        id: 'normal-slide',
                        title: 'Normal Slide',
                        content: 'Some content'
                    }
                ],
                metadata: {
                    title: 'Empty Slide Test',
                    author: 'Test User',
                    totalSlides: 2
                }
            });
            const mockFile = new File([
                'dummy content'
            ], 'test.pptx', {
                type: 'application/vnd.openxmlformats-officedocument.presentationml.presentation'
            });
            const formData = new FormData();
            formData.append('file', mockFile);
            const mockReq = {
                formData: jest.fn().mockResolvedValue(formData)
            };
            const response = await (0, _route.POST)(mockReq);
            const data = await response.json();
            (0, _globals.expect)(data.success).toBe(true);
            (0, _globals.expect)(data.slides).toHaveLength(2);
            (0, _globals.expect)(data.slides[0].title).toBe('');
            (0, _globals.expect)(data.slides[0].content).toBe('');
            (0, _globals.expect)(data.slides[1].title).toBe('Normal Slide');
        });
        it('特殊文字を含むスライドを処理する', async ()=>{
            // PPTXパーサーのモックを一時的に変更
            const PPTXParserModule = require('@/lib/pptx/parser');
            PPTXParserModule.PPTXParser.getInstance().parsePPTX.mockResolvedValueOnce({
                success: true,
                slides: [
                    {
                        id: 'special-chars',
                        title: '特殊文字テスト: ①㈱♪、🎉絵文字も！',
                        content: '改行\nタブ\t特殊文字©®'
                    }
                ],
                metadata: {
                    title: '特殊文字テスト',
                    author: 'テストユーザー',
                    totalSlides: 1
                }
            });
            const mockFile = new File([
                'dummy content'
            ], 'test.pptx', {
                type: 'application/vnd.openxmlformats-officedocument.presentationml.presentation'
            });
            const formData = new FormData();
            formData.append('file', mockFile);
            const mockReq = {
                formData: jest.fn().mockResolvedValue(formData)
            };
            const response = await (0, _route.POST)(mockReq);
            const data = await response.json();
            (0, _globals.expect)(data.success).toBe(true);
            (0, _globals.expect)(data.slides).toHaveLength(1);
            (0, _globals.expect)(data.slides[0].title).toBe('特殊文字テスト: ①㈱♪、🎉絵文字も！');
            (0, _globals.expect)(data.slides[0].content).toBe('改行\nタブ\t特殊文字©®');
        });
        it('ファイルサイズが大きすぎる場合は400エラーを返す', async ()=>{
            const largeFile = new File([
                'x'.repeat(21 * 1024 * 1024)
            ], 'large.pptx', {
                type: 'application/vnd.openxmlformats-officedocument.presentationml.presentation'
            });
            const formData = new FormData();
            formData.append('file', largeFile);
            const req = new Request('http://localhost:3000/api/pptx/parse', {
                method: 'POST',
                body: formData
            });
            const response = await (0, _route.POST)(req);
            (0, _globals.expect)(response.status).toBe(400);
            const data = await response.json();
            (0, _globals.expect)(data.success).toBe(false);
            (0, _globals.expect)(data.error).toBe('ファイルサイズは20MB以下にしてください');
        });
        it('パース処理でエラーが発生した場合は500エラーを返す', async ()=>{
            // PPTXParserのモックをエラーを投げるように設定
            const PPTXParserModule = require('@/lib/pptx/parser');
            PPTXParserModule.PPTXParser.getInstance.mockReturnValue({
                parsePPTX: jest.fn().mockRejectedValue(new Error('パースエラー'))
            });
            const file = new File([
                'test content'
            ], 'test.pptx', {
                type: 'application/vnd.openxmlformats-officedocument.presentationml.presentation'
            });
            const formData = new FormData();
            formData.append('file', file);
            const req = new Request('http://localhost:3000/api/pptx/parse', {
                method: 'POST',
                body: formData
            });
            const response = await (0, _route.POST)(req);
            (0, _globals.expect)(response.status).toBe(500);
            const data = await response.json();
            (0, _globals.expect)(data.success).toBe(false);
            (0, _globals.expect)(data.error).toBe('パースエラー');
        });
    });
    describe('GET /api/pptx/parse', ()=>{
        it('GETリクエストは405エラーを返す', async ()=>{
            const req = new Request('http://localhost:3000/api/pptx/parse', {
                method: 'GET'
            });
            const response = await (0, _route.GET)(req);
            (0, _globals.expect)(response.status).toBe(405);
            const data = await response.json();
            (0, _globals.expect)(data.success).toBe(false);
            (0, _globals.expect)(data.error).toBe('メソッドが許可されていません');
        });
        it('ヘルスチェックエンドポイントが正常に応答する', async ()=>{
            // APIハンドラを呼び出す
            const mockReq = {
                url: 'http://localhost:3000/api/pptx/parse/health'
            };
            const response = await (0, _route.GET)(mockReq);
            (0, _globals.expect)(response.status).toBe(200);
            const data = await response.json();
            (0, _globals.expect)(data.success).toBe(true);
            (0, _globals.expect)(data.message).toBe('PPTXパーサーAPIは正常に動作しています');
        });
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy95dXN1a2V0c3Vub2RhL0RvY3VtZW50cy9jdXJzb3IvcHB0dHJhbnNsYXRvcmFwcC93b3JrdHJlZXMvY2ljZC1zZXR1cC90ZXN0cy9hcGkvcHB0eC1wYXJzZS50ZXN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5leHRSZXF1ZXN0LCBOZXh0UmVzcG9uc2UgfSBmcm9tICduZXh0L3NlcnZlcic7XG5pbXBvcnQgeyBleHBlY3QgfSBmcm9tICdAamVzdC9nbG9iYWxzJztcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuXG4vLyDlnovjga7jgb/jgqTjg7Pjg53jg7zjg4jvvIjjg6Ljg4Pjgq/jga/liKXpgJTooYzjgYbvvIlcbmltcG9ydCB0eXBlIHsgYXV0aCB9IGZyb20gJ0AvbGliL2F1dGgvYXV0aCc7XG5pbXBvcnQgdHlwZSB7IFBQVFhQYXJzZXIgfSBmcm9tICdAL2xpYi9wcHR4L3BhcnNlcic7XG5pbXBvcnQgdHlwZSAqIGFzIGZzIGZyb20gJ2ZzL3Byb21pc2VzJztcblxuLy8gUFBUWOODkeODvOOCteODvOOBruODouODg+OCr1xuamVzdC5tb2NrKCdAL2xpYi9wcHR4L3BhcnNlcicsICgpID0+ICh7XG4gIFBQVFhQYXJzZXI6IHtcbiAgICBnZXRJbnN0YW5jZTogamVzdC5mbigpLm1vY2tSZXR1cm5WYWx1ZSh7XG4gICAgICBwYXJzZVBQVFg6IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZSh7XG4gICAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICAgIHNsaWRlczogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIGlkOiAnc2xpZGUxJyxcbiAgICAgICAgICAgIHRpdGxlOiAn44OG44K544OI44K544Op44Kk44OJMScsXG4gICAgICAgICAgICBjb250ZW50OiAn44K544Op44Kk44OJMeOBruOCs+ODs+ODhuODs+ODhCcsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpZDogJ3NsaWRlMicsXG4gICAgICAgICAgICB0aXRsZTogJ+ODhuOCueODiOOCueODqeOCpOODiTInLFxuICAgICAgICAgICAgY29udGVudDogJ+OCueODqeOCpOODiTLjga7jgrPjg7Pjg4bjg7Pjg4QnLFxuICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIG1ldGFkYXRhOiB7XG4gICAgICAgICAgdGl0bGU6ICfjg4bjgrnjg4jjg5fjg6zjgrzjg7Pjg4bjg7zjgrfjg6fjg7MnLFxuICAgICAgICAgIGF1dGhvcjogJ+ODhuOCueODiOODpuODvOOCtuODvCcsXG4gICAgICAgICAgdG90YWxTbGlkZXM6IDIsXG4gICAgICAgIH0sXG4gICAgICB9KSxcbiAgICB9KSxcbiAgfSxcbn0pKTtcblxuLy8g6KqN6Ki844Gu44Oi44OD44KvXG5qZXN0Lm1vY2soJ0AvbGliL2F1dGgvYXV0aCcsICgpID0+ICh7XG4gIGF1dGg6IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZSh7XG4gICAgdXNlcjoge1xuICAgICAgaWQ6ICd0ZXN0LXVzZXInLFxuICAgICAgZW1haWw6ICd0ZXN0QGV4YW1wbGUuY29tJyxcbiAgICB9LFxuICB9KSxcbn0pKTtcblxuLy8gZnMvcHJvbWlzZXPjga7jg6Ljg4Pjgq9cbmplc3QubW9jaygnZnMvcHJvbWlzZXMnLCAoKSA9PiAoe1xuICBta2RpcjogamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKHVuZGVmaW5lZCksXG4gIHdyaXRlRmlsZTogamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKHVuZGVmaW5lZCksXG4gIHJlYWRkaXI6IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZShbJ2ZpbGUxLnBwdHgnLCAnZmlsZTIucHB0eCddKSxcbiAgdW5saW5rOiBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUodW5kZWZpbmVkKSxcbiAgcm06IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZSh1bmRlZmluZWQpLFxufSkpO1xuXG4vLyB1dWlk44Gu44Oi44OD44KvXG5qZXN0Lm1vY2soJ3V1aWQnLCAoKSA9PiAoe1xuICB2NDogamVzdC5mbigpLm1vY2tSZXR1cm5WYWx1ZSgndGVzdC11dWlkJyksXG59KSk7XG5cbi8vIGFwcC9hcGkvcHB0eC9wYXJzZS9yb3V0ZS50c+OBruODouODg+OCr1xuamVzdC5tb2NrKCdAL2FwcC9hcGkvcHB0eC9wYXJzZS9yb3V0ZScsICgpID0+IHtcbiAgLy8g44Oi44OD44Kv55So44Gu44Os44K544Od44Oz44K555Sf5oiQ6Zai5pWwXG4gIGNvbnN0IG1vY2tKc29uUmVzcG9uc2UgPSAoZGF0YTogYW55LCBzdGF0dXMgPSAyMDApID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAganNvbjogKCkgPT4gUHJvbWlzZS5yZXNvbHZlKGRhdGEpLFxuICAgICAgc3RhdHVzLFxuICAgIH07XG4gIH07XG5cbiAgcmV0dXJuIHtcbiAgICBQT1NUOiBqZXN0LmZuKCkubW9ja0ltcGxlbWVudGF0aW9uKGFzeW5jIChyZXEpID0+IHtcbiAgICAgIGNvbnN0IGZvcm1EYXRhID0gYXdhaXQgcmVxLmZvcm1EYXRhKCk7XG4gICAgICBjb25zdCBmaWxlID0gZm9ybURhdGEuZ2V0KCdmaWxlJyk7XG5cbiAgICAgIGlmICghZmlsZSkge1xuICAgICAgICByZXR1cm4gbW9ja0pzb25SZXNwb25zZSh7IHN1Y2Nlc3M6IGZhbHNlLCBlcnJvcjogJ+ODleOCoeOCpOODq+OBjOaMh+WumuOBleOCjOOBpuOBhOOBvuOBm+OCkycgfSwgNDAwKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGZpbGUudHlwZSAhPT0gJ2FwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5wcmVzZW50YXRpb25tbC5wcmVzZW50YXRpb24nKSB7XG4gICAgICAgIHJldHVybiBtb2NrSnNvblJlc3BvbnNlKHsgc3VjY2VzczogZmFsc2UsIGVycm9yOiAnUFBUWOODleOCoeOCpOODq+OBruOBv+OCouODg+ODl+ODreODvOODieWPr+iDveOBp+OBmScgfSwgNDAwKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG1vY2tKc29uUmVzcG9uc2Uoe1xuICAgICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgICBmaWxlSWQ6ICd0ZXN0LXV1aWQnLFxuICAgICAgICBzbGlkZXM6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpZDogJ3NsaWRlMScsXG4gICAgICAgICAgICB0aXRsZTogJ+ODhuOCueODiOOCueODqeOCpOODiTEnLFxuICAgICAgICAgICAgY29udGVudDogJ+OCueODqeOCpOODiTHjga7jgrPjg7Pjg4bjg7Pjg4QnLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaWQ6ICdzbGlkZTInLFxuICAgICAgICAgICAgdGl0bGU6ICfjg4bjgrnjg4jjgrnjg6njgqTjg4kyJyxcbiAgICAgICAgICAgIGNvbnRlbnQ6ICfjgrnjg6njgqTjg4ky44Gu44Kz44Oz44OG44Oz44OEJyxcbiAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgICBtZXRhZGF0YToge1xuICAgICAgICAgIHRpdGxlOiAn44OG44K544OI44OX44Os44K844Oz44OG44O844K344On44OzJyxcbiAgICAgICAgICBhdXRob3I6ICfjg4bjgrnjg4jjg6bjg7zjgrbjg7wnLFxuICAgICAgICAgIHRvdGFsU2xpZGVzOiAyLFxuICAgICAgICB9LFxuICAgICAgfSk7XG4gICAgfSksXG4gICAgR0VUOiBqZXN0LmZuKCkubW9ja0ltcGxlbWVudGF0aW9uKCgpID0+IHtcbiAgICAgIHJldHVybiBtb2NrSnNvblJlc3BvbnNlKHtcbiAgICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgICAgbWVzc2FnZTogJ1BQVFjjg5Hjg7zjgrXjg7xBUEnjga/mraPluLjjgavli5XkvZzjgZfjgabjgYTjgb7jgZknLFxuICAgICAgfSk7XG4gICAgfSksXG4gIH07XG59KTtcblxuLy8g44Kk44Oz44Od44O844OI44Gv44Oi44OD44Kv44Gu5b6M44Gr6KGM44GGXG5pbXBvcnQgeyBQT1NULCBHRVQgfSBmcm9tICdAL2FwcC9hcGkvcHB0eC9wYXJzZS9yb3V0ZSc7XG5cbmRlc2NyaWJlKCdQUFRYIFBhcnNlIEFQSScsICgpID0+IHtcbiAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgamVzdC5jbGVhckFsbE1vY2tzKCk7XG4gICAgXG4gICAgLy8g6KqN6Ki844Oi44OD44Kv44Gu44OH44OV44Kp44Or44OI6Kit5a6aXG4gICAgY29uc3QgYXV0aE1vZHVsZSA9IHJlcXVpcmUoJ0AvbGliL2F1dGgvYXV0aCcpO1xuICAgIChhdXRoTW9kdWxlLmF1dGggYXMgamVzdC5Nb2NrKS5tb2NrUmVzb2x2ZWRWYWx1ZSh7XG4gICAgICB1c2VyOiB7IGlkOiAndGVzdC11c2VyJyB9XG4gICAgfSk7XG5cbiAgICAvLyBQUFRYUGFyc2Vy44Oi44OD44Kv44Gu44OH44OV44Kp44Or44OI6Kit5a6aXG4gICAgY29uc3QgUFBUWFBhcnNlck1vZHVsZSA9IHJlcXVpcmUoJ0AvbGliL3BwdHgvcGFyc2VyJyk7XG4gICAgKFBQVFhQYXJzZXJNb2R1bGUuUFBUWFBhcnNlci5nZXRJbnN0YW5jZSBhcyBqZXN0Lk1vY2spLm1vY2tSZXR1cm5WYWx1ZSh7XG4gICAgICBwYXJzZVBQVFg6IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZSh7XG4gICAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICAgIHNsaWRlczogW1xuICAgICAgICAgIHsgaW5kZXg6IDEsIHRleHRzOiBbeyB0ZXh0OiAnSGVsbG8gV29ybGQnIH1dIH1cbiAgICAgICAgXVxuICAgICAgfSlcbiAgICB9KTtcblxuICAgIC8vIGZz44Oi44OD44Kv44Gu44OH44OV44Kp44Or44OI6Kit5a6aXG4gICAgY29uc3QgZnNNb2R1bGUgPSByZXF1aXJlKCdmcy9wcm9taXNlcycpO1xuICAgIChmc01vZHVsZS5ta2RpciBhcyBqZXN0Lk1vY2spLm1vY2tSZXNvbHZlZFZhbHVlKHVuZGVmaW5lZCk7XG4gICAgKGZzTW9kdWxlLndyaXRlRmlsZSBhcyBqZXN0Lk1vY2spLm1vY2tSZXNvbHZlZFZhbHVlKHVuZGVmaW5lZCk7XG4gICAgKGZzTW9kdWxlLnJlYWRkaXIgYXMgamVzdC5Nb2NrKS5tb2NrUmVzb2x2ZWRWYWx1ZShbJ2ZpbGUxLnBwdHgnLCAnZmlsZTIucHB0eCddKTtcbiAgICAoZnNNb2R1bGUucm0gYXMgamVzdC5Nb2NrKS5tb2NrUmVzb2x2ZWRWYWx1ZSh1bmRlZmluZWQpO1xuXG4gICAgLy8gcGF0aOODouODg+OCr+OBruODh+ODleOCqeODq+ODiOioreWumlxuICAgIChwYXRoLmpvaW4gYXMgamVzdC5Nb2NrKS5tb2NrSW1wbGVtZW50YXRpb24oKC4uLmFyZ3MpID0+IGFyZ3Muam9pbignLycpKTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ1BPU1QgL2FwaS9wcHR4L3BhcnNlJywgKCkgPT4ge1xuICAgIGl0KCfoqo3oqLzjgZXjgozjgabjgYTjgarjgYTloLTlkIjjga/jgqjjg6njg7zjgpLov5TjgZknLCBhc3luYyAoKSA9PiB7XG4gICAgICAvLyDoqo3oqLzjg6Ljg4Pjgq/jgpLmnKroqo3oqLznirbmhYvjgavoqK3lrppcbiAgICAgIGNvbnN0IGF1dGhNb2R1bGUgPSByZXF1aXJlKCdAL2xpYi9hdXRoL2F1dGgnKTtcbiAgICAgIChhdXRoTW9kdWxlLmF1dGggYXMgamVzdC5Nb2NrKS5tb2NrUmVzb2x2ZWRWYWx1ZU9uY2UobnVsbCk7XG5cbiAgICAgIGNvbnN0IG1vY2tGaWxlID0gbmV3IEZpbGUoWydkdW1teSBjb250ZW50J10sICd0ZXN0LnBwdHgnLCB7XG4gICAgICAgIHR5cGU6ICdhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQucHJlc2VudGF0aW9ubWwucHJlc2VudGF0aW9uJyxcbiAgICAgIH0pO1xuICAgICAgY29uc3QgZm9ybURhdGEgPSBuZXcgRm9ybURhdGEoKTtcbiAgICAgIGZvcm1EYXRhLmFwcGVuZCgnZmlsZScsIG1vY2tGaWxlKTtcblxuICAgICAgY29uc3QgbW9ja1JlcSA9IHtcbiAgICAgICAgZm9ybURhdGE6IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZShmb3JtRGF0YSksXG4gICAgICB9IGFzIHVua25vd24gYXMgTmV4dFJlcXVlc3Q7XG5cbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgUE9TVChtb2NrUmVxKTtcblxuICAgICAgZXhwZWN0KHJlc3BvbnNlLnN0YXR1cykudG9CZSg0MDEpO1xuICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcbiAgICAgIGV4cGVjdChkYXRhLnN1Y2Nlc3MpLnRvQmUoZmFsc2UpO1xuICAgICAgZXhwZWN0KGRhdGEuZXJyb3IpLnRvQmUoJ+ODreOCsOOCpOODs+OBl+OBpuOBj+OBoOOBleOBhCcpO1xuICAgIH0pO1xuXG4gICAgaXQoJ+ODleOCoeOCpOODq+OCteOCpOOCuuOBjOWItumZkOOCkui2heOBiOOCi+WgtOWQiOOBr+OCqOODqeODvOOCkui/lOOBmScsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IG1vY2tGaWxlID0gbmV3IEZpbGUoWydkdW1teSBjb250ZW50Jy5yZXBlYXQoMTAwMDAwMCldLCAndGVzdC5wcHR4Jywge1xuICAgICAgICB0eXBlOiAnYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LnByZXNlbnRhdGlvbm1sLnByZXNlbnRhdGlvbicsXG4gICAgICB9KTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2NrRmlsZSwgJ3NpemUnLCB7IHZhbHVlOiAyMSAqIDEwMjQgKiAxMDI0IH0pOyAvLyAyMU1CXG5cbiAgICAgIGNvbnN0IGZvcm1EYXRhID0gbmV3IEZvcm1EYXRhKCk7XG4gICAgICBmb3JtRGF0YS5hcHBlbmQoJ2ZpbGUnLCBtb2NrRmlsZSk7XG5cbiAgICAgIGNvbnN0IG1vY2tSZXEgPSB7XG4gICAgICAgIGZvcm1EYXRhOiBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUoZm9ybURhdGEpLFxuICAgICAgfSBhcyB1bmtub3duIGFzIE5leHRSZXF1ZXN0O1xuXG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IFBPU1QobW9ja1JlcSk7XG5cbiAgICAgIGV4cGVjdChyZXNwb25zZS5zdGF0dXMpLnRvQmUoNDAwKTtcbiAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG4gICAgICBleHBlY3QoZGF0YS5zdWNjZXNzKS50b0JlKGZhbHNlKTtcbiAgICAgIGV4cGVjdChkYXRhLmVycm9yKS50b0JlKCfjg5XjgqHjgqTjg6vjgrXjgqTjgrrjga8yME1C5Lul5LiL44Gr44GX44Gm44GP44Gg44GV44GEJyk7XG4gICAgfSk7XG5cbiAgICBpdCgn5LiA5pmC44OV44Kh44Kk44Or5L2c5oiQ44Gr5aSx5pWX44GX44Gf5aC05ZCI44Gv44Ko44Op44O844KS6L+U44GZJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgbW9ja0ZpbGUgPSBuZXcgRmlsZShbJ2R1bW15IGNvbnRlbnQnXSwgJ3Rlc3QucHB0eCcsIHtcbiAgICAgICAgdHlwZTogJ2FwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5wcmVzZW50YXRpb25tbC5wcmVzZW50YXRpb24nLFxuICAgICAgfSk7XG4gICAgICBjb25zdCBmb3JtRGF0YSA9IG5ldyBGb3JtRGF0YSgpO1xuICAgICAgZm9ybURhdGEuYXBwZW5kKCdmaWxlJywgbW9ja0ZpbGUpO1xuXG4gICAgICBjb25zdCBtb2NrUmVxID0ge1xuICAgICAgICBmb3JtRGF0YTogamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKGZvcm1EYXRhKSxcbiAgICAgIH0gYXMgdW5rbm93biBhcyBOZXh0UmVxdWVzdDtcblxuICAgICAgLy8gbWtkaXLjgpLjgqjjg6njg7zjgavjgZnjgotcbiAgICAgIGNvbnN0IGZzTW9kdWxlID0gcmVxdWlyZSgnZnMvcHJvbWlzZXMnKTtcbiAgICAgIChmc01vZHVsZS5ta2RpciBhcyBqZXN0Lk1vY2spLm1vY2tSZWplY3RlZFZhbHVlT25jZShuZXcgRXJyb3IoJ+ODh+OCo+ODrOOCr+ODiOODquS9nOaIkOOCqOODqeODvCcpKTtcblxuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBQT1NUKG1vY2tSZXEpO1xuXG4gICAgICBleHBlY3QocmVzcG9uc2Uuc3RhdHVzKS50b0JlKDUwMCk7XG4gICAgICBjb25zdCBkYXRhID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuICAgICAgZXhwZWN0KGRhdGEuc3VjY2VzcykudG9CZShmYWxzZSk7XG4gICAgICBleHBlY3QoZGF0YS5lcnJvcikudG9CZSgn44OH44Kj44Os44Kv44OI44Oq5L2c5oiQ44Ko44Op44O8Jyk7XG4gICAgfSk7XG5cbiAgICBpdCgn44OR44O844K55Yem55CG44Gr5aSx5pWX44GX44Gf5aC05ZCI44Gv44Ko44Op44O844KS6L+U44GZJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgbW9ja0ZpbGUgPSBuZXcgRmlsZShbJ2R1bW15IGNvbnRlbnQnXSwgJ3Rlc3QucHB0eCcsIHtcbiAgICAgICAgdHlwZTogJ2FwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5wcmVzZW50YXRpb25tbC5wcmVzZW50YXRpb24nLFxuICAgICAgfSk7XG4gICAgICBjb25zdCBmb3JtRGF0YSA9IG5ldyBGb3JtRGF0YSgpO1xuICAgICAgZm9ybURhdGEuYXBwZW5kKCdmaWxlJywgbW9ja0ZpbGUpO1xuXG4gICAgICBjb25zdCBtb2NrUmVxID0ge1xuICAgICAgICBmb3JtRGF0YTogamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKGZvcm1EYXRhKSxcbiAgICAgIH0gYXMgdW5rbm93biBhcyBOZXh0UmVxdWVzdDtcblxuICAgICAgLy8g44OR44O844K55Yem55CG44KS44Ko44Op44O844Gr44GZ44KLXG4gICAgICBjb25zdCBQUFRYUGFyc2VyTW9kdWxlID0gcmVxdWlyZSgnQC9saWIvcHB0eC9wYXJzZXInKTtcbiAgICAgIChQUFRYUGFyc2VyTW9kdWxlLlBQVFhQYXJzZXIuZ2V0SW5zdGFuY2UoKS5wYXJzZVBQVFggYXMgamVzdC5Nb2NrKS5tb2NrUmVqZWN0ZWRWYWx1ZU9uY2UobmV3IEVycm9yKCfjg5Hjg7zjgrnjgqjjg6njg7wnKSk7XG5cbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgUE9TVChtb2NrUmVxKTtcblxuICAgICAgZXhwZWN0KHJlc3BvbnNlLnN0YXR1cykudG9CZSg1MDApO1xuICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcbiAgICAgIGV4cGVjdChkYXRhLnN1Y2Nlc3MpLnRvQmUoZmFsc2UpO1xuICAgICAgZXhwZWN0KGRhdGEuZXJyb3IpLnRvQmUoJ+ODkeODvOOCueOCqOODqeODvCcpO1xuICAgIH0pO1xuXG4gICAgaXQoJ+S4gOaZguODleOCoeOCpOODq+OBjOato+OBl+OBj+OCr+ODquODvOODs+OCouODg+ODl+OBleOCjOOCiycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IG1vY2tGaWxlID0gbmV3IEZpbGUoWydkdW1teSBjb250ZW50J10sICd0ZXN0LnBwdHgnLCB7XG4gICAgICAgIHR5cGU6ICdhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQucHJlc2VudGF0aW9ubWwucHJlc2VudGF0aW9uJyxcbiAgICAgIH0pO1xuICAgICAgY29uc3QgZm9ybURhdGEgPSBuZXcgRm9ybURhdGEoKTtcbiAgICAgIGZvcm1EYXRhLmFwcGVuZCgnZmlsZScsIG1vY2tGaWxlKTtcblxuICAgICAgY29uc3QgbW9ja1JlcSA9IHtcbiAgICAgICAgZm9ybURhdGE6IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZShmb3JtRGF0YSksXG4gICAgICB9IGFzIHVua25vd24gYXMgTmV4dFJlcXVlc3Q7XG5cbiAgICAgIGF3YWl0IFBPU1QobW9ja1JlcSk7XG5cbiAgICAgIC8vIOS4gOaZguODleOCoeOCpOODq+OBqOODh+OCo+ODrOOCr+ODiOODquOBruWJiumZpOOBjOWRvOOBsOOCjOOBn+OBk+OBqOOCkueiuuiqjVxuICAgICAgY29uc3QgZnNNb2R1bGUgPSByZXF1aXJlKCdmcy9wcm9taXNlcycpO1xuICAgICAgZXhwZWN0KGZzTW9kdWxlLnVubGluaykudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgICAgZXhwZWN0KGZzTW9kdWxlLnJtKS50b0hhdmVCZWVuQ2FsbGVkV2l0aChleHBlY3Quc3RyaW5nQ29udGFpbmluZygndGVzdC11dWlkJyksIHsgcmVjdXJzaXZlOiB0cnVlIH0pO1xuICAgIH0pO1xuXG4gICAgaXQoJ+ato+W4uOOBqlBQVFjjg5XjgqHjgqTjg6vjgpLop6PmnpDjgafjgY3jgosnLCBhc3luYyAoKSA9PiB7XG4gICAgICAvLyDjg4bjgrnjg4jnlKjjga7jg5XjgqHjgqTjg6vjg4fjg7zjgr/jgpLkvZzmiJBcbiAgICAgIGNvbnN0IGZpbGUgPSBuZXcgRmlsZShbJ3Rlc3QgY29udGVudCddLCAndGVzdC5wcHR4Jywge1xuICAgICAgICB0eXBlOiAnYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LnByZXNlbnRhdGlvbm1sLnByZXNlbnRhdGlvbidcbiAgICAgIH0pO1xuXG4gICAgICAvLyBGb3JtRGF0YeOBruS9nOaIkFxuICAgICAgY29uc3QgZm9ybURhdGEgPSBuZXcgRm9ybURhdGEoKTtcbiAgICAgIGZvcm1EYXRhLmFwcGVuZCgnZmlsZScsIGZpbGUpO1xuXG4gICAgICAvLyDjg6rjgq/jgqjjgrnjg4jjga7kvZzmiJBcbiAgICAgIGNvbnN0IHJlcSA9IG5ldyBSZXF1ZXN0KCdodHRwOi8vbG9jYWxob3N0OjMwMDAvYXBpL3BwdHgvcGFyc2UnLCB7XG4gICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICBib2R5OiBmb3JtRGF0YVxuICAgICAgfSk7XG5cbiAgICAgIC8vIEFQSeODj+ODs+ODieODqeOCkuWRvOOBs+WHuuOBmVxuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBQT1NUKHJlcSBhcyB1bmtub3duIGFzIE5leHRSZXF1ZXN0KTtcbiAgICAgIGV4cGVjdChyZXNwb25zZS5zdGF0dXMpLnRvQmUoMjAwKTtcblxuICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcbiAgICAgIGV4cGVjdChkYXRhLnN1Y2Nlc3MpLnRvQmUodHJ1ZSk7XG4gICAgICBleHBlY3QoZGF0YS5zbGlkZXMpLnRvSGF2ZUxlbmd0aCgxKTtcbiAgICAgIGV4cGVjdChkYXRhLnNsaWRlc1swXS50ZXh0c1swXS50ZXh0KS50b0JlKCdIZWxsbyBXb3JsZCcpO1xuICAgIH0pO1xuXG4gICAgaXQoJ+iqjeiovOOBleOCjOOBpuOBhOOBquOBhOWgtOWQiOOBrzQwMeOCqOODqeODvOOCkui/lOOBmScsIGFzeW5jICgpID0+IHtcbiAgICAgIC8vIOiqjeiovOODouODg+OCr+OCkm51bGzjgavoqK3lrppcbiAgICAgIGNvbnN0IGF1dGhNb2R1bGUgPSByZXF1aXJlKCdAL2xpYi9hdXRoL2F1dGgnKTtcbiAgICAgIChhdXRoTW9kdWxlLmF1dGggYXMgamVzdC5Nb2NrKS5tb2NrUmVzb2x2ZWRWYWx1ZU9uY2UobnVsbCk7XG5cbiAgICAgIGNvbnN0IGZpbGUgPSBuZXcgRmlsZShbJ3Rlc3QgY29udGVudCddLCAndGVzdC5wcHR4Jywge1xuICAgICAgICB0eXBlOiAnYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LnByZXNlbnRhdGlvbm1sLnByZXNlbnRhdGlvbidcbiAgICAgIH0pO1xuICAgICAgY29uc3QgZm9ybURhdGEgPSBuZXcgRm9ybURhdGEoKTtcbiAgICAgIGZvcm1EYXRhLmFwcGVuZCgnZmlsZScsIGZpbGUpO1xuXG4gICAgICBjb25zdCByZXEgPSBuZXcgUmVxdWVzdCgnaHR0cDovL2xvY2FsaG9zdDozMDAwL2FwaS9wcHR4L3BhcnNlJywge1xuICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgYm9keTogZm9ybURhdGFcbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IFBPU1QocmVxIGFzIHVua25vd24gYXMgTmV4dFJlcXVlc3QpO1xuICAgICAgZXhwZWN0KHJlc3BvbnNlLnN0YXR1cykudG9CZSg0MDEpO1xuXG4gICAgICBjb25zdCBkYXRhID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuICAgICAgZXhwZWN0KGRhdGEuc3VjY2VzcykudG9CZShmYWxzZSk7XG4gICAgICBleHBlY3QoZGF0YS5lcnJvcikudG9CZSgn44Ot44Kw44Kk44Oz44GX44Gm44GP44Gg44GV44GEJyk7XG4gICAgfSk7XG5cbiAgICBpdCgn44OV44Kh44Kk44Or44GM5oyH5a6a44GV44KM44Gm44GE44Gq44GE5aC05ZCI44GvNDAw44Ko44Op44O844KS6L+U44GZJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgZm9ybURhdGEgPSBuZXcgRm9ybURhdGEoKTtcbiAgICAgIGNvbnN0IHJlcSA9IG5ldyBSZXF1ZXN0KCdodHRwOi8vbG9jYWxob3N0OjMwMDAvYXBpL3BwdHgvcGFyc2UnLCB7XG4gICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICBib2R5OiBmb3JtRGF0YVxuICAgICAgfSk7XG5cbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgUE9TVChyZXEgYXMgdW5rbm93biBhcyBOZXh0UmVxdWVzdCk7XG4gICAgICBleHBlY3QocmVzcG9uc2Uuc3RhdHVzKS50b0JlKDQwMCk7XG5cbiAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG4gICAgICBleHBlY3QoZGF0YS5zdWNjZXNzKS50b0JlKGZhbHNlKTtcbiAgICAgIGV4cGVjdChkYXRhLmVycm9yKS50b0JlKCfjg5XjgqHjgqTjg6vjgYzmjIflrprjgZXjgozjgabjgYTjgb7jgZvjgpMnKTtcbiAgICB9KTtcblxuICAgIGl0KCfkuI3mraPjgarjg5XjgqHjgqTjg6vjgr/jgqTjg5fjga7loLTlkIjjga80MDDjgqjjg6njg7zjgpLov5TjgZknLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBmaWxlID0gbmV3IEZpbGUoWyd0ZXN0IGNvbnRlbnQnXSwgJ3Rlc3QudHh0Jywge1xuICAgICAgICB0eXBlOiAndGV4dC9wbGFpbidcbiAgICAgIH0pO1xuICAgICAgY29uc3QgZm9ybURhdGEgPSBuZXcgRm9ybURhdGEoKTtcbiAgICAgIGZvcm1EYXRhLmFwcGVuZCgnZmlsZScsIGZpbGUpO1xuXG4gICAgICBjb25zdCByZXEgPSBuZXcgUmVxdWVzdCgnaHR0cDovL2xvY2FsaG9zdDozMDAwL2FwaS9wcHR4L3BhcnNlJywge1xuICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgYm9keTogZm9ybURhdGFcbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IFBPU1QocmVxIGFzIHVua25vd24gYXMgTmV4dFJlcXVlc3QpO1xuICAgICAgZXhwZWN0KHJlc3BvbnNlLnN0YXR1cykudG9CZSg0MDApO1xuXG4gICAgICBjb25zdCBkYXRhID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuICAgICAgZXhwZWN0KGRhdGEuc3VjY2VzcykudG9CZShmYWxzZSk7XG4gICAgICBleHBlY3QoZGF0YS5lcnJvcikudG9CZSgnUFBUWOODleOCoeOCpOODq+OBruOBv+OCouODg+ODl+ODreODvOODieWPr+iDveOBp+OBmScpO1xuICAgIH0pO1xuXG4gICAgaXQoJ+ODoeOCv+ODh+ODvOOCv+OBruips+e0sOOBquaknOiovOOCkuihjOOBhicsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IG1vY2tGaWxlID0gbmV3IEZpbGUoWydkdW1teSBjb250ZW50J10sICd0ZXN0LnBwdHgnLCB7XG4gICAgICAgIHR5cGU6ICdhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQucHJlc2VudGF0aW9ubWwucHJlc2VudGF0aW9uJyxcbiAgICAgIH0pO1xuICAgICAgY29uc3QgZm9ybURhdGEgPSBuZXcgRm9ybURhdGEoKTtcbiAgICAgIGZvcm1EYXRhLmFwcGVuZCgnZmlsZScsIG1vY2tGaWxlKTtcblxuICAgICAgY29uc3QgbW9ja1JlcSA9IHtcbiAgICAgICAgZm9ybURhdGE6IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZShmb3JtRGF0YSksXG4gICAgICB9IGFzIHVua25vd24gYXMgTmV4dFJlcXVlc3Q7XG5cbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgUE9TVChtb2NrUmVxKTtcbiAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG5cbiAgICAgIGV4cGVjdChkYXRhLnN1Y2Nlc3MpLnRvQmUodHJ1ZSk7XG4gICAgICBleHBlY3QoZGF0YS5tZXRhZGF0YSkudG9FcXVhbCh7XG4gICAgICAgIHRpdGxlOiAn44OG44K544OI44OX44Os44K844Oz44OG44O844K344On44OzJyxcbiAgICAgICAgYXV0aG9yOiAn44OG44K544OI44Om44O844K244O8JyxcbiAgICAgICAgdG90YWxTbGlkZXM6IDIsXG4gICAgICB9KTtcbiAgICAgIGV4cGVjdChkYXRhLm1ldGFkYXRhKS50b0hhdmVQcm9wZXJ0eSgndGl0bGUnKTtcbiAgICAgIGV4cGVjdChkYXRhLm1ldGFkYXRhKS50b0hhdmVQcm9wZXJ0eSgnYXV0aG9yJyk7XG4gICAgICBleHBlY3QoZGF0YS5tZXRhZGF0YSkudG9IYXZlUHJvcGVydHkoJ3RvdGFsU2xpZGVzJyk7XG4gICAgfSk7XG5cbiAgICBpdCgn44K544Op44Kk44OJ44Gu5qeL6YCg44Gu6Kmz57Sw44Gq5qSc6Ki844KS6KGM44GGJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgbW9ja0ZpbGUgPSBuZXcgRmlsZShbJ2R1bW15IGNvbnRlbnQnXSwgJ3Rlc3QucHB0eCcsIHtcbiAgICAgICAgdHlwZTogJ2FwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5wcmVzZW50YXRpb25tbC5wcmVzZW50YXRpb24nLFxuICAgICAgfSk7XG4gICAgICBjb25zdCBmb3JtRGF0YSA9IG5ldyBGb3JtRGF0YSgpO1xuICAgICAgZm9ybURhdGEuYXBwZW5kKCdmaWxlJywgbW9ja0ZpbGUpO1xuXG4gICAgICBjb25zdCBtb2NrUmVxID0ge1xuICAgICAgICBmb3JtRGF0YTogamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKGZvcm1EYXRhKSxcbiAgICAgIH0gYXMgdW5rbm93biBhcyBOZXh0UmVxdWVzdDtcblxuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBQT1NUKG1vY2tSZXEpO1xuICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcblxuICAgICAgZXhwZWN0KGRhdGEuc3VjY2VzcykudG9CZSh0cnVlKTtcbiAgICAgIGV4cGVjdChBcnJheS5pc0FycmF5KGRhdGEuc2xpZGVzKSkudG9CZSh0cnVlKTtcbiAgICAgIGRhdGEuc2xpZGVzLmZvckVhY2goKHNsaWRlOiBhbnkpID0+IHtcbiAgICAgICAgZXhwZWN0KHNsaWRlKS50b0hhdmVQcm9wZXJ0eSgnaWQnKTtcbiAgICAgICAgZXhwZWN0KHNsaWRlKS50b0hhdmVQcm9wZXJ0eSgndGl0bGUnKTtcbiAgICAgICAgZXhwZWN0KHNsaWRlKS50b0hhdmVQcm9wZXJ0eSgnY29udGVudCcpO1xuICAgICAgICBleHBlY3QodHlwZW9mIHNsaWRlLmlkKS50b0JlKCdzdHJpbmcnKTtcbiAgICAgICAgZXhwZWN0KHR5cGVvZiBzbGlkZS50aXRsZSkudG9CZSgnc3RyaW5nJyk7XG4gICAgICAgIGV4cGVjdCh0eXBlb2Ygc2xpZGUuY29udGVudCkudG9CZSgnc3RyaW5nJyk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIGl0KCfnqbrjga7jgrnjg6njgqTjg4njgpLlkKvjgoBQUFRY44OV44Kh44Kk44Or44KS5Yem55CG44GZ44KLJywgYXN5bmMgKCkgPT4ge1xuICAgICAgLy8gUFBUWOODkeODvOOCteODvOOBruODouODg+OCr+OCkuS4gOaZgueahOOBq+WkieabtFxuICAgICAgY29uc3QgUFBUWFBhcnNlck1vZHVsZSA9IHJlcXVpcmUoJ0AvbGliL3BwdHgvcGFyc2VyJyk7XG4gICAgICAoUFBUWFBhcnNlck1vZHVsZS5QUFRYUGFyc2VyLmdldEluc3RhbmNlKCkucGFyc2VQUFRYIGFzIGplc3QuTW9jaykubW9ja1Jlc29sdmVkVmFsdWVPbmNlKHtcbiAgICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgICAgc2xpZGVzOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgaWQ6ICdlbXB0eS1zbGlkZScsXG4gICAgICAgICAgICB0aXRsZTogJycsXG4gICAgICAgICAgICBjb250ZW50OiAnJyxcbiAgICAgICAgICAgIHRleHRzOiBbXSxcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGlkOiAnbm9ybWFsLXNsaWRlJyxcbiAgICAgICAgICAgIHRpdGxlOiAnTm9ybWFsIFNsaWRlJyxcbiAgICAgICAgICAgIGNvbnRlbnQ6ICdTb21lIGNvbnRlbnQnLFxuICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIG1ldGFkYXRhOiB7XG4gICAgICAgICAgdGl0bGU6ICdFbXB0eSBTbGlkZSBUZXN0JyxcbiAgICAgICAgICBhdXRob3I6ICdUZXN0IFVzZXInLFxuICAgICAgICAgIHRvdGFsU2xpZGVzOiAyLFxuICAgICAgICB9LFxuICAgICAgfSk7XG5cbiAgICAgIGNvbnN0IG1vY2tGaWxlID0gbmV3IEZpbGUoWydkdW1teSBjb250ZW50J10sICd0ZXN0LnBwdHgnLCB7XG4gICAgICAgIHR5cGU6ICdhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQucHJlc2VudGF0aW9ubWwucHJlc2VudGF0aW9uJyxcbiAgICAgIH0pO1xuICAgICAgY29uc3QgZm9ybURhdGEgPSBuZXcgRm9ybURhdGEoKTtcbiAgICAgIGZvcm1EYXRhLmFwcGVuZCgnZmlsZScsIG1vY2tGaWxlKTtcblxuICAgICAgY29uc3QgbW9ja1JlcSA9IHtcbiAgICAgICAgZm9ybURhdGE6IGplc3QuZm4oKS5tb2NrUmVzb2x2ZWRWYWx1ZShmb3JtRGF0YSksXG4gICAgICB9IGFzIHVua25vd24gYXMgTmV4dFJlcXVlc3Q7XG5cbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgUE9TVChtb2NrUmVxKTtcbiAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG5cbiAgICAgIGV4cGVjdChkYXRhLnN1Y2Nlc3MpLnRvQmUodHJ1ZSk7XG4gICAgICBleHBlY3QoZGF0YS5zbGlkZXMpLnRvSGF2ZUxlbmd0aCgyKTtcbiAgICAgIGV4cGVjdChkYXRhLnNsaWRlc1swXS50aXRsZSkudG9CZSgnJyk7XG4gICAgICBleHBlY3QoZGF0YS5zbGlkZXNbMF0uY29udGVudCkudG9CZSgnJyk7XG4gICAgICBleHBlY3QoZGF0YS5zbGlkZXNbMV0udGl0bGUpLnRvQmUoJ05vcm1hbCBTbGlkZScpO1xuICAgIH0pO1xuXG4gICAgaXQoJ+eJueauiuaWh+Wtl+OCkuWQq+OCgOOCueODqeOCpOODieOCkuWHpueQhuOBmeOCiycsIGFzeW5jICgpID0+IHtcbiAgICAgIC8vIFBQVFjjg5Hjg7zjgrXjg7zjga7jg6Ljg4Pjgq/jgpLkuIDmmYLnmoTjgavlpInmm7RcbiAgICAgIGNvbnN0IFBQVFhQYXJzZXJNb2R1bGUgPSByZXF1aXJlKCdAL2xpYi9wcHR4L3BhcnNlcicpO1xuICAgICAgKFBQVFhQYXJzZXJNb2R1bGUuUFBUWFBhcnNlci5nZXRJbnN0YW5jZSgpLnBhcnNlUFBUWCBhcyBqZXN0Lk1vY2spLm1vY2tSZXNvbHZlZFZhbHVlT25jZSh7XG4gICAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICAgIHNsaWRlczogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIGlkOiAnc3BlY2lhbC1jaGFycycsXG4gICAgICAgICAgICB0aXRsZTogJ+eJueauiuaWh+Wtl+ODhuOCueODiDog4pGg44ix4pmq44CB8J+Oiee1teaWh+Wtl+OCgu+8gScsXG4gICAgICAgICAgICBjb250ZW50OiAn5pS56KGMXFxu44K/44OWXFx054m55q6K5paH5a2XwqnCricsXG4gICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgICAgbWV0YWRhdGE6IHtcbiAgICAgICAgICB0aXRsZTogJ+eJueauiuaWh+Wtl+ODhuOCueODiCcsXG4gICAgICAgICAgYXV0aG9yOiAn44OG44K544OI44Om44O844K244O8JyxcbiAgICAgICAgICB0b3RhbFNsaWRlczogMSxcbiAgICAgICAgfSxcbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCBtb2NrRmlsZSA9IG5ldyBGaWxlKFsnZHVtbXkgY29udGVudCddLCAndGVzdC5wcHR4Jywge1xuICAgICAgICB0eXBlOiAnYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LnByZXNlbnRhdGlvbm1sLnByZXNlbnRhdGlvbicsXG4gICAgICB9KTtcbiAgICAgIGNvbnN0IGZvcm1EYXRhID0gbmV3IEZvcm1EYXRhKCk7XG4gICAgICBmb3JtRGF0YS5hcHBlbmQoJ2ZpbGUnLCBtb2NrRmlsZSk7XG5cbiAgICAgIGNvbnN0IG1vY2tSZXEgPSB7XG4gICAgICAgIGZvcm1EYXRhOiBqZXN0LmZuKCkubW9ja1Jlc29sdmVkVmFsdWUoZm9ybURhdGEpLFxuICAgICAgfSBhcyB1bmtub3duIGFzIE5leHRSZXF1ZXN0O1xuXG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IFBPU1QobW9ja1JlcSk7XG4gICAgICBjb25zdCBkYXRhID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuXG4gICAgICBleHBlY3QoZGF0YS5zdWNjZXNzKS50b0JlKHRydWUpO1xuICAgICAgZXhwZWN0KGRhdGEuc2xpZGVzKS50b0hhdmVMZW5ndGgoMSk7XG4gICAgICBleHBlY3QoZGF0YS5zbGlkZXNbMF0udGl0bGUpLnRvQmUoJ+eJueauiuaWh+Wtl+ODhuOCueODiDog4pGg44ix4pmq44CB8J+Oiee1teaWh+Wtl+OCgu+8gScpO1xuICAgICAgZXhwZWN0KGRhdGEuc2xpZGVzWzBdLmNvbnRlbnQpLnRvQmUoJ+aUueihjFxcbuOCv+ODllxcdOeJueauiuaWh+Wtl8Kpwq4nKTtcbiAgICB9KTtcbiAgICBcbiAgICBpdCgn44OV44Kh44Kk44Or44K144Kk44K644GM5aSn44GN44GZ44GO44KL5aC05ZCI44GvNDAw44Ko44Op44O844KS6L+U44GZJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgbGFyZ2VGaWxlID0gbmV3IEZpbGUoWyd4Jy5yZXBlYXQoMjEgKiAxMDI0ICogMTAyNCldLCAnbGFyZ2UucHB0eCcsIHtcbiAgICAgICAgdHlwZTogJ2FwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5wcmVzZW50YXRpb25tbC5wcmVzZW50YXRpb24nXG4gICAgICB9KTtcbiAgICAgIGNvbnN0IGZvcm1EYXRhID0gbmV3IEZvcm1EYXRhKCk7XG4gICAgICBmb3JtRGF0YS5hcHBlbmQoJ2ZpbGUnLCBsYXJnZUZpbGUpO1xuXG4gICAgICBjb25zdCByZXEgPSBuZXcgUmVxdWVzdCgnaHR0cDovL2xvY2FsaG9zdDozMDAwL2FwaS9wcHR4L3BhcnNlJywge1xuICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgYm9keTogZm9ybURhdGFcbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IFBPU1QocmVxIGFzIHVua25vd24gYXMgTmV4dFJlcXVlc3QpO1xuICAgICAgZXhwZWN0KHJlc3BvbnNlLnN0YXR1cykudG9CZSg0MDApO1xuXG4gICAgICBjb25zdCBkYXRhID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuICAgICAgZXhwZWN0KGRhdGEuc3VjY2VzcykudG9CZShmYWxzZSk7XG4gICAgICBleHBlY3QoZGF0YS5lcnJvcikudG9CZSgn44OV44Kh44Kk44Or44K144Kk44K644GvMjBNQuS7peS4i+OBq+OBl+OBpuOBj+OBoOOBleOBhCcpO1xuICAgIH0pO1xuXG4gICAgaXQoJ+ODkeODvOOCueWHpueQhuOBp+OCqOODqeODvOOBjOeZuueUn+OBl+OBn+WgtOWQiOOBrzUwMOOCqOODqeODvOOCkui/lOOBmScsIGFzeW5jICgpID0+IHtcbiAgICAgIC8vIFBQVFhQYXJzZXLjga7jg6Ljg4Pjgq/jgpLjgqjjg6njg7zjgpLmipXjgZLjgovjgojjgYbjgavoqK3lrppcbiAgICAgIGNvbnN0IFBQVFhQYXJzZXJNb2R1bGUgPSByZXF1aXJlKCdAL2xpYi9wcHR4L3BhcnNlcicpO1xuICAgICAgKFBQVFhQYXJzZXJNb2R1bGUuUFBUWFBhcnNlci5nZXRJbnN0YW5jZSBhcyBqZXN0Lk1vY2spLm1vY2tSZXR1cm5WYWx1ZSh7XG4gICAgICAgIHBhcnNlUFBUWDogamVzdC5mbigpLm1vY2tSZWplY3RlZFZhbHVlKG5ldyBFcnJvcign44OR44O844K544Ko44Op44O8JykpXG4gICAgICB9KTtcblxuICAgICAgY29uc3QgZmlsZSA9IG5ldyBGaWxlKFsndGVzdCBjb250ZW50J10sICd0ZXN0LnBwdHgnLCB7XG4gICAgICAgIHR5cGU6ICdhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQucHJlc2VudGF0aW9ubWwucHJlc2VudGF0aW9uJ1xuICAgICAgfSk7XG4gICAgICBjb25zdCBmb3JtRGF0YSA9IG5ldyBGb3JtRGF0YSgpO1xuICAgICAgZm9ybURhdGEuYXBwZW5kKCdmaWxlJywgZmlsZSk7XG5cbiAgICAgIGNvbnN0IHJlcSA9IG5ldyBSZXF1ZXN0KCdodHRwOi8vbG9jYWxob3N0OjMwMDAvYXBpL3BwdHgvcGFyc2UnLCB7XG4gICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICBib2R5OiBmb3JtRGF0YVxuICAgICAgfSk7XG5cbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgUE9TVChyZXEgYXMgdW5rbm93biBhcyBOZXh0UmVxdWVzdCk7XG4gICAgICBleHBlY3QocmVzcG9uc2Uuc3RhdHVzKS50b0JlKDUwMCk7XG5cbiAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG4gICAgICBleHBlY3QoZGF0YS5zdWNjZXNzKS50b0JlKGZhbHNlKTtcbiAgICAgIGV4cGVjdChkYXRhLmVycm9yKS50b0JlKCfjg5Hjg7zjgrnjgqjjg6njg7wnKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ0dFVCAvYXBpL3BwdHgvcGFyc2UnLCAoKSA9PiB7XG4gICAgaXQoJ0dFVOODquOCr+OCqOOCueODiOOBrzQwNeOCqOODqeODvOOCkui/lOOBmScsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHJlcSA9IG5ldyBSZXF1ZXN0KCdodHRwOi8vbG9jYWxob3N0OjMwMDAvYXBpL3BwdHgvcGFyc2UnLCB7XG4gICAgICAgIG1ldGhvZDogJ0dFVCdcbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IEdFVChyZXEgYXMgdW5rbm93biBhcyBOZXh0UmVxdWVzdCk7XG4gICAgICBleHBlY3QocmVzcG9uc2Uuc3RhdHVzKS50b0JlKDQwNSk7XG5cbiAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG4gICAgICBleHBlY3QoZGF0YS5zdWNjZXNzKS50b0JlKGZhbHNlKTtcbiAgICAgIGV4cGVjdChkYXRhLmVycm9yKS50b0JlKCfjg6Hjgr3jg4Pjg4njgYzoqLHlj6/jgZXjgozjgabjgYTjgb7jgZvjgpMnKTtcbiAgICB9KTtcbiAgICBcbiAgICBpdCgn44OY44Or44K544OB44Kn44OD44Kv44Ko44Oz44OJ44Od44Kk44Oz44OI44GM5q2j5bi444Gr5b+c562U44GZ44KLJywgYXN5bmMgKCkgPT4ge1xuICAgICAgLy8gQVBJ44OP44Oz44OJ44Op44KS5ZG844Gz5Ye644GZXG4gICAgICBjb25zdCBtb2NrUmVxID0ge1xuICAgICAgICB1cmw6ICdodHRwOi8vbG9jYWxob3N0OjMwMDAvYXBpL3BwdHgvcGFyc2UvaGVhbHRoJ1xuICAgICAgfSBhcyB1bmtub3duIGFzIE5leHRSZXF1ZXN0O1xuICAgICAgXG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IEdFVChtb2NrUmVxKTtcbiAgICAgIGV4cGVjdChyZXNwb25zZS5zdGF0dXMpLnRvQmUoMjAwKTtcbiAgICAgIFxuICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcbiAgICAgIGV4cGVjdChkYXRhLnN1Y2Nlc3MpLnRvQmUodHJ1ZSk7XG4gICAgICBleHBlY3QoZGF0YS5tZXNzYWdlKS50b0JlKCdQUFRY44OR44O844K144O8QVBJ44Gv5q2j5bi444Gr5YuV5L2c44GX44Gm44GE44G+44GZJyk7XG4gICAgfSk7XG4gIH0pO1xufSk7XG4iXSwibmFtZXMiOlsiamVzdCIsIm1vY2siLCJQUFRYUGFyc2VyIiwiZ2V0SW5zdGFuY2UiLCJmbiIsIm1vY2tSZXR1cm5WYWx1ZSIsInBhcnNlUFBUWCIsIm1vY2tSZXNvbHZlZFZhbHVlIiwic3VjY2VzcyIsInNsaWRlcyIsImlkIiwidGl0bGUiLCJjb250ZW50IiwibWV0YWRhdGEiLCJhdXRob3IiLCJ0b3RhbFNsaWRlcyIsImF1dGgiLCJ1c2VyIiwiZW1haWwiLCJta2RpciIsInVuZGVmaW5lZCIsIndyaXRlRmlsZSIsInJlYWRkaXIiLCJ1bmxpbmsiLCJybSIsInY0IiwibW9ja0pzb25SZXNwb25zZSIsImRhdGEiLCJzdGF0dXMiLCJqc29uIiwiUHJvbWlzZSIsInJlc29sdmUiLCJQT1NUIiwibW9ja0ltcGxlbWVudGF0aW9uIiwicmVxIiwiZm9ybURhdGEiLCJmaWxlIiwiZ2V0IiwiZXJyb3IiLCJ0eXBlIiwiZmlsZUlkIiwiR0VUIiwibWVzc2FnZSIsImRlc2NyaWJlIiwiYmVmb3JlRWFjaCIsImNsZWFyQWxsTW9ja3MiLCJhdXRoTW9kdWxlIiwicmVxdWlyZSIsIlBQVFhQYXJzZXJNb2R1bGUiLCJpbmRleCIsInRleHRzIiwidGV4dCIsImZzTW9kdWxlIiwicGF0aCIsImpvaW4iLCJhcmdzIiwiaXQiLCJtb2NrUmVzb2x2ZWRWYWx1ZU9uY2UiLCJtb2NrRmlsZSIsIkZpbGUiLCJGb3JtRGF0YSIsImFwcGVuZCIsIm1vY2tSZXEiLCJyZXNwb25zZSIsImV4cGVjdCIsInRvQmUiLCJyZXBlYXQiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsInZhbHVlIiwibW9ja1JlamVjdGVkVmFsdWVPbmNlIiwiRXJyb3IiLCJ0b0hhdmVCZWVuQ2FsbGVkIiwidG9IYXZlQmVlbkNhbGxlZFdpdGgiLCJzdHJpbmdDb250YWluaW5nIiwicmVjdXJzaXZlIiwiUmVxdWVzdCIsIm1ldGhvZCIsImJvZHkiLCJ0b0hhdmVMZW5ndGgiLCJ0b0VxdWFsIiwidG9IYXZlUHJvcGVydHkiLCJBcnJheSIsImlzQXJyYXkiLCJmb3JFYWNoIiwic2xpZGUiLCJsYXJnZUZpbGUiLCJtb2NrUmVqZWN0ZWRWYWx1ZSIsInVybCJdLCJtYXBwaW5ncyI6IjtBQVNBLGVBQWU7QUFDZkEsS0FBS0MsSUFBSSxDQUFDLHFCQUFxQixJQUFPLENBQUE7UUFDcENDLFlBQVk7WUFDVkMsYUFBYUgsS0FBS0ksRUFBRSxHQUFHQyxlQUFlLENBQUM7Z0JBQ3JDQyxXQUFXTixLQUFLSSxFQUFFLEdBQUdHLGlCQUFpQixDQUFDO29CQUNyQ0MsU0FBUztvQkFDVEMsUUFBUTt3QkFDTjs0QkFDRUMsSUFBSTs0QkFDSkMsT0FBTzs0QkFDUEMsU0FBUzt3QkFDWDt3QkFDQTs0QkFDRUYsSUFBSTs0QkFDSkMsT0FBTzs0QkFDUEMsU0FBUzt3QkFDWDtxQkFDRDtvQkFDREMsVUFBVTt3QkFDUkYsT0FBTzt3QkFDUEcsUUFBUTt3QkFDUkMsYUFBYTtvQkFDZjtnQkFDRjtZQUNGO1FBQ0Y7SUFDRixDQUFBO0FBRUEsU0FBUztBQUNUZixLQUFLQyxJQUFJLENBQUMsbUJBQW1CLElBQU8sQ0FBQTtRQUNsQ2UsTUFBTWhCLEtBQUtJLEVBQUUsR0FBR0csaUJBQWlCLENBQUM7WUFDaENVLE1BQU07Z0JBQ0pQLElBQUk7Z0JBQ0pRLE9BQU87WUFDVDtRQUNGO0lBQ0YsQ0FBQTtBQUVBLGtCQUFrQjtBQUNsQmxCLEtBQUtDLElBQUksQ0FBQyxlQUFlLElBQU8sQ0FBQTtRQUM5QmtCLE9BQU9uQixLQUFLSSxF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