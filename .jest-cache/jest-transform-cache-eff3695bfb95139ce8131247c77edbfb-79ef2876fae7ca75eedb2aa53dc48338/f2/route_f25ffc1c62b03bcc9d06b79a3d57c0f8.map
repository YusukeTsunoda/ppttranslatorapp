{"version":3,"sources":["/Users/yusuketsunoda/Documents/cursor/ppttranslatorapp/worktrees/cicd-setup/app/api/upload/route.ts"],"sourcesContent":["// Node.jsランタイムを明示的に指定\n// ファイルシステム操作とchild_processを含むため、Edge Runtimeでは動作しません\nexport const runtime = 'nodejs';\n\nimport { NextRequest, NextResponse } from 'next/server';\nimport { writeFile } from 'fs/promises';\nimport { join } from 'path';\nimport { getServerSession } from 'next-auth';\nimport { authOptions } from '@/lib/auth/auth-options';\nimport { existsSync, readdirSync } from 'fs';\nimport {\n  generateFileId,\n  createUserDirectories,\n  cleanupOldFiles,\n  filePathManager,\n  logFileOperation,\n} from '@/lib/utils/file-utils';\n// JavaScriptのパーサーを削除\n// import { parsePptx } from '@/lib/utils/pptx-parser';\n// Pythonのパーサーを使用\nimport { PPTXParser } from '@/lib/pptx/parser';\nimport { getToken } from 'next-auth/jwt';\nimport { parseForm, uploadFilesToUserDir, processFiles } from '@/lib/utils/upload-helpers';\nimport { PrismaClient } from '@prisma/client';\nimport { withAPILogging } from '@/lib/utils/api-logging';\n\n// ファイルサイズ制限\nconst MAX_FILE_SIZE = 20 * 1024 * 1024; // 20MB\n\n// 許可するファイルタイプ\nconst ALLOWED_MIME_TYPES = ['application/vnd.openxmlformats-officedocument.presentationml.presentation'];\n\n// Prismaクライアントの初期化\nconst prisma = new PrismaClient();\n\n// アップロードハンドラ\nasync function uploadHandler(req: NextRequest) {\n  try {\n    // ユーザー認証\n    const token = await getToken({ req, secret: process.env.NEXTAUTH_SECRET });\n    if (!token || !token.sub) {\n      return NextResponse.json(\n        { error: '認証が必要です' },\n        { status: 401 }\n      );\n    }\n\n    // formidableでファイルをパース\n    const userId = token.sub;\n    const [fields, files] = await uploadFilesToUserDir(req as any, userId);\n    \n    // アップロードされたファイルの情報を取得\n    const uploadedFiles = processFiles(files);\n    \n    if (uploadedFiles.length === 0) {\n      return NextResponse.json(\n        { error: 'ファイルがアップロードされていません' },\n        { status: 400 }\n      );\n    }\n\n    // ファイル情報をデータベースに保存\n    const savedFiles = await Promise.all(\n      uploadedFiles.map(file => \n        prisma.file.create({\n          data: {\n            id: file.hash || crypto.randomUUID(),\n            userId,\n            originalName: file.originalFilename,\n            storagePath: file.filepath,\n            fileSize: file.size,\n            mimeType: file.mimetype,\n            updatedAt: new Date(),\n          }\n        })\n      )\n    );\n\n    // アクティビティログに記録\n    await prisma.activityLog.create({\n      data: {\n        userId,\n        type: 'FILE_UPLOAD',\n        description: `${uploadedFiles.length}個のファイルをアップロードしました`,\n        metadata: {\n          fileCount: uploadedFiles.length,\n          fileIds: savedFiles.map(f => f.id),\n        }\n      }\n    });\n\n    return NextResponse.json({\n      success: true,\n      files: savedFiles.map(file => ({\n        id: file.id,\n        originalName: file.originalName,\n        size: file.fileSize,\n        mimeType: file.mimeType,\n        createdAt: file.createdAt,\n      }))\n    });\n  } catch (error) {\n    console.error('ファイルアップロードエラー:', error);\n    return NextResponse.json(\n      { error: 'ファイルアップロード中にエラーが発生しました' },\n      { status: 500 }\n    );\n  }\n}\n\n// formidableのAPIは通常のリクエスト形式でのみ動作します\nexport const POST = withAPILogging(uploadHandler, 'file-upload');\n"],"names":["POST","runtime","MAX_FILE_SIZE","ALLOWED_MIME_TYPES","prisma","PrismaClient","uploadHandler","req","token","getToken","secret","process","env","NEXTAUTH_SECRET","sub","NextResponse","json","error","status","userId","fields","files","uploadFilesToUserDir","uploadedFiles","processFiles","length","savedFiles","Promise","all","map","file","create","data","id","hash","crypto","randomUUID","originalName","originalFilename","storagePath","filepath","fileSize","size","mimeType","mimetype","updatedAt","Date","activityLog","type","description","metadata","fileCount","fileIds","f","success","createdAt","console","withAPILogging"],"mappings":"AAAA,sBAAsB;AACtB,qDAAqD;;;;;;;;;;;;IA8GxCA,IAAI;eAAJA;;IA7GAC,OAAO;eAAPA;;;wBAE6B;qBAiBjB;+BACqC;wBACjC;4BACE;AAtBxB,MAAMA,UAAU;AAwBvB,YAAY;AACZ,MAAMC,gBAAgB,KAAK,OAAO,MAAM,OAAO;AAE/C,cAAc;AACd,MAAMC,qBAAqB;IAAC;CAA4E;AAExG,mBAAmB;AACnB,MAAMC,SAAS,IAAIC,oBAAY;AAE/B,aAAa;AACb,eAAeC,cAAcC,GAAgB;IAC3C,IAAI;QACF,SAAS;QACT,MAAMC,QAAQ,MAAMC,IAAAA,aAAQ,EAAC;YAAEF;YAAKG,QAAQC,QAAQC,GAAG,CAACC,eAAe;QAAC;QACxE,IAAI,CAACL,SAAS,CAACA,MAAMM,GAAG,EAAE;YACxB,OAAOC,oBAAY,CAACC,IAAI,CACtB;gBAAEC,OAAO;YAAU,GACnB;gBAAEC,QAAQ;YAAI;QAElB;QAEA,sBAAsB;QACtB,MAAMC,SAASX,MAAMM,GAAG;QACxB,MAAM,CAACM,QAAQC,MAAM,GAAG,MAAMC,IAAAA,mCAAoB,EAACf,KAAYY;QAE/D,sBAAsB;QACtB,MAAMI,gBAAgBC,IAAAA,2BAAY,EAACH;QAEnC,IAAIE,cAAcE,MAAM,KAAK,GAAG;YAC9B,OAAOV,oBAAY,CAACC,IAAI,CACtB;gBAAEC,OAAO;YAAqB,GAC9B;gBAAEC,QAAQ;YAAI;QAElB;QAEA,mBAAmB;QACnB,MAAMQ,aAAa,MAAMC,QAAQC,GAAG,CAClCL,cAAcM,GAAG,CAACC,CAAAA,OAChB1B,OAAO0B,IAAI,CAACC,MAAM,CAAC;gBACjBC,MAAM;oBACJC,IAAIH,KAAKI,IAAI,IAAIC,OAAOC,UAAU;oBAClCjB;oBACAkB,cAAcP,KAAKQ,gBAAgB;oBACnCC,aAAaT,KAAKU,QAAQ;oBAC1BC,UAAUX,KAAKY,IAAI;oBACnBC,UAAUb,KAAKc,QAAQ;oBACvBC,WAAW,IAAIC;gBACjB;YACF;QAIJ,eAAe;QACf,MAAM1C,OAAO2C,WAAW,CAAChB,MAAM,CAAC;YAC9BC,MAAM;gBACJb;gBACA6B,MAAM;gBACNC,aAAa,GAAG1B,cAAcE,MAAM,CAAC,iBAAiB,CAAC;gBACvDyB,UAAU;oBACRC,WAAW5B,cAAcE,MAAM;oBAC/B2B,SAAS1B,WAAWG,GAAG,CAACwB,CAAAA,IAAKA,EAAEpB,EAAE;gBACnC;YACF;QACF;QAEA,OAAOlB,oBAAY,CAACC,IAAI,CAAC;YACvBsC,SAAS;YACTjC,OAAOK,WAAWG,GAAG,CAACC,CAAAA,OAAS,CAAA;oBAC7BG,IAAIH,KAAKG,EAAE;oBACXI,cAAcP,KAAKO,YAAY;oBAC/BK,MAAMZ,KAAKW,QAAQ;oBACnBE,UAAUb,KAAKa,QAAQ;oBACvBY,WAAWzB,KAAKyB,SAAS;gBAC3B,CAAA;QACF;IACF,EAAE,OAAOtC,OAAO;QACduC,QAAQvC,KAAK,CAAC,kBAAkBA;QAChC,OAAOF,oBAAY,CAACC,IAAI,CACtB;YAAEC,OAAO;QAAyB,GAClC;YAAEC,QAAQ;QAAI;IAElB;AACF;AAGO,MAAMlB,OAAOyD,IAAAA,0BAAc,EAACnD,eAAe"}