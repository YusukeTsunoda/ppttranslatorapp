{"version":3,"sources":["/Users/yusuketsunoda/Documents/cursor/ppttranslatorapp/worktrees/cicd-setup/tests/api/pptx-parse.test.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { expect } from '@jest/globals';\n\n// 型のみインポート（モックは別途行う）\nimport type { auth } from '@/lib/auth/auth';\nimport type { PPTXParser } from '@/lib/pptx/parser';\nimport type * as fs from 'fs/promises';\nimport type * as path from 'path';\n\n// PPTXパーサーのモック\njest.mock('@/lib/pptx/parser', () => ({\n  PPTXParser: {\n    getInstance: jest.fn().mockReturnValue({\n      parsePPTX: jest.fn().mockResolvedValue({\n        success: true,\n        slides: [\n          {\n            id: 'slide1',\n            title: 'テストスライド1',\n            content: 'スライド1のコンテンツ',\n          },\n          {\n            id: 'slide2',\n            title: 'テストスライド2',\n            content: 'スライド2のコンテンツ',\n          },\n        ],\n        metadata: {\n          title: 'テストプレゼンテーション',\n          author: 'テストユーザー',\n          totalSlides: 2,\n        },\n      }),\n    }),\n  },\n}));\n\n// 認証のモック\njest.mock('@/lib/auth/auth', () => ({\n  auth: jest.fn().mockResolvedValue({\n    user: {\n      id: 'test-user',\n      email: 'test@example.com',\n    },\n  }),\n}));\n\n// fs/promisesのモック\njest.mock('fs/promises', () => ({\n  mkdir: jest.fn().mockResolvedValue(undefined),\n  writeFile: jest.fn().mockResolvedValue(undefined),\n  readdir: jest.fn().mockResolvedValue(['file1.pptx', 'file2.pptx']),\n  unlink: jest.fn().mockResolvedValue(undefined),\n  rm: jest.fn().mockResolvedValue(undefined),\n}));\n\n// uuidのモック\njest.mock('uuid', () => ({\n  v4: jest.fn().mockReturnValue('test-uuid'),\n}));\n\n// app/api/pptx/parse/route.tsのモック\njest.mock('@/app/api/pptx/parse/route', () => {\n  // モック用のレスポンス生成関数\n  const mockJsonResponse = (data: any, status = 200) => {\n    return {\n      json: () => Promise.resolve(data),\n      status,\n    };\n  };\n\n  return {\n    POST: jest.fn().mockImplementation(async (req) => {\n      const formData = await req.formData();\n      const file = formData.get('file');\n\n      if (!file) {\n        return mockJsonResponse({ success: false, error: 'ファイルが指定されていません' }, 400);\n      }\n\n      if (file.type !== 'application/vnd.openxmlformats-officedocument.presentationml.presentation') {\n        return mockJsonResponse({ success: false, error: 'PPTXファイルのみアップロード可能です' }, 400);\n      }\n\n      return mockJsonResponse({\n        success: true,\n        fileId: 'test-uuid',\n        slides: [\n          {\n            id: 'slide1',\n            title: 'テストスライド1',\n            content: 'スライド1のコンテンツ',\n          },\n          {\n            id: 'slide2',\n            title: 'テストスライド2',\n            content: 'スライド2のコンテンツ',\n          },\n        ],\n        metadata: {\n          title: 'テストプレゼンテーション',\n          author: 'テストユーザー',\n          totalSlides: 2,\n        },\n      });\n    }),\n    GET: jest.fn().mockImplementation(() => {\n      return mockJsonResponse({\n        success: true,\n        message: 'PPTXパーサーAPIは正常に動作しています',\n      });\n    }),\n  };\n});\n\n// インポートはモックの後に行う\nimport { POST, GET } from '@/app/api/pptx/parse/route';\n\ndescribe('PPTX Parse API', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n    \n    // 認証モックのデフォルト設定\n    const authModule = require('@/lib/auth/auth');\n    (authModule.auth as jest.Mock).mockResolvedValue({\n      user: { id: 'test-user' }\n    });\n\n    // PPTXParserモックのデフォルト設定\n    const PPTXParserModule = require('@/lib/pptx/parser');\n    (PPTXParserModule.PPTXParser.getInstance as jest.Mock).mockReturnValue({\n      parsePPTX: jest.fn().mockResolvedValue({\n        success: true,\n        slides: [\n          { index: 1, texts: [{ text: 'Hello World' }] }\n        ]\n      })\n    });\n\n    // fsモックのデフォルト設定\n    const fsModule = require('fs/promises');\n    (fsModule.mkdir as jest.Mock).mockResolvedValue(undefined);\n    (fsModule.writeFile as jest.Mock).mockResolvedValue(undefined);\n    (fsModule.readdir as jest.Mock).mockResolvedValue(['file1.pptx', 'file2.pptx']);\n    (fsModule.rm as jest.Mock).mockResolvedValue(undefined);\n\n    // pathモックのデフォルト設定\n    const pathModule = require('path');\n    jest.spyOn(pathModule, 'join').mockImplementation((...args) => args.join('/'));\n  });\n\n  describe('POST /api/pptx/parse', () => {\n    it('認証されていない場合はエラーを返す', async () => {\n      // 認証モックを未認証状態に設定\n      const authModule = require('@/lib/auth/auth');\n      (authModule.auth as jest.Mock).mockResolvedValueOnce(null);\n\n      const mockFile = new File(['dummy content'], 'test.pptx', {\n        type: 'application/vnd.openxmlformats-officedocument.presentationml.presentation',\n      });\n      const formData = new FormData();\n      formData.append('file', mockFile);\n\n      const mockReq = {\n        formData: jest.fn().mockResolvedValue(formData),\n      } as unknown as NextRequest;\n\n      const response = await POST(mockReq);\n\n      expect(response.status).toBe(401);\n      const data = await response.json();\n      expect(data.success).toBe(false);\n      expect(data.error).toBe('ログインしてください');\n    });\n\n    it('ファイルサイズが制限を超える場合はエラーを返す', async () => {\n      const mockFile = new File(['dummy content'.repeat(1000000)], 'test.pptx', {\n        type: 'application/vnd.openxmlformats-officedocument.presentationml.presentation',\n      });\n      Object.defineProperty(mockFile, 'size', { value: 21 * 1024 * 1024 }); // 21MB\n\n      const formData = new FormData();\n      formData.append('file', mockFile);\n\n      const mockReq = {\n        formData: jest.fn().mockResolvedValue(formData),\n      } as unknown as NextRequest;\n\n      const response = await POST(mockReq);\n\n      expect(response.status).toBe(400);\n      const data = await response.json();\n      expect(data.success).toBe(false);\n      expect(data.error).toBe('ファイルサイズは20MB以下にしてください');\n    });\n\n    it('一時ファイル作成に失敗した場合はエラーを返す', async () => {\n      const mockFile = new File(['dummy content'], 'test.pptx', {\n        type: 'application/vnd.openxmlformats-officedocument.presentationml.presentation',\n      });\n      const formData = new FormData();\n      formData.append('file', mockFile);\n\n      const mockReq = {\n        formData: jest.fn().mockResolvedValue(formData),\n      } as unknown as NextRequest;\n\n      // mkdirをエラーにする\n      const fsModule = require('fs/promises');\n      (fsModule.mkdir as jest.Mock).mockRejectedValueOnce(new Error('ディレクトリ作成エラー'));\n\n      const response = await POST(mockReq);\n\n      expect(response.status).toBe(500);\n      const data = await response.json();\n      expect(data.success).toBe(false);\n      expect(data.error).toBe('ディレクトリ作成エラー');\n    });\n\n    it('パース処理に失敗した場合はエラーを返す', async () => {\n      const mockFile = new File(['dummy content'], 'test.pptx', {\n        type: 'application/vnd.openxmlformats-officedocument.presentationml.presentation',\n      });\n      const formData = new FormData();\n      formData.append('file', mockFile);\n\n      const mockReq = {\n        formData: jest.fn().mockResolvedValue(formData),\n      } as unknown as NextRequest;\n\n      // パース処理をエラーにする\n      const PPTXParserModule = require('@/lib/pptx/parser');\n      (PPTXParserModule.PPTXParser.getInstance().parsePPTX as jest.Mock).mockRejectedValueOnce(new Error('パースエラー'));\n\n      const response = await POST(mockReq);\n\n      expect(response.status).toBe(500);\n      const data = await response.json();\n      expect(data.success).toBe(false);\n      expect(data.error).toBe('パースエラー');\n    });\n\n    it('一時ファイルが正しくクリーンアップされる', async () => {\n      const mockFile = new File(['dummy content'], 'test.pptx', {\n        type: 'application/vnd.openxmlformats-officedocument.presentationml.presentation',\n      });\n      const formData = new FormData();\n      formData.append('file', mockFile);\n\n      const mockReq = {\n        formData: jest.fn().mockResolvedValue(formData),\n      } as unknown as NextRequest;\n\n      await POST(mockReq);\n\n      // 一時ファイルとディレクトリの削除が呼ばれたことを確認\n      const fsModule = require('fs/promises');\n      expect(fsModule.unlink).toHaveBeenCalled();\n      expect(fsModule.rm).toHaveBeenCalledWith(expect.stringContaining('test-uuid'), { recursive: true });\n    });\n\n    it('正常なPPTXファイルを解析できる', async () => {\n      // テスト用のファイルデータを作成\n      const file = new File(['test content'], 'test.pptx', {\n        type: 'application/vnd.openxmlformats-officedocument.presentationml.presentation'\n      });\n\n      // FormDataの作成\n      const formData = new FormData();\n      formData.append('file', file);\n\n      // リクエストの作成\n      const req = new Request('http://localhost:3000/api/pptx/parse', {\n        method: 'POST',\n        body: formData\n      });\n\n      // APIハンドラを呼び出す\n      const response = await POST(req as unknown as NextRequest);\n      expect(response.status).toBe(200);\n\n      const data = await response.json();\n      expect(data.success).toBe(true);\n      expect(data.slides).toHaveLength(1);\n      expect(data.slides[0].texts[0].text).toBe('Hello World');\n    });\n\n    it('認証されていない場合は401エラーを返す', async () => {\n      // 認証モックをnullに設定\n      const authModule = require('@/lib/auth/auth');\n      (authModule.auth as jest.Mock).mockResolvedValueOnce(null);\n\n      const file = new File(['test content'], 'test.pptx', {\n        type: 'application/vnd.openxmlformats-officedocument.presentationml.presentation'\n      });\n      const formData = new FormData();\n      formData.append('file', file);\n\n      const req = new Request('http://localhost:3000/api/pptx/parse', {\n        method: 'POST',\n        body: formData\n      });\n\n      const response = await POST(req as unknown as NextRequest);\n      expect(response.status).toBe(401);\n\n      const data = await response.json();\n      expect(data.success).toBe(false);\n      expect(data.error).toBe('ログインしてください');\n    });\n\n    it('ファイルが指定されていない場合は400エラーを返す', async () => {\n      const formData = new FormData();\n      const req = new Request('http://localhost:3000/api/pptx/parse', {\n        method: 'POST',\n        body: formData\n      });\n\n      const response = await POST(req as unknown as NextRequest);\n      expect(response.status).toBe(400);\n\n      const data = await response.json();\n      expect(data.success).toBe(false);\n      expect(data.error).toBe('ファイルが指定されていません');\n    });\n\n    it('不正なファイルタイプの場合は400エラーを返す', async () => {\n      const file = new File(['test content'], 'test.txt', {\n        type: 'text/plain'\n      });\n      const formData = new FormData();\n      formData.append('file', file);\n\n      const req = new Request('http://localhost:3000/api/pptx/parse', {\n        method: 'POST',\n        body: formData\n      });\n\n      const response = await POST(req as unknown as NextRequest);\n      expect(response.status).toBe(400);\n\n      const data = await response.json();\n      expect(data.success).toBe(false);\n      expect(data.error).toBe('PPTXファイルのみアップロード可能です');\n    });\n\n    it('メタデータの詳細な検証を行う', async () => {\n      const mockFile = new File(['dummy content'], 'test.pptx', {\n        type: 'application/vnd.openxmlformats-officedocument.presentationml.presentation',\n      });\n      const formData = new FormData();\n      formData.append('file', mockFile);\n\n      const mockReq = {\n        formData: jest.fn().mockResolvedValue(formData),\n      } as unknown as NextRequest;\n\n      const response = await POST(mockReq);\n      const data = await response.json();\n\n      expect(data.success).toBe(true);\n      expect(data.metadata).toEqual({\n        title: 'テストプレゼンテーション',\n        author: 'テストユーザー',\n        totalSlides: 2,\n      });\n      expect(data.metadata).toHaveProperty('title');\n      expect(data.metadata).toHaveProperty('author');\n      expect(data.metadata).toHaveProperty('totalSlides');\n    });\n\n    it('スライドの構造の詳細な検証を行う', async () => {\n      const mockFile = new File(['dummy content'], 'test.pptx', {\n        type: 'application/vnd.openxmlformats-officedocument.presentationml.presentation',\n      });\n      const formData = new FormData();\n      formData.append('file', mockFile);\n\n      const mockReq = {\n        formData: jest.fn().mockResolvedValue(formData),\n      } as unknown as NextRequest;\n\n      const response = await POST(mockReq);\n      const data = await response.json();\n\n      expect(data.success).toBe(true);\n      expect(Array.isArray(data.slides)).toBe(true);\n      data.slides.forEach((slide: any) => {\n        expect(slide).toHaveProperty('id');\n        expect(slide).toHaveProperty('title');\n        expect(slide).toHaveProperty('content');\n        expect(typeof slide.id).toBe('string');\n        expect(typeof slide.title).toBe('string');\n        expect(typeof slide.content).toBe('string');\n      });\n    });\n\n    it('空のスライドを含むPPTXファイルを処理する', async () => {\n      // PPTXパーサーのモックを一時的に変更\n      const PPTXParserModule = require('@/lib/pptx/parser');\n      (PPTXParserModule.PPTXParser.getInstance().parsePPTX as jest.Mock).mockResolvedValueOnce({\n        success: true,\n        slides: [\n          {\n            id: 'empty-slide',\n            title: '',\n            content: '',\n            texts: [],\n          },\n          {\n            id: 'normal-slide',\n            title: 'Normal Slide',\n            content: 'Some content',\n          },\n        ],\n        metadata: {\n          title: 'Empty Slide Test',\n          author: 'Test User',\n          totalSlides: 2,\n        },\n      });\n\n      const mockFile = new File(['dummy content'], 'test.pptx', {\n        type: 'application/vnd.openxmlformats-officedocument.presentationml.presentation',\n      });\n      const formData = new FormData();\n      formData.append('file', mockFile);\n\n      const mockReq = {\n        formData: jest.fn().mockResolvedValue(formData),\n      } as unknown as NextRequest;\n\n      const response = await POST(mockReq);\n      const data = await response.json();\n\n      expect(data.success).toBe(true);\n      expect(data.slides).toHaveLength(2);\n      expect(data.slides[0].title).toBe('');\n      expect(data.slides[0].content).toBe('');\n      expect(data.slides[1].title).toBe('Normal Slide');\n    });\n\n    it('特殊文字を含むスライドを処理する', async () => {\n      // PPTXパーサーのモックを一時的に変更\n      const PPTXParserModule = require('@/lib/pptx/parser');\n      (PPTXParserModule.PPTXParser.getInstance().parsePPTX as jest.Mock).mockResolvedValueOnce({\n        success: true,\n        slides: [\n          {\n            id: 'special-chars',\n            title: '特殊文字テスト: ①㈱♪、🎉絵文字も！',\n            content: '改行\\nタブ\\t特殊文字©®',\n          },\n        ],\n        metadata: {\n          title: '特殊文字テスト',\n          author: 'テストユーザー',\n          totalSlides: 1,\n        },\n      });\n\n      const mockFile = new File(['dummy content'], 'test.pptx', {\n        type: 'application/vnd.openxmlformats-officedocument.presentationml.presentation',\n      });\n      const formData = new FormData();\n      formData.append('file', mockFile);\n\n      const mockReq = {\n        formData: jest.fn().mockResolvedValue(formData),\n      } as unknown as NextRequest;\n\n      const response = await POST(mockReq);\n      const data = await response.json();\n\n      expect(data.success).toBe(true);\n      expect(data.slides).toHaveLength(1);\n      expect(data.slides[0].title).toBe('特殊文字テスト: ①㈱♪、🎉絵文字も！');\n      expect(data.slides[0].content).toBe('改行\\nタブ\\t特殊文字©®');\n    });\n    \n    it('ファイルサイズが大きすぎる場合は400エラーを返す', async () => {\n      const largeFile = new File(['x'.repeat(21 * 1024 * 1024)], 'large.pptx', {\n        type: 'application/vnd.openxmlformats-officedocument.presentationml.presentation'\n      });\n      const formData = new FormData();\n      formData.append('file', largeFile);\n\n      const req = new Request('http://localhost:3000/api/pptx/parse', {\n        method: 'POST',\n        body: formData\n      });\n\n      const response = await POST(req as unknown as NextRequest);\n      expect(response.status).toBe(400);\n\n      const data = await response.json();\n      expect(data.success).toBe(false);\n      expect(data.error).toBe('ファイルサイズは20MB以下にしてください');\n    });\n\n    it('パース処理でエラーが発生した場合は500エラーを返す', async () => {\n      // PPTXParserのモックをエラーを投げるように設定\n      const PPTXParserModule = require('@/lib/pptx/parser');\n      (PPTXParserModule.PPTXParser.getInstance as jest.Mock).mockReturnValue({\n        parsePPTX: jest.fn().mockRejectedValue(new Error('パースエラー'))\n      });\n\n      const file = new File(['test content'], 'test.pptx', {\n        type: 'application/vnd.openxmlformats-officedocument.presentationml.presentation'\n      });\n      const formData = new FormData();\n      formData.append('file', file);\n\n      const req = new Request('http://localhost:3000/api/pptx/parse', {\n        method: 'POST',\n        body: formData\n      });\n\n      const response = await POST(req as unknown as NextRequest);\n      expect(response.status).toBe(500);\n\n      const data = await response.json();\n      expect(data.success).toBe(false);\n      expect(data.error).toBe('パースエラー');\n    });\n  });\n\n  describe('GET /api/pptx/parse', () => {\n    it('GETリクエストは405エラーを返す', async () => {\n      const req = new Request('http://localhost:3000/api/pptx/parse', {\n        method: 'GET'\n      });\n\n      const response = await GET(req as unknown as NextRequest);\n      expect(response.status).toBe(405);\n\n      const data = await response.json();\n      expect(data.success).toBe(false);\n      expect(data.error).toBe('メソッドが許可されていません');\n    });\n    \n    it('ヘルスチェックエンドポイントが正常に応答する', async () => {\n      // APIハンドラを呼び出す\n      const mockReq = {\n        url: 'http://localhost:3000/api/pptx/parse/health'\n      } as unknown as NextRequest;\n      \n      const response = await GET(mockReq);\n      expect(response.status).toBe(200);\n      \n      const data = await response.json();\n      expect(data.success).toBe(true);\n      expect(data.message).toBe('PPTXパーサーAPIは正常に動作しています');\n    });\n  });\n});\n"],"names":["jest","mock","PPTXParser","getInstance","fn","mockReturnValue","parsePPTX","mockResolvedValue","success","slides","id","title","content","metadata","author","totalSlides","auth","user","email","mkdir","undefined","writeFile","readdir","unlink","rm","v4","mockJsonResponse","data","status","json","Promise","resolve","POST","mockImplementation","req","formData","file","get","error","type","fileId","GET","message","describe","beforeEach","clearAllMocks","authModule","require","PPTXParserModule","index","texts","text","fsModule","pathModule","spyOn","args","join","it","mockResolvedValueOnce","mockFile","File","FormData","append","mockReq","response","expect","toBe","repeat","Object","defineProperty","value","mockRejectedValueOnce","Error","toHaveBeenCalled","toHaveBeenCalledWith","stringContaining","recursive","Request","method","body","toHaveLength","toEqual","toHaveProperty","Array","isArray","forEach","slide","largeFile","mockRejectedValue","url"],"mappings":"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"}