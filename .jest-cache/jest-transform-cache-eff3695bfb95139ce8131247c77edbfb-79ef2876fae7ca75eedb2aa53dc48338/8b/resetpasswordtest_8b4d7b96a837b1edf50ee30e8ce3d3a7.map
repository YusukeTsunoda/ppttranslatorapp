{"version":3,"sources":["/Users/yusuketsunoda/Documents/cursor/ppttranslatorapp/worktrees/cicd-setup/tests/api/auth/reset-password.test.ts"],"sourcesContent":["import { NextRequest } from 'next/server';\nimport { prisma } from '@/lib/db/prisma';\nimport { generateResetToken } from '@/lib/auth/token';\nimport { sendPasswordResetEmail } from '@/lib/email/send';\n\n// モック設定\njest.mock('@/lib/db/prisma', () => ({\n  prisma: {\n    user: {\n      findUnique: jest.fn(),\n      update: jest.fn(),\n    },\n  },\n}));\n\njest.mock('@/lib/auth/token', () => ({\n  generateResetToken: jest.fn(),\n}));\n\njest.mock('@/lib/email/send', () => ({\n  sendPasswordResetEmail: jest.fn(),\n}));\n\ndescribe('Password Reset API', () => {\n  const originalEnv = process.env;\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n    process.env = { ...originalEnv, RESEND_API_KEY: 'test-api-key' };\n  });\n\n  afterEach(() => {\n    process.env = originalEnv;\n  });\n\n  describe('POST /api/auth/reset-password', () => {\n    it('正常なパスワードリセットリクエストを処理できる', async () => {\n      // ユーザーが存在する場合のモック設定\n      (prisma.user.findUnique as jest.Mock).mockResolvedValue({\n        id: 'test-user-id',\n        email: 'test@example.com',\n      });\n\n      // トークン生成のモック\n      (generateResetToken as jest.Mock).mockResolvedValue('test-reset-token');\n\n      // ユーザー更新のモック\n      (prisma.user.update as jest.Mock).mockResolvedValue({\n        id: 'test-user-id',\n        email: 'test@example.com',\n        updatedAt: new Date(),\n      });\n\n      // メール送信のモック\n      (sendPasswordResetEmail as jest.Mock).mockResolvedValue(true);\n\n      const req = new Request('http://localhost:3000/api/auth/reset-password', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          email: 'test@example.com',\n        }),\n      });\n\n      const response = await POST(req as unknown as NextRequest);\n      expect(response.status).toBe(200);\n\n      const data = await response.json();\n      expect(data.success).toBe(true);\n\n      // メール送信が呼び出されたことを確認\n      expect(sendPasswordResetEmail).toHaveBeenCalledWith('test@example.com', 'test-reset-token');\n    });\n\n    it('存在しないユーザーの場合でも成功レスポンスを返す（セキュリティ対策）', async () => {\n      // ユーザーが存在しない場合のモック設定\n      (prisma.user.findUnique as jest.Mock).mockResolvedValue(null);\n\n      const req = new Request('http://localhost:3000/api/auth/reset-password', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          email: 'nonexistent@example.com',\n        }),\n      });\n\n      const response = await POST(req as unknown as NextRequest);\n      expect(response.status).toBe(200);\n\n      const data = await response.json();\n      expect(data.success).toBe(true);\n\n      // メール送信が呼び出されていないことを確認\n      expect(sendPasswordResetEmail).not.toHaveBeenCalled();\n    });\n\n    it('メールアドレスの形式が不正な場合は400エラーを返す', async () => {\n      const req = new Request('http://localhost:3000/api/auth/reset-password', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          email: 'invalid-email',\n        }),\n      });\n\n      const response = await POST(req as unknown as NextRequest);\n      expect(response.status).toBe(400);\n\n      const data = await response.json();\n      expect(data.error).toBeTruthy();\n    });\n\n    it('メール送信サービスの設定がない場合は500エラーを返す', async () => {\n      // RESEND_API_KEYを削除\n      delete process.env.RESEND_API_KEY;\n\n      const req = new Request('http://localhost:3000/api/auth/reset-password', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          email: 'test@example.com',\n        }),\n      });\n\n      const response = await POST(req as unknown as NextRequest);\n      expect(response.status).toBe(500);\n\n      const data = await response.json();\n      expect(data.error).toBe('Email service configuration error');\n    });\n\n    it('メール送信に失敗した場合は500エラーを返す', async () => {\n      // ユーザーが存在する場合のモック設定\n      (prisma.user.findUnique as jest.Mock).mockResolvedValue({\n        id: 'test-user-id',\n        email: 'test@example.com',\n      });\n\n      // メール送信エラーのモック\n      (sendPasswordResetEmail as jest.Mock).mockRejectedValue(new Error('Failed to send email'));\n\n      const req = new Request('http://localhost:3000/api/auth/reset-password', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          email: 'test@example.com',\n        }),\n      });\n\n      const response = await POST(req as unknown as NextRequest);\n      expect(response.status).toBe(500);\n\n      const data = await response.json();\n      expect(data.error).toBe('パスワードリセットの要求に失敗しました');\n    });\n\n    it('データベースエラーの場合は500エラーを返す', async () => {\n      // データベースエラーのモック設定\n      (prisma.user.findUnique as jest.Mock).mockRejectedValue(new Error('Database error'));\n\n      const req = new Request('http://localhost:3000/api/auth/reset-password', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          email: 'test@example.com',\n        }),\n      });\n\n      const response = await POST(req as unknown as NextRequest);\n      expect(response.status).toBe(500);\n\n      const data = await response.json();\n      expect(data.error).toBe('パスワードリセットの要求に失敗しました');\n    });\n  });\n}); "],"names":["jest","mock","prisma","user","findUnique","fn","update","generateResetToken","sendPasswordResetEmail","describe","originalEnv","process","env","beforeEach","clearAllMocks","RESEND_API_KEY","afterEach","it","mockResolvedValue","id","email","updatedAt","Date","req","Request","method","headers","body","JSON","stringify","response","POST","expect","status","toBe","data","json","success","toHaveBeenCalledWith","not","toHaveBeenCalled","error","toBeTruthy","mockRejectedValue","Error"],"mappings":"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"}