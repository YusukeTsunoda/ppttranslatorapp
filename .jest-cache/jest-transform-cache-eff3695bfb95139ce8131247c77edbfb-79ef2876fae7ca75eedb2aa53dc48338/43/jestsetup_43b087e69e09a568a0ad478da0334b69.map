{"version":3,"sources":["/Users/yusuketsunoda/Documents/cursor/ppttranslatorapp/worktrees/cicd-setup/jest.setup.js"],"sourcesContent":["// jest.setup.js\n\n// global.fetchのモック (他の設定より先に実行)\nglobal.fetch = jest.fn(() =>\n  Promise.resolve({\n    json: () => Promise.resolve({}),\n    ok: true,\n    status: 200,\n  }),\n);\n\nrequire('@testing-library/jest-dom');\n\n// SWC関連のエラーを抑制\njest.mock('@next/swc-darwin-arm64', () => ({}), { virtual: true });\n\n// fs/promisesのモック\njest.mock('fs/promises', () => ({\n  access: jest.fn(),\n  readFile: jest.fn(),\n  writeFile: jest.fn(),\n  mkdir: jest.fn(),\n}));\n\n// fsのモック\njest.mock('fs', () => ({\n  promises: {\n    access: jest.fn(),\n    readFile: jest.fn(),\n    writeFile: jest.fn(),\n    mkdir: jest.fn(),\n  },\n  createReadStream: jest.fn(),\n  createWriteStream: jest.fn(),\n}));\n\n// next/serverのモック\njest.mock('next/server', () => ({\n  NextResponse: {\n    json: jest.fn((data, options = {}) => ({\n      json: () => data,\n      status: options.status,\n    })),\n    redirect: jest.fn((url) => ({ url })),\n    next: jest.fn(() => ({ status: 200 })),\n  },\n}));\n\n// swrのモック\njest.mock('swr', () => {\n  return {\n    __esModule: true,\n    default: jest.fn(() => ({\n      data: null,\n      error: null,\n      isLoading: false,\n      mutate: jest.fn(),\n    })),\n  };\n});\n\n// コンソールエラーを抑制（テスト中に意図的なエラーを発生させる場合に便利）\nconst originalConsoleError = console.error;\nconsole.error = (...args) => {\n  // テスト中の意図的なエラーメッセージをスキップ\n  if (\n    args[0]?.includes?.('Warning: ReactDOM.render is no longer supported') ||\n    args[0] === '=== Upload Error ===' ||\n    args[0] === 'Database connection error: Error: DB connection error' ||\n    args[0] === 'Login error: Error: Unexpected error' ||\n    args[0]?.includes?.('Client error: Error: Request failed with status')\n  ) {\n    return;\n  }\n  originalConsoleError(...args);\n};\n\n// モックファイル作成ヘルパー\nglobal.mockFile = (name, size, type, lastModified = new Date()) => {\n  const file = new File([''], name, { type });\n  Object.defineProperty(file, 'size', { value: size });\n  Object.defineProperty(file, 'lastModified', { value: lastModified.getTime() });\n  return file;\n};\n\n// useToast関数をモック\njest.mock('@/components/ui/use-toast', () => {\n  // モック用の状態管理 - モジュールレベルで定義して全テストで共有\n  const mockToastsState = { toasts: [] };\n\n  // トースト追加関数\n  const mockToastFn = jest.fn((props) => {\n    const id = `toast-${Date.now()}`;\n    const newToast = { id, ...props, open: true };\n    // 実際にモックステートにトーストを追加\n    mockToastsState.toasts.push(newToast);\n\n    return {\n      id,\n      dismiss: () => {\n        const index = mockToastsState.toasts.findIndex((t) => t.id === id);\n        if (index !== -1) {\n          mockToastsState.toasts[index].open = false;\n        }\n      },\n      update: (updatedProps) => {\n        const index = mockToastsState.toasts.findIndex((t) => t.id === id);\n        if (index !== -1) {\n          mockToastsState.toasts[index] = {\n            ...mockToastsState.toasts[index],\n            ...updatedProps,\n          };\n        }\n      },\n    };\n  });\n\n  // dismiss関数（特定のIDまたはすべてのトーストを閉じる）\n  const mockDismissFn = jest.fn((id) => {\n    if (id) {\n      const index = mockToastsState.toasts.findIndex((t) => t.id === id);\n      if (index !== -1) {\n        mockToastsState.toasts[index].open = false;\n      }\n    } else {\n      // IDがない場合は全てのトーストを閉じる\n      mockToastsState.toasts.forEach((t) => {\n        t.open = false;\n      });\n    }\n  });\n\n  // テスト間でmockToastsStateをリセットする関数\n  const resetMockState = () => {\n    mockToastsState.toasts = [];\n  };\n\n  // モックの外部でbeforeEachを使用するのではなく、モックの内部でリセット関数を返す\n  return {\n    useToast: jest.fn().mockImplementation(() => {\n      // 各テスト実行時にリセット\n      resetMockState();\n      \n      return {\n        toasts: mockToastsState.toasts,\n        toast: mockToastFn,\n        dismiss: mockDismissFn,\n      };\n    }),\n    toast: mockToastFn,\n    reducer: jest.fn().mockImplementation((state, action) => {\n      switch (action.type) {\n        case 'ADD_TOAST':\n          return { ...state, toasts: [...state.toasts, action.toast] };\n        case 'UPDATE_TOAST':\n          return {\n            ...state,\n            toasts: state.toasts.map((t) => (t.id === action.toast.id ? { ...t, ...action.toast } : t)),\n          };\n        case 'DISMISS_TOAST':\n          return {\n            ...state,\n            toasts: state.toasts.map((t) =>\n              t.id === action.toastId || action.toastId === undefined ? { ...t, open: false } : t,\n            ),\n          };\n        case 'REMOVE_TOAST':\n          return {\n            ...state,\n            toasts: action.toastId === undefined ? [] : state.toasts.filter((t) => t.id !== action.toastId),\n          };\n        default:\n          return state;\n      }\n    }),\n  };\n});\n\n// 各テストの前に実行するグローバル設定\nbeforeEach(() => {\n  // テスト環境のリセット\n  jest.clearAllMocks();\n});\n\nimport '@testing-library/jest-dom';\nimport 'whatwg-fetch';\n\n// グローバルなモック設定\nglobal.jest = jest;\n\n// fetchのモック\nglobal.fetch = jest.fn(() =>\n  Promise.resolve({\n    json: () => Promise.resolve({}),\n    ok: true,\n    status: 200,\n  })\n);\n\n// IntersectionObserverのモック\nglobal.IntersectionObserver = class IntersectionObserver {\n  constructor() {\n    this.observe = jest.fn();\n    this.unobserve = jest.fn();\n    this.disconnect = jest.fn();\n  }\n};\n\n// matchMediaのモック\nglobal.matchMedia = jest.fn().mockImplementation(query => ({\n  matches: false,\n  media: query,\n  onchange: null,\n  addListener: jest.fn(),\n  removeListener: jest.fn(),\n  addEventListener: jest.fn(),\n  removeEventListener: jest.fn(),\n  dispatchEvent: jest.fn(),\n}));\n\n// ResizeObserverのモック\nglobal.ResizeObserver = class ResizeObserver {\n  constructor() {\n    this.observe = jest.fn();\n    this.unobserve = jest.fn();\n    this.disconnect = jest.fn();\n  }\n};\n\n// プロセス環境変数の設定\nprocess.env = {\n  ...process.env,\n  NEXT_PUBLIC_APP_URL: 'http://localhost:3000',\n  DATABASE_URL: 'postgresql://testuser:testpass@localhost:5433/ppt_translator_test',\n  NEXTAUTH_URL: 'http://localhost:3000',\n  NEXTAUTH_SECRET: 'test-secret',\n};\n\n// Prismaのモック\njest.mock('@/lib/db', () => ({\n  prisma: {\n    user: {\n      findUnique: jest.fn(),\n      create: jest.fn(),\n      update: jest.fn(),\n      delete: jest.fn(),\n    },\n    file: {\n      findUnique: jest.fn(),\n      create: jest.fn(),\n      update: jest.fn(),\n    },\n    translationHistory: {\n      create: jest.fn(),\n      findMany: jest.fn(),\n      findUnique: jest.fn(),\n    },\n  },\n}));\n\n// next/routerのモック\njest.mock('next/router', () => ({\n  useRouter: jest.fn(() => ({\n    push: jest.fn(),\n    replace: jest.fn(),\n    prefetch: jest.fn(),\n    query: {},\n  })),\n}));\n\n// next/navigationのモック\njest.mock('next/navigation', () => ({\n  useRouter: jest.fn(() => ({\n    push: jest.fn(),\n    replace: jest.fn(),\n    prefetch: jest.fn(),\n    back: jest.fn(),\n  })),\n  usePathname: jest.fn(() => '/'),\n  useSearchParams: jest.fn(() => new URLSearchParams()),\n}));\n\n// Anthropic SDKのモック\njest.mock('@anthropic-ai/sdk', () => {\n  return {\n    Anthropic: jest.fn().mockImplementation(() => ({\n      messages: {\n        create: jest.fn().mockResolvedValue({\n          content: [{ text: '翻訳されたテキスト' }],\n        }),\n      },\n    })),\n  };\n});\n\n// エラー型の定義\nglobal.ErrorType = {\n  AUTH: 'AUTH',\n  VALIDATION: 'VALIDATION',\n  NOT_FOUND: 'NOT_FOUND',\n  FORBIDDEN: 'FORBIDDEN',\n  DATABASE: 'DATABASE',\n  NETWORK: 'NETWORK',\n  RATE_LIMIT: 'RATE_LIMIT',\n  UNKNOWN: 'UNKNOWN',\n};\n\n// エラーコードの定義\nglobal.ErrorCodes = {\n  VALIDATION_ERROR: 'VALIDATION_ERROR',\n  UNAUTHORIZED: 'UNAUTHORIZED',\n  FORBIDDEN: 'FORBIDDEN',\n  NOT_FOUND: 'NOT_FOUND',\n  DATABASE_ERROR: 'DATABASE_ERROR',\n  RATE_LIMIT_EXCEEDED: 'RATE_LIMIT_EXCEEDED',\n  UNKNOWN_ERROR: 'UNKNOWN_ERROR',\n};\n"],"names":["jest","mock","virtual","access","fn","readFile","writeFile","mkdir","promises","createReadStream","createWriteStream","NextResponse","json","data","options","status","redirect","url","next","__esModule","default","error","isLoading","mutate","mockToastsState","toasts","mockToastFn","props","id","Date","now","newToast","open","push","dismiss","index","findIndex","t","update","updatedProps","mockDismissFn","forEach","resetMockState","useToast","mockImplementation","toast","reducer","state","action","type","map","toastId","undefined","filter","prisma","user","findUnique","create","delete","file","translationHistory","findMany","useRouter","replace","prefetch","query","back","usePathname","useSearchParams","URLSearchParams","Anthropic","messages","mockResolvedValue","content","text","global","fetch","Promise","resolve","ok","require","originalConsoleError","console","args","includes","mockFile","name","size","lastModified","File","Object","defineProperty","value","getTime","beforeEach","clearAllMocks","IntersectionObserver","constructor","observe","unobserve","disconnect","matchMedia","matches","media","onchange","addListener","removeListener","addEventListener","removeEventListener","dispatchEvent","ResizeObserver","process","env","NEXT_PUBLIC_APP_URL","DATABASE_URL","NEXTAUTH_URL","NEXTAUTH_SECRET","ErrorType","AUTH","VALIDATION","NOT_FOUND","FORBIDDEN","DATABASE","NETWORK","RATE_LIMIT","UNKNOWN","ErrorCodes","VALIDATION_ERROR","UNAUTHORIZED","DATABASE_ERROR","RATE_LIMIT_EXCEEDED","UNKNOWN_ERROR"],"mappings":"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"}