3bfdb25a129bfc12ae8e65155d05bf01
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _interop_require_wildcard = require("@swc/helpers/_/_interop_require_wildcard");
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_wildcard._(require("react"));
const _react1 = require("@testing-library/react");
const _useIntersectionObserver = require("@/lib/hooks/useIntersectionObserver");
// IntersectionObserverメソッドのモック
const mockObserve = jest.fn();
const mockDisconnect = jest.fn();
const mockUnobserve = jest.fn();
// グローバルIntersectionObserverのモック実装
beforeEach(()=>{
    // jest.setup.jsで定義されているIntersectionObserverを上書き
    global.IntersectionObserver = jest.fn().mockImplementation(function(callback, options) {
        this.observe = mockObserve;
        this.disconnect = mockDisconnect;
        this.unobserve = mockUnobserve;
        this.callback = callback;
        this.options = options;
    });
    // モック関数をリセット
    mockObserve.mockClear();
    mockDisconnect.mockClear();
    mockUnobserve.mockClear();
});
// テスト後にモックをリセット
afterEach(()=>{
    jest.clearAllMocks();
});
describe('useIntersectionObserver', ()=>{
    it('要素が存在する場合、IntersectionObserverを初期化して監視する', ()=>{
        // モックDOM要素を作成
        const mockElement = document.createElement('div');
        // テスト用のコンポーネント
        const TestComponent = ()=>{
            const mockRef = (0, _react.useRef)(null);
            const mockCallback = jest.fn();
            // useRefのcurrentを手動で設定
            Object.defineProperty(mockRef, 'current', {
                value: mockElement,
                writable: true
            });
            (0, _useIntersectionObserver.useIntersectionObserver)(mockRef, mockCallback);
            return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "test-element"
            });
        };
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {}));
        // 要素が監視対象に追加されたか確認
        expect(mockObserve).toHaveBeenCalledWith(mockElement);
    });
    it('要素が存在しない場合、IntersectionObserverを初期化しない', ()=>{
        // テスト用のコンポーネント - refがnullのケース
        const TestComponent = ()=>{
            const mockRef = (0, _react.useRef)(null);
            const mockCallback = jest.fn();
            (0, _useIntersectionObserver.useIntersectionObserver)(mockRef, mockCallback);
            return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "test-element"
            });
        };
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {}));
        // observeが呼ばれていないことを確認
        expect(mockObserve).not.toHaveBeenCalled();
        // IntersectionObserverが初期化されていないことを確認
        expect(global.IntersectionObserver).not.toHaveBeenCalled();
    });
    it('アンマウント時にIntersectionObserverを切断する', ()=>{
        // モックDOM要素を作成
        const mockElement = document.createElement('div');
        // テスト用のコンポーネント
        const TestComponent = ()=>{
            const mockRef = (0, _react.useRef)(null);
            const mockCallback = jest.fn();
            // useRefのcurrentを手動で設定
            Object.defineProperty(mockRef, 'current', {
                value: mockElement,
                writable: true
            });
            (0, _useIntersectionObserver.useIntersectionObserver)(mockRef, mockCallback);
            return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "test-element"
            });
        };
        const { unmount } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {}));
        // コンポーネントをアンマウント
        (0, _react1.act)(()=>{
            unmount();
        });
        // disconnectが呼ばれたことを確認
        expect(mockDisconnect).toHaveBeenCalled();
    });
    it('依存配列の値が変更された場合、IntersectionObserverを再初期化する', ()=>{
        // モックDOM要素を作成
        const mockElement = document.createElement('div');
        // テスト用のコンポーネント
        function TestComponent({ threshold }) {
            const mockRef = (0, _react.useRef)(null);
            const mockCallback = jest.fn();
            // useRefのcurrentを手動で設定
            Object.defineProperty(mockRef, 'current', {
                value: mockElement,
                writable: true
            });
            (0, _useIntersectionObserver.useIntersectionObserver)(mockRef, mockCallback, {
                threshold
            });
            return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "test-element"
            });
        }
        const { rerender } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {
            threshold: 0
        }));
        // 最初のレンダリングでobserveが呼ばれたことを確認
        expect(mockObserve).toHaveBeenCalledTimes(1);
        // モックをリセット
        mockObserve.mockClear();
        mockDisconnect.mockClear();
        // 依存配列の値を変更して再レンダリング
        (0, _react1.act)(()=>{
            rerender(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {
                threshold: 1
            }));
        });
        // disconnectとobserveが呼ばれたことを確認
        expect(mockDisconnect).toHaveBeenCalledTimes(1);
        expect(mockObserve).toHaveBeenCalledTimes(1);
    });
});

//# sourceMappingURL=data:application/json;base64,