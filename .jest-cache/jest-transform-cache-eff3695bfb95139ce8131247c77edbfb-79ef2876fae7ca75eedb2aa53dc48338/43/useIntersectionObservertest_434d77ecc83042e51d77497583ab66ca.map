{"version":3,"sources":["/Users/yusuketsunoda/Documents/cursor/ppttranslatorapp/worktrees/cicd-setup/tests/hooks/useIntersectionObserver.test.tsx"],"sourcesContent":["import React from 'react';\nimport { render, act } from '@testing-library/react';\nimport { useIntersectionObserver } from '@/lib/hooks/useIntersectionObserver';\nimport { useRef } from 'react';\n\n// IntersectionObserverメソッドのモック\nconst mockObserve = jest.fn();\nconst mockDisconnect = jest.fn();\nconst mockUnobserve = jest.fn();\n\n// グローバルIntersectionObserverのモック実装\nbeforeEach(() => {\n  // jest.setup.jsで定義されているIntersectionObserverを上書き\n  global.IntersectionObserver = jest.fn().mockImplementation(function(this: any, callback: IntersectionObserverCallback, options?: IntersectionObserverInit) {\n    this.observe = mockObserve;\n    this.disconnect = mockDisconnect;\n    this.unobserve = mockUnobserve;\n    this.callback = callback;\n    this.options = options;\n  });\n\n  // モック関数をリセット\n  mockObserve.mockClear();\n  mockDisconnect.mockClear();\n  mockUnobserve.mockClear();\n});\n\n// テスト後にモックをリセット\nafterEach(() => {\n  jest.clearAllMocks();\n});\n\ndescribe('useIntersectionObserver', () => {\n  it('要素が存在する場合、IntersectionObserverを初期化して監視する', () => {\n    // モックDOM要素を作成\n    const mockElement = document.createElement('div');\n    \n    // テスト用のコンポーネント\n    const TestComponent = () => {\n      const mockRef = useRef<HTMLDivElement>(null);\n      const mockCallback = jest.fn();\n      \n      // useRefのcurrentを手動で設定\n      Object.defineProperty(mockRef, 'current', {\n        value: mockElement,\n        writable: true\n      });\n\n      useIntersectionObserver(mockRef, mockCallback);\n\n      return <div data-testid=\"test-element\" />;\n    };\n\n    render(<TestComponent />);\n\n    // 要素が監視対象に追加されたか確認\n    expect(mockObserve).toHaveBeenCalledWith(mockElement);\n  });\n\n  it('要素が存在しない場合、IntersectionObserverを初期化しない', () => {\n    // テスト用のコンポーネント - refがnullのケース\n    const TestComponent = () => {\n      const mockRef = useRef<HTMLDivElement>(null);\n      const mockCallback = jest.fn();\n\n      useIntersectionObserver(mockRef, mockCallback);\n\n      return <div data-testid=\"test-element\" />;\n    };\n\n    render(<TestComponent />);\n\n    // observeが呼ばれていないことを確認\n    expect(mockObserve).not.toHaveBeenCalled();\n    // IntersectionObserverが初期化されていないことを確認\n    expect(global.IntersectionObserver).not.toHaveBeenCalled();\n  });\n\n  it('アンマウント時にIntersectionObserverを切断する', () => {\n    // モックDOM要素を作成\n    const mockElement = document.createElement('div');\n    \n    // テスト用のコンポーネント\n    const TestComponent = () => {\n      const mockRef = useRef<HTMLDivElement>(null);\n      const mockCallback = jest.fn();\n      \n      // useRefのcurrentを手動で設定\n      Object.defineProperty(mockRef, 'current', {\n        value: mockElement,\n        writable: true\n      });\n\n      useIntersectionObserver(mockRef, mockCallback);\n\n      return <div data-testid=\"test-element\" />;\n    };\n\n    const { unmount } = render(<TestComponent />);\n\n    // コンポーネントをアンマウント\n    act(() => {\n      unmount();\n    });\n\n    // disconnectが呼ばれたことを確認\n    expect(mockDisconnect).toHaveBeenCalled();\n  });\n\n  it('依存配列の値が変更された場合、IntersectionObserverを再初期化する', () => {\n    // モックDOM要素を作成\n    const mockElement = document.createElement('div');\n    \n    // テスト用のコンポーネント\n    function TestComponent({ threshold }: { threshold: number }) {\n      const mockRef = useRef<HTMLDivElement>(null);\n      const mockCallback = jest.fn();\n      \n      // useRefのcurrentを手動で設定\n      Object.defineProperty(mockRef, 'current', {\n        value: mockElement,\n        writable: true\n      });\n\n      useIntersectionObserver(mockRef, mockCallback, { threshold });\n\n      return <div data-testid=\"test-element\" />;\n    }\n\n    const { rerender } = render(<TestComponent threshold={0} />);\n    \n    // 最初のレンダリングでobserveが呼ばれたことを確認\n    expect(mockObserve).toHaveBeenCalledTimes(1);\n    \n    // モックをリセット\n    mockObserve.mockClear();\n    mockDisconnect.mockClear();\n\n    // 依存配列の値を変更して再レンダリング\n    act(() => {\n      rerender(<TestComponent threshold={1} />);\n    });\n\n    // disconnectとobserveが呼ばれたことを確認\n    expect(mockDisconnect).toHaveBeenCalledTimes(1);\n    expect(mockObserve).toHaveBeenCalledTimes(1);\n  });\n});\n"],"names":["mockObserve","jest","fn","mockDisconnect","mockUnobserve","beforeEach","global","IntersectionObserver","mockImplementation","callback","options","observe","disconnect","unobserve","mockClear","afterEach","clearAllMocks","describe","it","mockElement","document","createElement","TestComponent","mockRef","useRef","mockCallback","Object","defineProperty","value","writable","useIntersectionObserver","div","data-testid","render","expect","toHaveBeenCalledWith","not","toHaveBeenCalled","unmount","act","threshold","rerender","toHaveBeenCalledTimes"],"mappings":"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"}