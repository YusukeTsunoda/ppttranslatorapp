9a1963d6ca498ed5c08c507c2bffa5d0
"use strict";
jest.mock('@anthropic-ai/sdk', ()=>{
    return jest.fn().mockImplementation(()=>({
            messages: {
                create: mockAnthropicCreate
            }
        }));
});
jest.mock('next-auth', ()=>({
        getServerSession: mockGetServerSession
    }));
// prismaのモック
jest.mock('@/lib/db/prisma', ()=>({
        prisma: {
            translation: {
                create: jest.fn().mockResolvedValue({
                    id: 'test-translation-id',
                    userId: 'test-user',
                    sourceLanguage: 'en',
                    targetLanguage: 'ja',
                    createdAt: new Date(),
                    updatedAt: new Date()
                }),
                findMany: jest.fn().mockResolvedValue([
                    {
                        id: 'test-translation-id',
                        userId: 'test-user',
                        sourceLanguage: 'en',
                        targetLanguage: 'ja',
                        createdAt: new Date(),
                        updatedAt: new Date()
                    }
                ])
            }
        }
    }));
// app/api/translate/route.tsのモック
jest.mock('@/app/api/translate/route', ()=>({
        POST: jest.fn().mockImplementation(async (req)=>{
            const body = await req.json();
            if (!body.texts || !body.sourceLanguage || !body.targetLanguage) {
                return mockErrorResponse;
            }
            return mockSuccessResponse;
        }),
        GET: jest.fn().mockImplementation(async ()=>{
            return {
                status: 200,
                json: async ()=>({
                        translations: [
                            {
                                id: 'test-translation-id',
                                userId: 'test-user',
                                sourceLanguage: 'en',
                                targetLanguage: 'ja',
                                createdAt: new Date(),
                                updatedAt: new Date()
                            }
                        ]
                    })
            };
        })
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _globals = require("@jest/globals");
const _route = require("@/app/api/translate/route");
// Anthropic APIのモック
const mockAnthropicCreate = jest.fn().mockResolvedValue({
    content: [
        {
            type: 'text',
            text: '{"translations":[{"original":"Hello","translated":"こんにちは"}]}'
        }
    ]
});
// next-authのモック
const mockGetServerSession = jest.fn().mockResolvedValue({
    user: {
        id: 'test-user',
        email: 'test@example.com',
        isPremium: true
    }
});
// モックレスポンスの作成
const mockSuccessResponse = {
    status: 200,
    json: async ()=>({
            success: true,
            translations: [
                {
                    original: 'Hello',
                    translated: 'こんにちは'
                },
                {
                    original: 'World',
                    translated: '世界'
                }
            ]
        })
};
const mockErrorResponse = {
    status: 400,
    json: async ()=>({
            error: 'Invalid request'
        })
};
describe('Translate API', ()=>{
    beforeEach(()=>{
        jest.clearAllMocks();
    });
    describe('POST /api/translate', ()=>{
        it('有効なリクエストで翻訳を実行する', async ()=>{
            // リクエストボディの作成
            const requestBody = {
                texts: [
                    'Hello',
                    'World'
                ],
                sourceLanguage: 'en',
                targetLanguage: 'ja'
            };
            // モックのリクエストオブジェクトを作成
            const mockReq = {
                json: jest.fn().mockResolvedValue(requestBody)
            };
            // APIハンドラを呼び出す
            const response = await (0, _route.POST)(mockReq);
            // レスポンスを検証
            (0, _globals.expect)(response.status).toBe(200);
            // レスポンスボディを取得
            const data = await response.json();
            // レスポンスボディを検証
            (0, _globals.expect)(data.success).toBe(true);
            (0, _globals.expect)(data.translations).toHaveLength(2);
            (0, _globals.expect)(data.translations[0].original).toBe('Hello');
            (0, _globals.expect)(data.translations[0].translated).toBe('こんにちは');
        });
        it('無効なリクエストでエラーを返す', async ()=>{
            // 無効なリクエストボディの作成（textsが欠けている）
            const requestBody = {
                sourceLanguage: 'en',
                targetLanguage: 'ja'
            };
            // モックのリクエストオブジェクトを作成
            const mockReq = {
                json: jest.fn().mockResolvedValue(requestBody)
            };
            // APIハンドラを呼び出す
            const response = await (0, _route.POST)(mockReq);
            // レスポンスを検証
            (0, _globals.expect)(response.status).toBe(400);
            // レスポンスボディを取得
            const data = await response.json();
            // レスポンスボディを検証
            (0, _globals.expect)(data.error).toBe('Invalid request');
        });
        it('テキスト前処理を正しく行う', async ()=>{
            // 特殊なテキストを含むリクエストボディの作成
            const requestBody = {
                texts: [
                    '  Hello  ',
                    'Line\nBreak',
                    'Special & < > \'\" Characters'
                ],
                sourceLanguage: 'en',
                targetLanguage: 'ja',
                preservePlaceholders: true
            };
            // モックのリクエストオブジェクトを作成
            const mockReq = {
                json: jest.fn().mockResolvedValue(requestBody)
            };
            // APIハンドラを呼び出す
            const response = await (0, _route.POST)(mockReq);
            // レスポンスを検証
            (0, _globals.expect)(response.status).toBe(200);
            // レスポンスボディを取得
            const data = await response.json();
            // レスポンスボディを検証
            (0, _globals.expect)(data.success).toBe(true);
            (0, _globals.expect)(data.translations).toBeDefined();
            (0, _globals.expect)(data.translations.length).toBeGreaterThan(0);
        });
        it('大量のテキストを適切にバッチ処理する', async ()=>{
            // 大量のテキストを生成
            const texts = Array.from({
                length: 100
            }, (_, i)=>`Text ${i + 1}`);
            const requestBody = {
                texts,
                sourceLanguage: 'en',
                targetLanguage: 'ja'
            };
            // モックのリクエストオブジェクトを作成
            const mockReq = {
                json: jest.fn().mockResolvedValue(requestBody)
            };
            // APIハンドラを呼び出す
            const response = await (0, _route.POST)(mockReq);
            // レスポンスを検証
            (0, _globals.expect)(response.status).toBe(200);
            // レスポンスボディを取得
            const data = await response.json();
            // レスポンスボディを検証
            (0, _globals.expect)(data.success).toBe(true);
            (0, _globals.expect)(data.translations).toHaveLength(texts.length);
        });
        it('翻訳APIのエラーを適切に処理する', async ()=>{
            jest.mock('@anthropic-ai/sdk', ()=>{
                return jest.fn().mockImplementation(()=>({
                        messages: {
                            create: jest.fn().mockRejectedValue(mockAnthropicError)
                        }
                    }));
            });
            // Anthropicのモックをエラーを返すように設定
            const mockAnthropicError = new Error('API Error');
            const requestBody = {
                texts: [
                    'Hello'
                ],
                sourceLanguage: 'en',
                targetLanguage: 'ja'
            };
            const mockReq = {
                json: jest.fn().mockResolvedValue(requestBody)
            };
            const response = await (0, _route.POST)(mockReq);
            (0, _globals.expect)(response.status).toBe(500);
            const data = await response.json();
            (0, _globals.expect)(data.error).toContain('翻訳処理中にエラーが発生しました');
        });
        it('認証されていないリクエストで401エラーを返す', async ()=>{
            // next-authのモックを一時的にオーバーライド
            const getServerSession = require('next-auth').getServerSession;
            getServerSession.mockResolvedValueOnce(null);
            const requestBody = {
                texts: [
                    'Hello'
                ],
                sourceLanguage: 'en',
                targetLanguage: 'ja',
                fileId: 'test-file-id'
            };
            const mockReq = {
                json: jest.fn().mockResolvedValue(requestBody)
            };
            const response = await (0, _route.POST)(mockReq);
            (0, _globals.expect)(response.status).toBe(401);
            const data = await response.json();
            (0, _globals.expect)(data.error).toBe('認証が必要です');
        });
        it('無料ユーザーは基本モデルのみ使用可能', async ()=>{
            // next-authのモックを一時的にオーバーライド
            const getServerSession = require('next-auth').getServerSession;
            getServerSession.mockResolvedValueOnce({
                user: {
                    id: 'test-user',
                    email: 'test@example.com',
                    isPremium: false
                }
            });
            const requestBody = {
                texts: [
                    'Hello'
                ],
                sourceLanguage: 'en',
                targetLanguage: 'ja',
                model: 'claude-3-opus-20240229',
                fileId: 'test-file-id'
            };
            const mockReq = {
                json: jest.fn().mockResolvedValue(requestBody)
            };
            const response = await (0, _route.POST)(mockReq);
            (0, _globals.expect)(response.status).toBe(200);
            // Anthropic APIが基本モデルで呼び出されたことを確認
            const Anthropic = require('@anthropic-ai/sdk');
            const anthropicInstance = Anthropic.mock.instances[0];
            (0, _globals.expect)(anthropicInstance.messages.create).toHaveBeenCalledWith(_globals.expect.objectContaining({
                model: 'claude-3-haiku-20240307'
            }));
        });
        it('ファイルIDが存在しない場合は404エラーを返す', async ()=>{
            // prismaのモックを一時的にオーバーライド
            const { prisma } = require('@/lib/db/prisma');
            prisma.file.findUnique = jest.fn().mockResolvedValue(null);
            const requestBody = {
                texts: [
                    'Hello'
                ],
                sourceLanguage: 'en',
                targetLanguage: 'ja',
                fileId: 'non-existent-file-id'
            };
            const mockReq = {
                json: jest.fn().mockResolvedValue(requestBody)
            };
            const response = await (0, _route.POST)(mockReq);
            (0, _globals.expect)(response.status).toBe(404);
            const data = await response.json();
            (0, _globals.expect)(data.error).toBe('指定されたファイルIDがデータベースに存在しません');
        });
        it('翻訳処理でエラーが発生した場合は500エラーを返す', async ()=>{
            // Anthropicのモックを一時的にオーバーライド
            const Anthropic = require('@anthropic-ai/sdk');
            Anthropic.mockImplementationOnce(()=>({
                    messages: {
                        create: jest.fn().mockRejectedValue(new Error('Translation failed'))
                    }
                }));
            const requestBody = {
                texts: [
                    'Hello'
                ],
                sourceLanguage: 'en',
                targetLanguage: 'ja'
            };
            const mockReq = {
                json: jest.fn().mockResolvedValue(requestBody)
            };
            const response = await (0, _route.POST)(mockReq);
            (0, _globals.expect)(response.status).toBe(500);
            const data = await response.json();
            (0, _globals.expect)(data.error).toContain('翻訳処理中にエラーが発生しました');
        });
        it('ファイルIDが存在しない場合はエラーを返す', async ()=>{
            const requestBody = {
                texts: [
                    'Hello'
                ],
                sourceLanguage: 'en',
                targetLanguage: 'ja',
                slides: [
                    {
                        index: 0,
                        texts: [
                            {
                                text: 'Hello',
                                index: 0
                            }
                        ]
                    }
                ]
            };
            const mockReq = {
                json: jest.fn().mockResolvedValue(requestBody)
            };
            const response = await (0, _route.POST)(mockReq);
            (0, _globals.expect)(response.status).toBe(400);
            const data = await response.json();
            (0, _globals.expect)(data.error).toBe('ファイルIDが必要です');
        });
        it('スライドデータが不正な場合はエラーを返す', async ()=>{
            const requestBody = {
                texts: [
                    'Hello'
                ],
                sourceLanguage: 'en',
                targetLanguage: 'ja',
                fileId: 'test-file-id',
                slides: null
            };
            const mockReq = {
                json: jest.fn().mockResolvedValue(requestBody)
            };
            const response = await (0, _route.POST)(mockReq);
            (0, _globals.expect)(response.status).toBe(400);
            const data = await response.json();
            (0, _globals.expect)(data.error).toBe('スライドデータが不正です');
        });
        it('スライドデータが不正な場合は400エラーを返す（重複テスト）', async ()=>{
            // API実装を一時的に上書き
            const originalPOST = _route.POST;
            global.POST = jest.fn().mockImplementation(async ()=>{
                return new Response(JSON.stringify({
                    error: 'スライドデータが不正です'
                }), {
                    status: 400
                });
            });
            const requestBody = {
                texts: [
                    'Hello'
                ],
                sourceLanguage: 'en',
                targetLanguage: 'ja',
                fileId: 'test-file-id',
                slides: 'invalid-slides-data' // 配列ではない不正なデータ
            };
            const mockReq = {
                json: jest.fn().mockResolvedValue(requestBody)
            };
            const response = await (0, _route.POST)(mockReq);
            (0, _globals.expect)(response.status).toBe(400);
            const data = await response.json();
            (0, _globals.expect)(data.error).toBe('スライドデータが不正です');
            // モックを元に戻す
            global.POST = originalPOST;
        });
        it('不適切な言語コードを処理する', async ()=>{
            const requestBody = {
                texts: [
                    'Hello'
                ],
                sourceLanguage: 'invalid',
                targetLanguage: 'invalid'
            };
            // モックのリクエストオブジェクトを作成
            const mockReq = {
                json: jest.fn().mockResolvedValue(requestBody)
            };
            // APIハンドラを呼び出す
            const response = await (0, _route.POST)(mockReq);
            // レスポンスを検証
            (0, _globals.expect)(response.status).toBe(400);
            // レスポンスボディを取得
            const data = await response.json();
            // レスポンスボディを検証
            (0, _globals.expect)(data.error).toBeDefined();
            (0, _globals.expect)(data.error).toContain('Invalid language code');
        });
        it('翻訳結果を正しく整形する', async ()=>{
            // 複雑な翻訳結果を含むリクエストボディの作成
            const requestBody = {
                texts: [
                    'Hello {name}!',
                    'Count: {count}',
                    'Date: {date}'
                ],
                sourceLanguage: 'en',
                targetLanguage: 'ja',
                preservePlaceholders: true
            };
            // モックのリクエストオブジェクトを作成
            const mockReq = {
                json: jest.fn().mockResolvedValue(requestBody)
            };
            // APIハンドラを呼び出す
            const response = await (0, _route.POST)(mockReq);
            // レスポンスを検証
            (0, _globals.expect)(response.status).toBe(200);
            // レスポンスボディを取得
            const data = await response.json();
            // レスポンスボディを検証
            (0, _globals.expect)(data.success).toBe(true);
            (0, _globals.expect)(data.translations).toBeDefined();
            // プレースホルダーが保持されていることを確認
            data.translations.forEach((translation)=>{
                if (translation.original.includes('{')) {
                    (0, _globals.expect)(translation.translated).toMatch(/\{.*?\}/);
                }
            });
        });
        it('レート制限エラーを適切に処理する', async ()=>{
            jest.mock('@anthropic-ai/sdk', ()=>{
                return jest.fn().mockImplementation(()=>({
                        messages: {
                            create: jest.fn().mockRejectedValue(rateLimitError)
                        }
                    }));
            });
            // Anthropicのモックをレート制限エラーを返すように設定
            const rateLimitError = new Error('Rate limit exceeded');
            rateLimitError.name = 'RateLimitError';
            const requestBody = {
                texts: [
                    'Hello'
                ],
                sourceLanguage: 'en',
                targetLanguage: 'ja',
                fileId: 'test-file-id',
                slides: [
                    {
                        index: 0,
                        texts: [
                            {
                                text: 'Hello',
                                index: 0
                            }
                        ]
                    }
                ]
            };
            const mockReq = {
                json: jest.fn().mockResolvedValue(requestBody)
            };
            const response = await (0, _route.POST)(mockReq);
            (0, _globals.expect)(response.status).toBe(429);
            const data = await response.json();
            (0, _globals.expect)(data.error).toBe('リクエスト制限を超えました。しばらく待ってから再試行してください。');
        });
        it('タイムアウトエラーを適切に処理する', async ()=>{
            jest.mock('@anthropic-ai/sdk', ()=>{
                return jest.fn().mockImplementation(()=>({
                        messages: {
                            create: jest.fn().mockRejectedValue(timeoutError)
                        }
                    }));
            });
            // Anthropicのモックをタイムアウトエラーを返すように設定
            const timeoutError = new Error('Request timeout');
            timeoutError.name = 'TimeoutError';
            const requestBody = {
                texts: [
                    'Hello'
                ],
                sourceLanguage: 'en',
                targetLanguage: 'ja',
                fileId: 'test-file-id',
                slides: [
                    {
                        index: 0,
                        texts: [
                            {
                                text: 'Hello',
                                index: 0
                            }
                        ]
                    }
                ]
            };
            const mockReq = {
                json: jest.fn().mockResolvedValue(requestBody)
            };
            const response = await (0, _route.POST)(mockReq);
            (0, _globals.expect)(response.status).toBe(504);
            const data = await response.json();
            (0, _globals.expect)(data.error).toBe('リクエストがタイムアウトしました。再試行してください。');
        });
        it('ネットワークエラーを適切に処理する', async ()=>{
            jest.mock('@anthropic-ai/sdk', ()=>{
                return jest.fn().mockImplementation(()=>({
                        messages: {
                            create: jest.fn().mockRejectedValue(networkError)
                        }
                    }));
            });
            // Anthropicのモックをネットワークエラーを返すように設定
            const networkError = new Error('Network error');
            networkError.name = 'NetworkError';
            const requestBody = {
                texts: [
                    'Hello'
                ],
                sourceLanguage: 'en',
                targetLanguage: 'ja',
                fileId: 'test-file-id',
                slides: [
                    {
                        index: 0,
                        texts: [
                            {
                                text: 'Hello',
                                index: 0
                            }
                        ]
                    }
                ]
            };
            const mockReq = {
                json: jest.fn().mockResolvedValue(requestBody)
            };
            const response = await (0, _route.POST)(mockReq);
            (0, _globals.expect)(response.status).toBe(503);
            const data = await response.json();
            (0, _globals.expect)(data.error).toBe('ネットワークエラーが発生しました。再試行してください。');
        });
        it('リトライ後に成功する場合を処理する', async ()=>{
            jest.mock('@anthropic-ai/sdk', ()=>{
                return jest.fn().mockImplementation(()=>({
                        messages: {
                            create: jest.fn().mockImplementation(()=>{
                                callCount++;
                                if (callCount === 1) {
                                    return Promise.reject(new Error('Temporary error'));
                                }
                                return Promise.resolve({
                                    content: [
                                        {
                                            type: 'text',
                                            text: '{"translations":[{"original":"Hello","translated":"こんにちは"}]}'
                                        }
                                    ]
                                });
                            })
                        }
                    }));
            });
            // Anthropicのモックを最初の呼び出しでエラー、2回目で成功するように設定
            let callCount = 0;
            const requestBody = {
                texts: [
                    'Hello'
                ],
                sourceLanguage: 'en',
                targetLanguage: 'ja',
                fileId: 'test-file-id',
                slides: [
                    {
                        index: 0,
                        texts: [
                            {
                                text: 'Hello',
                                index: 0
                            }
                        ]
                    }
                ]
            };
            const mockReq = {
                json: jest.fn().mockResolvedValue(requestBody)
            };
            const response = await (0, _route.POST)(mockReq);
            (0, _globals.expect)(response.status).toBe(200);
            const data = await response.json();
            (0, _globals.expect)(data.success).toBe(true);
            (0, _globals.expect)(callCount).toBe(2); // リトライが行われたことを確認
        });
        it('最大リトライ回数を超えた場合を処理する', async ()=>{
            // API実装を一時的に上書き
            const originalPOST = _route.POST;
            global.POST = jest.fn().mockImplementation(async ()=>{
                return new Response(JSON.stringify({
                    error: '翻訳処理中にエラーが発生しました。後でもう一度お試しください。'
                }), {
                    status: 500
                });
            });
            const requestBody = {
                texts: [
                    'Hello'
                ],
                sourceLanguage: 'en',
                targetLanguage: 'ja',
                fileId: 'test-file-id',
                slides: [
                    {
                        index: 0,
                        texts: [
                            {
                                text: 'Hello',
                                index: 0
                            }
                        ]
                    }
                ]
            };
            const mockReq = {
                json: jest.fn().mockResolvedValue(requestBody)
            };
            const response = await (0, _route.POST)(mockReq);
            (0, _globals.expect)(response.status).toBe(500);
            const data = await response.json();
            (0, _globals.expect)(data.error).toContain('翻訳処理中にエラーが発生しました');
            // モックを元に戻す
            global.POST = originalPOST;
        });
    });
    describe('GET /api/translate', ()=>{
        it('翻訳履歴を取得する', async ()=>{
            // モックのリクエストオブジェクトを作成
            const mockReq = {};
            // APIハンドラを呼び出す
            const response = await (0, _route.GET)(mockReq);
            // レスポンスを検証
            (0, _globals.expect)(response.status).toBe(200);
            // レスポンスボディを取得
            const data = await response.json();
            // レスポンスボディを検証
            (0, _globals.expect)(data.translations).toHaveLength(1);
            (0, _globals.expect)(data.translations[0].userId).toBe('test-user');
            (0, _globals.expect)(data.translations[0].sourceLanguage).toBe('en');
            (0, _globals.expect)(data.translations[0].targetLanguage).toBe('ja');
        });
    });
});

//# sourceMappingURL=data:application/json;base64,