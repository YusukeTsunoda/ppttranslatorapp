{"version":3,"sources":["/Users/yusuketsunoda/Documents/cursor/ppttranslatorapp/worktrees/cicd-setup/tests/api/translate.test.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { mockDeep } from 'jest-mock-extended';\nimport { expect } from '@jest/globals';\n\n// グローバルオブジェクトの型拡張\ndeclare global {\n  var POST: typeof import('@/app/api/translate/route').POST;\n}\n\n// Anthropic APIのモック\nconst mockAnthropicCreate = jest.fn().mockResolvedValue({\n  content: [\n    {\n      type: 'text',\n      text: '{\"translations\":[{\"original\":\"Hello\",\"translated\":\"こんにちは\"}]}',\n    },\n  ],\n});\n\njest.mock('@anthropic-ai/sdk', () => {\n  return jest.fn().mockImplementation(() => ({\n    messages: {\n      create: mockAnthropicCreate,\n    },\n  }));\n});\n\n// next-authのモック\nconst mockGetServerSession = jest.fn().mockResolvedValue({\n  user: {\n    id: 'test-user',\n    email: 'test@example.com',\n    isPremium: true,\n  },\n});\n\njest.mock('next-auth', () => ({\n  getServerSession: mockGetServerSession,\n}));\n\n// prismaのモック\njest.mock('@/lib/db/prisma', () => ({\n  prisma: {\n    translation: {\n      create: jest.fn().mockResolvedValue({\n        id: 'test-translation-id',\n        userId: 'test-user',\n        sourceLanguage: 'en',\n        targetLanguage: 'ja',\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      }),\n      findMany: jest.fn().mockResolvedValue([\n        {\n          id: 'test-translation-id',\n          userId: 'test-user',\n          sourceLanguage: 'en',\n          targetLanguage: 'ja',\n          createdAt: new Date(),\n          updatedAt: new Date(),\n        },\n      ]),\n    },\n  },\n}));\n\n// モックレスポンスの作成\nconst mockSuccessResponse = {\n  status: 200,\n  json: async () => ({\n    success: true,\n    translations: [\n      { original: 'Hello', translated: 'こんにちは' },\n      { original: 'World', translated: '世界' },\n    ],\n  }),\n};\n\nconst mockErrorResponse = {\n  status: 400,\n  json: async () => ({ error: 'Invalid request' }),\n};\n\n// app/api/translate/route.tsのモック\njest.mock('@/app/api/translate/route', () => ({\n  POST: jest.fn().mockImplementation(async (req) => {\n    const body = await req.json();\n\n    if (!body.texts || !body.sourceLanguage || !body.targetLanguage) {\n      return mockErrorResponse;\n    }\n\n    return mockSuccessResponse;\n  }),\n  GET: jest.fn().mockImplementation(async () => {\n    return {\n      status: 200,\n      json: async () => ({\n        translations: [\n          {\n            id: 'test-translation-id',\n            userId: 'test-user',\n            sourceLanguage: 'en',\n            targetLanguage: 'ja',\n            createdAt: new Date(),\n            updatedAt: new Date(),\n          },\n        ],\n      }),\n    };\n  }),\n}));\n\n// インポートはモックの後に行う\nimport { POST, GET } from '@/app/api/translate/route';\n\ndescribe('Translate API', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('POST /api/translate', () => {\n    it('有効なリクエストで翻訳を実行する', async () => {\n      // リクエストボディの作成\n      const requestBody = {\n        texts: ['Hello', 'World'],\n        sourceLanguage: 'en',\n        targetLanguage: 'ja',\n      };\n\n      // モックのリクエストオブジェクトを作成\n      const mockReq = {\n        json: jest.fn().mockResolvedValue(requestBody),\n      };\n\n      // APIハンドラを呼び出す\n      const response = await POST(mockReq as unknown as NextRequest);\n\n      // レスポンスを検証\n      expect(response.status).toBe(200);\n\n      // レスポンスボディを取得\n      const data = await response.json();\n\n      // レスポンスボディを検証\n      expect(data.success).toBe(true);\n      expect(data.translations).toHaveLength(2);\n      expect(data.translations[0].original).toBe('Hello');\n      expect(data.translations[0].translated).toBe('こんにちは');\n    });\n\n    it('無効なリクエストでエラーを返す', async () => {\n      // 無効なリクエストボディの作成（textsが欠けている）\n      const requestBody = {\n        sourceLanguage: 'en',\n        targetLanguage: 'ja',\n      };\n\n      // モックのリクエストオブジェクトを作成\n      const mockReq = {\n        json: jest.fn().mockResolvedValue(requestBody),\n      };\n\n      // APIハンドラを呼び出す\n      const response = await POST(mockReq as unknown as NextRequest);\n\n      // レスポンスを検証\n      expect(response.status).toBe(400);\n\n      // レスポンスボディを取得\n      const data = await response.json();\n\n      // レスポンスボディを検証\n      expect(data.error).toBe('Invalid request');\n    });\n\n    it('テキスト前処理を正しく行う', async () => {\n      // 特殊なテキストを含むリクエストボディの作成\n      const requestBody = {\n        texts: [\n          '  Hello  ', // 前後の空白\n          'Line\\nBreak', // 改行を含む\n          'Special & < > \\'\\\" Characters', // 特殊文字\n        ],\n        sourceLanguage: 'en',\n        targetLanguage: 'ja',\n        preservePlaceholders: true,\n      };\n\n      // モックのリクエストオブジェクトを作成\n      const mockReq = {\n        json: jest.fn().mockResolvedValue(requestBody),\n      };\n\n      // APIハンドラを呼び出す\n      const response = await POST(mockReq as unknown as NextRequest);\n\n      // レスポンスを検証\n      expect(response.status).toBe(200);\n\n      // レスポンスボディを取得\n      const data = await response.json();\n\n      // レスポンスボディを検証\n      expect(data.success).toBe(true);\n      expect(data.translations).toBeDefined();\n      expect(data.translations.length).toBeGreaterThan(0);\n    });\n\n    it('大量のテキストを適切にバッチ処理する', async () => {\n      // 大量のテキストを生成\n      const texts = Array.from({ length: 100 }, (_, i) => `Text ${i + 1}`);\n      \n      const requestBody = {\n        texts,\n        sourceLanguage: 'en',\n        targetLanguage: 'ja',\n      };\n\n      // モックのリクエストオブジェクトを作成\n      const mockReq = {\n        json: jest.fn().mockResolvedValue(requestBody),\n      };\n\n      // APIハンドラを呼び出す\n      const response = await POST(mockReq as unknown as NextRequest);\n\n      // レスポンスを検証\n      expect(response.status).toBe(200);\n\n      // レスポンスボディを取得\n      const data = await response.json();\n\n      // レスポンスボディを検証\n      expect(data.success).toBe(true);\n      expect(data.translations).toHaveLength(texts.length);\n    });\n\n    it('翻訳APIのエラーを適切に処理する', async () => {\n      // Anthropicのモックをエラーを返すように設定\n      const mockAnthropicError = new Error('API Error');\n      jest.mock('@anthropic-ai/sdk', () => {\n        return jest.fn().mockImplementation(() => ({\n          messages: {\n            create: jest.fn().mockRejectedValue(mockAnthropicError),\n          },\n        }));\n      });\n\n      const requestBody = {\n        texts: ['Hello'],\n        sourceLanguage: 'en',\n        targetLanguage: 'ja',\n      };\n\n      const mockReq = {\n        json: jest.fn().mockResolvedValue(requestBody),\n      };\n\n      const response = await POST(mockReq as unknown as NextRequest);\n      expect(response.status).toBe(500);\n\n      const data = await response.json();\n      expect(data.error).toContain('翻訳処理中にエラーが発生しました');\n    });\n\n    it('認証されていないリクエストで401エラーを返す', async () => {\n      // next-authのモックを一時的にオーバーライド\n      const getServerSession = require('next-auth').getServerSession;\n      getServerSession.mockResolvedValueOnce(null);\n\n      const requestBody = {\n        texts: ['Hello'],\n        sourceLanguage: 'en',\n        targetLanguage: 'ja',\n        fileId: 'test-file-id'\n      };\n\n      const mockReq = {\n        json: jest.fn().mockResolvedValue(requestBody),\n      };\n\n      const response = await POST(mockReq as unknown as NextRequest);\n      expect(response.status).toBe(401);\n\n      const data = await response.json();\n      expect(data.error).toBe('認証が必要です');\n    });\n\n    it('無料ユーザーは基本モデルのみ使用可能', async () => {\n      // next-authのモックを一時的にオーバーライド\n      const getServerSession = require('next-auth').getServerSession;\n      getServerSession.mockResolvedValueOnce({\n        user: {\n          id: 'test-user',\n          email: 'test@example.com',\n          isPremium: false,\n        },\n      });\n\n      const requestBody = {\n        texts: ['Hello'],\n        sourceLanguage: 'en',\n        targetLanguage: 'ja',\n        model: 'claude-3-opus-20240229',\n        fileId: 'test-file-id'\n      };\n\n      const mockReq = {\n        json: jest.fn().mockResolvedValue(requestBody),\n      };\n\n      const response = await POST(mockReq as unknown as NextRequest);\n      expect(response.status).toBe(200);\n\n      // Anthropic APIが基本モデルで呼び出されたことを確認\n      const Anthropic = require('@anthropic-ai/sdk');\n      const anthropicInstance = Anthropic.mock.instances[0];\n      expect(anthropicInstance.messages.create).toHaveBeenCalledWith(\n        expect.objectContaining({\n          model: 'claude-3-haiku-20240307'\n        })\n      );\n    });\n\n    it('ファイルIDが存在しない場合は404エラーを返す', async () => {\n      // prismaのモックを一時的にオーバーライド\n      const { prisma } = require('@/lib/db/prisma');\n      prisma.file.findUnique = jest.fn().mockResolvedValue(null);\n\n      const requestBody = {\n        texts: ['Hello'],\n        sourceLanguage: 'en',\n        targetLanguage: 'ja',\n        fileId: 'non-existent-file-id'\n      };\n\n      const mockReq = {\n        json: jest.fn().mockResolvedValue(requestBody),\n      };\n\n      const response = await POST(mockReq as unknown as NextRequest);\n      expect(response.status).toBe(404);\n\n      const data = await response.json();\n      expect(data.error).toBe('指定されたファイルIDがデータベースに存在しません');\n    });\n\n    it('翻訳処理でエラーが発生した場合は500エラーを返す', async () => {\n      // Anthropicのモックを一時的にオーバーライド\n      const Anthropic = require('@anthropic-ai/sdk');\n      Anthropic.mockImplementationOnce(() => ({\n        messages: {\n          create: jest.fn().mockRejectedValue(new Error('Translation failed'))\n        }\n      }));\n\n      const requestBody = {\n        texts: ['Hello'],\n        sourceLanguage: 'en',\n        targetLanguage: 'ja',\n      };\n\n      const mockReq = {\n        json: jest.fn().mockResolvedValue(requestBody),\n      };\n\n      const response = await POST(mockReq as unknown as NextRequest);\n      expect(response.status).toBe(500);\n\n      const data = await response.json();\n      expect(data.error).toContain('翻訳処理中にエラーが発生しました');\n    });\n\n    it('ファイルIDが存在しない場合はエラーを返す', async () => {\n      const requestBody = {\n        texts: ['Hello'],\n        sourceLanguage: 'en',\n        targetLanguage: 'ja',\n        slides: [\n          {\n            index: 0,\n            texts: [{ text: 'Hello', index: 0 }],\n          },\n        ],\n      };\n\n      const mockReq = {\n        json: jest.fn().mockResolvedValue(requestBody),\n      };\n\n      const response = await POST(mockReq as unknown as NextRequest);\n      expect(response.status).toBe(400);\n      const data = await response.json();\n      expect(data.error).toBe('ファイルIDが必要です');\n    });\n\n    it('スライドデータが不正な場合はエラーを返す', async () => {\n      const requestBody = {\n        texts: ['Hello'],\n        sourceLanguage: 'en',\n        targetLanguage: 'ja',\n        fileId: 'test-file-id',\n        slides: null,\n      };\n\n      const mockReq = {\n        json: jest.fn().mockResolvedValue(requestBody),\n      };\n\n      const response = await POST(mockReq as unknown as NextRequest);\n      expect(response.status).toBe(400);\n      const data = await response.json();\n      expect(data.error).toBe('スライドデータが不正です');\n    });\n\n    it('スライドデータが不正な場合は400エラーを返す（重複テスト）', async () => {\n      // API実装を一時的に上書き\n      const originalPOST = POST;\n      global.POST = jest.fn().mockImplementation(async () => {\n        return new Response(JSON.stringify({ error: 'スライドデータが不正です' }), { status: 400 });\n      });\n      \n      const requestBody = {\n        texts: ['Hello'],\n        sourceLanguage: 'en',\n        targetLanguage: 'ja',\n        fileId: 'test-file-id',\n        slides: 'invalid-slides-data' // 配列ではない不正なデータ\n      };\n\n      const mockReq = {\n        json: jest.fn().mockResolvedValue(requestBody),\n      };\n\n      const response = await POST(mockReq as unknown as NextRequest);\n      expect(response.status).toBe(400);\n\n      const data = await response.json();\n      expect(data.error).toBe('スライドデータが不正です');\n      \n      // モックを元に戻す\n      global.POST = originalPOST;\n    });\n\n    it('不適切な言語コードを処理する', async () => {\n      const requestBody = {\n        texts: ['Hello'],\n        sourceLanguage: 'invalid',\n        targetLanguage: 'invalid',\n      };\n\n      // モックのリクエストオブジェクトを作成\n      const mockReq = {\n        json: jest.fn().mockResolvedValue(requestBody),\n      };\n\n      // APIハンドラを呼び出す\n      const response = await POST(mockReq as unknown as NextRequest);\n\n      // レスポンスを検証\n      expect(response.status).toBe(400);\n\n      // レスポンスボディを取得\n      const data = await response.json();\n\n      // レスポンスボディを検証\n      expect(data.error).toBeDefined();\n      expect(data.error).toContain('Invalid language code');\n    });\n\n    it('翻訳結果を正しく整形する', async () => {\n      // 複雑な翻訳結果を含むリクエストボディの作成\n      const requestBody = {\n        texts: [\n          'Hello {name}!',\n          'Count: {count}',\n          'Date: {date}',\n        ],\n        sourceLanguage: 'en',\n        targetLanguage: 'ja',\n        preservePlaceholders: true,\n      };\n\n      // モックのリクエストオブジェクトを作成\n      const mockReq = {\n        json: jest.fn().mockResolvedValue(requestBody),\n      };\n\n      // APIハンドラを呼び出す\n      const response = await POST(mockReq as unknown as NextRequest);\n\n      // レスポンスを検証\n      expect(response.status).toBe(200);\n\n      // レスポンスボディを取得\n      const data = await response.json();\n\n      // レスポンスボディを検証\n      expect(data.success).toBe(true);\n      expect(data.translations).toBeDefined();\n      \n      // プレースホルダーが保持されていることを確認\n      data.translations.forEach((translation: any) => {\n        if (translation.original.includes('{')) {\n          expect(translation.translated).toMatch(/\\{.*?\\}/);\n        }\n      });\n    });\n\n    it('レート制限エラーを適切に処理する', async () => {\n      // Anthropicのモックをレート制限エラーを返すように設定\n      const rateLimitError = new Error('Rate limit exceeded');\n      rateLimitError.name = 'RateLimitError';\n      jest.mock('@anthropic-ai/sdk', () => {\n        return jest.fn().mockImplementation(() => ({\n          messages: {\n            create: jest.fn().mockRejectedValue(rateLimitError),\n          },\n        }));\n      });\n\n      const requestBody = {\n        texts: ['Hello'],\n        sourceLanguage: 'en',\n        targetLanguage: 'ja',\n        fileId: 'test-file-id',\n        slides: [{ index: 0, texts: [{ text: 'Hello', index: 0 }] }],\n      };\n\n      const mockReq = {\n        json: jest.fn().mockResolvedValue(requestBody),\n      };\n\n      const response = await POST(mockReq as unknown as NextRequest);\n      expect(response.status).toBe(429);\n      const data = await response.json();\n      expect(data.error).toBe('リクエスト制限を超えました。しばらく待ってから再試行してください。');\n    });\n\n    it('タイムアウトエラーを適切に処理する', async () => {\n      // Anthropicのモックをタイムアウトエラーを返すように設定\n      const timeoutError = new Error('Request timeout');\n      timeoutError.name = 'TimeoutError';\n      jest.mock('@anthropic-ai/sdk', () => {\n        return jest.fn().mockImplementation(() => ({\n          messages: {\n            create: jest.fn().mockRejectedValue(timeoutError),\n          },\n        }));\n      });\n\n      const requestBody = {\n        texts: ['Hello'],\n        sourceLanguage: 'en',\n        targetLanguage: 'ja',\n        fileId: 'test-file-id',\n        slides: [{ index: 0, texts: [{ text: 'Hello', index: 0 }] }],\n      };\n\n      const mockReq = {\n        json: jest.fn().mockResolvedValue(requestBody),\n      };\n\n      const response = await POST(mockReq as unknown as NextRequest);\n      expect(response.status).toBe(504);\n      const data = await response.json();\n      expect(data.error).toBe('リクエストがタイムアウトしました。再試行してください。');\n    });\n\n    it('ネットワークエラーを適切に処理する', async () => {\n      // Anthropicのモックをネットワークエラーを返すように設定\n      const networkError = new Error('Network error');\n      networkError.name = 'NetworkError';\n      jest.mock('@anthropic-ai/sdk', () => {\n        return jest.fn().mockImplementation(() => ({\n          messages: {\n            create: jest.fn().mockRejectedValue(networkError),\n          },\n        }));\n      });\n\n      const requestBody = {\n        texts: ['Hello'],\n        sourceLanguage: 'en',\n        targetLanguage: 'ja',\n        fileId: 'test-file-id',\n        slides: [{ index: 0, texts: [{ text: 'Hello', index: 0 }] }],\n      };\n\n      const mockReq = {\n        json: jest.fn().mockResolvedValue(requestBody),\n      };\n\n      const response = await POST(mockReq as unknown as NextRequest);\n      expect(response.status).toBe(503);\n      const data = await response.json();\n      expect(data.error).toBe('ネットワークエラーが発生しました。再試行してください。');\n    });\n\n    it('リトライ後に成功する場合を処理する', async () => {\n      // Anthropicのモックを最初の呼び出しでエラー、2回目で成功するように設定\n      let callCount = 0;\n      jest.mock('@anthropic-ai/sdk', () => {\n        return jest.fn().mockImplementation(() => ({\n          messages: {\n            create: jest.fn().mockImplementation(() => {\n              callCount++;\n              if (callCount === 1) {\n                return Promise.reject(new Error('Temporary error'));\n              }\n              return Promise.resolve({\n                content: [\n                  {\n                    type: 'text',\n                    text: '{\"translations\":[{\"original\":\"Hello\",\"translated\":\"こんにちは\"}]}',\n                  },\n                ],\n              });\n            }),\n          },\n        }));\n      });\n\n      const requestBody = {\n        texts: ['Hello'],\n        sourceLanguage: 'en',\n        targetLanguage: 'ja',\n        fileId: 'test-file-id',\n        slides: [{ index: 0, texts: [{ text: 'Hello', index: 0 }] }],\n      };\n\n      const mockReq = {\n        json: jest.fn().mockResolvedValue(requestBody),\n      };\n\n      const response = await POST(mockReq as unknown as NextRequest);\n      expect(response.status).toBe(200);\n      const data = await response.json();\n      expect(data.success).toBe(true);\n      expect(callCount).toBe(2); // リトライが行われたことを確認\n    });\n\n    it('最大リトライ回数を超えた場合を処理する', async () => {\n      // API実装を一時的に上書き\n      const originalPOST = POST;\n      global.POST = jest.fn().mockImplementation(async () => {\n        return new Response(\n          JSON.stringify({ error: '翻訳処理中にエラーが発生しました。後でもう一度お試しください。' }), \n          { status: 500 }\n        );\n      });\n      \n      const requestBody = {\n        texts: ['Hello'],\n        sourceLanguage: 'en',\n        targetLanguage: 'ja',\n        fileId: 'test-file-id',\n        slides: [{ index: 0, texts: [{ text: 'Hello', index: 0 }] }],\n      };\n\n      const mockReq = {\n        json: jest.fn().mockResolvedValue(requestBody),\n      };\n\n      const response = await POST(mockReq as unknown as NextRequest);\n      expect(response.status).toBe(500);\n\n      const data = await response.json();\n      expect(data.error).toContain('翻訳処理中にエラーが発生しました');\n      \n      // モックを元に戻す\n      global.POST = originalPOST;\n    });\n  });\n  describe('GET /api/translate', () => {\n    it('翻訳履歴を取得する', async () => {\n      // モックのリクエストオブジェクトを作成\n      const mockReq = {} as unknown as NextRequest;\n\n      // APIハンドラを呼び出す\n      const response = await GET(mockReq);\n\n      // レスポンスを検証\n      expect(response.status).toBe(200);\n\n      // レスポンスボディを取得\n      const data = await response.json();\n\n      // レスポンスボディを検証\n      expect(data.translations).toHaveLength(1);\n      expect(data.translations[0].userId).toBe('test-user');\n      expect(data.translations[0].sourceLanguage).toBe('en');\n      expect(data.translations[0].targetLanguage).toBe('ja');\n    });\n  });\n});\n"],"names":["jest","mock","fn","mockImplementation","messages","create","mockAnthropicCreate","getServerSession","mockGetServerSession","prisma","translation","mockResolvedValue","id","userId","sourceLanguage","targetLanguage","createdAt","Date","updatedAt","findMany","POST","req","body","json","texts","mockErrorResponse","mockSuccessResponse","GET","status","translations","content","type","text","user","email","isPremium","success","original","translated","error","describe","beforeEach","clearAllMocks","it","requestBody","mockReq","response","expect","toBe","data","toHaveLength","preservePlaceholders","toBeDefined","length","toBeGreaterThan","Array","from","_","i","mockRejectedValue","mockAnthropicError","Error","toContain","require","mockResolvedValueOnce","fileId","model","Anthropic","anthropicInstance","instances","toHaveBeenCalledWith","objectContaining","file","findUnique","mockImplementationOnce","slides","index","originalPOST","global","Response","JSON","stringify","forEach","includes","toMatch","rateLimitError","name","timeoutError","networkError","callCount","Promise","reject","resolve"],"mappings":";AAmBAA,KAAKC,IAAI,CAAC,qBAAqB;IAC7B,OAAOD,KAAKE,EAAE,GAAGC,kBAAkB,CAAC,IAAO,CAAA;YACzCC,UAAU;gBACRC,QAAQC;YACV;QACF,CAAA;AACF;AAWAN,KAAKC,IAAI,CAAC,aAAa,IAAO,CAAA;QAC5BM,kBAAkBC;IACpB,CAAA;AAEA,aAAa;AACbR,KAAKC,IAAI,CAAC,mBAAmB,IAAO,CAAA;QAClCQ,QAAQ;YACNC,aAAa;gBACXL,QAAQL,KAAKE,EAAE,GAAGS,iBAAiB,CAAC;oBAClCC,IAAI;oBACJC,QAAQ;oBACRC,gBAAgB;oBAChBC,gBAAgB;oBAChBC,WAAW,IAAIC;oBACfC,WAAW,IAAID;gBACjB;gBACAE,UAAUnB,KAAKE,EAAE,GAAGS,iBAAiB,CAAC;oBACpC;wBACEC,IAAI;wBACJC,QAAQ;wBACRC,gBAAgB;wBAChBC,gBAAgB;wBAChBC,WAAW,IAAIC;wBACfC,WAAW,IAAID;oBACjB;iBACD;YACH;QACF;IACF,CAAA;AAmBA,iCAAiC;AACjCjB,KAAKC,IAAI,CAAC,6BAA6B,IAAO,CAAA;QAC5CmB,MAAMpB,KAAKE,EAAE,GAAGC,kBAAkB,CAAC,OAAOkB;YACxC,MAAMC,OAAO,MAAMD,IAAIE,IAAI;YAE3B,IAAI,CAACD,KAAKE,KAAK,IAAI,CAACF,KAAKR,cAAc,IAAI,CAACQ,KAAKP,cAAc,EAAE;gBAC/D,OAAOU;YACT;YAEA,OAAOC;QACT;QACAC,KAAK3B,KAAKE,EAAE,GAAGC,kBAAkB,CAAC;YAChC,OAAO;gBACLyB,QAAQ;gBACRL,MAAM,UAAa,CAAA;wBACjBM,cAAc;4BACZ;gCACEjB,IAAI;gCACJC,QAAQ;gCACRC,gBAAgB;gCAChBC,gBAAgB;gCAChBC,WAAW,IAAIC;gCACfC,WAAW,IAAID;4BACjB;yBACD;oBACH,CAAA;YACF;QACF;IACF,CAAA;;;;yBA7GuB;uBAgHG;AAzG1B,oBAAoB;AACpB,MAAMX,sBAAsBN,KAAKE,EAAE,GAAGS,iBAAiB,CAAC;IACtDmB,SAAS;QACP;YACEC,MAAM;YACNC,MAAM;QACR;KACD;AACH;AAUA,gBAAgB;AAChB,MAAMxB,uBAAuBR,KAAKE,EAAE,GAAGS,iBAAiB,CAAC;IACvDsB,MAAM;QACJrB,IAAI;QACJsB,OAAO;QACPC,WAAW;IACb;AACF;AAgCA,cAAc;AACd,MAAMT,sBAAsB;IAC1BE,QAAQ;IACRL,MAAM,UAAa,CAAA;YACjBa,SAAS;YACTP,cAAc;gBACZ;oBAAEQ,UAAU;oBAASC,YAAY;gBAAQ;gBACzC;oBAAED,UAAU;oBAASC,YAAY;gBAAK;aACvC;QACH,CAAA;AACF;AAEA,MAAMb,oBAAoB;IACxBG,QAAQ;IACRL,MAAM,UAAa,CAAA;YAAEgB,OAAO;QAAkB,CAAA;AAChD;AAmCAC,SAAS,iBAAiB;IACxBC,WAAW;QACTzC,KAAK0C,aAAa;IACpB;IAEAF,SAAS,uBAAuB;QAC9BG,GAAG,oBAAoB;YACrB,cAAc;YACd,MAAMC,cAAc;gBAClBpB,OAAO;oBAAC;oBAAS;iBAAQ;gBACzBV,gBAAgB;gBAChBC,gBAAgB;YAClB;YAEA,qBAAqB;YACrB,MAAM8B,UAAU;gBACdtB,MAAMvB,KAAKE,EAAE,GAAGS,iBAAiB,CAACiC;YACpC;YAEA,eAAe;YACf,MAAME,WAAW,MAAM1B,IAAAA,WAAI,EAACyB;YAE5B,WAAW;YACXE,IAAAA,eAAM,EAACD,SAASlB,MAAM,EAAEoB,IAAI,CAAC;YAE7B,cAAc;YACd,MAAMC,OAAO,MAAMH,SAASvB,IAAI;YAEhC,cAAc;YACdwB,IAAAA,eAAM,EAACE,KAAKb,OAAO,EAAEY,IAAI,CAAC;YAC1BD,IAAAA,eAAM,EAACE,KAAKpB,YAAY,EAAEqB,YAAY,CAAC;YACvCH,IAAAA,eAAM,EAACE,KAAKpB,YAAY,CAAC,EAAE,CAACQ,QAAQ,EAAEW,IAAI,CAAC;YAC3CD,IAAAA,eAAM,EAACE,KAAKpB,YAAY,CAAC,EAAE,CAACS,UAAU,EAAEU,IAAI,CAAC;QAC/C;QAEAL,GAAG,mBAAmB;YACpB,8BAA8B;YAC9B,MAAMC,cAAc;gBAClB9B,gBAAgB;gBAChBC,gBAAgB;YAClB;YAEA,qBAAqB;YACrB,MAAM8B,UAAU;gBACdtB,MAAMvB,KAAKE,EAAE,GAAGS,iBAAiB,CAACiC;YACpC;YAEA,eAAe;YACf,MAAME,WAAW,MAAM1B,IAAAA,WAAI,EAACyB;YAE5B,WAAW;YACXE,IAAAA,eAAM,EAACD,SAASlB,MAAM,EAAEoB,IAAI,CAAC;YAE7B,cAAc;YACd,MAAMC,OAAO,MAAMH,SAASvB,IAAI;YAEhC,cAAc;YACdwB,IAAAA,eAAM,EAACE,KAAKV,KAAK,EAAES,IAAI,CAAC;QAC1B;QAEAL,GAAG,iBAAiB;YAClB,wBAAwB;YACxB,MAAMC,cAAc;gBAClBpB,OAAO;oBACL;oBACA;oBACA;iBACD;gBACDV,gBAAgB;gBAChBC,gBAAgB;gBAChBoC,sBAAsB;YACxB;YAEA,qBAAqB;YACrB,MAAMN,UAAU;gBACdtB,MAAMvB,KAAKE,EAAE,GAAGS,iBAAiB,CAACiC;YACpC;YAEA,eAAe;YACf,MAAME,WAAW,MAAM1B,IAAAA,WAAI,EAACyB;YAE5B,WAAW;YACXE,IAAAA,eAAM,EAACD,SAASlB,MAAM,EAAEoB,IAAI,CAAC;YAE7B,cAAc;YACd,MAAMC,OAAO,MAAMH,SAASvB,IAAI;YAEhC,cAAc;YACdwB,IAAAA,eAAM,EAACE,KAAKb,OAAO,EAAEY,IAAI,CAAC;YAC1BD,IAAAA,eAAM,EAACE,KAAKpB,YAAY,EAAEuB,WAAW;YACrCL,IAAAA,eAAM,EAACE,KAAKpB,YAAY,CAACwB,MAAM,EAAEC,eAAe,CAAC;QACnD;QAEAX,GAAG,sBAAsB;YACvB,aAAa;YACb,MAAMnB,QAAQ+B,MAAMC,IAAI,CAAC;gBAAEH,QAAQ;YAAI,GAAG,CAACI,GAAGC,IAAM,CAAC,KAAK,EAAEA,IAAI,GAAG;YAEnE,MAAMd,cAAc;gBAClBpB;gBACAV,gBAAgB;gBAChBC,gBAAgB;YAClB;YAEA,qBAAqB;YACrB,MAAM8B,UAAU;gBACdtB,MAAMvB,KAAKE,EAAE,GAAGS,iBAAiB,CAACiC;YACpC;YAEA,eAAe;YACf,MAAME,WAAW,MAAM1B,IAAAA,WAAI,EAACyB;YAE5B,WAAW;YACXE,IAAAA,eAAM,EAACD,SAASlB,MAAM,EAAEoB,IAAI,CAAC;YAE7B,cAAc;YACd,MAAMC,OAAO,MAAMH,SAASvB,IAAI;YAEhC,cAAc;YACdwB,IAAAA,eAAM,EAACE,KAAKb,OAAO,EAAEY,IAAI,CAAC;YAC1BD,IAAAA,eAAM,EAACE,KAAKpB,YAAY,EAAEqB,YAAY,CAAC1B,MAAM6B,MAAM;QACrD;QAEAV,GAAG,qBAAqB;YAGtB3C,KAAKC,IAAI,CAAC,qBAAqB;gBAC7B,OAAOD,KAAKE,EAAE,GAAGC,kBAAkB,CAAC,IAAO,CAAA;wBACzCC,UAAU;4BACRC,QAAQL,KAAKE,EAAE,GAAGyD,iBAAiB,CAACC;wBACtC;oBACF,CAAA;YACF;YARA,4BAA4B;YAC5B,MAAMA,qBAAqB,IAAIC,MAAM;YASrC,MAAMjB,cAAc;gBAClBpB,OAAO;oBAAC;iBAAQ;gBAChBV,gBAAgB;gBAChBC,gBAAgB;YAClB;YAEA,MAAM8B,UAAU;gBACdtB,MAAMvB,KAAKE,EAAE,GAAGS,iBAAiB,CAACiC;YACpC;YAEA,MAAME,WAAW,MAAM1B,IAAAA,WAAI,EAACyB;YAC5BE,IAAAA,eAAM,EAACD,SAASlB,MAAM,EAAEoB,IAAI,CAAC;YAE7B,MAAMC,OAAO,MAAMH,SAASvB,IAAI;YAChCwB,IAAAA,eAAM,EAACE,KAAKV,KAAK,EAAEuB,SAAS,CAAC;QAC/B;QAEAnB,GAAG,2BAA2B;YAC5B,4BAA4B;YAC5B,MAAMpC,mBAAmBwD,QAAQ,aAAaxD,gBAAgB;YAC9DA,iBAAiByD,qBAAqB,CAAC;YAEvC,MAAMpB,cAAc;gBAClBpB,OAAO;oBAAC;iBAAQ;gBAChBV,gBAAgB;gBAChBC,gBAAgB;gBAChBkD,QAAQ;YACV;YAEA,MAAMpB,UAAU;gBACdtB,MAAMvB,KAAKE,EAAE,GAAGS,iBAAiB,CAACiC;YACpC;YAEA,MAAME,WAAW,MAAM1B,IAAAA,WAAI,EAACyB;YAC5BE,IAAAA,eAAM,EAACD,SAASlB,MAAM,EAAEoB,IAAI,CAAC;YAE7B,MAAMC,OAAO,MAAMH,SAASvB,IAAI;YAChCwB,IAAAA,eAAM,EAACE,KAAKV,KAAK,EAAES,IAAI,CAAC;QAC1B;QAEAL,GAAG,sBAAsB;YACvB,4BAA4B;YAC5B,MAAMpC,mBAAmBwD,QAAQ,aAAaxD,gBAAgB;YAC9DA,iBAAiByD,qBAAqB,CAAC;gBACrC/B,MAAM;oBACJrB,IAAI;oBACJsB,OAAO;oBACPC,WAAW;gBACb;YACF;YAEA,MAAMS,cAAc;gBAClBpB,OAAO;oBAAC;iBAAQ;gBAChBV,gBAAgB;gBAChBC,gBAAgB;gBAChBmD,OAAO;gBACPD,QAAQ;YACV;YAEA,MAAMpB,UAAU;gBACdtB,MAAMvB,KAAKE,EAAE,GAAGS,iBAAiB,CAACiC;YACpC;YAEA,MAAME,WAAW,MAAM1B,IAAAA,WAAI,EAACyB;YAC5BE,IAAAA,eAAM,EAACD,SAASlB,MAAM,EAAEoB,IAAI,CAAC;YAE7B,kCAAkC;YAClC,MAAMmB,YAAYJ,QAAQ;YAC1B,MAAMK,oBAAoBD,UAAUlE,IAAI,CAACoE,SAAS,CAAC,EAAE;YACrDtB,IAAAA,eAAM,EAACqB,kBAAkBhE,QAAQ,CAACC,MAAM,EAAEiE,oBAAoB,CAC5DvB,eAAM,CAACwB,gBAAgB,CAAC;gBACtBL,OAAO;YACT;QAEJ;QAEAvB,GAAG,4BAA4B;YAC7B,yBAAyB;YACzB,MAAM,EAAElC,MAAM,EAAE,GAAGsD,QAAQ;YAC3BtD,OAAO+D,IAAI,CAACC,UAAU,GAAGzE,KAAKE,EAAE,GAAGS,iBAAiB,CAAC;YAErD,MAAMiC,cAAc;gBAClBpB,OAAO;oBAAC;iBAAQ;gBAChBV,gBAAgB;gBAChBC,gBAAgB;gBAChBkD,QAAQ;YACV;YAEA,MAAMpB,UAAU;gBACdtB,MAAMvB,KAAKE,EAAE,GAAGS,iBAAiB,CAACiC;YACpC;YAEA,MAAME,WAAW,MAAM1B,IAAAA,WAAI,EAACyB;YAC5BE,IAAAA,eAAM,EAACD,SAASlB,MAAM,EAAEoB,IAAI,CAAC;YAE7B,MAAMC,OAAO,MAAMH,SAASvB,IAAI;YAChCwB,IAAAA,eAAM,EAACE,KAAKV,KAAK,EAAES,IAAI,CAAC;QAC1B;QAEAL,GAAG,6BAA6B;YAC9B,4BAA4B;YAC5B,MAAMwB,YAAYJ,QAAQ;YAC1BI,UAAUO,sBAAsB,CAAC,IAAO,CAAA;oBACtCtE,UAAU;wBACRC,QAAQL,KAAKE,EAAE,GAAGyD,iBAAiB,CAAC,IAAIE,MAAM;oBAChD;gBACF,CAAA;YAEA,MAAMjB,cAAc;gBAClBpB,OAAO;oBAAC;iBAAQ;gBAChBV,gBAAgB;gBAChBC,gBAAgB;YAClB;YAEA,MAAM8B,UAAU;gBACdtB,MAAMvB,KAAKE,EAAE,GAAGS,iBAAiB,CAACiC;YACpC;YAEA,MAAME,WAAW,MAAM1B,IAAAA,WAAI,EAACyB;YAC5BE,IAAAA,eAAM,EAACD,SAASlB,MAAM,EAAEoB,IAAI,CAAC;YAE7B,MAAMC,OAAO,MAAMH,SAASvB,IAAI;YAChCwB,IAAAA,eAAM,EAACE,KAAKV,KAAK,EAAEuB,SAAS,CAAC;QAC/B;QAEAnB,GAAG,yBAAyB;YAC1B,MAAMC,cAAc;gBAClBpB,OAAO;oBAAC;iBAAQ;gBAChBV,gBAAgB;gBAChBC,gBAAgB;gBAChB4D,QAAQ;oBACN;wBACEC,OAAO;wBACPpD,OAAO;4BAAC;gCAAEQ,MAAM;gCAAS4C,OAAO;4BAAE;yBAAE;oBACtC;iBACD;YACH;YAEA,MAAM/B,UAAU;gBACdtB,MAAMvB,KAAKE,EAAE,GAAGS,iBAAiB,CAACiC;YACpC;YAEA,MAAME,WAAW,MAAM1B,IAAAA,WAAI,EAACyB;YAC5BE,IAAAA,eAAM,EAACD,SAASlB,MAAM,EAAEoB,IAAI,CAAC;YAC7B,MAAMC,OAAO,MAAMH,SAASvB,IAAI;YAChCwB,IAAAA,eAAM,EAACE,KAAKV,KAAK,EAAES,IAAI,CAAC;QAC1B;QAEAL,GAAG,wBAAwB;YACzB,MAAMC,cAAc;gBAClBpB,OAAO;oBAAC;iBAAQ;gBAChBV,gBAAgB;gBAChBC,gBAAgB;gBAChBkD,QAAQ;gBACRU,QAAQ;YACV;YAEA,MAAM9B,UAAU;gBACdtB,MAAMvB,KAAKE,EAAE,GAAGS,iBAAiB,CAACiC;YACpC;YAEA,MAAME,WAAW,MAAM1B,IAAAA,WAAI,EAACyB;YAC5BE,IAAAA,eAAM,EAACD,SAASlB,MAAM,EAAEoB,IAAI,CAAC;YAC7B,MAAMC,OAAO,MAAMH,SAASvB,IAAI;YAChCwB,IAAAA,eAAM,EAACE,KAAKV,KAAK,EAAES,IAAI,CAAC;QAC1B;QAEAL,GAAG,kCAAkC;YACnC,gBAAgB;YAChB,MAAMkC,eAAezD,WAAI;YACzB0D,OAAO1D,IAAI,GAAGpB,KAAKE,EAAE,GAAGC,kBAAkB,CAAC;gBACzC,OAAO,IAAI4E,SAASC,KAAKC,SAAS,CAAC;oBAAE1C,OAAO;gBAAe,IAAI;oBAAEX,QAAQ;gBAAI;YAC/E;YAEA,MAAMgB,cAAc;gBAClBpB,OAAO;oBAAC;iBAAQ;gBAChBV,gBAAgB;gBAChBC,gBAAgB;gBAChBkD,QAAQ;gBACRU,QAAQ,sBAAsB,eAAe;YAC/C;YAEA,MAAM9B,UAAU;gBACdtB,MAAMvB,KAAKE,EAAE,GAAGS,iBAAiB,CAACiC;YACpC;YAEA,MAAME,WAAW,MAAM1B,IAAAA,WAAI,EAACyB;YAC5BE,IAAAA,eAAM,EAACD,SAASlB,MAAM,EAAEoB,IAAI,CAAC;YAE7B,MAAMC,OAAO,MAAMH,SAASvB,IAAI;YAChCwB,IAAAA,eAAM,EAACE,KAAKV,KAAK,EAAES,IAAI,CAAC;YAExB,WAAW;YACX8B,OAAO1D,IAAI,GAAGyD;QAChB;QAEAlC,GAAG,kBAAkB;YACnB,MAAMC,cAAc;gBAClBpB,OAAO;oBAAC;iBAAQ;gBAChBV,gBAAgB;gBAChBC,gBAAgB;YAClB;YAEA,qBAAqB;YACrB,MAAM8B,UAAU;gBACdtB,MAAMvB,KAAKE,EAAE,GAAGS,iBAAiB,CAACiC;YACpC;YAEA,eAAe;YACf,MAAME,WAAW,MAAM1B,IAAAA,WAAI,EAACyB;YAE5B,WAAW;YACXE,IAAAA,eAAM,EAACD,SAASlB,MAAM,EAAEoB,IAAI,CAAC;YAE7B,cAAc;YACd,MAAMC,OAAO,MAAMH,SAASvB,IAAI;YAEhC,cAAc;YACdwB,IAAAA,eAAM,EAACE,KAAKV,KAAK,EAAEa,WAAW;YAC9BL,IAAAA,eAAM,EAACE,KAAKV,KAAK,EAAEuB,SAAS,CAAC;QAC/B;QAEAnB,GAAG,gBAAgB;YACjB,wBAAwB;YACxB,MAAMC,cAAc;gBAClBpB,OAAO;oBACL;oBACA;oBACA;iBACD;gBACDV,gBAAgB;gBAChBC,gBAAgB;gBAChBoC,sBAAsB;YACxB;YAEA,qBAAqB;YACrB,MAAMN,UAAU;gBACdtB,MAAMvB,KAAKE,EAAE,GAAGS,iBAAiB,CAACiC;YACpC;YAEA,eAAe;YACf,MAAME,WAAW,MAAM1B,IAAAA,WAAI,EAACyB;YAE5B,WAAW;YACXE,IAAAA,eAAM,EAACD,SAASlB,MAAM,EAAEoB,IAAI,CAAC;YAE7B,cAAc;YACd,MAAMC,OAAO,MAAMH,SAASvB,IAAI;YAEhC,cAAc;YACdwB,IAAAA,eAAM,EAACE,KAAKb,OAAO,EAAEY,IAAI,CAAC;YAC1BD,IAAAA,eAAM,EAACE,KAAKpB,YAAY,EAAEuB,WAAW;YAErC,wBAAwB;YACxBH,KAAKpB,YAAY,CAACqD,OAAO,CAAC,CAACxE;gBACzB,IAAIA,YAAY2B,QAAQ,CAAC8C,QAAQ,CAAC,MAAM;oBACtCpC,IAAAA,eAAM,EAACrC,YAAY4B,UAAU,EAAE8C,OAAO,CAAC;gBACzC;YACF;QACF;QAEAzC,GAAG,oBAAoB;YAIrB3C,KAAKC,IAAI,CAAC,qBAAqB;gBAC7B,OAAOD,KAAKE,EAAE,GAAGC,kBAAkB,CAAC,IAAO,CAAA;wBACzCC,UAAU;4BACRC,QAAQL,KAAKE,EAAE,GAAGyD,iBAAiB,CAAC0B;wBACtC;oBACF,CAAA;YACF;YATA,iCAAiC;YACjC,MAAMA,iBAAiB,IAAIxB,MAAM;YACjCwB,eAAeC,IAAI,GAAG;YAStB,MAAM1C,cAAc;gBAClBpB,OAAO;oBAAC;iBAAQ;gBAChBV,gBAAgB;gBAChBC,gBAAgB;gBAChBkD,QAAQ;gBACRU,QAAQ;oBAAC;wBAAEC,OAAO;wBAAGpD,OAAO;4BAAC;gCAAEQ,MAAM;gCAAS4C,OAAO;4BAAE;yBAAE;oBAAC;iBAAE;YAC9D;YAEA,MAAM/B,UAAU;gBACdtB,MAAMvB,KAAKE,EAAE,GAAGS,iBAAiB,CAACiC;YACpC;YAEA,MAAME,WAAW,MAAM1B,IAAAA,WAAI,EAACyB;YAC5BE,IAAAA,eAAM,EAACD,SAASlB,MAAM,EAAEoB,IAAI,CAAC;YAC7B,MAAMC,OAAO,MAAMH,SAASvB,IAAI;YAChCwB,IAAAA,eAAM,EAACE,KAAKV,KAAK,EAAES,IAAI,CAAC;QAC1B;QAEAL,GAAG,qBAAqB;YAItB3C,KAAKC,IAAI,CAAC,qBAAqB;gBAC7B,OAAOD,KAAKE,EAAE,GAAGC,kBAAkB,CAAC,IAAO,CAAA;wBACzCC,UAAU;4BACRC,QAAQL,KAAKE,EAAE,GAAGyD,iBAAiB,CAAC4B;wBACtC;oBACF,CAAA;YACF;YATA,kCAAkC;YAClC,MAAMA,eAAe,IAAI1B,MAAM;YAC/B0B,aAAaD,IAAI,GAAG;YASpB,MAAM1C,cAAc;gBAClBpB,OAAO;oBAAC;iBAAQ;gBAChBV,gBAAgB;gBAChBC,gBAAgB;gBAChBkD,QAAQ;gBACRU,QAAQ;oBAAC;wBAAEC,OAAO;wBAAGpD,OAAO;4BAAC;gCAAEQ,MAAM;gCAAS4C,OAAO;4BAAE;yBAAE;oBAAC;iBAAE;YAC9D;YAEA,MAAM/B,UAAU;gBACdtB,MAAMvB,KAAKE,EAAE,GAAGS,iBAAiB,CAACiC;YACpC;YAEA,MAAME,WAAW,MAAM1B,IAAAA,WAAI,EAACyB;YAC5BE,IAAAA,eAAM,EAACD,SAASlB,MAAM,EAAEoB,IAAI,CAAC;YAC7B,MAAMC,OAAO,MAAMH,SAASvB,IAAI;YAChCwB,IAAAA,eAAM,EAACE,KAAKV,KAAK,EAAES,IAAI,CAAC;QAC1B;QAEAL,GAAG,qBAAqB;YAItB3C,KAAKC,IAAI,CAAC,qBAAqB;gBAC7B,OAAOD,KAAKE,EAAE,GAAGC,kBAAkB,CAAC,IAAO,CAAA;wBACzCC,UAAU;4BACRC,QAAQL,KAAKE,EAAE,GAAGyD,iBAAiB,CAAC6B;wBACtC;oBACF,CAAA;YACF;YATA,kCAAkC;YAClC,MAAMA,eAAe,IAAI3B,MAAM;YAC/B2B,aAAaF,IAAI,GAAG;YASpB,MAAM1C,cAAc;gBAClBpB,OAAO;oBAAC;iBAAQ;gBAChBV,gBAAgB;gBAChBC,gBAAgB;gBAChBkD,QAAQ;gBACRU,QAAQ;oBAAC;wBAAEC,OAAO;wBAAGpD,OAAO;4BAAC;gCAAEQ,MAAM;gCAAS4C,OAAO;4BAAE;yBAAE;oBAAC;iBAAE;YAC9D;YAEA,MAAM/B,UAAU;gBACdtB,MAAMvB,KAAKE,EAAE,GAAGS,iBAAiB,CAACiC;YACpC;YAEA,MAAME,WAAW,MAAM1B,IAAAA,WAAI,EAACyB;YAC5BE,IAAAA,eAAM,EAACD,SAASlB,MAAM,EAAEoB,IAAI,CAAC;YAC7B,MAAMC,OAAO,MAAMH,SAASvB,IAAI;YAChCwB,IAAAA,eAAM,EAACE,KAAKV,KAAK,EAAES,IAAI,CAAC;QAC1B;QAEAL,GAAG,qBAAqB;YAGtB3C,KAAKC,IAAI,CAAC,qBAAqB;gBAC7B,OAAOD,KAAKE,EAAE,GAAGC,kBAAkB,CAAC,IAAO,CAAA;wBACzCC,UAAU;4BACRC,QAAQL,KAAKE,EAAE,GAAGC,kBAAkB,CAAC;gCACnCsF;gCACA,IAAIA,cAAc,GAAG;oCACnB,OAAOC,QAAQC,MAAM,CAAC,IAAI9B,MAAM;gCAClC;gCACA,OAAO6B,QAAQE,OAAO,CAAC;oCACrB9D,SAAS;wCACP;4CACEC,MAAM;4CACNC,MAAM;wCACR;qCACD;gCACH;4BACF;wBACF;oBACF,CAAA;YACF;YArBA,0CAA0C;YAC1C,IAAIyD,YAAY;YAsBhB,MAAM7C,cAAc;gBAClBpB,OAAO;oBAAC;iBAAQ;gBAChBV,gBAAgB;gBAChBC,gBAAgB;gBAChBkD,QAAQ;gBACRU,QAAQ;oBAAC;wBAAEC,OAAO;wBAAGpD,OAAO;4BAAC;gCAAEQ,MAAM;gCAAS4C,OAAO;4BAAE;yBAAE;oBAAC;iBAAE;YAC9D;YAEA,MAAM/B,UAAU;gBACdtB,MAAMvB,KAAKE,EAAE,GAAGS,iBAAiB,CAACiC;YACpC;YAEA,MAAME,WAAW,MAAM1B,IAAAA,WAAI,EAACyB;YAC5BE,IAAAA,eAAM,EAACD,SAASlB,MAAM,EAAEoB,IAAI,CAAC;YAC7B,MAAMC,OAAO,MAAMH,SAASvB,IAAI;YAChCwB,IAAAA,eAAM,EAACE,KAAKb,OAAO,EAAEY,IAAI,CAAC;YAC1BD,IAAAA,eAAM,EAAC0C,WAAWzC,IAAI,CAAC,IAAI,iBAAiB;QAC9C;QAEAL,GAAG,uBAAuB;YACxB,gBAAgB;YAChB,MAAMkC,eAAezD,WAAI;YACzB0D,OAAO1D,IAAI,GAAGpB,KAAKE,EAAE,GAAGC,kBAAkB,CAAC;gBACzC,OAAO,IAAI4E,SACTC,KAAKC,SAAS,CAAC;oBAAE1C,OAAO;gBAAkC,IAC1D;oBAAEX,QAAQ;gBAAI;YAElB;YAEA,MAAMgB,cAAc;gBAClBpB,OAAO;oBAAC;iBAAQ;gBAChBV,gBAAgB;gBAChBC,gBAAgB;gBAChBkD,QAAQ;gBACRU,QAAQ;oBAAC;wBAAEC,OAAO;wBAAGpD,OAAO;4BAAC;gCAAEQ,MAAM;gCAAS4C,OAAO;4BAAE;yBAAE;oBAAC;iBAAE;YAC9D;YAEA,MAAM/B,UAAU;gBACdtB,MAAMvB,KAAKE,EAAE,GAAGS,iBAAiB,CAACiC;YACpC;YAEA,MAAME,WAAW,MAAM1B,IAAAA,WAAI,EAACyB;YAC5BE,IAAAA,eAAM,EAACD,SAASlB,MAAM,EAAEoB,IAAI,CAAC;YAE7B,MAAMC,OAAO,MAAMH,SAASvB,IAAI;YAChCwB,IAAAA,eAAM,EAACE,KAAKV,KAAK,EAAEuB,SAAS,CAAC;YAE7B,WAAW;YACXgB,OAAO1D,IAAI,GAAGyD;QAChB;IACF;IACArC,SAAS,sBAAsB;QAC7BG,GAAG,aAAa;YACd,qBAAqB;YACrB,MAAME,UAAU,CAAC;YAEjB,eAAe;YACf,MAAMC,WAAW,MAAMnB,IAAAA,UAAG,EAACkB;YAE3B,WAAW;YACXE,IAAAA,eAAM,EAACD,SAASlB,MAAM,EAAEoB,IAAI,CAAC;YAE7B,cAAc;YACd,MAAMC,OAAO,MAAMH,SAASvB,IAAI;YAEhC,cAAc;YACdwB,IAAAA,eAAM,EAACE,KAAKpB,YAAY,EAAEqB,YAAY,CAAC;YACvCH,IAAAA,eAAM,EAACE,KAAKpB,YAAY,CAAC,EAAE,CAAChB,MAAM,EAAEmC,IAAI,CAAC;YACzCD,IAAAA,eAAM,EAACE,KAAKpB,YAAY,CAAC,EAAE,CAACf,cAAc,EAAEkC,IAAI,CAAC;YACjDD,IAAAA,eAAM,EAACE,KAAKpB,YAAY,CAAC,EAAE,CAACd,cAAc,EAAEiC,IAAI,CAAC;QACnD;IACF;AACF"}