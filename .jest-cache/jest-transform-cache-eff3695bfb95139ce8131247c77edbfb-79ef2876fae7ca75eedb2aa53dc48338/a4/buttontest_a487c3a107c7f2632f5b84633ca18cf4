af7db420e155e3af2efc67bf3245822f
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _interop_require_default = require("@swc/helpers/_/_interop_require_default");
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default._(require("react"));
const _react1 = require("@testing-library/react");
const _button = require("@/components/ui/button");
describe('Button', ()=>{
    it('ボタンをレンダリングする', ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_button.Button, {
            children: "テストボタン"
        }));
        const button = _react1.screen.getByRole('button', {
            name: 'テストボタン'
        });
        expect(button).toBeInTheDocument();
    });
    it('クリックイベントを処理する', ()=>{
        const handleClick = jest.fn();
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_button.Button, {
            onClick: handleClick,
            children: "クリック"
        }));
        const button = _react1.screen.getByRole('button', {
            name: 'クリック'
        });
        _react1.fireEvent.click(button);
        expect(handleClick).toHaveBeenCalledTimes(1);
    });
    it('異なるバリアントをレンダリングする', ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsxs)(_jsxruntime.Fragment, {
            children: [
                /*#__PURE__*/ (0, _jsxruntime.jsx)(_button.Button, {
                    variant: "default",
                    "data-testid": "default",
                    children: "デフォルト"
                }),
                /*#__PURE__*/ (0, _jsxruntime.jsx)(_button.Button, {
                    variant: "destructive",
                    "data-testid": "destructive",
                    children: "破壊的"
                }),
                /*#__PURE__*/ (0, _jsxruntime.jsx)(_button.Button, {
                    variant: "outline",
                    "data-testid": "outline",
                    children: "アウトライン"
                }),
                /*#__PURE__*/ (0, _jsxruntime.jsx)(_button.Button, {
                    variant: "secondary",
                    "data-testid": "secondary",
                    children: "セカンダリ"
                }),
                /*#__PURE__*/ (0, _jsxruntime.jsx)(_button.Button, {
                    variant: "ghost",
                    "data-testid": "ghost",
                    children: "ゴースト"
                }),
                /*#__PURE__*/ (0, _jsxruntime.jsx)(_button.Button, {
                    variant: "link",
                    "data-testid": "link",
                    children: "リンク"
                })
            ]
        }));
        expect(_react1.screen.getByTestId('default')).toHaveClass('bg-primary');
        expect(_react1.screen.getByTestId('destructive')).toHaveClass('bg-destructive');
        expect(_react1.screen.getByTestId('outline')).toHaveClass('border-input');
        expect(_react1.screen.getByTestId('secondary')).toHaveClass('bg-secondary');
        expect(_react1.screen.getByTestId('ghost')).toHaveClass('hover:bg-accent');
        expect(_react1.screen.getByTestId('link')).toHaveClass('text-primary');
    });
    it('異なるサイズをレンダリングする', ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsxs)(_jsxruntime.Fragment, {
            children: [
                /*#__PURE__*/ (0, _jsxruntime.jsx)(_button.Button, {
                    size: "default",
                    "data-testid": "default",
                    children: "デフォルト"
                }),
                /*#__PURE__*/ (0, _jsxruntime.jsx)(_button.Button, {
                    size: "sm",
                    "data-testid": "sm",
                    children: "小"
                }),
                /*#__PURE__*/ (0, _jsxruntime.jsx)(_button.Button, {
                    size: "lg",
                    "data-testid": "lg",
                    children: "大"
                }),
                /*#__PURE__*/ (0, _jsxruntime.jsx)(_button.Button, {
                    size: "icon",
                    "data-testid": "icon",
                    children: "アイコン"
                })
            ]
        }));
        expect(_react1.screen.getByTestId('default')).toHaveClass('h-10');
        expect(_react1.screen.getByTestId('sm')).toHaveClass('h-9');
        expect(_react1.screen.getByTestId('lg')).toHaveClass('h-11');
        expect(_react1.screen.getByTestId('icon')).toHaveClass('h-10 w-10');
    });
    it('無効状態をレンダリングする', ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_button.Button, {
            disabled: true,
            "data-testid": "disabled",
            children: "無効"
        }));
        const button = _react1.screen.getByTestId('disabled');
        expect(button).toBeDisabled();
        expect(button).toHaveClass('disabled:opacity-50');
    });
    it('カスタムクラス名を適用する', ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_button.Button, {
            className: "custom-class",
            "data-testid": "custom",
            children: "カスタム"
        }));
        const button = _react1.screen.getByTestId('custom');
        expect(button).toHaveClass('custom-class');
    });
    it('asChildプロパティを使用して別の要素としてレンダリングする', ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_button.Button, {
            asChild: true,
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)("a", {
                href: "#",
                "data-testid": "link-button",
                children: "リンクボタン"
            })
        }));
        const link = _react1.screen.getByTestId('link-button');
        expect(link).toBeInTheDocument();
        expect(link.tagName).toBe('A');
        expect(link).toHaveAttribute('href', '#');
    });
});
