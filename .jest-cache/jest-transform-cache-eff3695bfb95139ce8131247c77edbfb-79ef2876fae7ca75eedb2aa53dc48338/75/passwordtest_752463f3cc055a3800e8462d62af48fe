927c2ffd0588764022f78dcfdf03d726
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _password = require("@/lib/auth/password");
describe('パスワード関連ユーティリティ', ()=>{
    describe('hashPassword', ()=>{
        it('パスワードをハッシュ化できる', async ()=>{
            const password = 'testPassword123';
            const hashedPassword = await (0, _password.hashPassword)(password);
            // ハッシュ化されたパスワードは元のパスワードと異なるはず
            expect(hashedPassword).not.toBe(password);
            // ハッシュ化されたパスワードはbcryptの形式に従っているはず
            expect(hashedPassword).toMatch(/^\$2[aby]\$\d+\$/);
        });
        it('同じパスワードでも異なるハッシュを生成する', async ()=>{
            const password = 'testPassword123';
            const hash1 = await (0, _password.hashPassword)(password);
            const hash2 = await (0, _password.hashPassword)(password);
            // 同じパスワードでもソルトが異なるため、ハッシュも異なる
            expect(hash1).not.toBe(hash2);
        });
    });
    describe('comparePasswords', ()=>{
        it('正しいパスワードを検証できる', async ()=>{
            const password = 'testPassword123';
            const hashedPassword = await (0, _password.hashPassword)(password);
            const isValid = await (0, _password.comparePasswords)(password, hashedPassword);
            expect(isValid).toBe(true);
        });
        it('誤ったパスワードを検出できる', async ()=>{
            const password = 'testPassword123';
            const wrongPassword = 'wrongPassword123';
            const hashedPassword = await (0, _password.hashPassword)(password);
            const isValid = await (0, _password.comparePasswords)(wrongPassword, hashedPassword);
            expect(isValid).toBe(false);
        });
        it('空のパスワードを検証できる', async ()=>{
            const password = '';
            const hashedPassword = await (0, _password.hashPassword)(password);
            const isValid = await (0, _password.comparePasswords)(password, hashedPassword);
            expect(isValid).toBe(true);
        });
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy95dXN1a2V0c3Vub2RhL0RvY3VtZW50cy9jdXJzb3IvcHB0dHJhbnNsYXRvcmFwcC93b3JrdHJlZXMvY2ljZC1zZXR1cC90ZXN0cy9saWIvYXV0aC9wYXNzd29yZC50ZXN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGhhc2hQYXNzd29yZCwgY29tcGFyZVBhc3N3b3JkcyB9IGZyb20gJ0AvbGliL2F1dGgvcGFzc3dvcmQnO1xuXG5kZXNjcmliZSgn44OR44K544Ov44O844OJ6Zai6YCj44Om44O844OG44Kj44Oq44OG44KjJywgKCkgPT4ge1xuICBkZXNjcmliZSgnaGFzaFBhc3N3b3JkJywgKCkgPT4ge1xuICAgIGl0KCfjg5Hjgrnjg6/jg7zjg4njgpLjg4/jg4Pjgrfjg6XljJbjgafjgY3jgosnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBwYXNzd29yZCA9ICd0ZXN0UGFzc3dvcmQxMjMnO1xuICAgICAgY29uc3QgaGFzaGVkUGFzc3dvcmQgPSBhd2FpdCBoYXNoUGFzc3dvcmQocGFzc3dvcmQpO1xuICAgICAgXG4gICAgICAvLyDjg4/jg4Pjgrfjg6XljJbjgZXjgozjgZ/jg5Hjgrnjg6/jg7zjg4njga/lhYPjga7jg5Hjgrnjg6/jg7zjg4njgajnlbDjgarjgovjga/jgZpcbiAgICAgIGV4cGVjdChoYXNoZWRQYXNzd29yZCkubm90LnRvQmUocGFzc3dvcmQpO1xuICAgICAgXG4gICAgICAvLyDjg4/jg4Pjgrfjg6XljJbjgZXjgozjgZ/jg5Hjgrnjg6/jg7zjg4njga9iY3J5cHTjga7lvaLlvI/jgavlvpPjgaPjgabjgYTjgovjga/jgZpcbiAgICAgIGV4cGVjdChoYXNoZWRQYXNzd29yZCkudG9NYXRjaCgvXlxcJDJbYWJ5XVxcJFxcZCtcXCQvKTtcbiAgICB9KTtcbiAgICBcbiAgICBpdCgn5ZCM44GY44OR44K544Ov44O844OJ44Gn44KC55Ww44Gq44KL44OP44OD44K344Ol44KS55Sf5oiQ44GZ44KLJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgcGFzc3dvcmQgPSAndGVzdFBhc3N3b3JkMTIzJztcbiAgICAgIGNvbnN0IGhhc2gxID0gYXdhaXQgaGFzaFBhc3N3b3JkKHBhc3N3b3JkKTtcbiAgICAgIGNvbnN0IGhhc2gyID0gYXdhaXQgaGFzaFBhc3N3b3JkKHBhc3N3b3JkKTtcbiAgICAgIFxuICAgICAgLy8g5ZCM44GY44OR44K544Ov44O844OJ44Gn44KC44K944Or44OI44GM55Ww44Gq44KL44Gf44KB44CB44OP44OD44K344Ol44KC55Ww44Gq44KLXG4gICAgICBleHBlY3QoaGFzaDEpLm5vdC50b0JlKGhhc2gyKTtcbiAgICB9KTtcbiAgfSk7XG4gIFxuICBkZXNjcmliZSgnY29tcGFyZVBhc3N3b3JkcycsICgpID0+IHtcbiAgICBpdCgn5q2j44GX44GE44OR44K544Ov44O844OJ44KS5qSc6Ki844Gn44GN44KLJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgcGFzc3dvcmQgPSAndGVzdFBhc3N3b3JkMTIzJztcbiAgICAgIGNvbnN0IGhhc2hlZFBhc3N3b3JkID0gYXdhaXQgaGFzaFBhc3N3b3JkKHBhc3N3b3JkKTtcbiAgICAgIFxuICAgICAgY29uc3QgaXNWYWxpZCA9IGF3YWl0IGNvbXBhcmVQYXNzd29yZHMocGFzc3dvcmQsIGhhc2hlZFBhc3N3b3JkKTtcbiAgICAgIGV4cGVjdChpc1ZhbGlkKS50b0JlKHRydWUpO1xuICAgIH0pO1xuICAgIFxuICAgIGl0KCfoqqTjgaPjgZ/jg5Hjgrnjg6/jg7zjg4njgpLmpJzlh7rjgafjgY3jgosnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBwYXNzd29yZCA9ICd0ZXN0UGFzc3dvcmQxMjMnO1xuICAgICAgY29uc3Qgd3JvbmdQYXNzd29yZCA9ICd3cm9uZ1Bhc3N3b3JkMTIzJztcbiAgICAgIGNvbnN0IGhhc2hlZFBhc3N3b3JkID0gYXdhaXQgaGFzaFBhc3N3b3JkKHBhc3N3b3JkKTtcbiAgICAgIFxuICAgICAgY29uc3QgaXNWYWxpZCA9IGF3YWl0IGNvbXBhcmVQYXNzd29yZHMod3JvbmdQYXNzd29yZCwgaGFzaGVkUGFzc3dvcmQpO1xuICAgICAgZXhwZWN0KGlzVmFsaWQpLnRvQmUoZmFsc2UpO1xuICAgIH0pO1xuICAgIFxuICAgIGl0KCfnqbrjga7jg5Hjgrnjg6/jg7zjg4njgpLmpJzoqLzjgafjgY3jgosnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBwYXNzd29yZCA9ICcnO1xuICAgICAgY29uc3QgaGFzaGVkUGFzc3dvcmQgPSBhd2FpdCBoYXNoUGFzc3dvcmQocGFzc3dvcmQpO1xuICAgICAgXG4gICAgICBjb25zdCBpc1ZhbGlkID0gYXdhaXQgY29tcGFyZVBhc3N3b3JkcyhwYXNzd29yZCwgaGFzaGVkUGFzc3dvcmQpO1xuICAgICAgZXhwZWN0KGlzVmFsaWQpLnRvQmUodHJ1ZSk7XG4gICAgfSk7XG4gIH0pO1xufSk7XG4iXSwibmFtZXMiOlsiZGVzY3JpYmUiLCJpdCIsInBhc3N3b3JkIiwiaGFzaGVkUGFzc3dvcmQiLCJoYXNoUGFzc3dvcmQiLCJleHBlY3QiLCJub3QiLCJ0b0JlIiwidG9NYXRjaCIsImhhc2gxIiwiaGFzaDIiLCJpc1ZhbGlkIiwiY29tcGFyZVBhc3N3b3JkcyIsIndyb25nUGFzc3dvcmQiXSwibWFwcGluZ3MiOiI7Ozs7MEJBQStDO0FBRS9DQSxTQUFTLGtCQUFrQjtJQUN6QkEsU0FBUyxnQkFBZ0I7UUFDdkJDLEdBQUcsa0JBQWtCO1lBQ25CLE1BQU1DLFdBQVc7WUFDakIsTUFBTUMsaUJBQWlCLE1BQU1DLElBQUFBLHNCQUFZLEVBQUNGO1lBRTFDLDhCQUE4QjtZQUM5QkcsT0FBT0YsZ0JBQWdCRyxHQUFHLENBQUNDLElBQUksQ0FBQ0w7WUFFaEMsa0NBQWtDO1lBQ2xDRyxPQUFPRixnQkFBZ0JLLE9BQU8sQ0FBQztRQUNqQztRQUVBUCxHQUFHLHlCQUF5QjtZQUMxQixNQUFNQyxXQUFXO1lBQ2pCLE1BQU1PLFFBQVEsTUFBTUwsSUFBQUEsc0JBQVksRUFBQ0Y7WUFDakMsTUFBTVEsUUFBUSxNQUFNTixJQUFBQSxzQkFBWSxFQUFDRjtZQUVqQyw4QkFBOEI7WUFDOUJHLE9BQU9JLE9BQU9ILEdBQUcsQ0FBQ0MsSUFBSSxDQUFDRztRQUN6QjtJQUNGO0lBRUFWLFNBQVMsb0JBQW9CO1FBQzNCQyxHQUFHLGtCQUFrQjtZQUNuQixNQUFNQyxXQUFXO1lBQ2pCLE1BQU1DLGlCQUFpQixNQUFNQyxJQUFBQSxzQkFBWSxFQUFDRjtZQUUxQyxNQUFNUyxVQUFVLE1BQU1DLElBQUFBLDBCQUFnQixFQUFDVixVQUFVQztZQUNqREUsT0FBT00sU0FBU0osSUFBSSxDQUFDO1FBQ3ZCO1FBRUFOLEdBQUcsa0JBQWtCO1lBQ25CLE1BQU1DLFdBQVc7WUFDakIsTUFBTVcsZ0JBQWdCO1lBQ3RCLE1BQU1WLGlCQUFpQixNQUFNQyxJQUFBQSxzQkFBWSxFQUFDRjtZQUUxQyxNQUFNUyxVQUFVLE1BQU1DLElBQUFBLDBCQUFnQixFQUFDQyxlQUFlVjtZQUN0REUsT0FBT00sU0FBU0osSUFBSSxDQUFDO1FBQ3ZCO1FBRUFOLEdBQUcsaUJBQWlCO1lBQ2xCLE1BQU1DLFdBQVc7WUFDakIsTUFBTUMsaUJBQWlCLE1BQU1DLElBQUFBLHNCQUFZLEVBQUNGO1lBRTFDLE1BQU1TLFVBQVUsTUFBTUMsSUFBQUEsMEJBQWdCLEVBQUNWLFVBQVVDO1lBQ2pERSxPQUFPTSxTQUFTSixJQUFJLENBQUM7UUFDdkI7SUFDRjtBQUNGIn0=