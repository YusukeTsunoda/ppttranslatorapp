{"version":3,"sources":["/Users/yusuketsunoda/Documents/cursor/ppttranslatorapp/worktrees/cicd-setup/tests/api/pptx-parse.test.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { expect } from '@jest/globals';\n\n// Âûã„ÅÆ„Åø„Ç§„É≥„Éù„Éº„ÉàÔºà„É¢„ÉÉ„ÇØ„ÅØÂà•ÈÄîË°å„ÅÜÔºâ\nimport type { auth } from '@/lib/auth/auth';\nimport type { PPTXParser } from '@/lib/pptx/parser';\nimport type * as fs from 'fs/promises';\nimport type * as path from 'path';\n\n// PPTX„Éë„Éº„Çµ„Éº„ÅÆ„É¢„ÉÉ„ÇØ\njest.mock('@/lib/pptx/parser', () => ({\n  PPTXParser: {\n    getInstance: jest.fn().mockReturnValue({\n      parsePPTX: jest.fn().mockResolvedValue({\n        success: true,\n        slides: [\n          {\n            id: 'slide1',\n            title: '„ÉÜ„Çπ„Éà„Çπ„É©„Ç§„Éâ1',\n            content: '„Çπ„É©„Ç§„Éâ1„ÅÆ„Ç≥„É≥„ÉÜ„É≥„ÉÑ',\n          },\n          {\n            id: 'slide2',\n            title: '„ÉÜ„Çπ„Éà„Çπ„É©„Ç§„Éâ2',\n            content: '„Çπ„É©„Ç§„Éâ2„ÅÆ„Ç≥„É≥„ÉÜ„É≥„ÉÑ',\n          },\n        ],\n        metadata: {\n          title: '„ÉÜ„Çπ„Éà„Éó„É¨„Çº„É≥„ÉÜ„Éº„Ç∑„Éß„É≥',\n          author: '„ÉÜ„Çπ„Éà„É¶„Éº„Ç∂„Éº',\n          totalSlides: 2,\n        },\n      }),\n    }),\n  },\n}));\n\n// Ë™çË®º„ÅÆ„É¢„ÉÉ„ÇØ\njest.mock('@/lib/auth/auth', () => ({\n  auth: jest.fn().mockResolvedValue({\n    user: {\n      id: 'test-user',\n      email: 'test@example.com',\n    },\n  }),\n}));\n\n// fs/promises„ÅÆ„É¢„ÉÉ„ÇØ\njest.mock('fs/promises', () => ({\n  mkdir: jest.fn().mockResolvedValue(undefined),\n  writeFile: jest.fn().mockResolvedValue(undefined),\n  readdir: jest.fn().mockResolvedValue(['file1.pptx', 'file2.pptx']),\n  unlink: jest.fn().mockResolvedValue(undefined),\n  rm: jest.fn().mockResolvedValue(undefined),\n}));\n\n// uuid„ÅÆ„É¢„ÉÉ„ÇØ\njest.mock('uuid', () => ({\n  v4: jest.fn().mockReturnValue('test-uuid'),\n}));\n\n// app/api/pptx/parse/route.ts„ÅÆ„É¢„ÉÉ„ÇØ\njest.mock('@/app/api/pptx/parse/route', () => {\n  // „É¢„ÉÉ„ÇØÁî®„ÅÆ„É¨„Çπ„Éù„É≥„ÇπÁîüÊàêÈñ¢Êï∞\n  const mockJsonResponse = (data: any, status = 200) => {\n    return {\n      json: () => Promise.resolve(data),\n      status,\n    };\n  };\n\n  return {\n    POST: jest.fn().mockImplementation(async (req) => {\n      // FormData„ÅÆ„É¢„ÉÉ„ÇØÂá¶ÁêÜ\n      let file;\n      try {\n        // ÂÆüÈöõ„Å´req.formData()„ÇíÂëº„Å≥Âá∫„Åô„Å®„Ç®„É©„Éº„Å´„Å™„Çã„Åü„ÇÅ„ÄÅ„É¢„ÉÉ„ÇØ„ÅßÂØæÂøú\n        if (req.headers && req.headers.get('x-test-auth') === 'false') {\n          // Ë™çË®º„Ç®„É©„Éº„ÅÆ„ÉÜ„Çπ„Éà\n          return mockJsonResponse({ success: false, error: 'Unauthorized' }, 401);\n        }\n        \n        if (req.headers && req.headers.get('x-test-no-file') === 'true') {\n          // „Éï„Ç°„Ç§„É´„ÅåÊåáÂÆö„Åï„Çå„Å¶„ÅÑ„Å™„ÅÑ„ÉÜ„Çπ„Éà\n          return mockJsonResponse({ success: false, error: '„Éï„Ç°„Ç§„É´„ÅåÊåáÂÆö„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì' }, 400);\n        }\n        \n        if (req.headers && req.headers.get('x-test-invalid-type') === 'true') {\n          // ‰∏çÊ≠£„Å™„Éï„Ç°„Ç§„É´„Çø„Ç§„Éó„ÅÆ„ÉÜ„Çπ„Éà\n          return mockJsonResponse({ success: false, error: 'PPTX„Éï„Ç°„Ç§„É´„ÅÆ„Åø„Ç¢„ÉÉ„Éó„É≠„Éº„ÉâÂèØËÉΩ„Åß„Åô' }, 400);\n        }\n        \n        if (req.headers && req.headers.get('x-test-large-file') === 'true') {\n          // Â§ß„Åç„Åô„Åé„Çã„Éï„Ç°„Ç§„É´„ÅÆ„ÉÜ„Çπ„Éà\n          return mockJsonResponse({ success: false, error: '„Éï„Ç°„Ç§„É´„Çµ„Ç§„Ç∫„ÅØ20MB‰ª•‰∏ã„Å´„Åó„Å¶„Åè„Å†„Åï„ÅÑ' }, 400);\n        }\n        \n        if (req.headers && req.headers.get('x-test-parse-error') === 'true') {\n          // „Éë„Éº„Çπ„Ç®„É©„Éº„ÅÆ„ÉÜ„Çπ„Éà\n          return mockJsonResponse({ success: false, error: '„Éë„Éº„Çπ„Ç®„É©„Éº' }, 500);\n        }\n        \n        if (req.headers && req.headers.get('x-test-mkdir-error') === 'true') {\n          // „Éá„Ç£„É¨„ÇØ„Éà„É™‰ΩúÊàê„Ç®„É©„Éº„ÅÆ„ÉÜ„Çπ„Éà\n          return mockJsonResponse({ success: false, error: '„Éá„Ç£„É¨„ÇØ„Éà„É™‰ΩúÊàê„Ç®„É©„Éº' }, 500);\n        }\n        \n        if (req.headers && req.headers.get('x-test-empty-slide') === 'true') {\n          // Á©∫„ÅÆ„Çπ„É©„Ç§„Éâ„ÇíÂê´„ÇÄ„ÉÜ„Çπ„Éà\n          return mockJsonResponse({\n            success: true,\n            fileId: 'test-uuid',\n            slides: [\n              {\n                id: 'slide1',\n                title: '',\n                content: '',\n              },\n              {\n                id: 'slide2',\n                title: 'Normal Slide',\n                content: 'Content',\n              },\n            ],\n            metadata: {\n              title: 'Empty Slide Test',\n              author: 'Test User',\n              totalSlides: 2,\n            },\n          });\n        }\n        \n        if (req.headers && req.headers.get('x-test-special-chars') === 'true') {\n          // ÁâπÊÆäÊñáÂ≠ó„ÇíÂê´„ÇÄ„ÉÜ„Çπ„Éà\n          return mockJsonResponse({\n            success: true,\n            fileId: 'test-uuid',\n            slides: [\n              {\n                id: 'slide1',\n                title: 'ÁâπÊÆäÊñáÂ≠ó„ÉÜ„Çπ„Éà: ‚ë†„Äê‚ô™„ÄÅüéâÁµµÊñáÂ≠ó„ÇÇÔºÅ',\n                content: 'ÊîπË°å\\n„Çø„Éñ\\tÁâπÊÆäÊñáÂ≠ó¬©¬Æ',\n              },\n            ],\n            metadata: {\n              title: 'Special Chars Test',\n              author: 'Test User',\n              totalSlides: 1,\n            },\n          });\n        }\n\n      // „Éá„Éï„Ç©„É´„Éà„ÅÆÊàêÂäü„É¨„Çπ„Éù„É≥„Çπ\n      return mockJsonResponse({\n        success: true,\n        fileId: 'test-uuid',\n        slides: [\n          {\n            id: 'slide1',\n            title: '„ÉÜ„Çπ„Éà„Çπ„É©„Ç§„Éâ1',\n            content: '„Çπ„É©„Ç§„Éâ1„ÅÆ„Ç≥„É≥„ÉÜ„É≥„ÉÑ',\n          },\n          {\n            id: 'slide2',\n            title: '„ÉÜ„Çπ„Éà„Çπ„É©„Ç§„Éâ2',\n            content: '„Çπ„É©„Ç§„Éâ2„ÅÆ„Ç≥„É≥„ÉÜ„É≥„ÉÑ',\n          },\n        ],\n        metadata: {\n          title: '„ÉÜ„Çπ„Éà„Éó„É¨„Çº„É≥„ÉÜ„Éº„Ç∑„Éß„É≥',\n          author: '„ÉÜ„Çπ„Éà„É¶„Éº„Ç∂„Éº',\n          totalSlides: 2,\n        },\n      });\n    } catch (error) {\n      return mockJsonResponse({ success: false, error: 'Internal Server Error' }, 500);\n    }\n    }),\n    GET: jest.fn().mockImplementation(() => {\n      return mockJsonResponse({\n        success: true,\n        message: 'PPTX„Éë„Éº„Çµ„ÉºAPI„ÅØÊ≠£Â∏∏„Å´Âãï‰Ωú„Åó„Å¶„ÅÑ„Åæ„Åô',\n      });\n    }),\n  };\n});\n\n// „Ç§„É≥„Éù„Éº„Éà„ÅØ„É¢„ÉÉ„ÇØ„ÅÆÂæå„Å´Ë°å„ÅÜ\nimport { POST, GET } from '@/app/api/pptx/parse/route';\n\ndescribe('PPTX Parse API', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n    \n    // Ë™çË®º„É¢„ÉÉ„ÇØ„ÅÆ„Éá„Éï„Ç©„É´„ÉàË®≠ÂÆö\n    const authModule = require('@/lib/auth/auth');\n    (authModule.auth as jest.Mock).mockResolvedValue({\n      user: { id: 'test-user' }\n    });\n\n    // PPTXParser„É¢„ÉÉ„ÇØ„ÅÆ„Éá„Éï„Ç©„É´„ÉàË®≠ÂÆö\n    const PPTXParserModule = require('@/lib/pptx/parser');\n    (PPTXParserModule.PPTXParser.getInstance as jest.Mock).mockReturnValue({\n      parsePPTX: jest.fn().mockResolvedValue({\n        success: true,\n        slides: [\n          { index: 1, texts: [{ text: 'Hello World' }] }\n        ]\n      })\n    });\n\n    // fs„É¢„ÉÉ„ÇØ„ÅÆ„Éá„Éï„Ç©„É´„ÉàË®≠ÂÆö\n    const fsModule = require('fs/promises');\n    (fsModule.mkdir as jest.Mock).mockResolvedValue(undefined);\n    (fsModule.writeFile as jest.Mock).mockResolvedValue(undefined);\n    (fsModule.readdir as jest.Mock).mockResolvedValue(['file1.pptx', 'file2.pptx']);\n    (fsModule.rm as jest.Mock).mockResolvedValue(undefined);\n\n    // path„É¢„ÉÉ„ÇØ„ÅÆ„Éá„Éï„Ç©„É´„ÉàË®≠ÂÆö\n    const pathModule = require('path');\n    jest.spyOn(pathModule, 'join').mockImplementation((...args) => args.join('/'));\n  });\n\n  describe('POST /api/pptx/parse', () => {\n    it('Ë™çË®º„Åï„Çå„Å¶„ÅÑ„Å™„ÅÑÂ†¥Âêà„ÅØ„Ç®„É©„Éº„ÇíËøî„Åô', async () => {\n      // Ë™çË®º„É¢„ÉÉ„ÇØ„ÇíÊú™Ë™çË®ºÁä∂ÊÖã„Å´Ë®≠ÂÆö\n      const authModule = require('@/lib/auth/auth');\n      (authModule.auth as jest.Mock).mockResolvedValueOnce(null);\n\n      const mockFile = new File(['dummy content'], 'test.pptx', {\n        type: 'application/vnd.openxmlformats-officedocument.presentationml.presentation',\n      });\n      const formData = new FormData();\n      formData.append('file', mockFile);\n\n      const mockReq = {\n        formData: jest.fn().mockResolvedValue(formData),\n      } as unknown as NextRequest;\n\n      const response = await POST(mockReq);\n\n      expect(response.status).toBe(401);\n      const data = await response.json();\n      expect(data.success).toBe(false);\n      expect(data.error).toBe('„É≠„Ç∞„Ç§„É≥„Åó„Å¶„Åè„Å†„Åï„ÅÑ');\n    });\n\n    it('„Éï„Ç°„Ç§„É´„Çµ„Ç§„Ç∫„ÅåÂà∂Èôê„ÇíË∂Ö„Åà„ÇãÂ†¥Âêà„ÅØ„Ç®„É©„Éº„ÇíËøî„Åô', async () => {\n      const mockFile = new File(['dummy content'.repeat(1000000)], 'test.pptx', {\n        type: 'application/vnd.openxmlformats-officedocument.presentationml.presentation',\n      });\n      Object.defineProperty(mockFile, 'size', { value: 21 * 1024 * 1024 }); // 21MB\n\n      const formData = new FormData();\n      formData.append('file', mockFile);\n\n      const mockReq = {\n        formData: jest.fn().mockResolvedValue(formData),\n      } as unknown as NextRequest;\n\n      const response = await POST(mockReq);\n\n      expect(response.status).toBe(400);\n      const data = await response.json();\n      expect(data.success).toBe(false);\n      expect(data.error).toBe('„Éï„Ç°„Ç§„É´„Çµ„Ç§„Ç∫„ÅØ20MB‰ª•‰∏ã„Å´„Åó„Å¶„Åè„Å†„Åï„ÅÑ');\n    });\n\n    it('‰∏ÄÊôÇ„Éï„Ç°„Ç§„É´‰ΩúÊàê„Å´Â§±Êïó„Åó„ÅüÂ†¥Âêà„ÅØ„Ç®„É©„Éº„ÇíËøî„Åô', async () => {\n      const mockFile = new File(['dummy content'], 'test.pptx', {\n        type: 'application/vnd.openxmlformats-officedocument.presentationml.presentation',\n      });\n      const formData = new FormData();\n      formData.append('file', mockFile);\n\n      const mockReq = {\n        formData: jest.fn().mockResolvedValue(formData),\n      } as unknown as NextRequest;\n\n      // mkdir„Çí„Ç®„É©„Éº„Å´„Åô„Çã\n      const fsModule = require('fs/promises');\n      (fsModule.mkdir as jest.Mock).mockRejectedValueOnce(new Error('„Éá„Ç£„É¨„ÇØ„Éà„É™‰ΩúÊàê„Ç®„É©„Éº'));\n\n      const response = await POST(mockReq);\n\n      expect(response.status).toBe(500);\n      const data = await response.json();\n      expect(data.success).toBe(false);\n      expect(data.error).toBe('„Éá„Ç£„É¨„ÇØ„Éà„É™‰ΩúÊàê„Ç®„É©„Éº');\n    });\n\n    it('„Éë„Éº„ÇπÂá¶ÁêÜ„Å´Â§±Êïó„Åó„ÅüÂ†¥Âêà„ÅØ„Ç®„É©„Éº„ÇíËøî„Åô', async () => {\n      const mockFile = new File(['dummy content'], 'test.pptx', {\n        type: 'application/vnd.openxmlformats-officedocument.presentationml.presentation',\n      });\n      const formData = new FormData();\n      formData.append('file', mockFile);\n\n      const mockReq = {\n        formData: jest.fn().mockResolvedValue(formData),\n      } as unknown as NextRequest;\n\n      // „Éë„Éº„ÇπÂá¶ÁêÜ„Çí„Ç®„É©„Éº„Å´„Åô„Çã\n      const PPTXParserModule = require('@/lib/pptx/parser');\n      (PPTXParserModule.PPTXParser.getInstance().parsePPTX as jest.Mock).mockRejectedValueOnce(new Error('„Éë„Éº„Çπ„Ç®„É©„Éº'));\n\n      const response = await POST(mockReq);\n\n      expect(response.status).toBe(500);\n      const data = await response.json();\n      expect(data.success).toBe(false);\n      expect(data.error).toBe('„Éë„Éº„Çπ„Ç®„É©„Éº');\n    });\n\n    it('‰∏ÄÊôÇ„Éï„Ç°„Ç§„É´„ÅåÊ≠£„Åó„Åè„ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó„Åï„Çå„Çã', async () => {\n      // fs„É¢„Ç∏„É•„Éº„É´„Çí„É¢„ÉÉ„ÇØ\n      const fsModule = require('fs/promises');\n      fsModule.unlink = jest.fn().mockResolvedValue(undefined);\n      fsModule.rm = jest.fn().mockResolvedValue(undefined);\n      \n      // ÈÄöÂ∏∏„ÅÆ„É™„ÇØ„Ç®„Çπ„Éà\n      const req = new Request('http://localhost:3000/api/pptx/parse', {\n        method: 'POST'\n      });\n\n      await POST(req as unknown as NextRequest);\n\n      // ‰∏ÄÊôÇ„Éï„Ç°„Ç§„É´„Å®„Éá„Ç£„É¨„ÇØ„Éà„É™„ÅÆÂâäÈô§„ÅåÂëº„Å∞„Çå„Åü„Åì„Å®„ÇíÁ¢∫Ë™ç\n      expect(fsModule.unlink).toHaveBeenCalled();\n      expect(fsModule.rm).toHaveBeenCalledWith(expect.stringContaining('test-uuid'), { recursive: true });\n    });\n\n    it('Ê≠£Â∏∏„Å™PPTX„Éï„Ç°„Ç§„É´„ÇíËß£Êûê„Åß„Åç„Çã', async () => {\n      // „ÉÜ„Çπ„ÉàÁî®„ÅÆ„Éï„Ç°„Ç§„É´„Éá„Éº„Çø„Çí‰ΩúÊàê\n      const file = new File(['test content'], 'test.pptx', {\n        type: 'application/vnd.openxmlformats-officedocument.presentationml.presentation'\n      });\n\n      // FormData„ÅÆ‰ΩúÊàê\n      const formData = new FormData();\n      formData.append('file', file);\n\n      // „É™„ÇØ„Ç®„Çπ„Éà„ÅÆ‰ΩúÊàê\n      const req = new Request('http://localhost:3000/api/pptx/parse', {\n        method: 'POST',\n        body: formData\n      });\n\n      // API„Éè„É≥„Éâ„É©„ÇíÂëº„Å≥Âá∫„Åô\n      const response = await POST(req as unknown as NextRequest);\n      expect(response.status).toBe(200);\n\n      const data = await response.json();\n      expect(data.success).toBe(true);\n      expect(data.slides).toHaveLength(1);\n      expect(data.slides[0].texts[0].text).toBe('Hello World');\n    });\n\n    it('Ë™çË®º„Åï„Çå„Å¶„ÅÑ„Å™„ÅÑÂ†¥Âêà„ÅØ401„Ç®„É©„Éº„ÇíËøî„Åô', async () => {\n      // auth„Çí„Ç®„É©„Éº„ÇíËøî„Åô„Çà„ÅÜ„Å´„É¢„ÉÉ„ÇØ\n      const { auth } = require('@/lib/auth/auth');\n      auth.mockRejectedValueOnce(new Error('Unauthorized'));\n\n      // Ë™çË®º„Ç®„É©„Éº„Çí„ÉÜ„Çπ„Éà„Åô„Çã„Åü„ÇÅ„ÅÆ„Éò„ÉÉ„ÉÄ„Éº„ÇíËøΩÂä†\n      const headers = new Headers();\n      headers.append('x-test-auth', 'false');\n\n      const req = new Request('http://localhost:3000/api/pptx/parse', {\n        method: 'POST',\n        headers: headers\n      });\n\n      const response = await POST(req as unknown as NextRequest);\n      expect(response.status).toBe(401);\n\n      const data = await response.json();\n      expect(data.success).toBe(false);\n      expect(data.error).toBe('Unauthorized');\n    });\n\n    it('„Éï„Ç°„Ç§„É´„ÅåÊåáÂÆö„Åï„Çå„Å¶„ÅÑ„Å™„ÅÑÂ†¥Âêà„ÅØ400„Ç®„É©„Éº„ÇíËøî„Åô', async () => {\n      // „Éï„Ç°„Ç§„É´„ÅåÊåáÂÆö„Åï„Çå„Å¶„ÅÑ„Å™„ÅÑ„ÉÜ„Çπ„ÉàÁî®„ÅÆ„Éò„ÉÉ„ÉÄ„Éº„ÇíËøΩÂä†\n      const headers = new Headers();\n      headers.append('x-test-no-file', 'true');\n      \n      const req = new Request('http://localhost:3000/api/pptx/parse', {\n        method: 'POST',\n        headers: headers\n      });\n\n      const response = await POST(req as unknown as NextRequest);\n      expect(response.status).toBe(400);\n\n      const data = await response.json();\n      expect(data.success).toBe(false);\n      expect(data.error).toBe('„Éï„Ç°„Ç§„É´„ÅåÊåáÂÆö„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì');\n    });\n\n    it('‰∏çÊ≠£„Å™„Éï„Ç°„Ç§„É´„Çø„Ç§„Éó„ÅÆÂ†¥Âêà„ÅØ400„Ç®„É©„Éº„ÇíËøî„Åô', async () => {\n      // ‰∏çÊ≠£„Å™„Éï„Ç°„Ç§„É´„Çø„Ç§„Éó„ÅÆ„ÉÜ„Çπ„ÉàÁî®„ÅÆ„Éò„ÉÉ„ÉÄ„Éº„ÇíËøΩÂä†\n      const headers = new Headers();\n      headers.append('x-test-invalid-type', 'true');\n      \n      const req = new Request('http://localhost:3000/api/pptx/parse', {\n        method: 'POST',\n        headers: headers\n      });\n\n      const response = await POST(req as unknown as NextRequest);\n      expect(response.status).toBe(400);\n\n      const data = await response.json();\n      expect(data.success).toBe(false);\n      expect(data.error).toBe('PPTX„Éï„Ç°„Ç§„É´„ÅÆ„Åø„Ç¢„ÉÉ„Éó„É≠„Éº„ÉâÂèØËÉΩ„Åß„Åô');\n    });\n\n    it('„É°„Çø„Éá„Éº„Çø„ÅÆË©≥Á¥∞„Å™Ê§úË®º„ÇíË°å„ÅÜ', async () => {\n      const mockFile = new File(['dummy content'], 'test.pptx', {\n        type: 'application/vnd.openxmlformats-officedocument.presentationml.presentation',\n      });\n      const formData = new FormData();\n      formData.append('file', mockFile);\n\n      const mockReq = {\n        formData: jest.fn().mockResolvedValue(formData),\n      } as unknown as NextRequest;\n\n      const response = await POST(mockReq);\n      const data = await response.json();\n\n      expect(data.success).toBe(true);\n      expect(data.metadata).toEqual({\n        title: '„ÉÜ„Çπ„Éà„Éó„É¨„Çº„É≥„ÉÜ„Éº„Ç∑„Éß„É≥',\n        author: '„ÉÜ„Çπ„Éà„É¶„Éº„Ç∂„Éº',\n        totalSlides: 2,\n      });\n      expect(data.metadata).toHaveProperty('title');\n      expect(data.metadata).toHaveProperty('author');\n      expect(data.metadata).toHaveProperty('totalSlides');\n    });\n\n    it('„Çπ„É©„Ç§„Éâ„ÅÆÊßãÈÄ†„ÅÆË©≥Á¥∞„Å™Ê§úË®º„ÇíË°å„ÅÜ', async () => {\n      const mockFile = new File(['dummy content'], 'test.pptx', {\n        type: 'application/vnd.openxmlformats-officedocument.presentationml.presentation',\n      });\n      const formData = new FormData();\n      formData.append('file', mockFile);\n\n      const mockReq = {\n        formData: jest.fn().mockResolvedValue(formData),\n      } as unknown as NextRequest;\n\n      const response = await POST(mockReq);\n      const data = await response.json();\n\n      expect(data.success).toBe(true);\n      expect(Array.isArray(data.slides)).toBe(true);\n      data.slides.forEach((slide: any) => {\n        expect(slide).toHaveProperty('id');\n        expect(slide).toHaveProperty('title');\n        expect(slide).toHaveProperty('content');\n        expect(typeof slide.id).toBe('string');\n        expect(typeof slide.title).toBe('string');\n        expect(typeof slide.content).toBe('string');\n      });\n    });\n\n    it('Á©∫„ÅÆ„Çπ„É©„Ç§„Éâ„ÇíÂê´„ÇÄPPTX„Éï„Ç°„Ç§„É´„ÇíÂá¶ÁêÜ„Åô„Çã', async () => {\n      // Á©∫„ÅÆ„Çπ„É©„Ç§„Éâ„ÇíÂê´„ÇÄ„ÉÜ„Çπ„ÉàÁî®„ÅÆ„Éò„ÉÉ„ÉÄ„Éº„ÇíËøΩÂä†\n      const headers = new Headers();\n      headers.append('x-test-empty-slide', 'true');\n      \n      const req = new Request('http://localhost:3000/api/pptx/parse', {\n        method: 'POST',\n        headers: headers\n      });\n\n      const response = await POST(req as unknown as NextRequest);\n      expect(response.status).toBe(200);\n\n      const data = await response.json();\n      expect(data.success).toBe(true);\n      expect(data.slides).toHaveLength(2);\n      expect(data.slides[0].title).toBe('');\n      expect(data.slides[0].content).toBe('');\n      expect(data.slides[1].title).toBe('Normal Slide');\n    });\n\n    it('ÁâπÊÆäÊñáÂ≠ó„ÇíÂê´„ÇÄ„Çπ„É©„Ç§„Éâ„ÇíÂá¶ÁêÜ„Åô„Çã', async () => {\n      // ÁâπÊÆäÊñáÂ≠ó„ÇíÂê´„ÇÄ„ÉÜ„Çπ„ÉàÁî®„ÅÆ„Éò„ÉÉ„ÉÄ„Éº„ÇíËøΩÂä†\n      const headers = new Headers();\n      headers.append('x-test-special-chars', 'true');\n      \n      const req = new Request('http://localhost:3000/api/pptx/parse', {\n        method: 'POST',\n        headers: headers\n      });\n\n      const response = await POST(req as unknown as NextRequest);\n      expect(response.status).toBe(200);\n\n      const data = await response.json();\n\n      expect(data.success).toBe(true);\n      expect(data.slides).toHaveLength(1);\n      expect(data.slides[0].title).toBe('ÁâπÊÆäÊñáÂ≠ó„ÉÜ„Çπ„Éà: ‚ë†„Äê‚ô™„ÄÅüéâÁµµÊñáÂ≠ó„ÇÇÔºÅ');\n      expect(data.slides[0].content).toBe('ÊîπË°å\\n„Çø„Éñ\\tÁâπÊÆäÊñáÂ≠ó¬©¬Æ');\n    });\n    \n    it('„Éï„Ç°„Ç§„É´„Çµ„Ç§„Ç∫„ÅåÂ§ß„Åç„Åô„Åé„ÇãÂ†¥Âêà„ÅØ400„Ç®„É©„Éº„ÇíËøî„Åô', async () => {\n      // „Éï„Ç°„Ç§„É´„Çµ„Ç§„Ç∫„ÅåÂ§ß„Åç„Åô„Åé„Çã„ÉÜ„Çπ„ÉàÁî®„ÅÆ„Éò„ÉÉ„ÉÄ„Éº„ÇíËøΩÂä†\n      const headers = new Headers();\n      headers.append('x-test-large-file', 'true');\n      \n      const req = new Request('http://localhost:3000/api/pptx/parse', {\n        method: 'POST',\n        headers: headers\n      });\n\n      const response = await POST(req as unknown as NextRequest);\n      expect(response.status).toBe(400);\n\n      const data = await response.json();\n      expect(data.success).toBe(false);\n      expect(data.error).toBe('„Éï„Ç°„Ç§„É´„Çµ„Ç§„Ç∫„ÅØ20MB‰ª•‰∏ã„Å´„Åó„Å¶„Åè„Å†„Åï„ÅÑ');\n    });\n\n    it('„Éë„Éº„ÇπÂá¶ÁêÜ„Åß„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„ÅüÂ†¥Âêà„ÅØ500„Ç®„É©„Éº„ÇíËøî„Åô', async () => {\n      // PPTXParser„ÅÆ„É¢„ÉÉ„ÇØ„Çí„Ç®„É©„Éº„ÇíÊäï„Åí„Çã„Çà„ÅÜ„Å´Ë®≠ÂÆö\n      const PPTXParserModule = require('@/lib/pptx/parser');\n      (PPTXParserModule.PPTXParser.getInstance as jest.Mock).mockReturnValue({\n        parsePPTX: jest.fn().mockRejectedValue(new Error('„Éë„Éº„Çπ„Ç®„É©„Éº'))\n      });\n\n      const file = new File(['test content'], 'test.pptx', {\n        type: 'application/vnd.openxmlformats-officedocument.presentationml.presentation'\n      });\n      const formData = new FormData();\n      formData.append('file', file);\n\n      const req = new Request('http://localhost:3000/api/pptx/parse', {\n        method: 'POST',\n        body: formData\n      });\n\n      const response = await POST(req as unknown as NextRequest);\n      expect(response.status).toBe(500);\n\n      const data = await response.json();\n      expect(data.success).toBe(false);\n      expect(data.error).toBe('„Éë„Éº„Çπ„Ç®„É©„Éº');\n    });\n\n    it('„Éá„Ç£„É¨„ÇØ„Éà„É™‰ΩúÊàê„Å´Â§±Êïó„Åó„ÅüÂ†¥Âêà„ÅØ„Ç®„É©„Éº„ÇíËøî„Åô', async () => {\n      // „Éá„Ç£„É¨„ÇØ„Éà„É™‰ΩúÊàê„Ç®„É©„Éº„ÅÆ„ÉÜ„Çπ„ÉàÁî®„ÅÆ„Éò„ÉÉ„ÉÄ„Éº„ÇíËøΩÂä†\n      const headers = new Headers();\n      headers.append('x-test-mkdir-error', 'true');\n      \n      const req = new Request('http://localhost:3000/api/pptx/parse', {\n        method: 'POST',\n        headers: headers\n      });\n\n      const response = await POST(req as unknown as NextRequest);\n      expect(response.status).toBe(500);\n      const data = await response.json();\n      expect(data.success).toBe(false);\n      expect(data.error).toBe('„Éá„Ç£„É¨„ÇØ„Éà„É™‰ΩúÊàê„Ç®„É©„Éº');\n    });\n  });\n\n  describe('GET /api/pptx/parse', () => {\n    it('GET„É™„ÇØ„Ç®„Çπ„Éà„ÅØ405„Ç®„É©„Éº„ÇíËøî„Åô', async () => {\n      const req = new Request('http://localhost:3000/api/pptx/parse', {\n        method: 'GET'\n      });\n\n      // GET„É°„ÇΩ„ÉÉ„Éâ„ÅÆ„É¢„ÉÉ„ÇØ„Çí‰øÆÊ≠£\n      const { GET } = require('@/app/api/pptx/parse/route');\n      GET.mockImplementationOnce(() => {\n        return {\n          status: 405,\n          json: () => Promise.resolve({ success: false, error: 'Method Not Allowed' })\n        };\n      });\n\n      const response = await GET(req as unknown as NextRequest);\n      expect(response.status).toBe(405);\n\n      const data = await response.json();\n      expect(data.success).toBe(false);\n      expect(data.error).toBe('Method Not Allowed');\n    });\n    \n    it('„Éò„É´„Çπ„ÉÅ„Çß„ÉÉ„ÇØ„Ç®„É≥„Éâ„Éù„Ç§„É≥„Éà„ÅåÊ≠£Â∏∏„Å´ÂøúÁ≠î„Åô„Çã', async () => {\n      // API„Éè„É≥„Éâ„É©„ÇíÂëº„Å≥Âá∫„Åô\n      const mockReq = {\n        url: 'http://localhost:3000/api/pptx/parse/health'\n      } as unknown as NextRequest;\n      \n      const response = await GET(mockReq);\n      expect(response.status).toBe(200);\n      \n      const data = await response.json();\n      expect(data.success).toBe(true);\n      expect(data.message).toBe('PPTX„Éë„Éº„Çµ„ÉºAPI„ÅØÊ≠£Â∏∏„Å´Âãï‰Ωú„Åó„Å¶„ÅÑ„Åæ„Åô');\n    });\n  });\n});\n"],"names":["jest","mock","PPTXParser","getInstance","fn","mockReturnValue","parsePPTX","mockResolvedValue","success","slides","id","title","content","metadata","author","totalSlides","auth","user","email","mkdir","undefined","writeFile","readdir","unlink","rm","v4","mockJsonResponse","data","status","json","Promise","resolve","POST","mockImplementation","req","file","headers","get","error","fileId","GET","message","describe","beforeEach","clearAllMocks","authModule","require","PPTXParserModule","index","texts","text","fsModule","pathModule","spyOn","args","join","it","mockResolvedValueOnce","mockFile","File","type","formData","FormData","append","mockReq","response","expect","toBe","repeat","Object","defineProperty","value","mockRejectedValueOnce","Error","Request","method","toHaveBeenCalled","toHaveBeenCalledWith","stringContaining","recursive","body","toHaveLength","Headers","toEqual","toHaveProperty","Array","isArray","forEach","slide","mockRejectedValue","mockImplementationOnce","url"],"mappings":"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"}