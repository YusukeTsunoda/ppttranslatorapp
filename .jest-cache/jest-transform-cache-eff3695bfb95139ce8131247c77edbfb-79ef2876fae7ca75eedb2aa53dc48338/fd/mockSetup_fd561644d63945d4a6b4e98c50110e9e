4cb5f74e912b8e3bfb08dd0034da61de
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    clearAllMocks: function() {
        return clearAllMocks;
    },
    createMockUser: function() {
        return createMockUser;
    },
    createPrismaMock: function() {
        return createPrismaMock;
    },
    createSessionMock: function() {
        return createSessionMock;
    }
});
const _jestmockextended = require("jest-mock-extended");
const createPrismaMock = ()=>{
    jest.mock('@/lib/db/prisma', ()=>({
            prisma: prismaMock
        }));
    const prismaMock = (0, _jestmockextended.mockDeep)();
    return prismaMock;
};
const createSessionMock = ()=>{
    jest.mock('next-auth', ()=>{
        return {
            __esModule: true,
            getServerSession: ()=>sessionMock()
        };
    });
    const sessionMock = jest.fn().mockResolvedValue(null);
    return sessionMock;
};
const clearAllMocks = ()=>{
    jest.clearAllMocks();
};
const createMockUser = (overrides = {})=>({
        id: 'test-user-id',
        email: 'test@example.com',
        name: 'Test User',
        password: 'hashed_password',
        credits: 10,
        createdAt: new Date(),
        updatedAt: new Date(),
        role: 'USER',
        deletedAt: null,
        emailVerified: null,
        stripeCustomerId: null,
        stripePriceId: null,
        stripeCurrentPeriodEnd: null,
        stripeSubscriptionId: null,
        magicLinkToken: null,
        magicLinkExpiresAt: null,
        passwordResetToken: null,
        passwordResetExpiresAt: null,
        image: null,
        ...overrides
    });

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy95dXN1a2V0c3Vub2RhL0RvY3VtZW50cy9jdXJzb3IvcHB0dHJhbnNsYXRvcmFwcC93b3JrdHJlZXMvY2ljZC1zZXR1cC90ZXN0cy9oZWxwZXJzL21vY2tTZXR1cC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQcmlzbWFDbGllbnQgfSBmcm9tICdAcHJpc21hL2NsaWVudCc7XG5pbXBvcnQgeyBtb2NrRGVlcCwgRGVlcE1vY2tQcm94eSB9IGZyb20gJ2plc3QtbW9jay1leHRlbmRlZCc7XG5pbXBvcnQgeyBnZXRTZXJ2ZXJTZXNzaW9uIH0gZnJvbSAnbmV4dC1hdXRoJztcblxuLy8gUHJpc21hIENsaWVudOOBruODouODg+OCr+S9nOaIkFxuZXhwb3J0IGNvbnN0IGNyZWF0ZVByaXNtYU1vY2sgPSAoKSA9PiB7XG4gIGNvbnN0IHByaXNtYU1vY2sgPSBtb2NrRGVlcDxQcmlzbWFDbGllbnQ+KCk7XG4gIGplc3QubW9jaygnQC9saWIvZGIvcHJpc21hJywgKCkgPT4gKHtcbiAgICBwcmlzbWE6IHByaXNtYU1vY2ssXG4gIH0pKTtcbiAgcmV0dXJuIHByaXNtYU1vY2sgYXMgdW5rbm93biBhcyBEZWVwTW9ja1Byb3h5PFByaXNtYUNsaWVudD47XG59O1xuXG4vLyBnZXRTZXJ2ZXJTZXNzaW9u44Gu44Oi44OD44Kv5L2c5oiQXG5leHBvcnQgY29uc3QgY3JlYXRlU2Vzc2lvbk1vY2sgPSAoKSA9PiB7XG4gIGNvbnN0IHNlc3Npb25Nb2NrID0gamVzdC5mbigpLm1vY2tSZXNvbHZlZFZhbHVlKG51bGwpO1xuICBqZXN0Lm1vY2soJ25leHQtYXV0aCcsICgpID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgX19lc01vZHVsZTogdHJ1ZSxcbiAgICAgIGdldFNlcnZlclNlc3Npb246ICgpID0+IHNlc3Npb25Nb2NrKCksXG4gICAgfTtcbiAgfSk7XG4gIHJldHVybiBzZXNzaW9uTW9jaztcbn07XG5cbi8vIOWFsemAmuOBruODouODg+OCr+OCr+ODquOColxuZXhwb3J0IGNvbnN0IGNsZWFyQWxsTW9ja3MgPSAoKSA9PiB7XG4gIGplc3QuY2xlYXJBbGxNb2NrcygpO1xufTtcblxuLy8g5YWx6YCa44Gu44Om44O844K244O844Oi44OD44Kv44OH44O844K/XG5leHBvcnQgY29uc3QgY3JlYXRlTW9ja1VzZXIgPSAob3ZlcnJpZGVzID0ge30pID0+ICh7XG4gIGlkOiAndGVzdC11c2VyLWlkJyxcbiAgZW1haWw6ICd0ZXN0QGV4YW1wbGUuY29tJyxcbiAgbmFtZTogJ1Rlc3QgVXNlcicsXG4gIHBhc3N3b3JkOiAnaGFzaGVkX3Bhc3N3b3JkJyxcbiAgY3JlZGl0czogMTAsXG4gIGNyZWF0ZWRBdDogbmV3IERhdGUoKSxcbiAgdXBkYXRlZEF0OiBuZXcgRGF0ZSgpLFxuICByb2xlOiAnVVNFUicsXG4gIGRlbGV0ZWRBdDogbnVsbCxcbiAgZW1haWxWZXJpZmllZDogbnVsbCxcbiAgc3RyaXBlQ3VzdG9tZXJJZDogbnVsbCxcbiAgc3RyaXBlUHJpY2VJZDogbnVsbCxcbiAgc3RyaXBlQ3VycmVudFBlcmlvZEVuZDogbnVsbCxcbiAgc3RyaXBlU3Vic2NyaXB0aW9uSWQ6IG51bGwsXG4gIG1hZ2ljTGlua1Rva2VuOiBudWxsLFxuICBtYWdpY0xpbmtFeHBpcmVzQXQ6IG51bGwsXG4gIHBhc3N3b3JkUmVzZXRUb2tlbjogbnVsbCxcbiAgcGFzc3dvcmRSZXNldEV4cGlyZXNBdDogbnVsbCxcbiAgaW1hZ2U6IG51bGwsXG4gIC4uLm92ZXJyaWRlcyxcbn0pOyAiXSwibmFtZXMiOlsiY2xlYXJBbGxNb2NrcyIsImNyZWF0ZU1vY2tVc2VyIiwiY3JlYXRlUHJpc21hTW9jayIsImNyZWF0ZVNlc3Npb25Nb2NrIiwiamVzdCIsIm1vY2siLCJwcmlzbWEiLCJwcmlzbWFNb2NrIiwibW9ja0RlZXAiLCJfX2VzTW9kdWxlIiwiZ2V0U2VydmVyU2Vzc2lvbiIsInNlc3Npb25Nb2NrIiwiZm4iLCJtb2NrUmVzb2x2ZWRWYWx1ZSIsIm92ZXJyaWRlcyIsImlkIiwiZW1haWwiLCJuYW1lIiwicGFzc3dvcmQiLCJjcmVkaXRzIiwiY3JlYXRlZEF0IiwiRGF0ZSIsInVwZGF0ZWRBdCIsInJvbGUiLCJkZWxldGVkQXQiLCJlbWFpbFZlcmlmaWVkIiwic3RyaXBlQ3VzdG9tZXJJZCIsInN0cmlwZVByaWNlSWQiLCJzdHJpcGVDdXJyZW50UGVyaW9kRW5kIiwic3RyaXBlU3Vic2NyaXB0aW9uSWQiLCJtYWdpY0xpbmtUb2tlbiIsIm1hZ2ljTGlua0V4cGlyZXNBdCIsInBhc3N3b3JkUmVzZXRUb2tlbiIsInBhc3N3b3JkUmVzZXRFeHBpcmVzQXQiLCJpbWFnZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7SUEwQmFBLGFBQWE7ZUFBYkE7O0lBS0FDLGNBQWM7ZUFBZEE7O0lBMUJBQyxnQkFBZ0I7ZUFBaEJBOztJQVNBQyxpQkFBaUI7ZUFBakJBOzs7a0NBYjJCO0FBSWpDLE1BQU1ELG1CQUFtQjtJQUU5QkUsS0FBS0MsSUFBSSxDQUFDLG1CQUFtQixJQUFPLENBQUE7WUFDbENDLFFBQVFDO1FBQ1YsQ0FBQTtJQUhBLE1BQU1BLGFBQWFDLElBQUFBLDBCQUFRO0lBSTNCLE9BQU9EO0FBQ1Q7QUFHTyxNQUFNSixvQkFBb0I7SUFFL0JDLEtBQUtDLElBQUksQ0FBQyxhQUFhO1FBQ3JCLE9BQU87WUFDTEksWUFBWTtZQUNaQyxrQkFBa0IsSUFBTUM7UUFDMUI7SUFDRjtJQU5BLE1BQU1BLGNBQWNQLEtBQUtRLEVBQUUsR0FBR0MsaUJBQWlCLENBQUM7SUFPaEQsT0FBT0Y7QUFDVDtBQUdPLE1BQU1YLGdCQUFnQjtJQUMzQkksS0FBS0osYUFBYTtBQUNwQjtBQUdPLE1BQU1DLGlCQUFpQixDQUFDYSxZQUFZLENBQUMsQ0FBQyxHQUFNLENBQUE7UUFDakRDLElBQUk7UUFDSkMsT0FBTztRQUNQQyxNQUFNO1FBQ05DLFVBQVU7UUFDVkMsU0FBUztRQUNUQyxXQUFXLElBQUlDO1FBQ2ZDLFdBQVcsSUFBSUQ7UUFDZkUsTUFBTTtRQUNOQyxXQUFXO1FBQ1hDLGVBQWU7UUFDZkMsa0JBQWtCO1FBQ2xCQyxlQUFlO1FBQ2ZDLHdCQUF3QjtRQUN4QkMsc0JBQXNCO1FBQ3RCQyxnQkFBZ0I7UUFDaEJDLG9CQUFvQjtRQUNwQkMsb0JBQW9CO1FBQ3BCQyx3QkFBd0I7UUFDeEJDLE9BQU87UUFDUCxHQUFHcEIsU0FBUztJQUNkLENBQUEifQ==