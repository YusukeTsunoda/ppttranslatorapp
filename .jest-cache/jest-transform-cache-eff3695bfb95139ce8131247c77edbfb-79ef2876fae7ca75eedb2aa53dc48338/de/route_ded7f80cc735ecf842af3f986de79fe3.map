{"version":3,"sources":["/Users/yusuketsunoda/Documents/cursor/ppttranslatorapp/worktrees/cicd-setup/app/api/batch-upload/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { getToken } from 'next-auth/jwt';\nimport { prisma } from '@/lib/db/prisma';\nimport path from 'path';\nimport fs from 'fs';\nimport { mkdir } from 'fs/promises';\nimport { withAPILogging } from '@/lib/utils/api-logging';\n\nexport const dynamic = 'force-dynamic';\n\n// バッチアップロード処理ハンドラ\nasync function handler(req: NextRequest) {\n  try {\n    // トークンからユーザー情報を取得\n    const token = await getToken({ req, secret: process.env.NEXTAUTH_SECRET });\n    if (!token || !token.sub) {\n      return NextResponse.json(\n        { error: '認証が必要です' },\n        { status: 401 }\n      );\n    }\n\n    // バッチジョブの登録\n    const { files, options } = await req.json();\n    \n    if (!Array.isArray(files) || files.length === 0) {\n      return NextResponse.json(\n        { error: 'ファイルが指定されていません' },\n        { status: 400 }\n      );\n    }\n\n    // バッチジョブ作成\n    const batchJob = await prisma.batchJob.create({\n      data: {\n        userId: token.sub,\n        status: 'PENDING',\n        totalFiles: files.length,\n        processedFiles: 0,\n        options: options || {},\n      }\n    });\n\n    // バッチワーカーの起動指示（実際のワーカー処理はサーバーサイドで実行）\n    // ここではジョブキューに登録するだけ\n    console.log(`[Batch] ジョブ登録: ${batchJob.id}, ファイル数: ${files.length}`);\n\n    return NextResponse.json({\n      jobId: batchJob.id,\n      message: 'バッチジョブが登録されました',\n      estimatedTime: files.length * 2, // ファイル1つあたり約2分と仮定\n    });\n  } catch (error) {\n    console.error('バッチアップロードエラー:', error);\n    return NextResponse.json(\n      { error: 'サーバーエラーが発生しました' },\n      { status: 500 }\n    );\n  }\n}\n\n// ジョブステータス取得API\nexport async function GET(req: NextRequest) {\n  try {\n    const { searchParams } = new URL(req.url);\n    const jobId = searchParams.get('jobId');\n\n    if (!jobId) {\n      return NextResponse.json(\n        { error: 'ジョブIDが指定されていません' },\n        { status: 400 }\n      );\n    }\n\n    const job = await prisma.batchJob.findUnique({\n      where: { id: jobId }\n    });\n\n    if (!job) {\n      return NextResponse.json(\n        { error: '指定されたジョブが見つかりません' },\n        { status: 404 }\n      );\n    }\n\n    return NextResponse.json({\n      jobId: job.id,\n      status: job.status,\n      progress: job.totalFiles > 0 \n        ? Math.round((job.processedFiles / job.totalFiles) * 100)\n        : 0,\n      totalFiles: job.totalFiles,\n      processedFiles: job.processedFiles,\n      createdAt: job.createdAt,\n      updatedAt: job.updatedAt,\n      completedAt: job.completedAt,\n    });\n  } catch (error) {\n    console.error('ジョブステータス取得エラー:', error);\n    return NextResponse.json(\n      { error: 'サーバーエラーが発生しました' },\n      { status: 500 }\n    );\n  }\n}\n\n// バッチジョブ登録ハンドラー（ログ機能付き）\nexport const POST = withAPILogging(handler, 'batch-upload'); "],"names":["GET","POST","dynamic","handler","req","token","getToken","secret","process","env","NEXTAUTH_SECRET","sub","NextResponse","json","error","status","files","options","Array","isArray","length","batchJob","prisma","create","data","userId","totalFiles","processedFiles","console","log","id","jobId","message","estimatedTime","searchParams","URL","url","get","job","findUnique","where","progress","Math","round","createdAt","updatedAt","completedAt","withAPILogging"],"mappings":"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"}