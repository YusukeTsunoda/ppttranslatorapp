47c072c1d600fcf4941fd8dd740ab4db
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    GET: function() {
        return GET;
    },
    POST: function() {
        return POST;
    },
    dynamic: function() {
        return dynamic;
    }
});
const _server = require("next/server");
const _jwt = require("next-auth/jwt");
const _prisma = require("@/lib/db/prisma");
const _apilogging = require("@/lib/utils/api-logging");
const dynamic = 'force-dynamic';
// バッチアップロード処理ハンドラ
async function handler(req) {
    try {
        // トークンからユーザー情報を取得
        const token = await (0, _jwt.getToken)({
            req,
            secret: process.env.NEXTAUTH_SECRET
        });
        if (!token || !token.sub) {
            return _server.NextResponse.json({
                error: '認証が必要です'
            }, {
                status: 401
            });
        }
        // バッチジョブの登録
        const { files, options } = await req.json();
        if (!Array.isArray(files) || files.length === 0) {
            return _server.NextResponse.json({
                error: 'ファイルが指定されていません'
            }, {
                status: 400
            });
        }
        // バッチジョブ作成
        const batchJob = await _prisma.prisma.batchJob.create({
            data: {
                userId: token.sub,
                status: 'PENDING',
                totalFiles: files.length,
                processedFiles: 0,
                options: options || {}
            }
        });
        // バッチワーカーの起動指示（実際のワーカー処理はサーバーサイドで実行）
        // ここではジョブキューに登録するだけ
        console.log(`[Batch] ジョブ登録: ${batchJob.id}, ファイル数: ${files.length}`);
        return _server.NextResponse.json({
            jobId: batchJob.id,
            message: 'バッチジョブが登録されました',
            estimatedTime: files.length * 2
        });
    } catch (error) {
        console.error('バッチアップロードエラー:', error);
        return _server.NextResponse.json({
            error: 'サーバーエラーが発生しました'
        }, {
            status: 500
        });
    }
}
async function GET(req) {
    try {
        const { searchParams } = new URL(req.url);
        const jobId = searchParams.get('jobId');
        if (!jobId) {
            return _server.NextResponse.json({
                error: 'ジョブIDが指定されていません'
            }, {
                status: 400
            });
        }
        const job = await _prisma.prisma.batchJob.findUnique({
            where: {
                id: jobId
            }
        });
        if (!job) {
            return _server.NextResponse.json({
                error: '指定されたジョブが見つかりません'
            }, {
                status: 404
            });
        }
        return _server.NextResponse.json({
            jobId: job.id,
            status: job.status,
            progress: job.totalFiles > 0 ? Math.round(job.processedFiles / job.totalFiles * 100) : 0,
            totalFiles: job.totalFiles,
            processedFiles: job.processedFiles,
            createdAt: job.createdAt,
            updatedAt: job.updatedAt,
            completedAt: job.completedAt
        });
    } catch (error) {
        console.error('ジョブステータス取得エラー:', error);
        return _server.NextResponse.json({
            error: 'サーバーエラーが発生しました'
        }, {
            status: 500
        });
    }
}
const POST = (0, _apilogging.withAPILogging)(handler, 'batch-upload');

//# sourceMappingURL=data:application/json;base64,