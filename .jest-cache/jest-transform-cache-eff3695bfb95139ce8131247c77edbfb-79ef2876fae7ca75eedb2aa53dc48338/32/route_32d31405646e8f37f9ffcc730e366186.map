{"version":3,"sources":["/Users/yusuketsunoda/Documents/cursor/ppttranslatorapp/worktrees/cicd-setup/app/api/translate/route.ts"],"sourcesContent":["// Node.jsランタイムを明示的に指定\n// Anthropic APIの処理を含むため、Edge Runtimeでは動作しません\nexport const runtime = 'nodejs';\n\nimport { NextRequest, NextResponse } from 'next/server';\nimport Anthropic from '@anthropic-ai/sdk';\nimport { getServerSession } from 'next-auth';\nimport { authOptions } from '@/lib/auth/auth-options';\nimport { Session } from 'next-auth';\nimport { prisma } from '@/lib/db/prisma';\nimport { v4 as uuidv4 } from 'uuid';\nimport { Language, TranslationStatus } from '@prisma/client';\nimport { withAPILogging } from '@/lib/utils/api-logging';\nimport { handleTranslationError, withRetry, logTranslationError } from '@/lib/translation/error-handler';\nimport { validateTranslationRequest } from '@/lib/translation/utils';\n\ninterface CustomSession extends Session {\n  user: {\n    id: string;\n    isPremium?: boolean;\n    name?: string | null;\n    email?: string | null;\n    image?: string | null;\n  };\n}\n\n// 翻訳APIエンドポイント\nasync function handler(req: NextRequest) {\n  try {\n    // APIキーの確認\n    if (!process.env.ANTHROPIC_API_KEY) {\n      return NextResponse.json(\n        { error: 'API設定が不足しています' },\n        { status: 500 }\n      );\n    }\n\n    // APIクライアントの設定\n    const anthropic = new Anthropic({\n      apiKey: process.env.ANTHROPIC_API_KEY,\n    });\n\n    // セッションからユーザー情報を取得\n    const session = (await getServerSession(authOptions)) as CustomSession;\n    if (!session) {\n      return new NextResponse(JSON.stringify({ error: '認証が必要です' }), {\n        status: 401,\n        headers: {\n          'Content-Type': 'application/json',\n          'Cache-Control': 'no-store, max-age=0',\n        },\n      });\n    }\n\n    const data = await req.json();\n\n    // リクエストBodyからパラメータ取得\n    const { texts, sourceLang, targetLang, model, fileName = 'スライド', slides, fileId } = data;\n    \n    // デバッグ用にリクエストデータをログ出力\n    console.log('翻訳APIリクエストデータ:', {\n      fileId,\n      sourceLang,\n      targetLang,\n      model,\n      slidesProvided: !!slides,\n      slidesLength: slides?.length,\n      textsProvided: !!texts,\n      textsLength: texts?.length\n    });\n\n    // ★★★ Check if fileId is provided ★★★\n    if (!fileId) {\n      return NextResponse.json({ error: 'ファイルIDが必要です' }, { status: 400 });\n    }\n    \n    // fileIdがデータベースに存在するか確認\n    try {\n      const existingFile = await prisma.file.findUnique({\n        where: { id: fileId }\n      });\n      \n      if (!existingFile) {\n        console.error(`ファイルID ${fileId} がデータベースに存在しません`);\n        // 存在しない場合はエラーを返す\n        return NextResponse.json({ \n          error: '指定されたファイルIDがデータベースに存在しません', \n          detail: 'ファイルを再アップロードしてください' \n        }, { status: 404 });\n      }\n    } catch (dbError) {\n      console.error('ファイル存在確認エラー:', dbError);\n      // データベースエラーの場合は続行する\n    }\n\n    // デフォルトモデルを指定\n    const defaultModel = 'claude-3-haiku-20240307';\n    let selectedModel = model || defaultModel;\n\n    // AWS Bedrockモデルの場合の処理\n    if (selectedModel.includes('anthropic.claude')) {\n      // TODO: AWS Bedrock APIの呼び出し処理を実装\n      return NextResponse.json({ error: 'AWS Bedrock APIは現在実装中です' }, { status: 501 });\n    }\n\n    // 無料ユーザーは基本モデルのみ利用可能\n    if (!session.user?.isPremium) {\n      selectedModel = defaultModel;\n    }\n\n    if (!texts || !Array.isArray(texts)) {\n      return NextResponse.json({ error: 'テキストが必要です' }, { status: 400 });\n    }\n\n    let translations: string[] = [];\n    let translatedSlides: any[] = []; // 翻訳結果を格納する配列を宣言\n    let translationError: Error | null = null;\n    const startTime = Date.now(); // Start time measurement\n\n    try {\n      // 翻訳処理の実行\n      let translationIndex = 0;\n      \n      // slidesが存在しない場合のエラー処理\n      if (!slides || !Array.isArray(slides)) {\n        console.error('翻訳APIエラー: slides配列が存在しません');\n        return NextResponse.json({ \n          error: 'スライドデータが不正です', \n          detail: 'ファイルを再アップロードしてください' \n        }, { status: 400 });\n      }\n      \n\n      // 翻訳結果を格納する配列\n      const translatedSlides = [];\n      \n      // スライドごとに処理\n      for (let slideIndex = 0; slideIndex < slides.length; slideIndex++) {\n        const slide = slides[slideIndex];\n        \n        if (!slide || !slide.texts || !Array.isArray(slide.texts)) {\n          console.log(`スライド ${slide?.index || slideIndex} にテキストがありません`);\n          translatedSlides.push({\n            index: slide?.index || slideIndex,\n            translations: []\n          });\n          continue;\n        }\n        \n        console.log(`スライド ${slideIndex} の翻訳対象テキスト数: ${slide.texts.length}`);\n        \n        // このスライドの翻訳プロミスを作成\n        const slideTranslationPromises = slide.texts.map((element: any, textIndex: number) => {\n          if (!element || !element.text || element.text.trim() === '') {\n            return Promise.resolve({\n              index: textIndex,\n              text: '',\n              originalText: element?.text || ''\n            });\n          }\n\n          // 翻訳プロンプトの作成\n          const prompt = `あなたは高品質な翻訳エンジンです。以下のテキストを${sourceLang}から${targetLang}に翻訳してください。\n元のテキストの意味を正確に保ちながら、自然な${targetLang}に翻訳してください。\nフォーマットや記号は保持し、翻訳のみを行ってください。\n\nテキスト: \"${element.text}\"\n\n翻訳:`;\n\n          // Anthropic APIを使用した翻訳\n          return anthropic.messages.create({\n            model: selectedModel,\n            max_tokens: 1000,\n            messages: [\n              { role: 'user', content: prompt }\n            ],\n            temperature: 0.7,\n          }).then(message => {\n            // 翻訳結果から余分なテキストを削除する\n            let translatedText = (message.content[0] as any).text.trim();\n            \n            // 余分なパターンを削除\n            const patterns = [\n              /^Here is the translation from .+ to .+:\\s*/i,\n              /^Translation:\\s*/i,\n              /^Translated text:\\s*/i,\n              /^The translation is:\\s*/i,\n              /^In English:\\s*/i,\n              /^In Japanese:\\s*/i,\n              /^The text \"([^\"]+)\" translates to:\\s*/i,  // The text \"...\" translates to: パターンを削除\n              /^The text \"([^\"]+)\" translates to English as:\\s*/i,  // The text \"...\" translates to English as: パターンを削除\n              /^The text \"([^\"]+)\" can be translated to English as:\\s*/i,  // The text \"...\" can be translated to English as: パターンを削除\n              /^The text \"([^\"]+)\" in English is:\\s*/i,  // The text \"...\" in English is: パターンを削除\n              /^The English translation of \"([^\"]+)\" is:\\s*/i,  // The English translation of \"...\" is: パターンを削除\n              /^\\\"(.+)\\\"$/,  // 引用符で囲まれたテキストから引用符を削除\n              /^(.+):$/,     // ダブルコロンで終わるパターンを削除\n            ];\n            \n            // 各パターンにマッチする場合は削除\n            patterns.forEach(pattern => {\n              translatedText = translatedText.replace(pattern, '$1');\n            });\n            \n            // 引用符で囲まれた場合の処理\n            if (translatedText.startsWith('\"') && translatedText.endsWith('\"')) {\n              translatedText = translatedText.substring(1, translatedText.length - 1);\n            }\n            \n            // 最終的なクリーンアップ\n            translatedText = translatedText.trim();\n            \n            return {\n              index: textIndex,\n              text: translatedText,\n              originalText: element.text\n            };\n          }).catch(error => {\n            // エラーログは残す\n            console.error('翻訳APIエラー:', error instanceof Error ? error.message : String(error));\n            return {\n              index: textIndex,\n              text: '[翻訳エラー]',\n              originalText: element.text\n            };\n          });\n        });\n        \n        // このスライドの翻訳結果を取得\n        const slideTranslations = await Promise.all(slideTranslationPromises);\n        \n        // 翻訳結果をスライドに追加\n        translatedSlides.push({\n          index: slide.index || slideIndex,\n          translations: slideTranslations\n        });\n        \n        // 全体の翻訳配列にも追加（後方互換性のため）\n        slideTranslations.forEach(t => {\n          translations.push(t.text);\n        });\n      }\n      \n      console.log(`翻訳完了: ${translations.length}個のテキストを翻訳しました`);\n      if (translatedSlides.length > 0 && translatedSlides[0].translations.length > 0) {\n        console.log('翻訳サンプル:', translatedSlides[0].translations[0]);\n      }\n\n    } catch (error) {\n      console.error('翻訳APIエラー:', error instanceof Error ? error.message : String(error));\n      translationError = error instanceof Error ? error : new Error(String(error));\n    }\n\n    const endTime = Date.now();\n    const processingTime = Math.round(endTime - startTime); // Calculate processing time in milliseconds\n\n    // --- History and Credit Logic ---\n    let historyStatus: TranslationStatus;\n    let historyErrorMessage: string | null = null;\n\n    if (translationError) {\n      historyStatus = TranslationStatus.FAILED;\n      historyErrorMessage = translationError.message;\n    } else {\n      historyStatus = TranslationStatus.COMPLETED;\n    }\n\n    // ページ数に基づいて必要なクレジット数を計算\n    const pageCount = slides?.length ?? 0;\n    const requiredCredits = pageCount; // 1ページあたり1クレジット\n    \n    // Prepare history data regardless of DB operation success\n    const historyData = {\n      // id: uuidv4(), // Let Prisma handle default cuid()\n      userId: session.user.id,\n      fileId: fileId, // Use provided fileId\n      // fileName: fileName, // Removed, get from File model if needed\n      pageCount: pageCount,\n      status: historyStatus,\n      creditsUsed: historyStatus === TranslationStatus.COMPLETED ? requiredCredits : 0, // ページ数分のクレジットを消費\n      sourceLang: sourceLang as Language,\n      targetLang: targetLang as Language,\n      model: selectedModel,\n      // fileSize: 0, // TODO: Get file size if needed, maybe from File record?\n      processingTime: processingTime, // Store calculated processing time\n      translatedFileKey: null, // Set later when file is generated and stored\n      errorMessage: historyErrorMessage,\n    };\n\n    // ユーザーの現在のクレジット残高を確認\n    let userCredits = 0;\n    try {\n      const user = await prisma.user.findUnique({\n        where: { id: session.user.id },\n        select: { credits: true }\n      });\n      \n      if (!user) {\n        return NextResponse.json(\n          { error: 'ユーザーが見つかりません' },\n          { status: 404 }\n        );\n      }\n      \n      userCredits = user.credits;\n      \n      // クレジットが不足している場合はエラーを返す\n      if (userCredits < requiredCredits) {\n        return NextResponse.json(\n          { \n            error: 'クレジットが不足しています', \n            requiredCredits,\n            availableCredits: userCredits \n          },\n          { status: 403 }\n        );\n      }\n      \n      // Attempt to update credits (only on success) and create history record\n      if (historyStatus === TranslationStatus.COMPLETED) {\n        // ページ数分のクレジットを減算\n        await prisma.user.update({\n          where: { id: session.user.id },\n          data: { credits: { decrement: requiredCredits } },\n        });\n      }\n\n      const createdHistory = await prisma.translationHistory.create({\n        data: historyData,\n      });\n\n    } catch (dbError) {\n      console.error('データベース操作エラー (クレジット更新 or 履歴作成):', dbError);\n      // Even if DB fails, try to return the translation result if available\n    }\n    // --- End History and Credit Logic ---\n\n    // If translation itself failed, return error\n    if (translationError) {\n        return new NextResponse(JSON.stringify({ error: '翻訳に失敗しました', detail: translationError.message }), {\n            status: 500,\n            headers: {\n                'Content-Type': 'application/json',\n                'Cache-Control': 'no-store, max-age=0',\n            },\n        });\n    }\n\n    // Return successful translation with structured data\n    return NextResponse.json({\n      success: true,\n      translations, // 後方互換性のため残す\n      translatedSlides, // スライドごとの翻訳結果\n      metadata: {\n        sourceLang,\n        targetLang,\n        model: selectedModel,\n      },\n    });\n  } catch (error) {\n    console.error('Overall Translation API Error:', error);\n    // Attempt to record a FAILED history entry even in outer catch block?\n    // This might be complex due to potential lack of data (session, fileId etc.)\n    // For now, just return a generic error.\n    return new NextResponse(JSON.stringify({ error: '翻訳に失敗しました', detail: error instanceof Error ? error.message : String(error) }), {\n      status: 500,\n      headers: {\n        'Content-Type': 'application/json',\n        'Cache-Control': 'no-store, max-age=0',\n      },\n    });\n  }\n}\n\n// ログ機能を適用したハンドラをエクスポート\nexport const POST = withAPILogging(handler, 'translate');\n\nexport async function GET(req: NextRequest) {\n  try {\n    // セッションの取得\n    const session = await getServerSession();\n    if (!session?.user) {\n      throw Object.assign(new Error('認証が必要です'), { name: 'AuthenticationError' });\n    }\n\n    // 翻訳履歴の取得\n    const translations = await prisma.translation.findMany({\n      where: {\n        userId: session.user.id,\n        deletedAt: null,\n      },\n      orderBy: {\n        createdAt: 'desc',\n      },\n    });\n\n    return new Response(JSON.stringify({ translations }), {\n      headers: {\n        'Content-Type': 'application/json',\n        'Cache-Control': 'no-store',\n      },\n    });\n  } catch (error) {\n    // エラーログの記録\n    logTranslationError(error as Error, {\n      userId: (await getServerSession())?.user?.id,\n      operation: 'get_translations',\n    });\n\n    // エラーレスポンスの生成\n    return handleTranslationError(error as Error);\n  }\n}\n\nconst getLanguageName = (langCode: string): string => {\n  const languages: Record<string, string> = {\n    ja: '日本語',\n    en: '英語',\n    zh: '中国語',\n    ko: '韓国語',\n    fr: 'フランス語',\n    de: 'ドイツ語',\n    es: 'スペイン語',\n    it: 'イタリア語',\n    ru: 'ロシア語',\n    pt: 'ポルトガル語',\n    // 必要に応じて他の言語を追加\n  };\n  return languages[langCode] || langCode;\n};\n"],"names":["GET","POST","runtime","handler","req","session","process","env","ANTHROPIC_API_KEY","NextResponse","json","error","status","anthropic","Anthropic","apiKey","getServerSession","authOptions","JSON","stringify","headers","data","texts","sourceLang","targetLang","model","fileName","slides","fileId","console","log","slidesProvided","slidesLength","length","textsProvided","textsLength","existingFile","prisma","file","findUnique","where","id","detail","dbError","defaultModel","selectedModel","includes","user","isPremium","Array","isArray","translations","translatedSlides","translationError","startTime","Date","now","translationIndex","slideIndex","slide","index","push","slideTranslationPromises","map","element","textIndex","text","trim","Promise","resolve","originalText","prompt","messages","create","max_tokens","role","content","temperature","then","message","translatedText","patterns","forEach","pattern","replace","startsWith","endsWith","substring","catch","Error","String","slideTranslations","all","t","endTime","processingTime","Math","round","historyStatus","historyErrorMessage","TranslationStatus","FAILED","COMPLETED","pageCount","requiredCredits","historyData","userId","creditsUsed","translatedFileKey","errorMessage","userCredits","select","credits","availableCredits","update","decrement","createdHistory","translationHistory","success","metadata","withAPILogging","Object","assign","name","translation","findMany","deletedAt","orderBy","createdAt","Response","logTranslationError","operation","handleTranslationError","getLanguageName","langCode","languages","ja","en","zh","ko","fr","de","es","it","ru","pt"],"mappings":"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"}