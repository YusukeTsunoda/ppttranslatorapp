{"version":3,"sources":["/Users/yusuketsunoda/Documents/cursor/ppttranslatorapp/worktrees/cicd-setup/tests/api/auth/session.test.ts"],"sourcesContent":["import { GET } from '@/app/api/auth/session/route';\nimport { getServerSession } from 'next-auth';\nimport { NextResponse } from 'next/server';\nimport { authOptions } from '@/lib/auth/auth-options';\nimport { createSessionMock, createMockUser, clearAllMocks } from '@/tests/helpers/mockSetup';\n\nconst getServerSessionMock = createSessionMock();\n\ndescribe('GET /api/auth/session', () => {\n  beforeEach(() => {\n    clearAllMocks();\n  });\n\n  it('should return user information if session exists', async () => {\n    const mockUser = createMockUser({\n      id: 'user123',\n      name: 'Test User',\n      email: 'test@example.com',\n    });\n    getServerSessionMock.mockResolvedValue({\n      user: mockUser,\n      expires: 'some-date',\n    });\n\n    const response = await GET();\n    const responseBody = await response.json();\n\n    expect(response.status).toBe(200);\n    expect(responseBody.user).toEqual(mockUser);\n    expect(getServerSessionMock).toHaveBeenCalledWith(authOptions);\n  });\n\n  it('should return null for user if session does not exist', async () => {\n    getServerSessionMock.mockResolvedValue(null);\n\n    const response = await GET();\n    const responseBody = await response.json();\n\n    expect(response.status).toBe(200);\n    expect(responseBody.user).toBeNull();\n    expect(getServerSessionMock).toHaveBeenCalledWith(authOptions);\n  });\n\n  it('should return null for user if getServerSession throws an error', async () => {\n    getServerSessionMock.mockRejectedValue(new Error('Session fetch error'));\n\n    const response = await GET();\n    const responseBody = await response.json();\n\n    expect(response.status).toBe(200); // APIはエラーをキャッチしてnullを返す\n    expect(responseBody.user).toBeNull();\n    expect(getServerSessionMock).toHaveBeenCalledWith(authOptions);\n  });\n}); "],"names":["getServerSessionMock","createSessionMock","describe","beforeEach","clearAllMocks","it","mockUser","createMockUser","id","name","email","mockResolvedValue","user","expires","response","GET","responseBody","json","expect","status","toBe","toEqual","toHaveBeenCalledWith","authOptions","toBeNull","mockRejectedValue","Error"],"mappings":";;;;uBAAoB;6BAGQ;2BACqC;AAEjE,MAAMA,uBAAuBC,IAAAA,4BAAiB;AAE9CC,SAAS,yBAAyB;IAChCC,WAAW;QACTC,IAAAA,wBAAa;IACf;IAEAC,GAAG,oDAAoD;QACrD,MAAMC,WAAWC,IAAAA,yBAAc,EAAC;YAC9BC,IAAI;YACJC,MAAM;YACNC,OAAO;QACT;QACAV,qBAAqBW,iBAAiB,CAAC;YACrCC,MAAMN;YACNO,SAAS;QACX;QAEA,MAAMC,WAAW,MAAMC,IAAAA,UAAG;QAC1B,MAAMC,eAAe,MAAMF,SAASG,IAAI;QAExCC,OAAOJ,SAASK,MAAM,EAAEC,IAAI,CAAC;QAC7BF,OAAOF,aAAaJ,IAAI,EAAES,OAAO,CAACf;QAClCY,OAAOlB,sBAAsBsB,oBAAoB,CAACC,wBAAW;IAC/D;IAEAlB,GAAG,yDAAyD;QAC1DL,qBAAqBW,iBAAiB,CAAC;QAEvC,MAAMG,WAAW,MAAMC,IAAAA,UAAG;QAC1B,MAAMC,eAAe,MAAMF,SAASG,IAAI;QAExCC,OAAOJ,SAASK,MAAM,EAAEC,IAAI,CAAC;QAC7BF,OAAOF,aAAaJ,IAAI,EAAEY,QAAQ;QAClCN,OAAOlB,sBAAsBsB,oBAAoB,CAACC,wBAAW;IAC/D;IAEAlB,GAAG,mEAAmE;QACpEL,qBAAqByB,iBAAiB,CAAC,IAAIC,MAAM;QAEjD,MAAMZ,WAAW,MAAMC,IAAAA,UAAG;QAC1B,MAAMC,eAAe,MAAMF,SAASG,IAAI;QAExCC,OAAOJ,SAASK,MAAM,EAAEC,IAAI,CAAC,MAAM,wBAAwB;QAC3DF,OAAOF,aAAaJ,IAAI,EAAEY,QAAQ;QAClCN,OAAOlB,sBAAsBsB,oBAAoB,CAACC,wBAAW;IAC/D;AACF"}