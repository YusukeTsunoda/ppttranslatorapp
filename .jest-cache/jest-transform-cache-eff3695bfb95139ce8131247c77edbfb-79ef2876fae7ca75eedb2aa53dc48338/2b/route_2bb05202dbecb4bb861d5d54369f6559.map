{"version":3,"sources":["/Users/yusuketsunoda/Documents/cursor/ppttranslatorapp/worktrees/cicd-setup/app/api/auth/reset-password/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport { prisma } from '@/lib/db/prisma';\nimport { generateResetToken } from '@/lib/auth/token';\nimport { sendPasswordResetEmail } from '@/lib/email/send';\nimport { z } from 'zod';\n\nconst requestSchema = z.object({\n  email: z.string().email(),\n});\n\nexport async function POST(req: Request) {\n  try {\n    // 環境変数のチェック\n    if (!process.env.RESEND_API_KEY) {\n      console.error('RESEND_API_KEY is not set in the environment');\n      return NextResponse.json({ error: 'Email service configuration error' }, { status: 500 });\n    }\n\n    const body = await req.json();\n    const { email } = requestSchema.parse(body);\n\n    // レート制限チェック - 現在のスキーマでは lastPasswordReset フィールドが存在しない可能性があるため、コメントアウト\n    /*\n    const lastReset = await prisma.user.findUnique({\n      where: { email },\n      select: { lastPasswordReset: true },\n    });\n\n    if (lastReset?.lastPasswordReset) {\n      const timeSinceLastReset = Date.now() - lastReset.lastPasswordReset.getTime();\n      if (timeSinceLastReset < 60000) { // 1分以内の再送信を制限\n        return NextResponse.json(\n          { error: '時間をおいて再度お試しください' },\n          { status: 429 }\n        );\n      }\n    }\n    */\n\n    // ユーザーの存在確認\n    const user = await prisma.user.findUnique({\n      where: { email },\n    });\n\n    if (!user) {\n      // セキュリティのため、ユーザーが存在しない場合でも成功レスポンスを返す\n      return NextResponse.json({ success: true });\n    }\n\n    // リセットトークンの生成\n    const token = await generateResetToken();\n    const expires = new Date(Date.now() + 15 * 60000); // 15分後に有効期限切れ\n\n    // ユーザー情報の更新 - 現在のスキーマに合わせて更新\n    await prisma.user.update({\n      where: { id: user.id },\n      data: {\n        // resetToken と resetTokenExpires フィールドが存在しない可能性があるため、\n        // 実際のスキーマに合わせて修正が必要\n        updatedAt: new Date(),\n      },\n    });\n\n    // パスワードリセットメールの送信\n    await sendPasswordResetEmail(email, token);\n\n    return NextResponse.json({ success: true });\n  } catch (error) {\n    console.error('Password reset request error:', error);\n    return NextResponse.json({ error: 'パスワードリセットの要求に失敗しました' }, { status: 500 });\n  }\n}\n"],"names":["POST","requestSchema","z","object","email","string","req","process","env","RESEND_API_KEY","console","error","NextResponse","json","status","body","parse","user","prisma","findUnique","where","success","token","generateResetToken","expires","Date","now","update","id","data","updatedAt","sendPasswordResetEmail"],"mappings":";;;;+BAUsBA;;;eAAAA;;;wBAVO;wBACN;uBACY;sBACI;qBACrB;AAElB,MAAMC,gBAAgBC,MAAC,CAACC,MAAM,CAAC;IAC7BC,OAAOF,MAAC,CAACG,MAAM,GAAGD,KAAK;AACzB;AAEO,eAAeJ,KAAKM,GAAY;IACrC,IAAI;QACF,YAAY;QACZ,IAAI,CAACC,QAAQC,GAAG,CAACC,cAAc,EAAE;YAC/BC,QAAQC,KAAK,CAAC;YACd,OAAOC,oBAAY,CAACC,IAAI,CAAC;gBAAEF,OAAO;YAAoC,GAAG;gBAAEG,QAAQ;YAAI;QACzF;QAEA,MAAMC,OAAO,MAAMT,IAAIO,IAAI;QAC3B,MAAM,EAAET,KAAK,EAAE,GAAGH,cAAce,KAAK,CAACD;QAEtC,sEAAsE;QACtE;;;;;;;;;;;;;;;IAeA,GAEA,YAAY;QACZ,MAAME,OAAO,MAAMC,cAAM,CAACD,IAAI,CAACE,UAAU,CAAC;YACxCC,OAAO;gBAAEhB;YAAM;QACjB;QAEA,IAAI,CAACa,MAAM;YACT,qCAAqC;YACrC,OAAOL,oBAAY,CAACC,IAAI,CAAC;gBAAEQ,SAAS;YAAK;QAC3C;QAEA,cAAc;QACd,MAAMC,QAAQ,MAAMC,IAAAA,yBAAkB;QACtC,MAAMC,UAAU,IAAIC,KAAKA,KAAKC,GAAG,KAAK,KAAK,QAAQ,cAAc;QAEjE,6BAA6B;QAC7B,MAAMR,cAAM,CAACD,IAAI,CAACU,MAAM,CAAC;YACvBP,OAAO;gBAAEQ,IAAIX,KAAKW,EAAE;YAAC;YACrBC,MAAM;gBACJ,sDAAsD;gBACtD,oBAAoB;gBACpBC,WAAW,IAAIL;YACjB;QACF;QAEA,kBAAkB;QAClB,MAAMM,IAAAA,4BAAsB,EAAC3B,OAAOkB;QAEpC,OAAOV,oBAAY,CAACC,IAAI,CAAC;YAAEQ,SAAS;QAAK;IAC3C,EAAE,OAAOV,OAAO;QACdD,QAAQC,KAAK,CAAC,iCAAiCA;QAC/C,OAAOC,oBAAY,CAACC,IAAI,CAAC;YAAEF,OAAO;QAAsB,GAAG;YAAEG,QAAQ;QAAI;IAC3E;AACF"}