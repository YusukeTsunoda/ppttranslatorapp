2a682b7d832e7681271e923575d015be
"use strict";
// モック
jest.mock('@/lib/db/prisma', ()=>{
    const originalModule = jest.requireActual('@/lib/db/prisma');
    return {
        __esModule: true,
        prisma: {
            user: {
                findUnique: jest.fn().mockImplementation(()=>({
                        id: 'test-user-123'
                    }))
            },
            activityLog: {
                create: jest.fn().mockImplementation(()=>Promise.resolve({}))
            }
        }
    };
});
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _activitylogger = require("@/lib/utils/activity-logger");
// 実際の実装がコンソールログを出力するだけの場合のテスト
describe('ActivityLogger', ()=>{
    beforeEach(()=>{
        jest.clearAllMocks();
        jest.spyOn(console, 'log').mockImplementation(()=>{});
    });
    afterEach(()=>{
        jest.restoreAllMocks();
    });
    describe('logActivity', ()=>{
        const userId = 'test-user-123';
        const validActivityData = {
            userId,
            action: 'file_upload',
            metadata: {
                fileId: 'test-file-456',
                fileName: 'test.pptx'
            }
        };
        it('有効なデータでアクティビティを記録する', async ()=>{
            const consoleSpy = jest.spyOn(console, 'log');
            await (0, _activitylogger.logActivity)(validActivityData);
            // コンソールログが呼ばれたことを確認
            expect(consoleSpy).toHaveBeenCalled();
            expect(consoleSpy).toHaveBeenCalledWith('Activity logged (dummy):', expect.objectContaining({
                userId,
                action: validActivityData.action
            }));
        });
        it('必須パラメータが不足している場合はエラーをスローする', async ()=>{
            // 実際の実装がエラーをスローしない場合はスキップ
            const invalidData = {
                userId: ''
            };
            const consoleSpy = jest.spyOn(console, 'log');
            await (0, _activitylogger.logActivity)(invalidData);
            // コンソールログが呼ばれたことを確認
            expect(consoleSpy).toHaveBeenCalled();
        });
        it('メタデータが正しく記録される', async ()=>{
            const testMetadata = {
                testKey: 'testValue'
            };
            const dataWithMetadata = {
                ...validActivityData,
                metadata: testMetadata
            };
            const consoleSpy = jest.spyOn(console, 'log');
            await (0, _activitylogger.logActivity)(dataWithMetadata);
            // メタデータを含むログが出力されたことを確認
            expect(consoleSpy).toHaveBeenCalledWith('Activity logged (dummy):', expect.objectContaining({
                metadata: testMetadata
            }));
        });
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy95dXN1a2V0c3Vub2RhL0RvY3VtZW50cy9jdXJzb3IvcHB0dHJhbnNsYXRvcmFwcC93b3JrdHJlZXMvY2ljZC1zZXR1cC90ZXN0cy91dGlscy9hY3Rpdml0eS1sb2dnZXIudGVzdC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBsb2dBY3Rpdml0eSB9IGZyb20gJ0AvbGliL3V0aWxzL2FjdGl2aXR5LWxvZ2dlcic7XG5pbXBvcnQgeyBwcmlzbWEgfSBmcm9tICdAL2xpYi9kYi9wcmlzbWEnO1xuXG4vLyDjg6Ljg4Pjgq9cbmplc3QubW9jaygnQC9saWIvZGIvcHJpc21hJywgKCkgPT4ge1xuICBjb25zdCBvcmlnaW5hbE1vZHVsZSA9IGplc3QucmVxdWlyZUFjdHVhbCgnQC9saWIvZGIvcHJpc21hJyk7XG4gIHJldHVybiB7XG4gICAgX19lc01vZHVsZTogdHJ1ZSxcbiAgICBwcmlzbWE6IHtcbiAgICAgIHVzZXI6IHtcbiAgICAgICAgZmluZFVuaXF1ZTogamVzdC5mbigpLm1vY2tJbXBsZW1lbnRhdGlvbigoKSA9PiAoe1xuICAgICAgICAgIGlkOiAndGVzdC11c2VyLTEyMycsXG4gICAgICAgIH0pKSxcbiAgICAgIH0sXG4gICAgICBhY3Rpdml0eUxvZzoge1xuICAgICAgICBjcmVhdGU6IGplc3QuZm4oKS5tb2NrSW1wbGVtZW50YXRpb24oKCkgPT4gUHJvbWlzZS5yZXNvbHZlKHt9KSksXG4gICAgICB9LFxuICAgIH0sXG4gIH07XG59KTtcblxuLy8g5a6f6Zqb44Gu5a6f6KOF44GM44Kz44Oz44K944O844Or44Ot44Kw44KS5Ye65Yqb44GZ44KL44Gg44GR44Gu5aC05ZCI44Gu44OG44K544OIXG5kZXNjcmliZSgnQWN0aXZpdHlMb2dnZXInLCAoKSA9PiB7XG4gIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgIGplc3QuY2xlYXJBbGxNb2NrcygpO1xuICAgIGplc3Quc3B5T24oY29uc29sZSwgJ2xvZycpLm1vY2tJbXBsZW1lbnRhdGlvbigoKSA9PiB7fSk7XG4gIH0pO1xuXG4gIGFmdGVyRWFjaCgoKSA9PiB7XG4gICAgamVzdC5yZXN0b3JlQWxsTW9ja3MoKTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ2xvZ0FjdGl2aXR5JywgKCkgPT4ge1xuICAgIGNvbnN0IHVzZXJJZCA9ICd0ZXN0LXVzZXItMTIzJztcbiAgICBjb25zdCB2YWxpZEFjdGl2aXR5RGF0YSA9IHtcbiAgICAgIHVzZXJJZCxcbiAgICAgIGFjdGlvbjogJ2ZpbGVfdXBsb2FkJyBhcyBhbnksXG4gICAgICBtZXRhZGF0YTogeyBmaWxlSWQ6ICd0ZXN0LWZpbGUtNDU2JywgZmlsZU5hbWU6ICd0ZXN0LnBwdHgnIH0sXG4gICAgfTtcblxuICAgIGl0KCfmnInlirnjgarjg4fjg7zjgr/jgafjgqLjgq/jg4bjgqPjg5Pjg4bjgqPjgpLoqJjpjLLjgZnjgosnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBjb25zb2xlU3B5ID0gamVzdC5zcHlPbihjb25zb2xlLCAnbG9nJyk7XG5cbiAgICAgIGF3YWl0IGxvZ0FjdGl2aXR5KHZhbGlkQWN0aXZpdHlEYXRhKTtcblxuICAgICAgLy8g44Kz44Oz44K944O844Or44Ot44Kw44GM5ZG844Gw44KM44Gf44GT44Go44KS56K66KqNXG4gICAgICBleHBlY3QoY29uc29sZVNweSkudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgICAgZXhwZWN0KGNvbnNvbGVTcHkpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKFxuICAgICAgICAnQWN0aXZpdHkgbG9nZ2VkIChkdW1teSk6JyxcbiAgICAgICAgZXhwZWN0Lm9iamVjdENvbnRhaW5pbmcoe1xuICAgICAgICAgIHVzZXJJZCxcbiAgICAgICAgICBhY3Rpb246IHZhbGlkQWN0aXZpdHlEYXRhLmFjdGlvbixcbiAgICAgICAgfSksXG4gICAgICApO1xuICAgIH0pO1xuXG4gICAgaXQoJ+W/hemgiOODkeODqeODoeODvOOCv+OBjOS4jei2s+OBl+OBpuOBhOOCi+WgtOWQiOOBr+OCqOODqeODvOOCkuOCueODreODvOOBmeOCiycsIGFzeW5jICgpID0+IHtcbiAgICAgIC8vIOWun+mam+OBruWun+ijheOBjOOCqOODqeODvOOCkuOCueODreODvOOBl+OBquOBhOWgtOWQiOOBr+OCueOCreODg+ODl1xuICAgICAgY29uc3QgaW52YWxpZERhdGEgPSB7IHVzZXJJZDogJycgfSBhcyBhbnk7XG4gICAgICBjb25zdCBjb25zb2xlU3B5ID0gamVzdC5zcHlPbihjb25zb2xlLCAnbG9nJyk7XG5cbiAgICAgIGF3YWl0IGxvZ0FjdGl2aXR5KGludmFsaWREYXRhKTtcblxuICAgICAgLy8g44Kz44Oz44K944O844Or44Ot44Kw44GM5ZG844Gw44KM44Gf44GT44Go44KS56K66KqNXG4gICAgICBleHBlY3QoY29uc29sZVNweSkudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgIH0pO1xuXG4gICAgaXQoJ+ODoeOCv+ODh+ODvOOCv+OBjOato+OBl+OBj+iomOmMsuOBleOCjOOCiycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHRlc3RNZXRhZGF0YSA9IHsgdGVzdEtleTogJ3Rlc3RWYWx1ZScgfTtcbiAgICAgIGNvbnN0IGRhdGFXaXRoTWV0YWRhdGEgPSB7XG4gICAgICAgIC4uLnZhbGlkQWN0aXZpdHlEYXRhLFxuICAgICAgICBtZXRhZGF0YTogdGVzdE1ldGFkYXRhLFxuICAgICAgfTtcbiAgICAgIGNvbnN0IGNvbnNvbGVTcHkgPSBqZXN0LnNweU9uKGNvbnNvbGUsICdsb2cnKTtcblxuICAgICAgYXdhaXQgbG9nQWN0aXZpdHkoZGF0YVdpdGhNZXRhZGF0YSk7XG5cbiAgICAgIC8vIOODoeOCv+ODh+ODvOOCv+OCkuWQq+OCgOODreOCsOOBjOWHuuWKm+OBleOCjOOBn+OBk+OBqOOCkueiuuiqjVxuICAgICAgZXhwZWN0KGNvbnNvbGVTcHkpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKFxuICAgICAgICAnQWN0aXZpdHkgbG9nZ2VkIChkdW1teSk6JyxcbiAgICAgICAgZXhwZWN0Lm9iamVjdENvbnRhaW5pbmcoe1xuICAgICAgICAgIG1ldGFkYXRhOiB0ZXN0TWV0YWRhdGEsXG4gICAgICAgIH0pLFxuICAgICAgKTtcbiAgICB9KTtcbiAgfSk7XG59KTtcbiJdLCJuYW1lcyI6WyJqZXN0IiwibW9jayIsIm9yaWdpbmFsTW9kdWxlIiwicmVxdWlyZUFjdHVhbCIsIl9fZXNNb2R1bGUiLCJwcmlzbWEiLCJ1c2VyIiwiZmluZFVuaXF1ZSIsImZuIiwibW9ja0ltcGxlbWVudGF0aW9uIiwiaWQiLCJhY3Rpdml0eUxvZyIsImNyZWF0ZSIsIlByb21pc2UiLCJyZXNvbHZlIiwiZGVzY3JpYmUiLCJiZWZvcmVFYWNoIiwiY2xlYXJBbGxNb2NrcyIsInNweU9uIiwiY29uc29sZSIsImFmdGVyRWFjaCIsInJlc3RvcmVBbGxNb2NrcyIsInVzZXJJZCIsInZhbGlkQWN0aXZpdHlEYXRhIiwiYWN0aW9uIiwibWV0YWRhdGEiLCJmaWxlSWQiLCJmaWxlTmFtZSIsIml0IiwiY29uc29sZVNweSIsImxvZ0FjdGl2aXR5IiwiZXhwZWN0IiwidG9IYXZlQmVlbkNhbGxlZCIsInRvSGF2ZUJlZW5DYWxsZWRXaXRoIiwib2JqZWN0Q29udGFpbmluZyIsImludmFsaWREYXRhIiwidGVzdE1ldGFkYXRhIiwidGVzdEtleSIsImRhdGFXaXRoTWV0YWRhdGEiXSwibWFwcGluZ3MiOiI7QUFHQSxNQUFNO0FBQ05BLEtBQUtDLElBQUksQ0FBQyxtQkFBbUI7SUFDM0IsTUFBTUMsaUJBQWlCRixLQUFLRyxhQUFhLENBQUM7SUFDMUMsT0FBTztRQUNMQyxZQUFZO1FBQ1pDLFFBQVE7WUFDTkMsTUFBTTtnQkFDSkMsWUFBWVAsS0FBS1EsRUFBRSxHQUFHQyxrQkFBa0IsQ0FBQyxJQUFPLENBQUE7d0JBQzlDQyxJQUFJO29CQUNOLENBQUE7WUFDRjtZQUNBQyxhQUFhO2dCQUNYQyxRQUFRWixLQUFLUSxFQUFFLEdBQUdDLGtCQUFrQixDQUFDLElBQU1JLFFBQVFDLE9BQU8sQ0FBQyxDQUFDO1lBQzlEO1FBQ0Y7SUFDRjtBQUNGOzs7O2dDQW5CNEI7QUFxQjVCLDhCQUE4QjtBQUM5QkMsU0FBUyxrQkFBa0I7SUFDekJDLFdBQVc7UUFDVGhCLEtBQUtpQixhQUFhO1FBQ2xCakIsS0FBS2tCLEtBQUssQ0FBQ0MsU0FBUyxPQUFPVixrQkFBa0IsQ0FBQyxLQUFPO0lBQ3ZEO0lBRUFXLFVBQVU7UUFDUnBCLEtBQUtxQixlQUFlO0lBQ3RCO0lBRUFOLFNBQVMsZUFBZTtRQUN0QixNQUFNTyxTQUFTO1FBQ2YsTUFBTUMsb0JBQW9CO1lBQ3hCRDtZQUNBRSxRQUFRO1lBQ1JDLFVBQVU7Z0JBQUVDLFFBQVE7Z0JBQWlCQyxVQUFVO1lBQVk7UUFDN0Q7UUFFQUMsR0FBRyx1QkFBdUI7WUFDeEIsTUFBTUMsYUFBYTdCLEtBQUtrQixLQUFLLENBQUNDLFNBQVM7WUFFdkMsTUFBTVcsSUFBQUEsMkJBQVcsRUFBQ1A7WUFFbEIsb0JBQW9CO1lBQ3BCUSxPQUFPRixZQUFZRyxnQkFBZ0I7WUFDbkNELE9BQU9GLFlBQVlJLG9CQUFvQixDQUNyQyw0QkFDQUYsT0FBT0csZ0JBQWdCLENBQUM7Z0JBQ3RCWjtnQkFDQUUsUUFBUUQsa0JBQWtCQyxNQUFNO1lBQ2xDO1FBRUo7UUFFQUksR0FBRyw4QkFBOEI7WUFDL0IsMEJBQTBCO1lBQzFCLE1BQU1PLGNBQWM7Z0JBQUViLFFBQVE7WUFBRztZQUNqQyxNQUFNTyxhQUFhN0IsS0FBS2tCLEtBQUssQ0FBQ0MsU0FBUztZQUV2QyxNQUFNVyxJQUFBQSwyQkFBVyxFQUFDSztZQUVsQixvQkFBb0I7WUFDcEJKLE9BQU9GLFlBQVlHLGdCQUFnQjtRQUNyQztRQUVBSixHQUFHLGtCQUFrQjtZQUNuQixNQUFNUSxlQUFlO2dCQUFFQyxTQUFTO1lBQVk7WUFDNUMsTUFBTUMsbUJBQW1CO2dCQUN2QixHQUFHZixpQkFBaUI7Z0JBQ3BCRSxVQUFVVztZQUNaO1lBQ0EsTUFBTVAsYUFBYTdCLEtBQUtrQixLQUFLLENBQUNDLFNBQVM7WUFFdkMsTUFBTVcsSUFBQUEsMkJBQVcsRUFBQ1E7WUFFbEIsd0JBQXdCO1lBQ3hCUCxPQUFPRixZQUFZSSxvQkFBb0IsQ0FDckMsNEJBQ0FGLE9BQU9HLGdCQUFnQixDQUFDO2dCQUN0QlQsVUFBVVc7WUFDWjtRQUVKO0lBQ0Y7QUFDRiJ9