{"version":3,"sources":["/Users/yusuketsunoda/Documents/cursor/ppttranslatorapp/worktrees/cicd-setup/tests/api/pptx-generate.test.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { expect } from '@jest/globals';\nimport { promises as fs } from 'fs';\nimport path from 'path';\nimport { promisify } from 'util';\nimport { exec } from 'child_process';\n\n// next-authのモック\njest.mock('next-auth', () => ({\n  getServerSession: jest.fn().mockResolvedValue({\n    user: {\n      id: 'test-user',\n      email: 'test@example.com',\n    },\n  }),\n}));\n\n// fs/promisesのモック\njest.mock('fs/promises', () => ({\n  access: jest.fn().mockResolvedValue(undefined),\n  mkdir: jest.fn().mockResolvedValue(undefined),\n  writeFile: jest.fn().mockResolvedValue(undefined),\n  readdir: jest.fn().mockResolvedValue(['test.pptx']),\n  unlink: jest.fn().mockResolvedValue(undefined),\n}));\n\n// child_processのモック\njest.mock('child_process', () => ({\n  exec: jest.fn(),\n}));\n\n// filePathManagerのモック\njest.mock('@/lib/utils/file-utils', () => ({\n  filePathManager: {\n    findActualFilePath: jest.fn().mockResolvedValue('/path/to/test.pptx'),\n  },\n}));\n\n// app/api/pptx/generate/route.tsのインポート\nimport { POST } from '@/app/api/pptx/generate/route';\n\ndescribe('PPTX Generate API', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('POST /api/pptx/generate', () => {\n    it('認証されていない場合はエラーを返す', async () => {\n      // getServerSessionをnullを返すようにモック\n      const { getServerSession } = require('next-auth');\n      getServerSession.mockResolvedValueOnce(null);\n\n      const mockReq = new Request('http://localhost:3000/api/pptx/generate', {\n        method: 'POST',\n        body: JSON.stringify({\n          fileId: 'test-file',\n          translations: [{ text: 'Hello', translation: 'こんにちは' }],\n        }),\n      }) as NextRequest;\n\n      const response = await POST(mockReq);\n      expect(response.status).toBe(401);\n\n      const data = await response.json();\n      expect(data.error).toBe('Unauthorized');\n    });\n\n    it('必須パラメータが不足している場合はエラーを返す', async () => {\n      const mockReq = new Request('http://localhost:3000/api/pptx/generate', {\n        method: 'POST',\n        body: JSON.stringify({}),\n      }) as NextRequest;\n\n      const response = await POST(mockReq);\n      expect(response.status).toBe(400);\n\n      const data = await response.json();\n      expect(data.error).toBe('Missing required parameters');\n    });\n\n    it('元のファイルが見つからない場合は404エラーを返す', async () => {\n      // filePathManagerのfindActualFilePathをnullを返すようにモック\n      const { filePathManager } = require('@/lib/utils/file-utils');\n      filePathManager.findActualFilePath.mockResolvedValueOnce(null);\n\n      const mockReq = new Request('http://localhost:3000/api/pptx/generate', {\n        method: 'POST',\n        body: JSON.stringify({\n          fileId: 'non-existent',\n          translations: [{ text: 'Hello', translation: 'こんにちは' }],\n        }),\n      }) as NextRequest;\n\n      const response = await POST(mockReq);\n      expect(response.status).toBe(404);\n\n      const data = await response.json();\n      expect(data.error).toBe('Original PPTX file not found');\n    });\n\n    it('Pythonスクリプトが見つからない場合は500エラーを返す', async () => {\n      // fs.accessをエラーを投げるようにモック\n      const fs = require('fs/promises');\n      fs.access.mockRejectedValueOnce(new Error('ENOENT'));\n\n      const mockReq = new Request('http://localhost:3000/api/pptx/generate', {\n        method: 'POST',\n        body: JSON.stringify({\n          fileId: 'test-file',\n          translations: [{ text: 'Hello', translation: 'こんにちは' }],\n        }),\n      }) as NextRequest;\n\n      const response = await POST(mockReq);\n      expect(response.status).toBe(500);\n\n      const data = await response.json();\n      expect(data.error).toBe('Python script not found');\n    });\n\n    it('Pythonスクリプトの実行に失敗した場合は500エラーを返す', async () => {\n      // execをエラーを投げるようにモック\n      const { exec } = require('child_process');\n      exec.mockImplementationOnce((cmd, cb) => cb(new Error('Python error')));\n\n      const mockReq = new Request('http://localhost:3000/api/pptx/generate', {\n        method: 'POST',\n        body: JSON.stringify({\n          fileId: 'test-file',\n          translations: [{ text: 'Hello', translation: 'こんにちは' }],\n        }),\n      }) as NextRequest;\n\n      const response = await POST(mockReq);\n      expect(response.status).toBe(500);\n\n      const data = await response.json();\n      expect(data.error).toContain('Failed to generate PPTX');\n    });\n\n    it('PPTXファイルを正常に生成する', async () => {\n      // execを成功するようにモック\n      const { exec } = require('child_process');\n      exec.mockImplementationOnce((cmd, cb) => cb(null, { stdout: '{\"success\":true}' }));\n\n      const mockReq = new Request('http://localhost:3000/api/pptx/generate', {\n        method: 'POST',\n        body: JSON.stringify({\n          fileId: 'test-file',\n          translations: [{ text: 'Hello', translation: 'こんにちは' }],\n        }),\n      }) as NextRequest;\n\n      const response = await POST(mockReq);\n      expect(response.status).toBe(200);\n\n      const data = await response.json();\n      expect(data.success).toBe(true);\n      expect(data.downloadUrl).toBe('/api/download/test-user/test-file_translated.pptx');\n    });\n  });\n});\n"],"names":["jest","mock","getServerSession","fn","mockResolvedValue","user","id","email","access","undefined","mkdir","writeFile","readdir","unlink","exec","filePathManager","findActualFilePath","describe","beforeEach","clearAllMocks","it","require","mockResolvedValueOnce","mockReq","Request","method","body","JSON","stringify","fileId","translations","text","translation","response","POST","expect","status","toBe","data","json","error","fs","mockRejectedValueOnce","Error","mockImplementationOnce","cmd","cb","toContain","stdout","success","downloadUrl"],"mappings":"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"}