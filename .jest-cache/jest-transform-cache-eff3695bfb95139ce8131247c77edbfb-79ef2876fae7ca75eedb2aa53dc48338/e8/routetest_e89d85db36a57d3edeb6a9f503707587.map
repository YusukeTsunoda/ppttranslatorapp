{"version":3,"sources":["/Users/yusuketsunoda/Documents/cursor/ppttranslatorapp/worktrees/cicd-setup/tests/api/auth/reset-password/confirm/route.test.ts"],"sourcesContent":["import { POST } from '@/app/api/auth/reset-password/confirm/route';\nimport { hashPassword } from '@/lib/auth/password';\nimport { createPrismaMock, createMockUser, clearAllMocks } from '@/tests/helpers/mockSetup';\n\n// next/serverのモック化\njest.mock('next/server', () => ({\n  NextResponse: {\n    json: jest.fn().mockImplementation((data, options = {}) => ({\n      json: () => Promise.resolve(data),\n      status: options.status || 200,\n      headers: new Map(),\n    })),\n  },\n}));\n\n// hashPasswordのモック\njest.mock('@/lib/auth/password', () => ({\n  hashPassword: jest.fn(),\n}));\n\n// console.logのモック\n// consoleのモック化\nconst mockConsoleLog = jest.spyOn(console, 'log').mockImplementation();\nconst mockConsoleError = jest.spyOn(console, 'error').mockImplementation();\n\nconst prismaMock = createPrismaMock();\nconst hashPasswordMock = hashPassword as jest.Mock;\n\ndescribe('POST /api/auth/reset-password/confirm', () => {\n  beforeEach(() => {\n    clearAllMocks();\n    hashPasswordMock.mockResolvedValue('new_hashed_password');\n  });\n\n  afterEach(() => {\n    mockConsoleLog.mockClear();\n    mockConsoleError.mockClear();\n  });\n\n  it('should reset password successfully for dummy user', async () => {\n    const requestBody = {\n      token: 'any-token', // Currently ignored by the API\n      password: 'newValidPassword123',\n    };\n    const req = new Request('http://localhost/api/auth/reset-password/confirm', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: { 'Content-Type': 'application/json' },\n    });\n\n    const mockUser = createMockUser({\n      id: 'dummy-user-id',\n      email: 'dummy@example.com',\n      name: 'Dummy User',\n      password: 'old_hashed_password',\n    });\n    prismaMock.user.findFirst.mockResolvedValue(mockUser);\n    prismaMock.user.update.mockResolvedValue(mockUser);\n\n    const response = await POST(req as Request);\n    const responseBody = await response.json();\n\n    expect(response.status).toBe(200);\n    expect(responseBody.success).toBe(true);\n    expect(prismaMock.user.findFirst).toHaveBeenCalledWith({\n      where: { email: 'dummy@example.com' },\n    });\n    expect(hashPasswordMock).toHaveBeenCalledWith(requestBody.password);\n    expect(prismaMock.user.update).toHaveBeenCalledWith({\n      where: { id: mockUser.id },\n      data: {\n        password: 'new_hashed_password',\n        updatedAt: expect.any(Date),\n      },\n    });\n  });\n\n  it('should return 400 if token is invalid (dummy user not found)', async () => {\n    const requestBody = {\n      token: 'invalid-token',\n      password: 'newValidPassword123',\n    };\n    const req = new Request('http://localhost/api/auth/reset-password/confirm', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: { 'Content-Type': 'application/json' },\n    });\n\n    prismaMock.user.findFirst.mockResolvedValue(null);\n\n    const response = await POST(req as Request);\n    const responseBody = await response.json();\n\n    expect(response.status).toBe(400);\n    expect(responseBody.error).toBe('トークンが無効か有効期限が切れています');\n    expect(hashPasswordMock).not.toHaveBeenCalled();\n    expect(prismaMock.user.update).not.toHaveBeenCalled();\n  });\n\n  it('should return error for invalid input (e.g., short password)', async () => {\n    const requestBody = {\n      token: 'any-token',\n      password: 'short',\n    };\n    const req = new Request('http://localhost/api/auth/reset-password/confirm', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: { 'Content-Type': 'application/json' },\n    });\n\n    const response = await POST(req as Request);\n    const responseBody = await response.json();\n\n    expect(response.status).toBe(500);\n    expect(responseBody.error).toBe('パスワードのリセットに失敗しました');\n  });\n\n  it('should return 500 if hashPassword fails', async () => {\n    const requestBody = {\n      token: 'any-token',\n      password: 'newValidPassword123',\n    };\n    const req = new Request('http://localhost/api/auth/reset-password/confirm', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: { 'Content-Type': 'application/json' },\n    });\n\n    const mockUser = createMockUser({ id: 'dummy-user-id' });\n    prismaMock.user.findFirst.mockResolvedValue(mockUser);\n    hashPasswordMock.mockRejectedValue(new Error('Hashing failed'));\n\n    const response = await POST(req as Request);\n    const responseBody = await response.json();\n\n    expect(response.status).toBe(500);\n    expect(responseBody.error).toBe('パスワードのリセットに失敗しました');\n    expect(prismaMock.user.update).not.toHaveBeenCalled();\n  });\n\n  it('should return 500 if prisma.user.update fails', async () => {\n    const requestBody = {\n      token: 'any-token',\n      password: 'newValidPassword123',\n    };\n    const req = new Request('http://localhost/api/auth/reset-password/confirm', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: { 'Content-Type': 'application/json' },\n    });\n\n    const mockUser = createMockUser({ id: 'dummy-user-id' });\n    prismaMock.user.findFirst.mockResolvedValue(mockUser);\n    hashPasswordMock.mockResolvedValue('new_hashed_password');\n    prismaMock.user.update.mockRejectedValue(new Error('DB update failed'));\n\n    const response = await POST(req as Request);\n    const responseBody = await response.json();\n\n    expect(response.status).toBe(500);\n    expect(responseBody.error).toBe('パスワードのリセットに失敗しました');\n  });\n\n  it('should validate request body structure', async () => {\n    const invalidRequests = [\n      { password: 'validPassword123' }, // missing token\n      { token: 'valid-token' }, // missing password\n      {}, // empty body\n    ];\n\n    for (const body of invalidRequests) {\n      const req = new Request('http://localhost/api/auth/reset-password/confirm', {\n        method: 'POST',\n        body: JSON.stringify(body),\n        headers: { 'Content-Type': 'application/json' },\n      });\n\n      const response = await POST(req as Request);\n      const responseBody = await response.json();\n\n      expect(response.status).toBe(500);\n      expect(responseBody.error).toBe('パスワードのリセットに失敗しました');\n      expect(mockConsoleError).toHaveBeenCalled();\n    }\n  });\n\n  it('should validate password requirements', async () => {\n    const invalidPasswords = [\n      'short', // too short\n      '12345678', // only numbers\n      'abcdefgh', // only lowercase\n      'ABCDEFGH', // only uppercase\n    ];\n\n    for (const password of invalidPasswords) {\n      const req = new Request('http://localhost/api/auth/reset-password/confirm', {\n        method: 'POST',\n        body: JSON.stringify({ token: 'valid-token', password }),\n        headers: { 'Content-Type': 'application/json' },\n      });\n\n      const response = await POST(req as Request);\n      const responseBody = await response.json();\n\n      expect(response.status).toBe(500);\n      expect(responseBody.error).toBe('パスワードのリセットに失敗しました');\n    }\n  });\n\n  it('should log password reset activity', async () => {\n    const requestBody = {\n      token: 'valid-token',\n      password: 'newValidPassword123',\n    };\n    const req = new Request('http://localhost/api/auth/reset-password/confirm', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: { 'Content-Type': 'application/json' },\n    });\n\n    const mockUser = createMockUser({\n      id: 'test-user-id',\n      email: 'dummy@example.com',\n    });\n\n    prismaMock.user.findFirst.mockResolvedValue(mockUser);\n    prismaMock.user.update.mockResolvedValue(mockUser);\n\n    await POST(req as Request);\n\n    expect(mockConsoleLog).toHaveBeenCalledWith('Password reset:', expect.objectContaining({\n      userId: mockUser.id,\n      action: 'update_password',\n      timestamp: expect.any(String),\n    }));\n  });\n\n  it('should handle database unique constraint violations', async () => {\n    const requestBody = {\n      token: 'valid-token',\n      password: 'newValidPassword123',\n    };\n    const req = new Request('http://localhost/api/auth/reset-password/confirm', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: { 'Content-Type': 'application/json' },\n    });\n\n    const mockUser = createMockUser({ id: 'test-user-id' });\n    prismaMock.user.findFirst.mockResolvedValue(mockUser);\n    prismaMock.user.update.mockRejectedValue(new Error('P2002')); // Prisma unique constraint error\n\n    const response = await POST(req as Request);\n    const responseBody = await response.json();\n\n    expect(response.status).toBe(500);\n    expect(responseBody.error).toBe('パスワードのリセットに失敗しました');\n    expect(mockConsoleError).toHaveBeenCalled();\n  });\n}); "],"names":["jest","mock","NextResponse","json","fn","mockImplementation","data","options","Promise","resolve","status","headers","Map","hashPassword","mockConsoleLog","spyOn","console","mockConsoleError","prismaMock","createPrismaMock","hashPasswordMock","describe","beforeEach","clearAllMocks","mockResolvedValue","afterEach","mockClear","it","requestBody","token","password","req","Request","method","body","JSON","stringify","mockUser","createMockUser","id","email","name","user","findFirst","update","response","POST","responseBody","expect","toBe","success","toHaveBeenCalledWith","where","updatedAt","any","Date","error","not","toHaveBeenCalled","mockRejectedValue","Error","invalidRequests","invalidPasswords","objectContaining","userId","action","timestamp","String"],"mappings":"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"}