3398793ff239d1fe7580894737d0d083
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    POST: function() {
        return POST;
    },
    dynamic: function() {
        return dynamic;
    },
    runtime: function() {
        return runtime;
    }
});
const _interop_require_default = require("@swc/helpers/_/_interop_require_default");
const _server = require("next/server");
const _client = require("@prisma/client");
const _bcrypt = /*#__PURE__*/ _interop_require_default._(require("bcrypt"));
const _zod = require("zod");
const _crypto = /*#__PURE__*/ _interop_require_default._(require("crypto"));
// スキーマ定義
const userSchema = _zod.z.object({
    name: _zod.z.string().min(1, '名前は必須です'),
    email: _zod.z.string().email('有効なメールアドレスを入力してください'),
    password: _zod.z.string().min(6, 'パスワードは6文字以上必要です')
});
const runtime = 'nodejs';
const dynamic = 'force-dynamic';
async function POST(request) {
    // 環境変数をログ出力
    console.log('==== DATABASE CONNECTION DEBUG INFO ====');
    console.log(`DATABASE_URL exists: ${!!process.env.DATABASE_URL}`);
    if (process.env.DATABASE_URL) {
        console.log(`DATABASE_URL prefix: ${process.env.DATABASE_URL.substring(0, 15)}...`);
        console.log(`DATABASE_URL starts with postgresql:// or postgres://: ${process.env.DATABASE_URL.startsWith('postgresql://') || process.env.DATABASE_URL.startsWith('postgres://')}`);
        // 引用符の有無を確認
        console.log(`DATABASE_URL contains quotes: ${process.env.DATABASE_URL.includes('"') || process.env.DATABASE_URL.includes("'")}`);
        // 完全なURLを出力（パスワードをマスク）
        try {
            const urlObj = new URL(process.env.DATABASE_URL);
            const maskedUrl = `${urlObj.protocol}//${urlObj.username}:****@${urlObj.host}${urlObj.pathname}${urlObj.search}`;
            console.log(`Masked DATABASE_URL: ${maskedUrl}`);
        } catch (e) {
            const errorMessage = e instanceof Error ? e.message : '不明なエラー';
            console.log(`Error parsing DATABASE_URL: ${errorMessage}`);
        }
    } else {
        console.log('DATABASE_URL is not set');
    }
    console.log('=======================================');
    try {
        const body = await request.json();
        // バリデーション
        const validationResult = userSchema.safeParse(body);
        if (!validationResult.success) {
            return _server.NextResponse.json({
                error: validationResult.error.errors[0].message
            }, {
                status: 400
            });
        }
        const { name, email, password } = validationResult.data;
        const prisma = new _client.PrismaClient();
        // ユーザーの存在確認
        const existingUser = await prisma.user.findUnique({
            where: {
                email
            }
        });
        if (existingUser) {
            await prisma.$disconnect();
            return _server.NextResponse.json({
                error: 'このメールアドレスは既に登録されています'
            }, {
                status: 400
            });
        }
        // パスワードのハッシュ化
        const hashedPassword = await _bcrypt.default.hash(password, 10);
        // ユーザー作成
        const user = await prisma.user.create({
            data: {
                id: _crypto.default.randomUUID(),
                name,
                email,
                password: hashedPassword,
                credits: 100,
                updatedAt: new Date()
            }
        });
        await prisma.$disconnect();
        return _server.NextResponse.json({
            message: 'ユーザーが正常に作成されました',
            user: {
                id: user.id,
                name: user.name,
                email: user.email
            }
        }, {
            status: 201
        });
    } catch (error) {
        console.error('Signup error:', error);
        const errorMessage = error instanceof Error ? error.message : '不明なエラーが発生しました';
        return _server.NextResponse.json({
            error: errorMessage
        }, {
            status: 500
        });
    }
}

//# sourceMappingURL=data:application/json;base64,