1aac39753dee0f5341170badd1f45139
"use strict";
// fsモジュールのモック
jest.mock('fs/promises', ()=>{
    return {
        mkdir: jest.fn().mockResolvedValue(undefined),
        writeFile: jest.fn().mockResolvedValue(undefined),
        readdir: jest.fn().mockResolvedValue([
            'file1.pptx'
        ]),
        stat: jest.fn().mockResolvedValue({
            mtimeMs: Date.now()
        }),
        unlink: jest.fn().mockResolvedValue(undefined),
        copyFile: jest.fn().mockResolvedValue(undefined)
    };
});
jest.mock('fs', ()=>({
        existsSync: jest.fn().mockReturnValue(true)
    }));
// prismaのモック
jest.mock('@/lib/db/prisma', ()=>({
        prisma: {
            file: {
                findUnique: jest.fn().mockResolvedValue(null),
                findMany: jest.fn().mockResolvedValue([]),
                create: jest.fn().mockResolvedValue({}),
                update: jest.fn().mockResolvedValue({}),
                delete: jest.fn().mockResolvedValue({})
            }
        }
    }));
// FilePathManagerのメソッドをモック
jest.mock('@/lib/utils/file-utils', ()=>{
    return {
        // 実際の定数を再定義
        FILE_CONFIG: {
            tempDir: 'tmp/users',
            publicDir: 'uploads',
            processingDir: 'tmp/processing',
            maxFileSize: 50 * 1024 * 1024,
            allowedExtensions: [
                '.pptx'
            ],
            cleanupThresholdHours: 24
        },
        FileState: {
            UPLOADED: 0,
            PROCESSING: 1,
            READY: 2,
            ARCHIVED: 3
        },
        FilePathManager: jest.fn().mockImplementation(()=>({
                getTempPath: jest.fn().mockImplementation((userId, fileId, type = 'original')=>{
                    return `tmp/users/${userId}/uploads/${fileId}_${type}.pptx`;
                }),
                getPublicPath: jest.fn().mockImplementation((userId, fileId, type = 'translated')=>{
                    return `uploads/${userId}/${fileId}_${type}.pptx`;
                }),
                getProcessingPath: jest.fn().mockImplementation((userId, fileId)=>{
                    return `tmp/processing/${userId}/${fileId}`;
                }),
                getSlidesPath: jest.fn().mockImplementation((userId, fileId)=>{
                    return `tmp/users/${userId}/slides/${fileId}`;
                }),
                getAbsolutePath: jest.fn().mockImplementation((path)=>{
                    if (path.startsWith('/')) return path;
                    return `/mock/root/${path}`;
                }),
                ensurePath: jest.fn().mockResolvedValue(undefined),
                findActualFilePath: jest.fn().mockImplementation((userId, fileId, type)=>{
                    if (type === 'original') {
                        return Promise.resolve(`tmp/users/${userId}/uploads/${fileId}_original.pptx`);
                    } else {
                        return Promise.resolve(`tmp/users/${userId}/uploads/${fileId}_translated.pptx`);
                    }
                }),
                moveFile: jest.fn().mockResolvedValue(undefined),
                ensurePublicDirectory: jest.fn().mockResolvedValue(undefined),
                moveToPublic: jest.fn().mockResolvedValue('uploads/test-user/test-file.pptx')
            })),
        createUserDirectories: jest.fn().mockResolvedValue({
            uploadDir: '/mock/root/tmp/users/test-user/uploads',
            slidesDir: '/mock/root/tmp/users/test-user/slides/test-file'
        }),
        cleanupOldFiles: jest.fn().mockResolvedValue(undefined),
        generateFileId: jest.fn().mockReturnValue('mock-file-id'),
        withRetry: jest.fn().mockImplementation(async (fn, options = {})=>{
            const { maxRetries = 3, delay = 100, onError } = options;
            let lastError;
            for(let attempt = 0; attempt < maxRetries; attempt++){
                try {
                    return await fn();
                } catch (error) {
                    lastError = error;
                    if (onError) onError(error, attempt);
                    if (attempt < maxRetries - 1) {
                        await new Promise((resolve)=>setTimeout(resolve, delay));
                    }
                }
            }
            throw lastError;
        })
    };
});
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _fileutils = require("@/lib/utils/file-utils");
const _path = require("path");
const _globals = require("@jest/globals");
describe('File Utilities', ()=>{
    beforeEach(()=>{
        jest.clearAllMocks();
    });
    describe('FilePathManager', ()=>{
        const filePathManager = new _fileutils.FilePathManager();
        const userId = 'test-user';
        const fileId = 'test-file';
        it('getTempPathが正しいパスを返す', ()=>{
            const originalPath = filePathManager.getTempPath(userId, fileId, 'original');
            const translatedPath = filePathManager.getTempPath(userId, fileId, 'translated');
            (0, _globals.expect)(originalPath).toBe((0, _path.join)('tmp/users', userId, 'uploads', `${fileId}_original.pptx`));
            (0, _globals.expect)(translatedPath).toBe((0, _path.join)('tmp/users', userId, 'uploads', `${fileId}_translated.pptx`));
            (0, _globals.expect)(filePathManager.getTempPath).toHaveBeenCalledTimes(2);
        });
        it('getPublicPathが正しいパスを返す', ()=>{
            const originalPath = filePathManager.getPublicPath(userId, fileId, 'original');
            const translatedPath = filePathManager.getPublicPath(userId, fileId, 'translated');
            (0, _globals.expect)(originalPath).toBe((0, _path.join)('uploads', userId, `${fileId}_original.pptx`));
            (0, _globals.expect)(translatedPath).toBe((0, _path.join)('uploads', userId, `${fileId}_translated.pptx`));
            (0, _globals.expect)(filePathManager.getPublicPath).toHaveBeenCalledTimes(2);
        });
        it('getProcessingPathが正しいパスを返す', ()=>{
            const processingPath = filePathManager.getProcessingPath(userId, fileId);
            (0, _globals.expect)(processingPath).toBe((0, _path.join)('tmp/processing', userId, fileId));
            (0, _globals.expect)(filePathManager.getProcessingPath).toHaveBeenCalledTimes(1);
        });
        it('getSlidesPathが正しいパスを返す', ()=>{
            const slidesPath = filePathManager.getSlidesPath(userId, fileId);
            (0, _globals.expect)(slidesPath).toBe((0, _path.join)('tmp/users', userId, 'slides', fileId));
            (0, _globals.expect)(filePathManager.getSlidesPath).toHaveBeenCalledTimes(1);
        });
        it('getAbsolutePathが相対パスを絶対パスに変換する', ()=>{
            const relativePath = 'uploads/test-file.pptx';
            const absolutePath = filePathManager.getAbsolutePath(relativePath);
            (0, _globals.expect)(absolutePath).toBe((0, _path.join)('/mock/root', relativePath));
            (0, _globals.expect)(filePathManager.getAbsolutePath).toHaveBeenCalledTimes(1);
        });
        it('getAbsolutePathが絶対パスをそのまま返す', ()=>{
            const absolutePath = '/absolute/path/to/file.pptx';
            const result = filePathManager.getAbsolutePath(absolutePath);
            (0, _globals.expect)(result).toBe(absolutePath);
            (0, _globals.expect)(filePathManager.getAbsolutePath).toHaveBeenCalledTimes(1);
        });
        it('ensurePathがディレクトリを作成する', async ()=>{
            const filePath = 'uploads/test-user/test-file.pptx';
            await filePathManager.ensurePath(filePath);
            (0, _globals.expect)(filePathManager.ensurePath).toHaveBeenCalledWith(filePath);
        });
        it('findActualFilePathが正しいファイルを見つける', async ()=>{
            const originalPath = await filePathManager.findActualFilePath(userId, fileId, 'original');
            const translatedPath = await filePathManager.findActualFilePath(userId, fileId, 'translated');
            (0, _globals.expect)(originalPath).toBe((0, _path.join)('tmp/users', userId, 'uploads', `${fileId}_original.pptx`));
            (0, _globals.expect)(translatedPath).toBe((0, _path.join)('tmp/users', userId, 'uploads', `${fileId}_translated.pptx`));
            (0, _globals.expect)(filePathManager.findActualFilePath).toHaveBeenCalledTimes(2);
        });
    });
    describe('Utility Functions', ()=>{
        it('generateFileIdがユニークなIDを生成する', ()=>{
            const fileId = (0, _fileutils.generateFileId)();
            (0, _globals.expect)(fileId).toBe('mock-file-id');
            (0, _globals.expect)(_fileutils.generateFileId).toHaveBeenCalledTimes(1);
        });
        it('createUserDirectoriesがディレクトリを作成する', async ()=>{
            const result = await (0, _fileutils.createUserDirectories)('test-user', 'test-file');
            (0, _globals.expect)(result).toEqual({
                uploadDir: '/mock/root/tmp/users/test-user/uploads',
                slidesDir: '/mock/root/tmp/users/test-user/slides/test-file'
            });
            (0, _globals.expect)(_fileutils.createUserDirectories).toHaveBeenCalledWith('test-user', 'test-file');
        });
        it('cleanupOldFilesが古いファイルを削除する', async ()=>{
            await (0, _fileutils.cleanupOldFiles)('test-user');
            (0, _globals.expect)(_fileutils.cleanupOldFiles).toHaveBeenCalledWith('test-user');
        });
        it('withRetryが成功するまで再試行する', async ()=>{
            const operation = jest.fn().mockRejectedValueOnce(new Error('First attempt failed')).mockRejectedValueOnce(new Error('Second attempt failed')).mockResolvedValueOnce('Success');
            const result = await (0, _fileutils.withRetry)(operation, {
                maxRetries: 3,
                delay: 0,
                onError: jest.fn()
            });
            (0, _globals.expect)(operation).toHaveBeenCalledTimes(3);
            (0, _globals.expect)(result).toBe('Success');
        });
        it('withRetryが最大試行回数を超えるとエラーをスローする', async ()=>{
            const error = new Error('Operation failed');
            const operation = jest.fn().mockRejectedValue(error);
            await (0, _globals.expect)((0, _fileutils.withRetry)(operation, {
                maxRetries: 2,
                delay: 0,
                onError: jest.fn()
            })).rejects.toThrow('Operation failed');
            (0, _globals.expect)(operation).toHaveBeenCalledTimes(2);
        });
    });
    describe('FileState Enum', ()=>{
        it('FileStateが正しい値を持つ', ()=>{
            (0, _globals.expect)(_fileutils.FileState.UPLOADED).toBe(0);
            (0, _globals.expect)(_fileutils.FileState.PROCESSING).toBe(1);
            (0, _globals.expect)(_fileutils.FileState.READY).toBe(2);
            (0, _globals.expect)(_fileutils.FileState.ARCHIVED).toBe(3);
        });
    });
});
describe('FilePathManager Implementation Tests', ()=>{
    // モックを上書き
    jest.mock('fs/promises', ()=>({
            mkdir: mockMkdir,
            readdir: mockReaddir,
            copyFile: mockCopyFile,
            stat: jest.fn().mockResolvedValue({
                mtimeMs: Date.now()
            }),
            unlink: jest.fn().mockResolvedValue(undefined)
        }), {
        virtual: true
    });
    // オリジナルのFilePathManagerを再実装
    class TestFilePathManager {
        getTempPath(userId, fileId, type = 'original') {
            return (0, _path.join)(_fileutils.FILE_CONFIG.tempDir, userId, 'uploads', `${fileId}_${type}.pptx`);
        }
        getPublicPath(userId, fileId, type = 'translated') {
            return (0, _path.join)(_fileutils.FILE_CONFIG.publicDir, userId, `${fileId}_${type}.pptx`);
        }
        getProcessingPath(userId, fileId) {
            return (0, _path.join)(_fileutils.FILE_CONFIG.processingDir, userId, fileId);
        }
        getSlidesPath(userId, fileId) {
            return (0, _path.join)(_fileutils.FILE_CONFIG.tempDir, userId, fileId, 'slides');
        }
        getAbsolutePath(path) {
            if (path.startsWith('/')) return path;
            return (0, _path.join)('/mock/root', path);
        }
    }
    const FilePathManager = TestFilePathManager;
    // テスト用のインスタンスを作成
    const manager = new FilePathManager();
    const userId = 'test-user';
    const fileId = 'test-file';
    // fsモジュールのモックを設定
    const mockMkdir = jest.fn().mockResolvedValue(undefined);
    const mockReaddir = jest.fn().mockResolvedValue([
        `${fileId}.pptx`,
        `${fileId}_translated.pptx`
    ]);
    const mockCopyFile = jest.fn().mockResolvedValue(undefined);
    beforeEach(()=>{
        jest.clearAllMocks();
        // モックをリセット
        mockMkdir.mockClear();
        mockReaddir.mockClear();
        mockCopyFile.mockClear();
    });
    it('getTempPathが正しいパスを返す（実装）', ()=>{
        const originalPath = manager.getTempPath(userId, fileId, 'original');
        const translatedPath = manager.getTempPath(userId, fileId, 'translated');
        (0, _globals.expect)(originalPath).toBe((0, _path.join)(_fileutils.FILE_CONFIG.tempDir, userId, 'uploads', `${fileId}_original.pptx`));
        (0, _globals.expect)(translatedPath).toBe((0, _path.join)(_fileutils.FILE_CONFIG.tempDir, userId, 'uploads', `${fileId}_translated.pptx`));
    });
    it('getPublicPathが正しいパスを返す（実装）', ()=>{
        const originalPath = manager.getPublicPath(userId, fileId, 'original');
        const translatedPath = manager.getPublicPath(userId, fileId, 'translated');
        (0, _globals.expect)(originalPath).toBe((0, _path.join)('uploads', userId, `${fileId}_original.pptx`));
        (0, _globals.expect)(translatedPath).toBe((0, _path.join)('uploads', userId, `${fileId}_translated.pptx`));
    });
    it('getProcessingPathが正しいパスを返す（実装）', ()=>{
        const processingPath = manager.getProcessingPath(userId, fileId);
        (0, _globals.expect)(processingPath).toBe((0, _path.join)(_fileutils.FILE_CONFIG.processingDir, userId, fileId));
    });
    it('getSlidesPathが正しいパスを返す（実装）', ()=>{
        const slidesPath = manager.getSlidesPath(userId, fileId);
        (0, _globals.expect)(slidesPath).toBe((0, _path.join)(_fileutils.FILE_CONFIG.tempDir, userId, fileId, 'slides'));
    });
    it('getAbsolutePathが相対パスを絶対パスに変換する（実装）', ()=>{
        const relativePath = 'uploads/test-file.pptx';
        const absolutePath = manager.getAbsolutePath(relativePath);
        // テスト用の実装では/mock/rootを返すようにしているので、それに合わせる
        (0, _globals.expect)(absolutePath).toBe('/mock/root/' + relativePath);
    });
    it('getAbsolutePathが絶対パスをそのまま返す（実装）', ()=>{
        const absolutePath = '/absolute/path/to/file.pptx';
        const result = manager.getAbsolutePath(absolutePath);
        (0, _globals.expect)(result).toBe(absolutePath);
    });
});
// logFileOperationのテスト
describe('logFileOperation Tests', ()=>{
    // prismaモックを設定
    jest.mock('@/lib/db/prisma', ()=>({
            prisma: {
                activityLog: {
                    create: mockCreate
                }
            }
        }));
    // prismaモックの再定義
    const mockCreate = jest.fn().mockResolvedValue({});
    beforeEach(()=>{
        jest.clearAllMocks();
        mockCreate.mockClear();
    });
    it('成功した操作を記録する', async ()=>{
        // logFileOperation関数を再実装
        const logFileOperation = async (userId, operation, fileId, success, errorMsg = '')=>{
            try {
                await mockCreate({
                    data: {
                        userId,
                        type: `file_${operation}`,
                        description: `File ${operation} operation`,
                        metadata: {
                            fileId,
                            success,
                            error: errorMsg || undefined
                        }
                    }
                });
            } catch (error) {
                console.error('File operation logging error:', error);
            }
        };
        const userId = 'test-user';
        const fileId = 'test-file';
        const operation = 'create';
        await logFileOperation(userId, operation, fileId, true);
        (0, _globals.expect)(mockCreate).toHaveBeenCalledTimes(1);
        (0, _globals.expect)(mockCreate).toHaveBeenCalledWith(_globals.expect.objectContaining({
            data: _globals.expect.objectContaining({
                userId,
                type: 'file_create',
                description: _globals.expect.stringContaining('create')
            })
        }));
    });
    it('失敗した操作とエラーを記録する', async ()=>{
        // logFileOperation関数を再実装
        const logFileOperation = async (userId, operation, fileId, success, errorMsg = '')=>{
            try {
                await mockCreate({
                    data: {
                        userId,
                        type: `file_${operation}`,
                        description: `File ${operation} operation`,
                        metadata: {
                            fileId,
                            success,
                            error: errorMsg || undefined
                        }
                    }
                });
            } catch (error) {
                console.error('File operation logging error:', error);
            }
        };
        const userId = 'test-user';
        const fileId = 'test-file';
        const operation = 'delete';
        const errorMsg = 'File not found';
        await logFileOperation(userId, operation, fileId, false, errorMsg);
        (0, _globals.expect)(mockCreate).toHaveBeenCalledTimes(1);
        (0, _globals.expect)(mockCreate).toHaveBeenCalledWith(_globals.expect.objectContaining({
            data: _globals.expect.objectContaining({
                userId,
                type: 'file_delete',
                description: _globals.expect.stringContaining('delete'),
                metadata: _globals.expect.objectContaining({
                    error: errorMsg,
                    success: false
                })
            })
        }));
    });
    it('ログ記録中にエラーが発生した場合はコンソールにエラーを出力する', async ()=>{
        // logFileOperation関数を再実装
        const logFileOperation = async (userId, operation, fileId, success, errorMsg = '')=>{
            try {
                await mockCreate({
                    data: {
                        userId,
                        type: `file_${operation}`,
                        description: `File ${operation} operation`,
                        metadata: {
                            fileId,
                            success,
                            error: errorMsg || undefined
                        }
                    }
                });
            } catch (error) {
                console.error('File operation logging error:', error);
            }
        };
        // コンソールエラーをモック
        const originalConsoleError = console.error;
        console.error = jest.fn();
        // createがエラーをスローするようにモック
        mockCreate.mockRejectedValueOnce(new Error('Database error'));
        const userId = 'test-user';
        const fileId = 'test-file';
        const operation = 'access';
        // エラーがスローされないことを確認
        await (0, _globals.expect)(logFileOperation(userId, operation, fileId, true)).resolves.not.toThrow();
        // コンソールエラーが呼び出されたことを確認
        (0, _globals.expect)(console.error).toHaveBeenCalledWith('File operation logging error:', _globals.expect.any(Error));
        // 元に戻す
        console.error = originalConsoleError;
    });
});
// ユーティリティ関数のテスト
describe('Utility Functions Tests', ()=>{
    // wait関数を再実装
    const wait = (ms)=>new Promise((resolve)=>setTimeout(resolve, ms));
    // withRetry関数を再実装
    const withRetry = async (fn, options = {})=>{
        const { maxRetries = 3, delay = 100, onError } = options;
        let lastError;
        for(let attempt = 0; attempt < maxRetries; attempt++){
            try {
                return await fn();
            } catch (error) {
                lastError = error;
                if (onError) onError(error, attempt);
                if (attempt < maxRetries - 1) {
                    await wait(delay);
                }
            }
        }
        throw lastError;
    };
    // generateFileId関数を再実装
    const generateFileId = ()=>{
        return `test-${Date.now()}-${Math.random().toString(36).substring(2, 15)}`;
    };
    it('waitが指定された時間待機する', async ()=>{
        const startTime = Date.now();
        await wait(100);
        const endTime = Date.now();
        // 少なくとも100ms経過していることを確認（多少の誤差を許容）
        (0, _globals.expect)(endTime - startTime).toBeGreaterThanOrEqual(90);
    });
    it('withRetryが成功するまで再試行する', async ()=>{
        const operation = jest.fn().mockRejectedValueOnce(new Error('First attempt failed')).mockRejectedValueOnce(new Error('Second attempt failed')).mockResolvedValueOnce('Success');
        const onError = jest.fn();
        const result = await withRetry(operation, {
            maxRetries: 3,
            delay: 10,
            onError
        });
        (0, _globals.expect)(operation).toHaveBeenCalledTimes(3);
        (0, _globals.expect)(onError).toHaveBeenCalledTimes(2);
        (0, _globals.expect)(result).toBe('Success');
    });
    it('withRetryが最大試行回数を超えるとエラーをスローする', async ()=>{
        const error = new Error('Operation failed');
        const operation = jest.fn().mockRejectedValue(error);
        const onError = jest.fn();
        await (0, _globals.expect)(withRetry(operation, {
            maxRetries: 2,
            delay: 10,
            onError
        })).rejects.toThrow('Operation failed');
        (0, _globals.expect)(operation).toHaveBeenCalledTimes(2);
        (0, _globals.expect)(onError).toHaveBeenCalledTimes(2);
    });
    it('generateFileIdがユニークなIDを生成する', ()=>{
        const fileId1 = generateFileId();
        const fileId2 = generateFileId();
        (0, _globals.expect)(typeof fileId1).toBe('string');
        (0, _globals.expect)(fileId1.length).toBeGreaterThan(10);
        (0, _globals.expect)(fileId1).not.toBe(fileId2);
    });
});

//# sourceMappingURL=data:application/json;base64,