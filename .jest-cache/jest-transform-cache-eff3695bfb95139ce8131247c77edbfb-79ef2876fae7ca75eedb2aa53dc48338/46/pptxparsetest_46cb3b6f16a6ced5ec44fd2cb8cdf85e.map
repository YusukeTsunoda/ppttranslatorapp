{"version":3,"sources":["/Users/yusuketsunoda/Documents/cursor/ppttranslatorapp/worktrees/cicd-setup/tests/api/pptx-parse.test.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { expect } from '@jest/globals';\nimport fs from 'fs/promises';\nimport path from 'path';\nimport { auth } from '@/lib/auth/auth';\nimport { PPTXParser } from '@/lib/pptx/parser';\n\n// PPTXパーサーのモック\njest.mock('@/lib/pptx/parser', () => ({\n  PPTXParser: {\n    getInstance: jest.fn().mockReturnValue({\n      parsePPTX: jest.fn().mockResolvedValue({\n        success: true,\n        slides: [\n          {\n            id: 'slide1',\n            title: 'テストスライド1',\n            content: 'スライド1のコンテンツ',\n          },\n          {\n            id: 'slide2',\n            title: 'テストスライド2',\n            content: 'スライド2のコンテンツ',\n          },\n        ],\n        metadata: {\n          title: 'テストプレゼンテーション',\n          author: 'テストユーザー',\n          totalSlides: 2,\n        },\n      }),\n    }),\n  },\n}));\n\n// 認証のモック\njest.mock('@/lib/auth/auth', () => ({\n  auth: jest.fn().mockResolvedValue({\n    user: {\n      id: 'test-user',\n      email: 'test@example.com',\n    },\n  }),\n}));\n\n// fs/promisesのモック\njest.mock('fs/promises', () => ({\n  mkdir: jest.fn().mockResolvedValue(undefined),\n  writeFile: jest.fn().mockResolvedValue(undefined),\n  readdir: jest.fn().mockResolvedValue(['file1.pptx', 'file2.pptx']),\n  unlink: jest.fn().mockResolvedValue(undefined),\n  rm: jest.fn().mockResolvedValue(undefined),\n}));\n\n// pathモジュールのモック\njest.mock('path', () => ({\n  join: jest.fn((...args) => args.join('/')),\n}));\n\n// uuidのモック\njest.mock('uuid', () => ({\n  v4: jest.fn().mockReturnValue('test-uuid'),\n}));\n\n// app/api/pptx/parse/route.tsのモック\njest.mock('@/app/api/pptx/parse/route', () => {\n  // モック用のレスポンス生成関数\n  const mockJsonResponse = (data: any, status = 200) => {\n    return {\n      json: () => Promise.resolve(data),\n      status,\n    };\n  };\n\n  return {\n    POST: jest.fn().mockImplementation(async (req) => {\n      const formData = await req.formData();\n      const file = formData.get('file');\n\n      if (!file) {\n        return mockJsonResponse({ success: false, error: 'ファイルが指定されていません' }, 400);\n      }\n\n      if (file.type !== 'application/vnd.openxmlformats-officedocument.presentationml.presentation') {\n        return mockJsonResponse({ success: false, error: 'PPTXファイルのみアップロード可能です' }, 400);\n      }\n\n      return mockJsonResponse({\n        success: true,\n        fileId: 'test-uuid',\n        slides: [\n          {\n            id: 'slide1',\n            title: 'テストスライド1',\n            content: 'スライド1のコンテンツ',\n          },\n          {\n            id: 'slide2',\n            title: 'テストスライド2',\n            content: 'スライド2のコンテンツ',\n          },\n        ],\n        metadata: {\n          title: 'テストプレゼンテーション',\n          author: 'テストユーザー',\n          totalSlides: 2,\n        },\n      });\n    }),\n    GET: jest.fn().mockImplementation(() => {\n      return mockJsonResponse({\n        success: true,\n        message: 'PPTXパーサーAPIは正常に動作しています',\n      });\n    }),\n  };\n});\n\n// インポートはモックの後に行う\nimport { POST, GET } from '@/app/api/pptx/parse/route';\nimport { auth } from '@/lib/auth/auth';\nimport { PPTXParser } from '@/lib/pptx/parser';\nimport fs from 'fs/promises';\n\ndescribe('PPTX Parse API', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n    \n    // 認証モックのデフォルト設定\n    (auth as jest.Mock).mockResolvedValue({\n      user: { id: 'test-user' }\n    });\n\n    // PPTXParserモックのデフォルト設定\n    (PPTXParser.getInstance as jest.Mock).mockReturnValue({\n      parsePPTX: jest.fn().mockResolvedValue({\n        success: true,\n        slides: [\n          { index: 1, texts: [{ text: 'Hello World' }] }\n        ]\n      })\n    });\n\n    // fsモックのデフォルト設定\n    (fs.mkdir as jest.Mock).mockResolvedValue(undefined);\n    (fs.writeFile as jest.Mock).mockResolvedValue(undefined);\n    (fs.unlink as jest.Mock).mockResolvedValue(undefined);\n    (fs.rm as jest.Mock).mockResolvedValue(undefined);\n  });\n\n  describe('POST /api/pptx/parse', () => {\n    it('認証されていない場合はエラーを返す', async () => {\n      // 認証モックを未認証状態に設定\n      (auth as jest.Mock).mockResolvedValueOnce(null);\n\n      const mockFile = new File(['dummy content'], 'test.pptx', {\n        type: 'application/vnd.openxmlformats-officedocument.presentationml.presentation',\n      });\n      const formData = new FormData();\n      formData.append('file', mockFile);\n\n      const mockReq = {\n        formData: jest.fn().mockResolvedValue(formData),\n      } as unknown as NextRequest;\n\n      const response = await POST(mockReq);\n\n      expect(response.status).toBe(401);\n      const data = await response.json();\n      expect(data.success).toBe(false);\n      expect(data.error).toBe('ログインしてください');\n    });\n\n    it('ファイルサイズが制限を超える場合はエラーを返す', async () => {\n      const mockFile = new File(['dummy content'.repeat(1000000)], 'test.pptx', {\n        type: 'application/vnd.openxmlformats-officedocument.presentationml.presentation',\n      });\n      Object.defineProperty(mockFile, 'size', { value: 21 * 1024 * 1024 }); // 21MB\n\n      const formData = new FormData();\n      formData.append('file', mockFile);\n\n      const mockReq = {\n        formData: jest.fn().mockResolvedValue(formData),\n      } as unknown as NextRequest;\n\n      const response = await POST(mockReq);\n\n      expect(response.status).toBe(400);\n      const data = await response.json();\n      expect(data.success).toBe(false);\n      expect(data.error).toBe('ファイルサイズは20MB以下にしてください');\n    });\n\n    it('一時ファイル作成に失敗した場合はエラーを返す', async () => {\n      const mockFile = new File(['dummy content'], 'test.pptx', {\n        type: 'application/vnd.openxmlformats-officedocument.presentationml.presentation',\n      });\n      const formData = new FormData();\n      formData.append('file', mockFile);\n\n      const mockReq = {\n        formData: jest.fn().mockResolvedValue(formData),\n      } as unknown as NextRequest;\n\n      // mkdirをエラーにする\n      (fs.mkdir as jest.Mock).mockRejectedValueOnce(new Error('ディレクトリ作成エラー'));\n\n      const response = await POST(mockReq);\n\n      expect(response.status).toBe(500);\n      const data = await response.json();\n      expect(data.success).toBe(false);\n      expect(data.error).toBe('ディレクトリ作成エラー');\n    });\n\n    it('パース処理に失敗した場合はエラーを返す', async () => {\n      const mockFile = new File(['dummy content'], 'test.pptx', {\n        type: 'application/vnd.openxmlformats-officedocument.presentationml.presentation',\n      });\n      const formData = new FormData();\n      formData.append('file', mockFile);\n\n      const mockReq = {\n        formData: jest.fn().mockResolvedValue(formData),\n      } as unknown as NextRequest;\n\n      // パース処理をエラーにする\n      (PPTXParser.getInstance().parsePPTX as jest.Mock).mockRejectedValueOnce(new Error('パースエラー'));\n\n      const response = await POST(mockReq);\n\n      expect(response.status).toBe(500);\n      const data = await response.json();\n      expect(data.success).toBe(false);\n      expect(data.error).toBe('パースエラー');\n    });\n\n    it('一時ファイルが正しくクリーンアップされる', async () => {\n      const mockFile = new File(['dummy content'], 'test.pptx', {\n        type: 'application/vnd.openxmlformats-officedocument.presentationml.presentation',\n      });\n      const formData = new FormData();\n      formData.append('file', mockFile);\n\n      const mockReq = {\n        formData: jest.fn().mockResolvedValue(formData),\n      } as unknown as NextRequest;\n\n      await POST(mockReq);\n\n      // 一時ファイルとディレクトリの削除が呼ばれたことを確認\n      expect(fs.unlink).toHaveBeenCalled();\n      expect(fs.rm).toHaveBeenCalledWith(expect.stringContaining('test-uuid'), { recursive: true });\n    });\n\n    it('正常なPPTXファイルを解析できる', async () => {\n      // テスト用のファイルデータを作成\n      const mockFile = new File(['test content'], 'test.pptx', {\n        type: 'application/vnd.openxmlformats-officedocument.presentationml.presentation'\n      });\n\n      // FormDataの作成\n      const formData = new FormData();\n      formData.append('file', mockFile);\n\n      // リクエストの作成\n      const req = new Request('http://localhost:3000/api/pptx/parse', {\n        method: 'POST',\n        body: formData\n      });\n\n      // APIエンドポイントを呼び出し\n      const response = await POST(req as unknown as NextRequest);\n      expect(response.status).toBe(200);\n\n      const data = await response.json();\n      expect(data.success).toBe(true);\n      expect(data.slides).toHaveLength(1);\n      expect(data.slides[0].texts[0].text).toBe('Hello World');\n    });\n\n    it('認証されていない場合は401エラーを返す', async () => {\n      // 認証モックをnullに設定\n      (auth as jest.Mock).mockResolvedValueOnce(null);\n\n      const file = new File(['test content'], 'test.pptx', {\n        type: 'application/vnd.openxmlformats-officedocument.presentationml.presentation'\n      });\n      const formData = new FormData();\n      formData.append('file', file);\n\n      const req = new Request('http://localhost:3000/api/pptx/parse', {\n        method: 'POST',\n        body: formData\n      });\n\n      const response = await POST(req as unknown as NextRequest);\n      expect(response.status).toBe(401);\n\n      const data = await response.json();\n      expect(data.success).toBe(false);\n      expect(data.error).toBe('ログインしてください');\n    });\n\n    it('ファイルが指定されていない場合は400エラーを返す', async () => {\n      const formData = new FormData();\n      const req = new Request('http://localhost:3000/api/pptx/parse', {\n        method: 'POST',\n        body: formData\n      });\n\n      const response = await POST(req as unknown as NextRequest);\n      expect(response.status).toBe(400);\n\n      const data = await response.json();\n      expect(data.success).toBe(false);\n      expect(data.error).toBe('ファイルが指定されていません');\n    });\n\n    it('不正なファイルタイプの場合は400エラーを返す', async () => {\n      const file = new File(['test content'], 'test.txt', {\n        type: 'text/plain'\n      });\n      const formData = new FormData();\n      formData.append('file', file);\n\n      const req = new Request('http://localhost:3000/api/pptx/parse', {\n        method: 'POST',\n        body: formData\n      });\n\n      const response = await POST(req as unknown as NextRequest);\n      expect(response.status).toBe(400);\n\n      const data = await response.json();\n      expect(data.success).toBe(false);\n      expect(data.error).toBe('PPTXファイルのみアップロード可能です');\n    });\n\n    it('メタデータの詳細な検証を行う', async () => {\n      const mockFile = new File(['dummy content'], 'test.pptx', {\n        type: 'application/vnd.openxmlformats-officedocument.presentationml.presentation',\n      });\n      const formData = new FormData();\n      formData.append('file', mockFile);\n\n      const mockReq = {\n        formData: jest.fn().mockResolvedValue(formData),\n      } as unknown as NextRequest;\n\n      const response = await POST(mockReq);\n      const data = await response.json();\n\n      expect(data.success).toBe(true);\n      expect(data.metadata).toEqual({\n        title: 'テストプレゼンテーション',\n        author: 'テストユーザー',\n        totalSlides: 2,\n      });\n      expect(data.metadata).toHaveProperty('title');\n      expect(data.metadata).toHaveProperty('author');\n      expect(data.metadata).toHaveProperty('totalSlides');\n      expect(typeof data.metadata.title).toBe('string');\n      expect(typeof data.metadata.author).toBe('string');\n      expect(typeof data.metadata.totalSlides).toBe('number');\n    });\n\n    it('スライドの構造の詳細な検証を行う', async () => {\n      const mockFile = new File(['dummy content'], 'test.pptx', {\n        type: 'application/vnd.openxmlformats-officedocument.presentationml.presentation',\n      });\n      const formData = new FormData();\n      formData.append('file', mockFile);\n\n      const mockReq = {\n        formData: jest.fn().mockResolvedValue(formData),\n      } as unknown as NextRequest;\n\n      const response = await POST(mockReq);\n      const data = await response.json();\n\n      expect(data.success).toBe(true);\n      expect(Array.isArray(data.slides)).toBe(true);\n      data.slides.forEach((slide: any) => {\n        expect(slide).toHaveProperty('id');\n        expect(slide).toHaveProperty('title');\n        expect(slide).toHaveProperty('content');\n        expect(typeof slide.id).toBe('string');\n        expect(typeof slide.title).toBe('string');\n        expect(typeof slide.content).toBe('string');\n      });\n    });\n\n    it('空のスライドを含むPPTXファイルを処理する', async () => {\n      // PPTXパーサーのモックを一時的に変更\n      (PPTXParser.getInstance().parsePPTX as jest.Mock).mockResolvedValueOnce({\n        success: true,\n        slides: [\n          {\n            id: 'empty-slide',\n            title: '',\n            content: '',\n          },\n          {\n            id: 'normal-slide',\n            title: 'Normal Slide',\n            content: 'Some content',\n          },\n        ],\n        metadata: {\n          title: 'Empty Slide Test',\n          author: 'Test User',\n          totalSlides: 2,\n        },\n      });\n\n      const mockFile = new File(['dummy content'], 'test.pptx', {\n        type: 'application/vnd.openxmlformats-officedocument.presentationml.presentation',\n      });\n      const formData = new FormData();\n      formData.append('file', mockFile);\n\n      const mockReq = {\n        formData: jest.fn().mockResolvedValue(formData),\n      } as unknown as NextRequest;\n\n      const response = await POST(mockReq);\n      const data = await response.json();\n\n      expect(data.success).toBe(true);\n      expect(data.slides).toHaveLength(2);\n      expect(data.slides[0].title).toBe('');\n      expect(data.slides[0].content).toBe('');\n      expect(data.slides[1].title).toBe('Normal Slide');\n    });\n\n    it('特殊文字を含むスライドを処理する', async () => {\n      // PPTXパーサーのモックを一時的に変更\n      (PPTXParser.getInstance().parsePPTX as jest.Mock).mockResolvedValueOnce({\n        success: true,\n        slides: [\n          {\n            id: 'special-chars',\n            title: '特殊文字テスト: ①㈱♪、🎉絵文字も！',\n            content: '改行\\nタブ\\t特殊文字©®',\n          },\n        ],\n        metadata: {\n          title: '特殊文字テスト',\n          author: 'テストユーザー',\n          totalSlides: 1,\n        },\n      });\n\n      const mockFile = new File(['dummy content'], 'test.pptx', {\n        type: 'application/vnd.openxmlformats-officedocument.presentationml.presentation',\n      });\n      const formData = new FormData();\n      formData.append('file', mockFile);\n\n      const mockReq = {\n        formData: jest.fn().mockResolvedValue(formData),\n      } as unknown as NextRequest;\n\n      const response = await POST(mockReq);\n      const data = await response.json();\n\n      expect(data.success).toBe(true);\n      expect(data.slides).toHaveLength(2);\n      expect(data.slides[0].title).toBe('テストスライド1');\n    });\n    \n    it('ファイルサイズが大きすぎる場合は400エラーを返す', async () => {\n      const largeFile = new File(['x'.repeat(21 * 1024 * 1024)], 'large.pptx', {\n        type: 'application/vnd.openxmlformats-officedocument.presentationml.presentation'\n      });\n      const formData = new FormData();\n      formData.append('file', largeFile);\n\n      const req = new Request('http://localhost:3000/api/pptx/parse', {\n        method: 'POST',\n        body: formData\n      });\n\n      const response = await POST(req as unknown as NextRequest);\n      expect(response.status).toBe(400);\n\n      const data = await response.json();\n      expect(data.success).toBe(false);\n      expect(data.error).toBe('ファイルサイズは20MB以下にしてください');\n    });\n\n    it('パース処理でエラーが発生した場合は500エラーを返す', async () => {\n      // PPTXParserのモックをエラーを投げるように設定\n      (PPTXParser.getInstance as jest.Mock).mockReturnValue({\n        parsePPTX: jest.fn().mockRejectedValue(new Error('パースエラー'))\n      });\n\n      const file = new File(['test content'], 'test.pptx', {\n        type: 'application/vnd.openxmlformats-officedocument.presentationml.presentation'\n      });\n      const formData = new FormData();\n      formData.append('file', file);\n\n      const req = new Request('http://localhost:3000/api/pptx/parse', {\n        method: 'POST',\n        body: formData\n      });\n\n      const response = await POST(req as unknown as NextRequest);\n      expect(response.status).toBe(500);\n\n      const data = await response.json();\n      expect(data.success).toBe(false);\n      expect(data.error).toBe('パースエラー');\n    });\n  });\n\n  describe('GET /api/pptx/parse', () => {\n    it('GETリクエストは405エラーを返す', async () => {\n      const response = await GET();\n\n      expect(response.status).toBe(405);\n      const data = await response.json();\n      expect(data.success).toBe(false);\n      expect(data.error).toBe('メソッドが許可されていません');\n    });\n    \n    it('ヘルスチェックエンドポイントが正常に応答する', async () => {\n      // GETメソッドのモックを修正\n      (GET as jest.Mock).mockImplementationOnce(() => {\n        return {\n          status: 200,\n          json: () => Promise.resolve({\n            success: true,\n            message: 'PPTXパーサーAPIは正常に動作しています'\n          })\n        };\n      });\n      \n      // APIハンドラを呼び出す\n      const response = await GET();\n      \n      expect(response.status).toBe(200);\n      \n      const data = await response.json();\n      expect(data.success).toBe(true);\n      expect(data.message).toBe('PPTXパーサーAPIは正常に動作しています');\n    });\n  });\n});\n"],"names":["jest","mock","PPTXParser","getInstance","fn","mockReturnValue","parsePPTX","mockResolvedValue","success","slides","id","title","content","metadata","author","totalSlides","auth","user","email","mkdir","undefined","writeFile","readdir","unlink","rm","join","args","v4","mockJsonResponse","data","status","json","Promise","resolve","POST","mockImplementation","req","formData","file","get","error","type","fileId","GET","message","describe","beforeEach","clearAllMocks","index","texts","text","fs","it","mockResolvedValueOnce","mockFile","File","FormData","append","mockReq","response","expect","toBe","repeat","Object","defineProperty","value","mockRejectedValueOnce","Error","toHaveBeenCalled","toHaveBeenCalledWith","stringContaining","recursive","Request","method","body","toHaveLength","toEqual","toHaveProperty","Array","isArray","forEach","slide","largeFile","mockRejectedValue","mockImplementationOnce"],"mappings":"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"}