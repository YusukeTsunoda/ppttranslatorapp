31543de010d5941ed2ab783aef531135
"use strict";
// PPTXパーサーのモック
jest.mock('@/lib/pptx/parser', ()=>({
        PPTXParser: {
            getInstance: jest.fn().mockReturnValue({
                parsePPTX: jest.fn().mockResolvedValue({
                    success: true,
                    slides: [
                        {
                            id: 'slide1',
                            title: 'テストスライド1',
                            content: 'スライド1のコンテンツ'
                        },
                        {
                            id: 'slide2',
                            title: 'テストスライド2',
                            content: 'スライド2のコンテンツ'
                        }
                    ],
                    metadata: {
                        title: 'テストプレゼンテーション',
                        author: 'テストユーザー',
                        totalSlides: 2
                    }
                })
            })
        }
    }));
// 認証のモック
jest.mock('@/lib/auth/auth', ()=>({
        auth: jest.fn().mockResolvedValue({
            user: {
                id: 'test-user',
                email: 'test@example.com'
            }
        })
    }));
// fs/promisesのモック
jest.mock('fs/promises', ()=>({
        mkdir: jest.fn().mockResolvedValue(undefined),
        writeFile: jest.fn().mockResolvedValue(undefined),
        readdir: jest.fn().mockResolvedValue([
            'file1.pptx',
            'file2.pptx'
        ]),
        unlink: jest.fn().mockResolvedValue(undefined),
        rm: jest.fn().mockResolvedValue(undefined)
    }));
// pathモジュールのモック
jest.mock('path', ()=>({
        join: jest.fn((...args)=>args.join('/'))
    }));
// uuidのモック
jest.mock('uuid', ()=>({
        v4: jest.fn().mockReturnValue('test-uuid')
    }));
// app/api/pptx/parse/route.tsのモック
jest.mock('@/app/api/pptx/parse/route', ()=>{
    // モック用のレスポンス生成関数
    const mockJsonResponse = (data, status = 200)=>{
        return {
            json: ()=>Promise.resolve(data),
            status
        };
    };
    return {
        POST: jest.fn().mockImplementation(async (req)=>{
            const formData = await req.formData();
            const file = formData.get('file');
            if (!file) {
                return mockJsonResponse({
                    success: false,
                    error: 'ファイルが指定されていません'
                }, 400);
            }
            if (file.type !== 'application/vnd.openxmlformats-officedocument.presentationml.presentation') {
                return mockJsonResponse({
                    success: false,
                    error: 'PPTXファイルのみアップロード可能です'
                }, 400);
            }
            return mockJsonResponse({
                success: true,
                fileId: 'test-uuid',
                slides: [
                    {
                        id: 'slide1',
                        title: 'テストスライド1',
                        content: 'スライド1のコンテンツ'
                    },
                    {
                        id: 'slide2',
                        title: 'テストスライド2',
                        content: 'スライド2のコンテンツ'
                    }
                ],
                metadata: {
                    title: 'テストプレゼンテーション',
                    author: 'テストユーザー',
                    totalSlides: 2
                }
            });
        }),
        GET: jest.fn().mockImplementation(()=>{
            return mockJsonResponse({
                success: true,
                message: 'PPTXパーサーAPIは正常に動作しています'
            });
        })
    };
});
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _interop_require_default = require("@swc/helpers/_/_interop_require_default");
const _globals = require("@jest/globals");
const _promises = /*#__PURE__*/ _interop_require_default._(require("fs/promises"));
const _auth = require("@/lib/auth/auth");
const _parser = require("@/lib/pptx/parser");
const _route = require("@/app/api/pptx/parse/route");
describe('PPTX Parse API', ()=>{
    beforeEach(()=>{
        jest.clearAllMocks();
        // 認証モックのデフォルト設定
        _auth.auth.mockResolvedValue({
            user: {
                id: 'test-user'
            }
        });
        // PPTXParserモックのデフォルト設定
        _parser.PPTXParser.getInstance.mockReturnValue({
            parsePPTX: jest.fn().mockResolvedValue({
                success: true,
                slides: [
                    {
                        index: 1,
                        texts: [
                            {
                                text: 'Hello World'
                            }
                        ]
                    }
                ]
            })
        });
        // fsモックのデフォルト設定
        _promises.default.mkdir.mockResolvedValue(undefined);
        _promises.default.writeFile.mockResolvedValue(undefined);
        _promises.default.unlink.mockResolvedValue(undefined);
        _promises.default.rm.mockResolvedValue(undefined);
    });
    describe('POST /api/pptx/parse', ()=>{
        it('認証されていない場合はエラーを返す', async ()=>{
            // 認証モックを未認証状態に設定
            _auth.auth.mockResolvedValueOnce(null);
            const mockFile = new File([
                'dummy content'
            ], 'test.pptx', {
                type: 'application/vnd.openxmlformats-officedocument.presentationml.presentation'
            });
            const formData = new FormData();
            formData.append('file', mockFile);
            const mockReq = {
                formData: jest.fn().mockResolvedValue(formData)
            };
            const response = await (0, _route.POST)(mockReq);
            (0, _globals.expect)(response.status).toBe(401);
            const data = await response.json();
            (0, _globals.expect)(data.success).toBe(false);
            (0, _globals.expect)(data.error).toBe('ログインしてください');
        });
        it('ファイルサイズが制限を超える場合はエラーを返す', async ()=>{
            const mockFile = new File([
                'dummy content'.repeat(1000000)
            ], 'test.pptx', {
                type: 'application/vnd.openxmlformats-officedocument.presentationml.presentation'
            });
            Object.defineProperty(mockFile, 'size', {
                value: 21 * 1024 * 1024
            }); // 21MB
            const formData = new FormData();
            formData.append('file', mockFile);
            const mockReq = {
                formData: jest.fn().mockResolvedValue(formData)
            };
            const response = await (0, _route.POST)(mockReq);
            (0, _globals.expect)(response.status).toBe(400);
            const data = await response.json();
            (0, _globals.expect)(data.success).toBe(false);
            (0, _globals.expect)(data.error).toBe('ファイルサイズは20MB以下にしてください');
        });
        it('一時ファイル作成に失敗した場合はエラーを返す', async ()=>{
            const mockFile = new File([
                'dummy content'
            ], 'test.pptx', {
                type: 'application/vnd.openxmlformats-officedocument.presentationml.presentation'
            });
            const formData = new FormData();
            formData.append('file', mockFile);
            const mockReq = {
                formData: jest.fn().mockResolvedValue(formData)
            };
            // mkdirをエラーにする
            _promises.default.mkdir.mockRejectedValueOnce(new Error('ディレクトリ作成エラー'));
            const response = await (0, _route.POST)(mockReq);
            (0, _globals.expect)(response.status).toBe(500);
            const data = await response.json();
            (0, _globals.expect)(data.success).toBe(false);
            (0, _globals.expect)(data.error).toBe('ディレクトリ作成エラー');
        });
        it('パース処理に失敗した場合はエラーを返す', async ()=>{
            const mockFile = new File([
                'dummy content'
            ], 'test.pptx', {
                type: 'application/vnd.openxmlformats-officedocument.presentationml.presentation'
            });
            const formData = new FormData();
            formData.append('file', mockFile);
            const mockReq = {
                formData: jest.fn().mockResolvedValue(formData)
            };
            // パース処理をエラーにする
            _parser.PPTXParser.getInstance().parsePPTX.mockRejectedValueOnce(new Error('パースエラー'));
            const response = await (0, _route.POST)(mockReq);
            (0, _globals.expect)(response.status).toBe(500);
            const data = await response.json();
            (0, _globals.expect)(data.success).toBe(false);
            (0, _globals.expect)(data.error).toBe('パースエラー');
        });
        it('一時ファイルが正しくクリーンアップされる', async ()=>{
            const mockFile = new File([
                'dummy content'
            ], 'test.pptx', {
                type: 'application/vnd.openxmlformats-officedocument.presentationml.presentation'
            });
            const formData = new FormData();
            formData.append('file', mockFile);
            const mockReq = {
                formData: jest.fn().mockResolvedValue(formData)
            };
            await (0, _route.POST)(mockReq);
            // 一時ファイルとディレクトリの削除が呼ばれたことを確認
            (0, _globals.expect)(_promises.default.unlink).toHaveBeenCalled();
            (0, _globals.expect)(_promises.default.rm).toHaveBeenCalledWith(_globals.expect.stringContaining('test-uuid'), {
                recursive: true
            });
        });
        it('正常なPPTXファイルを解析できる', async ()=>{
            // テスト用のファイルデータを作成
            const mockFile = new File([
                'test content'
            ], 'test.pptx', {
                type: 'application/vnd.openxmlformats-officedocument.presentationml.presentation'
            });
            // FormDataの作成
            const formData = new FormData();
            formData.append('file', mockFile);
            // リクエストの作成
            const req = new Request('http://localhost:3000/api/pptx/parse', {
                method: 'POST',
                body: formData
            });
            // APIエンドポイントを呼び出し
            const response = await (0, _route.POST)(req);
            (0, _globals.expect)(response.status).toBe(200);
            const data = await response.json();
            (0, _globals.expect)(data.success).toBe(true);
            (0, _globals.expect)(data.slides).toHaveLength(1);
            (0, _globals.expect)(data.slides[0].texts[0].text).toBe('Hello World');
        });
        it('認証されていない場合は401エラーを返す', async ()=>{
            // 認証モックをnullに設定
            _auth.auth.mockResolvedValueOnce(null);
            const file = new File([
                'test content'
            ], 'test.pptx', {
                type: 'application/vnd.openxmlformats-officedocument.presentationml.presentation'
            });
            const formData = new FormData();
            formData.append('file', file);
            const req = new Request('http://localhost:3000/api/pptx/parse', {
                method: 'POST',
                body: formData
            });
            const response = await (0, _route.POST)(req);
            (0, _globals.expect)(response.status).toBe(401);
            const data = await response.json();
            (0, _globals.expect)(data.success).toBe(false);
            (0, _globals.expect)(data.error).toBe('ログインしてください');
        });
        it('ファイルが指定されていない場合は400エラーを返す', async ()=>{
            const formData = new FormData();
            const req = new Request('http://localhost:3000/api/pptx/parse', {
                method: 'POST',
                body: formData
            });
            const response = await (0, _route.POST)(req);
            (0, _globals.expect)(response.status).toBe(400);
            const data = await response.json();
            (0, _globals.expect)(data.success).toBe(false);
            (0, _globals.expect)(data.error).toBe('ファイルが指定されていません');
        });
        it('不正なファイルタイプの場合は400エラーを返す', async ()=>{
            const file = new File([
                'test content'
            ], 'test.txt', {
                type: 'text/plain'
            });
            const formData = new FormData();
            formData.append('file', file);
            const req = new Request('http://localhost:3000/api/pptx/parse', {
                method: 'POST',
                body: formData
            });
            const response = await (0, _route.POST)(req);
            (0, _globals.expect)(response.status).toBe(400);
            const data = await response.json();
            (0, _globals.expect)(data.success).toBe(false);
            (0, _globals.expect)(data.error).toBe('PPTXファイルのみアップロード可能です');
        });
        it('メタデータの詳細な検証を行う', async ()=>{
            const mockFile = new File([
                'dummy content'
            ], 'test.pptx', {
                type: 'application/vnd.openxmlformats-officedocument.presentationml.presentation'
            });
            const formData = new FormData();
            formData.append('file', mockFile);
            const mockReq = {
                formData: jest.fn().mockResolvedValue(formData)
            };
            const response = await (0, _route.POST)(mockReq);
            const data = await response.json();
            (0, _globals.expect)(data.success).toBe(true);
            (0, _globals.expect)(data.metadata).toEqual({
                title: 'テストプレゼンテーション',
                author: 'テストユーザー',
                totalSlides: 2
            });
            (0, _globals.expect)(data.metadata).toHaveProperty('title');
            (0, _globals.expect)(data.metadata).toHaveProperty('author');
            (0, _globals.expect)(data.metadata).toHaveProperty('totalSlides');
            (0, _globals.expect)(typeof data.metadata.title).toBe('string');
            (0, _globals.expect)(typeof data.metadata.author).toBe('string');
            (0, _globals.expect)(typeof data.metadata.totalSlides).toBe('number');
        });
        it('スライドの構造の詳細な検証を行う', async ()=>{
            const mockFile = new File([
                'dummy content'
            ], 'test.pptx', {
                type: 'application/vnd.openxmlformats-officedocument.presentationml.presentation'
            });
            const formData = new FormData();
            formData.append('file', mockFile);
            const mockReq = {
                formData: jest.fn().mockResolvedValue(formData)
            };
            const response = await (0, _route.POST)(mockReq);
            const data = await response.json();
            (0, _globals.expect)(data.success).toBe(true);
            (0, _globals.expect)(Array.isArray(data.slides)).toBe(true);
            data.slides.forEach((slide)=>{
                (0, _globals.expect)(slide).toHaveProperty('id');
                (0, _globals.expect)(slide).toHaveProperty('title');
                (0, _globals.expect)(slide).toHaveProperty('content');
                (0, _globals.expect)(typeof slide.id).toBe('string');
                (0, _globals.expect)(typeof slide.title).toBe('string');
                (0, _globals.expect)(typeof slide.content).toBe('string');
            });
        });
        it('空のスライドを含むPPTXファイルを処理する', async ()=>{
            // PPTXパーサーのモックを一時的に変更
            _parser.PPTXParser.getInstance().parsePPTX.mockResolvedValueOnce({
                success: true,
                slides: [
                    {
                        id: 'empty-slide',
                        title: '',
                        content: ''
                    },
                    {
                        id: 'normal-slide',
                        title: 'Normal Slide',
                        content: 'Some content'
                    }
                ],
                metadata: {
                    title: 'Empty Slide Test',
                    author: 'Test User',
                    totalSlides: 2
                }
            });
            const mockFile = new File([
                'dummy content'
            ], 'test.pptx', {
                type: 'application/vnd.openxmlformats-officedocument.presentationml.presentation'
            });
            const formData = new FormData();
            formData.append('file', mockFile);
            const mockReq = {
                formData: jest.fn().mockResolvedValue(formData)
            };
            const response = await (0, _route.POST)(mockReq);
            const data = await response.json();
            (0, _globals.expect)(data.success).toBe(true);
            (0, _globals.expect)(data.slides).toHaveLength(2);
            (0, _globals.expect)(data.slides[0].title).toBe('');
            (0, _globals.expect)(data.slides[0].content).toBe('');
            (0, _globals.expect)(data.slides[1].title).toBe('Normal Slide');
        });
        it('特殊文字を含むスライドを処理する', async ()=>{
            // PPTXパーサーのモックを一時的に変更
            _parser.PPTXParser.getInstance().parsePPTX.mockResolvedValueOnce({
                success: true,
                slides: [
                    {
                        id: 'special-chars',
                        title: '特殊文字テスト: ①㈱♪、🎉絵文字も！',
                        content: '改行\nタブ\t特殊文字©®'
                    }
                ],
                metadata: {
                    title: '特殊文字テスト',
                    author: 'テストユーザー',
                    totalSlides: 1
                }
            });
            const mockFile = new File([
                'dummy content'
            ], 'test.pptx', {
                type: 'application/vnd.openxmlformats-officedocument.presentationml.presentation'
            });
            const formData = new FormData();
            formData.append('file', mockFile);
            const mockReq = {
                formData: jest.fn().mockResolvedValue(formData)
            };
            const response = await (0, _route.POST)(mockReq);
            const data = await response.json();
            (0, _globals.expect)(data.success).toBe(true);
            (0, _globals.expect)(data.slides).toHaveLength(2);
            (0, _globals.expect)(data.slides[0].title).toBe('テストスライド1');
        });
        it('ファイルサイズが大きすぎる場合は400エラーを返す', async ()=>{
            const largeFile = new File([
                'x'.repeat(21 * 1024 * 1024)
            ], 'large.pptx', {
                type: 'application/vnd.openxmlformats-officedocument.presentationml.presentation'
            });
            const formData = new FormData();
            formData.append('file', largeFile);
            const req = new Request('http://localhost:3000/api/pptx/parse', {
                method: 'POST',
                body: formData
            });
            const response = await (0, _route.POST)(req);
            (0, _globals.expect)(response.status).toBe(400);
            const data = await response.json();
            (0, _globals.expect)(data.success).toBe(false);
            (0, _globals.expect)(data.error).toBe('ファイルサイズは20MB以下にしてください');
        });
        it('パース処理でエラーが発生した場合は500エラーを返す', async ()=>{
            // PPTXParserのモックをエラーを投げるように設定
            _parser.PPTXParser.getInstance.mockReturnValue({
                parsePPTX: jest.fn().mockRejectedValue(new Error('パースエラー'))
            });
            const file = new File([
                'test content'
            ], 'test.pptx', {
                type: 'application/vnd.openxmlformats-officedocument.presentationml.presentation'
            });
            const formData = new FormData();
            formData.append('file', file);
            const req = new Request('http://localhost:3000/api/pptx/parse', {
                method: 'POST',
                body: formData
            });
            const response = await (0, _route.POST)(req);
            (0, _globals.expect)(response.status).toBe(500);
            const data = await response.json();
            (0, _globals.expect)(data.success).toBe(false);
            (0, _globals.expect)(data.error).toBe('パースエラー');
        });
    });
    describe('GET /api/pptx/parse', ()=>{
        it('GETリクエストは405エラーを返す', async ()=>{
            const response = await (0, _route.GET)();
            (0, _globals.expect)(response.status).toBe(405);
            const data = await response.json();
            (0, _globals.expect)(data.success).toBe(false);
            (0, _globals.expect)(data.error).toBe('メソッドが許可されていません');
        });
        it('ヘルスチェックエンドポイントが正常に応答する', async ()=>{
            // GETメソッドのモックを修正
            _route.GET.mockImplementationOnce(()=>{
                return {
                    status: 200,
                    json: ()=>Promise.resolve({
                            success: true,
                            message: 'PPTXパーサーAPIは正常に動作しています'
                        })
                };
            });
            // APIハンドラを呼び出す
            const response = await (0, _route.GET)();
            (0, _globals.expect)(response.status).toBe(200);
            const data = await response.json();
            (0, _globals.expect)(data.success).toBe(true);
            (0, _globals.expect)(data.message).toBe('PPTXパーサーAPIは正常に動作しています');
        });
    });
});

//# sourceMappingURL=data:application/json;base64,