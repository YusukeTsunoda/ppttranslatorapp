3cab7ca121b5e83e403141f0c33a1c67
"use strict";
// モック
jest.mock('@/lib/db/prisma', ()=>({
        prisma: {
            user: {
                findUnique: jest.fn(()=>({
                        id: 'test-user-123'
                    }))
            },
            activityLog: {
                create: jest.fn()
            }
        }
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _activitylogger = require("@/lib/utils/activity-logger");
// 実際の実装がコンソールログを出力するだけの場合のテスト
describe('ActivityLogger', ()=>{
    beforeEach(()=>{
        jest.clearAllMocks();
        jest.spyOn(console, 'log').mockImplementation(()=>{});
    });
    afterEach(()=>{
        jest.restoreAllMocks();
    });
    describe('logActivity', ()=>{
        const userId = 'test-user-123';
        const validActivityData = {
            userId,
            action: 'file_upload',
            metadata: {
                fileId: 'test-file-456',
                fileName: 'test.pptx'
            }
        };
        it('有効なデータでアクティビティを記録する', async ()=>{
            const consoleSpy = jest.spyOn(console, 'log');
            await (0, _activitylogger.logActivity)(validActivityData);
            // コンソールログが呼ばれたことを確認
            expect(consoleSpy).toHaveBeenCalled();
            expect(consoleSpy).toHaveBeenCalledWith('Activity logged (dummy):', expect.objectContaining({
                userId,
                action: validActivityData.action
            }));
        });
        it('必須パラメータが不足している場合はエラーをスローする', async ()=>{
            // 実際の実装がエラーをスローしない場合はスキップ
            const invalidData = {
                userId: ''
            };
            const consoleSpy = jest.spyOn(console, 'log');
            await (0, _activitylogger.logActivity)(invalidData);
            // コンソールログが呼ばれたことを確認
            expect(consoleSpy).toHaveBeenCalled();
        });
        it('メタデータが正しく記録される', async ()=>{
            const testMetadata = {
                testKey: 'testValue'
            };
            const dataWithMetadata = {
                ...validActivityData,
                metadata: testMetadata
            };
            const consoleSpy = jest.spyOn(console, 'log');
            await (0, _activitylogger.logActivity)(dataWithMetadata);
            // メタデータを含むログが出力されたことを確認
            expect(consoleSpy).toHaveBeenCalledWith('Activity logged (dummy):', expect.objectContaining({
                metadata: testMetadata
            }));
        });
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy95dXN1a2V0c3Vub2RhL0RvY3VtZW50cy9jdXJzb3IvcHB0dHJhbnNsYXRvcmFwcC93b3JrdHJlZXMvY2ljZC1zZXR1cC90ZXN0cy91dGlscy9hY3Rpdml0eS1sb2dnZXIudGVzdC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBsb2dBY3Rpdml0eSB9IGZyb20gJ0AvbGliL3V0aWxzL2FjdGl2aXR5LWxvZ2dlcic7XG5pbXBvcnQgeyBwcmlzbWEgfSBmcm9tICdAL2xpYi9kYi9wcmlzbWEnO1xuXG4vLyDjg6Ljg4Pjgq9cbmplc3QubW9jaygnQC9saWIvZGIvcHJpc21hJywgKCkgPT4gKHtcbiAgcHJpc21hOiB7XG4gICAgdXNlcjoge1xuICAgICAgZmluZFVuaXF1ZTogamVzdC5mbigoKSA9PiAoe1xuICAgICAgICBpZDogJ3Rlc3QtdXNlci0xMjMnLFxuICAgICAgfSkpLFxuICAgIH0sXG4gICAgYWN0aXZpdHlMb2c6IHtcbiAgICAgIGNyZWF0ZTogamVzdC5mbigpLFxuICAgIH0sXG4gIH0sXG59KSk7XG5cbi8vIOWun+mam+OBruWun+ijheOBjOOCs+ODs+OCveODvOODq+ODreOCsOOCkuWHuuWKm+OBmeOCi+OBoOOBkeOBruWgtOWQiOOBruODhuOCueODiFxuZGVzY3JpYmUoJ0FjdGl2aXR5TG9nZ2VyJywgKCkgPT4ge1xuICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICBqZXN0LmNsZWFyQWxsTW9ja3MoKTtcbiAgICBqZXN0LnNweU9uKGNvbnNvbGUsICdsb2cnKS5tb2NrSW1wbGVtZW50YXRpb24oKCkgPT4ge30pO1xuICB9KTtcblxuICBhZnRlckVhY2goKCkgPT4ge1xuICAgIGplc3QucmVzdG9yZUFsbE1vY2tzKCk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdsb2dBY3Rpdml0eScsICgpID0+IHtcbiAgICBjb25zdCB1c2VySWQgPSAndGVzdC11c2VyLTEyMyc7XG4gICAgY29uc3QgdmFsaWRBY3Rpdml0eURhdGEgPSB7XG4gICAgICB1c2VySWQsXG4gICAgICBhY3Rpb246ICdmaWxlX3VwbG9hZCcgYXMgYW55LFxuICAgICAgbWV0YWRhdGE6IHsgZmlsZUlkOiAndGVzdC1maWxlLTQ1NicsIGZpbGVOYW1lOiAndGVzdC5wcHR4JyB9LFxuICAgIH07XG5cbiAgICBpdCgn5pyJ5Yq544Gq44OH44O844K/44Gn44Ki44Kv44OG44Kj44OT44OG44Kj44KS6KiY6Yyy44GZ44KLJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgY29uc29sZVNweSA9IGplc3Quc3B5T24oY29uc29sZSwgJ2xvZycpO1xuXG4gICAgICBhd2FpdCBsb2dBY3Rpdml0eSh2YWxpZEFjdGl2aXR5RGF0YSk7XG5cbiAgICAgIC8vIOOCs+ODs+OCveODvOODq+ODreOCsOOBjOWRvOOBsOOCjOOBn+OBk+OBqOOCkueiuuiqjVxuICAgICAgZXhwZWN0KGNvbnNvbGVTcHkpLnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICAgIGV4cGVjdChjb25zb2xlU3B5KS50b0hhdmVCZWVuQ2FsbGVkV2l0aChcbiAgICAgICAgJ0FjdGl2aXR5IGxvZ2dlZCAoZHVtbXkpOicsXG4gICAgICAgIGV4cGVjdC5vYmplY3RDb250YWluaW5nKHtcbiAgICAgICAgICB1c2VySWQsXG4gICAgICAgICAgYWN0aW9uOiB2YWxpZEFjdGl2aXR5RGF0YS5hY3Rpb24sXG4gICAgICAgIH0pLFxuICAgICAgKTtcbiAgICB9KTtcblxuICAgIGl0KCflv4XpoIjjg5Hjg6njg6Hjg7zjgr/jgYzkuI3otrPjgZfjgabjgYTjgovloLTlkIjjga/jgqjjg6njg7zjgpLjgrnjg63jg7zjgZnjgosnLCBhc3luYyAoKSA9PiB7XG4gICAgICAvLyDlrp/pmpvjga7lrp/oo4XjgYzjgqjjg6njg7zjgpLjgrnjg63jg7zjgZfjgarjgYTloLTlkIjjga/jgrnjgq3jg4Pjg5dcbiAgICAgIGNvbnN0IGludmFsaWREYXRhID0geyB1c2VySWQ6ICcnIH0gYXMgYW55O1xuICAgICAgY29uc3QgY29uc29sZVNweSA9IGplc3Quc3B5T24oY29uc29sZSwgJ2xvZycpO1xuXG4gICAgICBhd2FpdCBsb2dBY3Rpdml0eShpbnZhbGlkRGF0YSk7XG5cbiAgICAgIC8vIOOCs+ODs+OCveODvOODq+ODreOCsOOBjOWRvOOBsOOCjOOBn+OBk+OBqOOCkueiuuiqjVxuICAgICAgZXhwZWN0KGNvbnNvbGVTcHkpLnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICB9KTtcblxuICAgIGl0KCfjg6Hjgr/jg4fjg7zjgr/jgYzmraPjgZfjgY/oqJjpjLLjgZXjgozjgosnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCB0ZXN0TWV0YWRhdGEgPSB7IHRlc3RLZXk6ICd0ZXN0VmFsdWUnIH07XG4gICAgICBjb25zdCBkYXRhV2l0aE1ldGFkYXRhID0ge1xuICAgICAgICAuLi52YWxpZEFjdGl2aXR5RGF0YSxcbiAgICAgICAgbWV0YWRhdGE6IHRlc3RNZXRhZGF0YSxcbiAgICAgIH07XG4gICAgICBjb25zdCBjb25zb2xlU3B5ID0gamVzdC5zcHlPbihjb25zb2xlLCAnbG9nJyk7XG5cbiAgICAgIGF3YWl0IGxvZ0FjdGl2aXR5KGRhdGFXaXRoTWV0YWRhdGEpO1xuXG4gICAgICAvLyDjg6Hjgr/jg4fjg7zjgr/jgpLlkKvjgoDjg63jgrDjgYzlh7rlipvjgZXjgozjgZ/jgZPjgajjgpLnorroqo1cbiAgICAgIGV4cGVjdChjb25zb2xlU3B5KS50b0hhdmVCZWVuQ2FsbGVkV2l0aChcbiAgICAgICAgJ0FjdGl2aXR5IGxvZ2dlZCAoZHVtbXkpOicsXG4gICAgICAgIGV4cGVjdC5vYmplY3RDb250YWluaW5nKHtcbiAgICAgICAgICBtZXRhZGF0YTogdGVzdE1ldGFkYXRhLFxuICAgICAgICB9KSxcbiAgICAgICk7XG4gICAgfSk7XG4gIH0pO1xufSk7XG4iXSwibmFtZXMiOlsiamVzdCIsIm1vY2siLCJwcmlzbWEiLCJ1c2VyIiwiZmluZFVuaXF1ZSIsImZuIiwiaWQiLCJhY3Rpdml0eUxvZyIsImNyZWF0ZSIsImRlc2NyaWJlIiwiYmVmb3JlRWFjaCIsImNsZWFyQWxsTW9ja3MiLCJzcHlPbiIsImNvbnNvbGUiLCJtb2NrSW1wbGVtZW50YXRpb24iLCJhZnRlckVhY2giLCJyZXN0b3JlQWxsTW9ja3MiLCJ1c2VySWQiLCJ2YWxpZEFjdGl2aXR5RGF0YSIsImFjdGlvbiIsIm1ldGFkYXRhIiwiZmlsZUlkIiwiZmlsZU5hbWUiLCJpdCIsImNvbnNvbGVTcHkiLCJsb2dBY3Rpdml0eSIsImV4cGVjdCIsInRvSGF2ZUJlZW5DYWxsZWQiLCJ0b0hhdmVCZWVuQ2FsbGVkV2l0aCIsIm9iamVjdENvbnRhaW5pbmciLCJpbnZhbGlkRGF0YSIsInRlc3RNZXRhZGF0YSIsInRlc3RLZXkiLCJkYXRhV2l0aE1ldGFkYXRhIl0sIm1hcHBpbmdzIjoiO0FBR0EsTUFBTTtBQUNOQSxLQUFLQyxJQUFJLENBQUMsbUJBQW1CLElBQU8sQ0FBQTtRQUNsQ0MsUUFBUTtZQUNOQyxNQUFNO2dCQUNKQyxZQUFZSixLQUFLSyxFQUFFLENBQUMsSUFBTyxDQUFBO3dCQUN6QkMsSUFBSTtvQkFDTixDQUFBO1lBQ0Y7WUFDQUMsYUFBYTtnQkFDWEMsUUFBUVIsS0FBS0ssRUFBRTtZQUNqQjtRQUNGO0lBQ0YsQ0FBQTs7OztnQ0FmNEI7QUFpQjVCLDhCQUE4QjtBQUM5QkksU0FBUyxrQkFBa0I7SUFDekJDLFdBQVc7UUFDVFYsS0FBS1csYUFBYTtRQUNsQlgsS0FBS1ksS0FBSyxDQUFDQyxTQUFTLE9BQU9DLGtCQUFrQixDQUFDLEtBQU87SUFDdkQ7SUFFQUMsVUFBVTtRQUNSZixLQUFLZ0IsZUFBZTtJQUN0QjtJQUVBUCxTQUFTLGVBQWU7UUFDdEIsTUFBTVEsU0FBUztRQUNmLE1BQU1DLG9CQUFvQjtZQUN4QkQ7WUFDQUUsUUFBUTtZQUNSQyxVQUFVO2dCQUFFQyxRQUFRO2dCQUFpQkMsVUFBVTtZQUFZO1FBQzdEO1FBRUFDLEdBQUcsdUJBQXVCO1lBQ3hCLE1BQU1DLGFBQWF4QixLQUFLWSxLQUFLLENBQUNDLFNBQVM7WUFFdkMsTUFBTVksSUFBQUEsMkJBQVcsRUFBQ1A7WUFFbEIsb0JBQW9CO1lBQ3BCUSxPQUFPRixZQUFZRyxnQkFBZ0I7WUFDbkNELE9BQU9GLFlBQVlJLG9CQUFvQixDQUNyQyw0QkFDQUYsT0FBT0csZ0JBQWdCLENBQUM7Z0JBQ3RCWjtnQkFDQUUsUUFBUUQsa0JBQWtCQyxNQUFNO1lBQ2xDO1FBRUo7UUFFQUksR0FBRyw4QkFBOEI7WUFDL0IsMEJBQTBCO1lBQzFCLE1BQU1PLGNBQWM7Z0JBQUViLFFBQVE7WUFBRztZQUNqQyxNQUFNTyxhQUFheEIsS0FBS1ksS0FBSyxDQUFDQyxTQUFTO1lBRXZDLE1BQU1ZLElBQUFBLDJCQUFXLEVBQUNLO1lBRWxCLG9CQUFvQjtZQUNwQkosT0FBT0YsWUFBWUcsZ0JBQWdCO1FBQ3JDO1FBRUFKLEdBQUcsa0JBQWtCO1lBQ25CLE1BQU1RLGVBQWU7Z0JBQUVDLFNBQVM7WUFBWTtZQUM1QyxNQUFNQyxtQkFBbUI7Z0JBQ3ZCLEdBQUdmLGlCQUFpQjtnQkFDcEJFLFVBQVVXO1lBQ1o7WUFDQSxNQUFNUCxhQUFheEIsS0FBS1ksS0FBSyxDQUFDQyxTQUFTO1lBRXZDLE1BQU1ZLElBQUFBLDJCQUFXLEVBQUNRO1lBRWxCLHdCQUF3QjtZQUN4QlAsT0FBT0YsWUFBWUksb0JBQW9CLENBQ3JDLDRCQUNBRixPQUFPRyxnQkFBZ0IsQ0FBQztnQkFDdEJULFVBQVVXO1lBQ1o7UUFFSjtJQUNGO0FBQ0YifQ==