{"version":3,"sources":["/Users/yusuketsunoda/Documents/cursor/ppttranslatorapp/worktrees/cicd-setup/tests/lib/translation/error-handler.test.ts"],"sourcesContent":["import { describe, expect, it, jest } from '@jest/globals';\nimport { handleTranslationError, withRetry, logTranslationError, TranslationError } from '@/lib/translation/error-handler';\n\ndescribe('Translation Error Handler', () => {\n  describe('handleTranslationError', () => {\n    it('レート制限エラーを適切に処理する', () => {\n      const error: TranslationError = {\n        name: 'RateLimitError',\n        message: 'Rate limit exceeded',\n        retryAfter: 30,\n      } as TranslationError;\n\n      const response = handleTranslationError(error);\n      expect(response.status).toBe(429);\n      expect(response.headers.get('Retry-After')).toBe('30');\n      expect(response.headers.get('Content-Type')).toBe('application/json');\n      expect(response.headers.get('Cache-Control')).toBe('no-store');\n    });\n\n    it('タイムアウトエラーを適切に処理する', () => {\n      const error: TranslationError = {\n        name: 'TimeoutError',\n        message: 'Request timeout',\n      } as TranslationError;\n\n      const response = handleTranslationError(error);\n      expect(response.status).toBe(504);\n      expect(response.headers.get('Content-Type')).toBe('application/json');\n    });\n\n    it('ネットワークエラーを適切に処理する', () => {\n      const error: TranslationError = {\n        name: 'NetworkError',\n        message: 'Network error',\n      } as TranslationError;\n\n      const response = handleTranslationError(error);\n      expect(response.status).toBe(503);\n      expect(response.headers.get('Content-Type')).toBe('application/json');\n    });\n\n    it('バリデーションエラーを適切に処理する', () => {\n      const error: TranslationError = {\n        name: 'ValidationError',\n        message: 'Invalid request',\n      } as TranslationError;\n\n      const response = handleTranslationError(error);\n      expect(response.status).toBe(400);\n      expect(response.headers.get('Content-Type')).toBe('application/json');\n    });\n\n    it('不明なエラーを適切に処理する', () => {\n      const error: TranslationError = {\n        name: 'UnknownError',\n        message: 'Unknown error',\n      } as TranslationError;\n\n      const response = handleTranslationError(error);\n      expect(response.status).toBe(500);\n      expect(response.headers.get('Content-Type')).toBe('application/json');\n    });\n  });\n\n  describe('withRetry', () => {\n    it('最初の試行で成功した場合', async () => {\n      const operation = jest.fn().mockResolvedValue('success');\n      const result = await withRetry(operation);\n      expect(result).toBe('success');\n      expect(operation).toHaveBeenCalledTimes(1);\n    });\n\n    it('リトライ後に成功する場合', async () => {\n      const operation = jest.fn()\n        .mockRejectedValueOnce(new Error('Temporary error'))\n        .mockResolvedValue('success');\n\n      const result = await withRetry(operation);\n      expect(result).toBe('success');\n      expect(operation).toHaveBeenCalledTimes(2);\n    });\n\n    it('最大リトライ回数を超えた場合', async () => {\n      const operation = jest.fn().mockRejectedValue(new Error('Persistent error'));\n\n      await expect(withRetry(operation, 3)).rejects.toThrow('最大リトライ回数を超えました');\n      expect(operation).toHaveBeenCalledTimes(3);\n    });\n\n    it('リトライ不可能なエラーの場合は即座に失敗する', async () => {\n      const error = new Error('Authentication failed');\n      error.name = 'AuthenticationError';\n      const operation = jest.fn().mockRejectedValue(error);\n\n      await expect(withRetry(operation)).rejects.toThrow('Authentication failed');\n      expect(operation).toHaveBeenCalledTimes(1);\n    });\n  });\n\n  describe('logTranslationError', () => {\n    it('エラーログを適切にフォーマットする', () => {\n      // コンソール出力をモック\n      const consoleSpy = jest.spyOn(console, 'error').mockImplementation();\n\n      const error = new Error('Test error');\n      const context = { userId: 'test-user', operation: 'translate' };\n\n      logTranslationError(error, context);\n\n      expect(consoleSpy).toHaveBeenCalled();\n      const loggedData = JSON.parse(consoleSpy.mock.calls[0][1]);\n      \n      expect(loggedData).toHaveProperty('timestamp');\n      expect(loggedData).toHaveProperty('name', 'Error');\n      expect(loggedData).toHaveProperty('message', 'Test error');\n      expect(loggedData).toHaveProperty('stack');\n      expect(loggedData).toHaveProperty('context.userId', 'test-user');\n      expect(loggedData).toHaveProperty('context.operation', 'translate');\n\n      // モックをリストア\n      consoleSpy.mockRestore();\n    });\n\n    it('コンテキストなしでもエラーログを記録する', () => {\n      const consoleSpy = jest.spyOn(console, 'error').mockImplementation();\n\n      const error = new Error('Test error');\n      logTranslationError(error);\n\n      expect(consoleSpy).toHaveBeenCalled();\n      const loggedData = JSON.parse(consoleSpy.mock.calls[0][1]);\n      \n      expect(loggedData).toHaveProperty('timestamp');\n      expect(loggedData).toHaveProperty('name', 'Error');\n      expect(loggedData).toHaveProperty('message', 'Test error');\n      expect(loggedData).toHaveProperty('context');\n      expect(Object.keys(loggedData.context)).toHaveLength(0);\n\n      consoleSpy.mockRestore();\n    });\n  });\n}); "],"names":["describe","it","error","name","message","retryAfter","response","handleTranslationError","expect","status","toBe","headers","get","operation","jest","fn","mockResolvedValue","result","withRetry","toHaveBeenCalledTimes","mockRejectedValueOnce","Error","mockRejectedValue","rejects","toThrow","consoleSpy","spyOn","console","mockImplementation","context","userId","logTranslationError","toHaveBeenCalled","loggedData","JSON","parse","mock","calls","toHaveProperty","mockRestore","Object","keys","toHaveLength"],"mappings":"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"}