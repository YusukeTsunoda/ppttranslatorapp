{"version":3,"sources":["/Users/yusuketsunoda/Documents/cursor/ppttranslatorapp/worktrees/cicd-setup/tests/api/auth/reset-password/confirm/route.test.ts"],"sourcesContent":["import { POST } from '@/app/api/auth/reset-password/confirm/route';\nimport { hashPassword } from '@/lib/auth/password';\nimport { createPrismaMock, createMockUser, clearAllMocks } from '@/tests/helpers/mockSetup';\n\n// Jestのexpect関数をモック化しないようにする\nconst actualExpect = global.expect;\n\n// next/serverのモック化\njest.mock('next/server', () => ({\n  NextResponse: {\n    json: jest.fn().mockImplementation((data, options = {}) => ({\n      json: () => Promise.resolve(data),\n      status: options.status || 200,\n      headers: new Map(),\n    })),\n  },\n}));\n\n// hashPasswordのモック\njest.mock('@/lib/auth/password', () => ({\n  hashPassword: jest.fn(),\n}));\n\n// UserRoleの型をインポート\nimport { UserRole } from '@prisma/client';\n\n// console.logのモック\n// consoleのモック化\nconst mockConsoleLog = jest.spyOn(console, 'log').mockImplementation();\nconst mockConsoleError = jest.spyOn(console, 'error').mockImplementation();\n\nconst prismaMock = createPrismaMock();\nconst hashPasswordMock = hashPassword as jest.Mock;\n\ndescribe('POST /api/auth/reset-password/confirm', () => {\n  beforeEach(() => {\n    clearAllMocks();\n    hashPasswordMock.mockResolvedValue('new_hashed_password');\n  });\n\n  afterEach(() => {\n    mockConsoleLog.mockClear();\n    mockConsoleError.mockClear();\n  });\n\n  it('should reset password successfully for dummy user', async () => {\n    const requestBody = {\n      token: 'any-token', // Currently ignored by the API\n      password: 'newValidPassword123',\n    };\n    const req = new Request('http://localhost/api/auth/reset-password/confirm', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: { 'Content-Type': 'application/json' },\n    });\n\n    const mockUser = createMockUser({\n      id: 'dummy-user-id',\n      email: 'dummy@example.com',\n      name: 'Dummy User',\n      password: 'old_hashed_password',\n      role: UserRole.USER,\n    });\n    prismaMock.user.findFirst.mockResolvedValue(mockUser);\n    prismaMock.user.update.mockResolvedValue(mockUser);\n\n    const response = await POST(req as Request);\n    const responseBody = await response.json();\n\n    actualExpect(response.status).toBe(200);\n    actualExpect(responseBody.success).toBe(true);\n    actualExpect(prismaMock.user.findFirst).toHaveBeenCalledWith({\n      where: { email: 'dummy@example.com' },\n    });\n    actualExpect(hashPasswordMock).toHaveBeenCalledWith(requestBody.password);\n    actualExpect(prismaMock.user.update).toHaveBeenCalledWith({\n      where: { id: mockUser.id },\n      data: {\n        password: 'new_hashed_password',\n        updatedAt: actualExpect.any(Date),\n      },\n    });\n  });\n\n  it('should return 400 if token is invalid (dummy user not found)', async () => {\n    const requestBody = {\n      token: 'invalid-token',\n      password: 'newValidPassword123',\n    };\n    const req = new Request('http://localhost/api/auth/reset-password/confirm', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: { 'Content-Type': 'application/json' },\n    });\n\n    prismaMock.user.findFirst.mockResolvedValue(null);\n\n    const response = await POST(req as Request);\n    const responseBody = await response.json();\n\n    actualExpect(response.status).toBe(400);\n    actualExpect(responseBody.error).toBe('トークンが無効か有効期限が切れています');\n    actualExpect(hashPasswordMock).not.toHaveBeenCalled();\n    actualExpect(prismaMock.user.update).not.toHaveBeenCalled();\n  });\n\n  it('should return error for invalid input (e.g., short password)', async () => {\n    const requestBody = {\n      token: 'any-token',\n      password: 'short',\n    };\n    const req = new Request('http://localhost/api/auth/reset-password/confirm', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: { 'Content-Type': 'application/json' },\n    });\n\n    const response = await POST(req as Request);\n    const responseBody = await response.json();\n\n    actualExpect(response.status).toBe(500);\n    actualExpect(responseBody.error).toBe('パスワードのリセットに失敗しました');\n  });\n\n  it('should return 500 if hashPassword fails', async () => {\n    const requestBody = {\n      token: 'any-token',\n      password: 'newValidPassword123',\n    };\n    const req = new Request('http://localhost/api/auth/reset-password/confirm', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: { 'Content-Type': 'application/json' },\n    });\n\n    const mockUser = createMockUser({ id: 'dummy-user-id', role: UserRole.USER });\n    prismaMock.user.findFirst.mockResolvedValue(mockUser);\n    hashPasswordMock.mockRejectedValue(new Error('Hashing failed'));\n\n    const response = await POST(req as Request);\n    const responseBody = await response.json();\n\n    actualExpect(response.status).toBe(500);\n    actualExpect(responseBody.error).toBe('パスワードのリセットに失敗しました');\n    actualExpect(prismaMock.user.update).not.toHaveBeenCalled();\n  });\n\n  it('should return 500 if prisma.user.update fails', async () => {\n    const requestBody = {\n      token: 'any-token',\n      password: 'newValidPassword123',\n    };\n    const req = new Request('http://localhost/api/auth/reset-password/confirm', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: { 'Content-Type': 'application/json' },\n    });\n\n    const mockUser = createMockUser({ id: 'dummy-user-id', role: UserRole.USER });\n    prismaMock.user.findFirst.mockResolvedValue(mockUser);\n    hashPasswordMock.mockResolvedValue('new_hashed_password');\n    prismaMock.user.update.mockRejectedValue(new Error('DB update failed'));\n\n    const response = await POST(req as Request);\n    const responseBody = await response.json();\n\n    actualExpect(response.status).toBe(500);\n    actualExpect(responseBody.error).toBe('パスワードのリセットに失敗しました');\n  });\n\n  it('should validate request body structure', async () => {\n    const invalidRequests = [\n      { password: 'validPassword123' }, // missing token\n      { token: 'valid-token' }, // missing password\n      {}, // empty body\n    ];\n\n    for (const body of invalidRequests) {\n      const req = new Request('http://localhost/api/auth/reset-password/confirm', {\n        method: 'POST',\n        body: JSON.stringify(body),\n        headers: { 'Content-Type': 'application/json' },\n      });\n\n      const response = await POST(req as Request);\n      const responseBody = await response.json();\n\n      actualExpect(response.status).toBe(500);\n      actualExpect(responseBody.error).toBe('パスワードのリセットに失敗しました');\n      actualExpect(mockConsoleError).toHaveBeenCalled();\n    }\n  });\n\n  it('should validate password requirements', async () => {\n    const invalidPasswords = [\n      'short', // too short\n      '12345678', // only numbers\n      'abcdefgh', // only lowercase\n      'ABCDEFGH', // only uppercase\n    ];\n\n    for (const password of invalidPasswords) {\n      const req = new Request('http://localhost/api/auth/reset-password/confirm', {\n        method: 'POST',\n        body: JSON.stringify({ token: 'valid-token', password }),\n        headers: { 'Content-Type': 'application/json' },\n      });\n\n      const response = await POST(req as Request);\n      const responseBody = await response.json();\n\n      actualExpect(response.status).toBe(500);\n      actualExpect(responseBody.error).toBe('パスワードのリセットに失敗しました');\n    }\n  });\n\n  it('should log password reset activity', async () => {\n    const requestBody = {\n      token: 'valid-token',\n      password: 'newValidPassword123',\n    };\n    const req = new Request('http://localhost/api/auth/reset-password/confirm', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: { 'Content-Type': 'application/json' },\n    });\n\n    const mockUser = createMockUser({\n      id: 'test-user-id',\n      email: 'dummy@example.com',\n      role: UserRole.USER,\n    });\n\n    prismaMock.user.findFirst.mockResolvedValue(mockUser);\n    prismaMock.user.update.mockResolvedValue(mockUser);\n\n    await POST(req as Request);\n\n    actualExpect(mockConsoleLog).toHaveBeenCalledWith('Password reset:', actualExpect.objectContaining({\n      userId: mockUser.id,\n      action: 'update_password',\n      timestamp: actualExpect.any(String),\n    }));\n  });\n\n  it('should handle database unique constraint violations', async () => {\n    const requestBody = {\n      token: 'valid-token',\n      password: 'newValidPassword123',\n    };\n    const req = new Request('http://localhost/api/auth/reset-password/confirm', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: { 'Content-Type': 'application/json' },\n    });\n\n    const mockUser = createMockUser({ id: 'test-user-id', role: UserRole.USER });\n    prismaMock.user.findFirst.mockResolvedValue(mockUser);\n    prismaMock.user.update.mockRejectedValue(new Error('P2002')); // Prisma unique constraint error\n\n    const response = await POST(req as Request);\n    const responseBody = await response.json();\n\n    actualExpect(response.status).toBe(500);\n    actualExpect(responseBody.error).toBe('パスワードのリセットに失敗しました');\n    actualExpect(mockConsoleError).toHaveBeenCalled();\n  });\n}); "],"names":["jest","mock","NextResponse","json","fn","mockImplementation","data","options","Promise","resolve","status","headers","Map","hashPassword","actualExpect","global","expect","mockConsoleLog","spyOn","console","mockConsoleError","prismaMock","createPrismaMock","hashPasswordMock","describe","beforeEach","clearAllMocks","mockResolvedValue","afterEach","mockClear","it","requestBody","token","password","req","Request","method","body","JSON","stringify","mockUser","createMockUser","id","email","name","role","UserRole","USER","user","findFirst","update","response","POST","responseBody","toBe","success","toHaveBeenCalledWith","where","updatedAt","any","Date","error","not","toHaveBeenCalled","mockRejectedValue","Error","invalidRequests","invalidPasswords","objectContaining","userId","action","timestamp","String"],"mappings":"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"}