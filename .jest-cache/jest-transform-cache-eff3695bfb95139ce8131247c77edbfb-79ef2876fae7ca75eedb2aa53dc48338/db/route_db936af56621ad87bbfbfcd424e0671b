be0f169fc6f441227e12cd3f9d6a30b3
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    GET: function() {
        return GET;
    },
    dynamic: function() {
        return dynamic;
    }
});
const _server = require("next/server");
const _nextauth = require("next-auth");
const _authoptions = require("@/lib/auth/auth-options");
const _prisma = require("@/lib/db/prisma");
const _client = require("@prisma/client");
const dynamic = 'force-dynamic';
// ソート可能なフィールドのリスト
const allowedSortFields = [
    'createdAt',
    'updatedAt',
    'pageCount',
    'status',
    'creditsUsed',
    'sourceLang',
    'targetLang',
    'model',
    'fileSize',
    'processingTime',
    'originalFileName'
];
async function GET(req) {
    try {
        const session = await (0, _nextauth.getServerSession)(_authoptions.authOptions);
        if (!session || !session.user) {
            return _server.NextResponse.json({
                error: '認証が必要です'
            }, {
                status: 401
            });
        }
        const userId = session.user.id;
        const url = new URL(req.url);
        const searchParams = url.searchParams;
        const pageParam = searchParams.get('page');
        const limitParam = searchParams.get('limit');
        const sortParam = searchParams.get('sort') || 'createdAt';
        const orderParam = searchParams.get('order') || 'desc';
        const search = searchParams.get('search') || '';
        const startDate = searchParams.get('startDate');
        const endDate = searchParams.get('endDate');
        const statusParam = searchParams.get('status');
        const sourceLangParam = searchParams.get('sourceLang');
        const targetLangParam = searchParams.get('targetLang');
        const page = pageParam ? parseInt(pageParam) : 1;
        const limit = limitParam ? parseInt(limitParam) : 10;
        if (isNaN(page) || page < 1) {
            return _server.NextResponse.json({
                error: '無効なページ番号です'
            }, {
                status: 400
            });
        }
        if (isNaN(limit) || limit < 1 || limit > 100) {
            return _server.NextResponse.json({
                error: '無効な制限数です'
            }, {
                status: 400
            });
        }
        if (orderParam !== 'asc' && orderParam !== 'desc') {
            return _server.NextResponse.json({
                error: '無効なソート順序です'
            }, {
                status: 400
            });
        }
        // Allow sorting by originalFileName via relation
        const effectiveSortParam = sortParam === 'originalFileName' ? 'file' : sortParam;
        if (!allowedSortFields.includes(sortParam)) {
            return _server.NextResponse.json({
                error: `無効なソートキーです: ${sortParam}`
            }, {
                status: 400
            });
        }
        const sourceLang = sourceLangParam && Object.values(_client.Language).includes(sourceLangParam) ? sourceLangParam : null;
        const targetLang = targetLangParam && Object.values(_client.Language).includes(targetLangParam) ? targetLangParam : null;
        // Validate status param against Enum
        const status = statusParam && Object.values(_client.TranslationStatus).includes(statusParam) ? statusParam : null;
        const skip = (page - 1) * limit;
        const whereCondition = {
            userId: userId
        };
        if (search) {
            // Search by originalName in the related File model
            whereCondition.file = {
                originalName: {
                    contains: search,
                    mode: 'insensitive'
                }
            };
        }
        const dateFilter = {};
        if (startDate) {
            try {
                dateFilter.gte = new Date(startDate);
            } catch (e) {}
        }
        if (endDate) {
            try {
                dateFilter.lte = new Date(endDate);
            } catch (e) {}
        }
        if (dateFilter.gte || dateFilter.lte) {
            whereCondition.createdAt = dateFilter;
        }
        if (status) {
            whereCondition.status = status; // Use validated enum value
        }
        if (sourceLang) {
            whereCondition.sourceLang = sourceLang;
        }
        if (targetLang) {
            whereCondition.targetLang = targetLang;
        }
        // Handle sorting by related field
        let orderByCondition;
        if (sortParam === 'originalFileName') {
            orderByCondition = {
                file: {
                    originalName: orderParam
                }
            };
        } else {
            orderByCondition = {
                [sortParam]: orderParam
            };
        }
        const [totalCount, history] = await _prisma.prisma.$transaction([
            _prisma.prisma.translationHistory.count({
                where: whereCondition
            }),
            _prisma.prisma.translationHistory.findMany({
                where: whereCondition,
                orderBy: orderByCondition,
                skip,
                take: limit,
                include: {
                    file: {
                        select: {
                            originalName: true
                        }
                    }
                }
            })
        ]);
        // Add originalFileNameと新フィールドをhistory objectsに追加
        const historyWithFileName = history.map((item)=>({
                ...item,
                originalFileName: item.file.originalName,
                tags: item.tags,
                metadata: item.metadata,
                thumbnailPath: item.thumbnailPath,
                processingTime: item.processingTime,
                fileSize: item.fileSize
            }));
        return _server.NextResponse.json({
            data: historyWithFileName,
            total: totalCount,
            page,
            limit
        });
    } catch (error) {
        console.error('履歴取得APIエラー:', error);
        let errorMessage = '履歴の取得中にエラーが発生しました';
        if (error instanceof Error) {
            errorMessage = `詳細: ${error.message}`;
        }
        return _server.NextResponse.json({
            error: errorMessage
        }, {
            status: 500
        });
    }
}

//# sourceMappingURL=data:application/json;base64,