{"version":3,"sources":["/Users/yusuketsunoda/Documents/cursor/ppttranslatorapp/worktrees/cicd-setup/tests/api/batch-upload.test.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { expect } from '@jest/globals';\nimport { PrismaClient } from '@prisma/client';\n\n// Prismaのモック\njest.mock('@prisma/client', () => {\n  const originalModule = jest.requireActual('@prisma/client');\n  return {\n    __esModule: true,\n    PrismaClient: jest.fn().mockImplementation(() => ({\n      batchJob: {\n        create: jest.fn().mockResolvedValue({\n          id: 'test-job-id',\n          userId: 'test-user',\n          status: 'PENDING',\n          totalFiles: 2,\n          processedFiles: 0,\n          options: {},\n          createdAt: new Date(),\n          updatedAt: new Date(),\n        }),\n        findUnique: jest.fn().mockResolvedValue({\n          id: 'test-job-id',\n          userId: 'test-user',\n          status: 'PENDING',\n          totalFiles: 2,\n          processedFiles: 0,\n          options: {},\n          createdAt: new Date(),\n          updatedAt: new Date(),\n        }),\n      },\n    })),\n  };\n});\n\n// next-auth/jwtのモック\njest.mock('next-auth/jwt', () => {\n  const originalModule = jest.requireActual('next-auth/jwt');\n  return {\n    __esModule: true,\n    getToken: jest.fn().mockResolvedValue({\n      sub: 'test-user',\n      email: 'test@example.com',\n    }),\n  };\n});\n\n// APIロギングのモック\njest.mock('@/lib/utils/api-logging', () => {\n  const originalModule = jest.requireActual('@/lib/utils/api-logging');\n  return {\n    __esModule: true,\n    withAPILogging: jest.fn().mockImplementation((handler: any) => handler),\n  };\n});\n\n// app/api/batch-upload/route.tsのインポート\nimport { POST, GET } from '@/app/api/batch-upload/route';\n\ndescribe('Batch Upload API', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('POST /api/batch-upload', () => {\n    it('認証されていない場合はエラーを返す', async () => {\n      // getTokenをnullを返すようにモック\n      const { getToken } = require('next-auth/jwt');\n      getToken.mockResolvedValueOnce(null);\n\n      const mockReq = new Request('http://localhost:3000/api/batch-upload', {\n        method: 'POST',\n        body: JSON.stringify({ files: ['file1.pptx', 'file2.pptx'] }),\n      }) as NextRequest;\n\n      const response = await POST(mockReq);\n      expect(response.status).toBe(401);\n\n      const data = await response.json();\n      expect(data.error).toBe('認証が必要です');\n    });\n\n    it('ファイルリストが空の場合はエラーを返す', async () => {\n      const mockReq = new Request('http://localhost:3000/api/batch-upload', {\n        method: 'POST',\n        body: JSON.stringify({ files: [] }),\n      }) as NextRequest;\n\n      const response = await POST(mockReq);\n      expect(response.status).toBe(400);\n\n      const data = await response.json();\n      expect(data.error).toBe('ファイルが指定されていません');\n    });\n\n    it('バッチジョブを正常に作成する', async () => {\n      const mockReq = new Request('http://localhost:3000/api/batch-upload', {\n        method: 'POST',\n        body: JSON.stringify({\n          files: ['file1.pptx', 'file2.pptx'],\n          options: { targetLang: 'en' },\n        }),\n      }) as NextRequest;\n\n      const response = await POST(mockReq);\n      expect(response.status).toBe(200);\n\n      const data = await response.json();\n      expect(data.jobId).toBe('test-job-id');\n      expect(data.message).toBe('バッチジョブが登録されました');\n      expect(data.estimatedTime).toBe(4); // 2ファイル × 2分\n    });\n\n    it('バッチジョブ作成時にエラーが発生した場合は500エラーを返す', async () => {\n      // Prismaのcreateメソッドをエラーを投げるようにモック\n      const prisma = new PrismaClient();\n      prisma.batchJob.create = jest.fn().mockRejectedValueOnce(new Error('DB error'));\n\n      const mockReq = new Request('http://localhost:3000/api/batch-upload', {\n        method: 'POST',\n        body: JSON.stringify({ files: ['file1.pptx'] }),\n      }) as NextRequest;\n\n      const response = await POST(mockReq);\n      expect(response.status).toBe(500);\n\n      const data = await response.json();\n      expect(data.error).toBe('サーバーエラーが発生しました');\n    });\n  });\n\n  describe('GET /api/batch-upload', () => {\n    it('ジョブIDが指定されていない場合はエラーを返す', async () => {\n      const mockReq = new Request('http://localhost:3000/api/batch-upload') as NextRequest;\n\n      const response = await GET(mockReq);\n      expect(response.status).toBe(400);\n\n      const data = await response.json();\n      expect(data.error).toBe('ジョブIDが指定されていません');\n    });\n\n    it('存在しないジョブIDの場合は404エラーを返す', async () => {\n      // findUniqueメソッドをnullを返すようにモック\n      const prisma = new PrismaClient();\n      prisma.batchJob.findUnique = jest.fn().mockResolvedValueOnce(null);\n\n      const mockReq = new Request('http://localhost:3000/api/batch-upload?jobId=non-existent') as NextRequest;\n\n      const response = await GET(mockReq);\n      expect(response.status).toBe(404);\n\n      const data = await response.json();\n      expect(data.error).toBe('指定されたジョブが見つかりません');\n    });\n\n    it('ジョブの状態を正常に取得する', async () => {\n      const mockReq = new Request('http://localhost:3000/api/batch-upload?jobId=test-job-id') as NextRequest;\n\n      const response = await GET(mockReq);\n      expect(response.status).toBe(200);\n\n      const data = await response.json();\n      expect(data.jobId).toBe('test-job-id');\n      expect(data.status).toBe('PENDING');\n      expect(data.progress).toBe(0);\n      expect(data.totalFiles).toBe(2);\n      expect(data.processedFiles).toBe(0);\n    });\n\n    it('ジョブ取得時にエラーが発生した場合は500エラーを返す', async () => {\n      // findUniqueメソッドをエラーを投げるようにモック\n      const prisma = new PrismaClient();\n      prisma.batchJob.findUnique = jest.fn().mockRejectedValueOnce(new Error('DB error'));\n\n      const mockReq = new Request('http://localhost:3000/api/batch-upload?jobId=test-job-id') as NextRequest;\n\n      const response = await GET(mockReq);\n      expect(response.status).toBe(500);\n\n      const data = await response.json();\n      expect(data.error).toBe('サーバーエラーが発生しました');\n    });\n  });\n}); "],"names":["jest","mock","originalModule","requireActual","__esModule","PrismaClient","fn","mockImplementation","batchJob","create","mockResolvedValue","id","userId","status","totalFiles","processedFiles","options","createdAt","Date","updatedAt","findUnique","getToken","sub","email","withAPILogging","handler","describe","beforeEach","clearAllMocks","it","require","mockResolvedValueOnce","mockReq","Request","method","body","JSON","stringify","files","response","POST","expect","toBe","data","json","error","targetLang","jobId","message","estimatedTime","prisma","mockRejectedValueOnce","Error","GET","progress"],"mappings":"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"}