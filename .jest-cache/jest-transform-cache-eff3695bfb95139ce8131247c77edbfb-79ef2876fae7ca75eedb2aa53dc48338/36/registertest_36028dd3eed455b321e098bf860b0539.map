{"version":3,"sources":["/Users/yusuketsunoda/Documents/cursor/ppttranslatorapp/worktrees/cicd-setup/tests/api/auth/register.test.ts"],"sourcesContent":["// モック定義を先に行う\nconst mockUserFindUnique = jest.fn();\nconst mockUserCreate = jest.fn();\nconst mockUserUpdate = jest.fn();\n\n// Prismaモックを先に定義\njest.mock('@/lib/db/prisma', () => ({\n  prisma: {\n    user: {\n      findUnique: mockUserFindUnique,\n      create: mockUserCreate,\n      update: mockUserUpdate\n    }\n  }\n}));\n\njest.mock('@/lib/auth/password', () => ({\n  hashPassword: jest.fn(),\n}));\n\n// モック定義後にインポートする\nimport { POST } from '@/app/api/auth/register/route';\nimport { prisma } from '@/lib/db/prisma';\nimport { hashPassword } from '@/lib/auth/password';\nimport { UserRole } from '@prisma/client';\nimport { createMockUser, clearAllMocks } from '@/tests/helpers/mockSetup';\n\n// Jestのexpect関数をモック化しないようにする\nconst actualExpect = global.expect;\nconst hashPasswordMock = hashPassword as jest.Mock;\n\ndescribe('POST /api/auth/register', () => {\n  beforeEach(() => {\n    clearAllMocks();\n    hashPasswordMock.mockResolvedValue('hashed_password');\n  });\n\n  it('should register a new user successfully', async () => {\n    const requestBody = {\n      email: 'test@example.com',\n      password: 'password123',\n      name: 'Test User',\n    };\n    const req = new Request('http://localhost/api/auth/register', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: { 'Content-Type': 'application/json' },\n    });\n\n    mockUserFindUnique.mockResolvedValue(null);\n    const createdUser = createMockUser({\n      id: 'generated-uuid',\n      email: requestBody.email,\n      name: requestBody.name,\n      password: 'hashed_password',\n      credits: 15,\n      role: UserRole.USER,\n    });\n    mockUserCreate.mockResolvedValue(createdUser);\n\n    const response = await POST(req as Request);\n    const responseBody = await response.json();\n\n    actualExpect(response.status).toBe(200);\n    actualExpect(responseBody.success).toBe(true);\n    actualExpect(responseBody.userId).toBe(createdUser.id);\n\n    actualExpect(mockUserFindUnique).toHaveBeenCalledWith({\n      where: { email: requestBody.email },\n    });\n    actualExpect(hashPasswordMock).toHaveBeenCalledWith(requestBody.password);\n    actualExpect(mockUserCreate).toHaveBeenCalledWith(\n      actualExpect.objectContaining({\n        data: actualExpect.objectContaining({\n          email: requestBody.email,\n          name: requestBody.name,\n          password: 'hashed_password',\n          credits: 15,\n        }),\n      })\n    );\n  });\n\n  it('should return 400 if email already exists', async () => {\n    const requestBody = {\n      email: 'existing@example.com',\n      password: 'password123',\n      name: 'Existing User',\n    };\n    const req = new Request('http://localhost/api/auth/register', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: { 'Content-Type': 'application/json' },\n    });\n\n    mockUserFindUnique.mockResolvedValue(createMockUser({\n      email: requestBody.email,\n      name: requestBody.name,\n    }));\n\n    const response = await POST(req as Request);\n    const responseBody = await response.json();\n\n    actualExpect(response.status).toBe(400);\n    actualExpect(responseBody.error).toBe('このメールアドレスは既に登録されています');\n    actualExpect(mockUserCreate).not.toHaveBeenCalled();\n  });\n\n  it('should return 500 if hashing password fails', async () => {\n    const requestBody = {\n      email: 'test2@example.com',\n      password: 'password123',\n      name: 'Test User 2',\n    };\n    const req = new Request('http://localhost/api/auth/register', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: { 'Content-Type': 'application/json' },\n    });\n\n    mockUserFindUnique.mockResolvedValue(null);\n    hashPasswordMock.mockRejectedValue(new Error('Hashing failed'));\n\n    const response = await POST(req as Request);\n    const responseBody = await response.json();\n\n    actualExpect(response.status).toBe(500);\n    actualExpect(responseBody.error).toBe('ユーザー登録中にエラーが発生しました');\n    actualExpect(mockUserCreate).not.toHaveBeenCalled();\n  });\n\n  it('should return 500 if creating user fails', async () => {\n    const requestBody = {\n      email: 'test3@example.com',\n      password: 'password123',\n      name: 'Test User 3',\n    };\n    const req = new Request('http://localhost/api/auth/register', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: { 'Content-Type': 'application/json' },\n    });\n\n    mockUserFindUnique.mockResolvedValue(null);\n    hashPasswordMock.mockResolvedValue('hashed_password_for_test3');\n    mockUserCreate.mockRejectedValue(new Error('DB error'));\n\n    const response = await POST(req as Request);\n    const responseBody = await response.json();\n\n    actualExpect(response.status).toBe(500);\n    actualExpect(responseBody.error).toBe('ユーザー登録中にエラーが発生しました');\n  });\n\n  // TODO: リクエストボディのバリデーションに関するテストケースを追加\n  // (例: email, password, name が欠落している場合など。現状のAPIは自前でバリデーションしていないため、\n  //  NextRequestの挙動や、将来的なバリデーションライブラリ導入時にテスト追加を検討)\n}); "],"names":["jest","mock","prisma","user","findUnique","mockUserFindUnique","create","mockUserCreate","update","mockUserUpdate","hashPassword","fn","actualExpect","global","expect","hashPasswordMock","describe","beforeEach","clearAllMocks","mockResolvedValue","it","requestBody","email","password","name","req","Request","method","body","JSON","stringify","headers","createdUser","createMockUser","id","credits","role","UserRole","USER","response","POST","responseBody","json","status","toBe","success","userId","toHaveBeenCalledWith","where","objectContaining","data","error","not","toHaveBeenCalled","mockRejectedValue","Error"],"mappings":"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"}