a4d1b498904c38a12be25a8269ed9f69
"use strict";
// アクティビティロガーのモック
jest.mock('@/lib/utils/activity-logger', ()=>({
        getUserActivityLogs: jest.fn(),
        ActivityAction: {
            sign_in: 'sign_in',
            file_upload: 'file_upload',
            translation: 'translation'
        }
    }));
// SWRのモック
jest.mock('swr', ()=>({
        __esModule: true,
        default: jest.fn()
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _interop_require_default = require("@swc/helpers/_/_interop_require_default");
const _react = /*#__PURE__*/ _interop_require_default._(require("react"));
const _react1 = require("@testing-library/react");
const _useActivityLogs = require("@/lib/hooks/useActivityLogs");
const _activitylogger = require("@/lib/utils/activity-logger");
const _globals = require("@jest/globals");
const _swr = /*#__PURE__*/ _interop_require_default._(require("swr"));
describe('useActivityLogs', ()=>{
    const userId = 'test-user-123';
    const mockLogs = [
        {
            id: '1',
            userId,
            action: _activitylogger.ActivityAction.sign_in,
            createdAt: new Date()
        },
        {
            id: '2',
            userId,
            action: _activitylogger.ActivityAction.file_upload,
            createdAt: new Date()
        }
    ];
    beforeEach(()=>{
        jest.clearAllMocks();
        // SWRのモック実装
        _swr.default.mockImplementation((key, fetcher, options)=>{
            // keyがnullの場合はデータがない状態を再現
            if (key === null) {
                return {
                    data: undefined,
                    mutate: jest.fn()
                };
            }
            return {
                data: {
                    logs: mockLogs,
                    nextCursor: undefined
                },
                mutate: jest.fn()
            };
        });
        // getUserActivityLogsのモック実装
        _activitylogger.getUserActivityLogs.mockResolvedValue({
            logs: mockLogs,
            nextCursor: undefined
        });
    });
    it('ユーザーIDが提供された場合、アクティビティログを取得する', async ()=>{
        const { result } = (0, _react1.renderHook)(()=>(0, _useActivityLogs.useActivityLogs)(userId));
        // useEffectが実行されるのを待つ
        await (0, _react1.act)(async ()=>{
            await new Promise((resolve)=>setTimeout(resolve, 0));
        });
        // 結果の検証
        (0, _globals.expect)(result.current.logs).toEqual(mockLogs);
        (0, _globals.expect)(result.current.isLoading).toBe(false);
        (0, _globals.expect)(result.current.error).toBeNull();
        (0, _globals.expect)(result.current.hasMore).toBe(true);
    });
    it('ユーザーIDがない場合、データを取得しない', ()=>{
        const { result } = (0, _react1.renderHook)(()=>(0, _useActivityLogs.useActivityLogs)(undefined));
        (0, _globals.expect)(_swr.default).toHaveBeenCalledWith(null, _globals.expect.any(Function), _globals.expect.any(Object));
        (0, _globals.expect)(result.current.logs).toEqual([]);
    });
    it('loadMore関数が正しく動作する', async ()=>{
        const { result } = (0, _react1.renderHook)(()=>(0, _useActivityLogs.useActivityLogs)(userId));
        // useEffectが実行されるのを待つ
        await (0, _react1.act)(async ()=>{
            await new Promise((resolve)=>setTimeout(resolve, 0));
        });
        // loadMore関数を呼び出す
        await (0, _react1.act)(async ()=>{
            await result.current.loadMore();
        });
        // isLoadingMoreがfalseに戻ることを確認
        (0, _globals.expect)(result.current.isLoadingMore).toBe(false);
    });
    it('mutate関数が利用可能である', async ()=>{
        const { result } = (0, _react1.renderHook)(()=>(0, _useActivityLogs.useActivityLogs)(userId));
        // useEffectが実行されるのを待つ
        await (0, _react1.act)(async ()=>{
            await new Promise((resolve)=>setTimeout(resolve, 0));
        });
        (0, _globals.expect)(result.current.mutate).toBeDefined();
        (0, _globals.expect)(typeof result.current.mutate).toBe('function');
    });
});

//# sourceMappingURL=data:application/json;base64,