d2fcc75e9ef27d21b6c7cb30a9325ed3
"use strict";
jest.mock('next/server', ()=>({
        NextResponse: {
            json: jest.fn().mockImplementation((data, options)=>{
                return {
                    status: (options === null || options === void 0 ? void 0 : options.status) || 200,
                    json: async ()=>data
                };
            })
        }
    }));
// モック
jest.mock('next-auth', ()=>({
        getServerSession: jest.fn()
    }));
jest.mock('@/lib/db/prisma', ()=>({
        prisma: {
            translationHistory: {
                count: jest.fn(),
                findMany: jest.fn()
            },
            $transaction: jest.fn()
        }
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _define_property = require("@swc/helpers/_/_define_property");
const _route = require("@/app/api/history/route");
const _server = require("next/server");
const _nextauth = require("next-auth");
const _prisma = require("@/lib/db/prisma");
// NodeJSでRequestオブジェクトを模倣
global.Request = class MockRequest {
    constructor(url){
        _define_property._(this, "url", void 0);
        this.url = url;
    }
};
// NextResponseのモック
const originalNextResponse = _server.NextResponse;
describe('履歴API', ()=>{
    beforeEach(()=>{
        jest.clearAllMocks();
    });
    it('認証がない場合は401エラーを返す', async ()=>{
        _nextauth.getServerSession.mockResolvedValue(null);
        const req = new Request('http://localhost:3000/api/history');
        const response = await (0, _route.GET)(req);
        expect(response.status).toBe(401);
        expect(await response.json()).toEqual({
            error: '認証が必要です'
        });
    });
    it('デフォルトパラメータで履歴を取得できる', async ()=>{
        // セッションモック
        _nextauth.getServerSession.mockResolvedValue({
            user: {
                id: 'test-user-id'
            }
        });
        // prismaモック
        const mockHistory = [
            {
                id: 'history1',
                createdAt: new Date(),
                file: {
                    originalName: 'test1.pptx'
                }
            },
            {
                id: 'history2',
                createdAt: new Date(),
                file: {
                    originalName: 'test2.pptx'
                }
            }
        ];
        _prisma.prisma.$transaction.mockResolvedValue([
            2,
            mockHistory
        ]);
        const req = new Request('http://localhost:3000/api/history');
        const response = await (0, _route.GET)(req);
        const responseData = await response.json();
        expect(response.status).toBe(200);
        expect(responseData.data).toHaveLength(2);
        expect(responseData.total).toBe(2);
        expect(responseData.page).toBe(1);
        expect(responseData.limit).toBe(10);
        expect(_prisma.prisma.$transaction).toHaveBeenCalledWith(expect.anything());
    });
    it('クエリパラメータを正しく処理する', async ()=>{
        // セッションモック
        _nextauth.getServerSession.mockResolvedValue({
            user: {
                id: 'test-user-id'
            }
        });
        // prismaモック
        const mockHistory = [
            {
                id: 'history1',
                file: {
                    originalName: 'test1.pptx'
                }
            }
        ];
        _prisma.prisma.$transaction.mockResolvedValue([
            1,
            mockHistory
        ]);
        // クエリパラメータ付きリクエスト
        const req = new Request('http://localhost:3000/api/history?page=2&limit=5&sort=createdAt&order=asc&search=test&startDate=2023-01-01&endDate=2023-12-31&status=COMPLETED&sourceLang=en&targetLang=ja');
        const response = await (0, _route.GET)(req);
        const responseData = await response.json();
        expect(response.status).toBe(200);
        expect(responseData.page).toBe(2);
        expect(responseData.limit).toBe(5);
        // Prismaトランザクションが正しいパラメータで呼ばれているか確認
        expect(_prisma.prisma.$transaction).toHaveBeenCalledWith(expect.anything());
    });
    it('無効なページパラメータでは400エラーを返す', async ()=>{
        _nextauth.getServerSession.mockResolvedValue({
            user: {
                id: 'test-user-id'
            }
        });
        const req = new Request('http://localhost:3000/api/history?page=invalid');
        const response = await (0, _route.GET)(req);
        expect(response.status).toBe(400);
        expect(await response.json()).toEqual({
            error: '無効なページ番号です'
        });
    });
    it('無効なlimitパラメータでは400エラーを返す', async ()=>{
        _nextauth.getServerSession.mockResolvedValue({
            user: {
                id: 'test-user-id'
            }
        });
        const req = new Request('http://localhost:3000/api/history?limit=1000');
        const response = await (0, _route.GET)(req);
        expect(response.status).toBe(400);
        expect(await response.json()).toEqual({
            error: '無効な制限数です'
        });
    });
    it('無効なソートパラメータでは400エラーを返す', async ()=>{
        _nextauth.getServerSession.mockResolvedValue({
            user: {
                id: 'test-user-id'
            }
        });
        const req = new Request('http://localhost:3000/api/history?sort=invalidField');
        const response = await (0, _route.GET)(req);
        expect(response.status).toBe(400);
        expect(await response.json()).toEqual({
            error: expect.stringContaining('無効なソートキー')
        });
    });
    it('無効なorder値では400エラーを返す', async ()=>{
        _nextauth.getServerSession.mockResolvedValue({
            user: {
                id: 'test-user-id'
            }
        });
        const req = new Request('http://localhost:3000/api/history?order=invalid');
        const response = await (0, _route.GET)(req);
        expect(response.status).toBe(400);
        expect(await response.json()).toEqual({
            error: '無効なソート順序です'
        });
    });
    it('データベースエラーの場合は500エラーを返す', async ()=>{
        _nextauth.getServerSession.mockResolvedValue({
            user: {
                id: 'test-user-id'
            }
        });
        _prisma.prisma.$transaction.mockRejectedValue(new Error('データベースエラー'));
        const req = new Request('http://localhost:3000/api/history');
        const response = await (0, _route.GET)(req);
        expect(response.status).toBe(500);
        expect(await response.json()).toEqual({
            error: expect.stringContaining('データベースエラー')
        });
    });
});

//# sourceMappingURL=data:application/json;base64,