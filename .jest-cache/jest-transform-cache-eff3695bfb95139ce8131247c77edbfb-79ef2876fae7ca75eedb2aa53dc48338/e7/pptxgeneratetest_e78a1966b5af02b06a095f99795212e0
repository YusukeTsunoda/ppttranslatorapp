0b004d4c917d5a2e7d6c408d4e4f98e9
"use strict";
// utilのモック
jest.mock('util', ()=>{
    return {
        promisify: jest.fn().mockImplementation((fn)=>{
            return (...args)=>{
                return new Promise((resolve)=>{
                    resolve({
                        stdout: '{"success":true}',
                        stderr: ''
                    });
                });
            };
        })
    };
});
// next-authのモック
jest.mock('next-auth', ()=>{
    return {
        getServerSession: jest.fn().mockImplementation(()=>{
            return Promise.resolve({
                user: {
                    id: 'test-user',
                    email: 'test@example.com'
                }
            });
        })
    };
});
// auth-optionsのモック
jest.mock('@/lib/auth/auth-options', ()=>{
    return {
        authOptions: {}
    };
});
// fs/promisesのモック
jest.mock('fs/promises', ()=>{
    return {
        access: jest.fn().mockImplementation(()=>Promise.resolve(undefined)),
        mkdir: jest.fn().mockImplementation(()=>Promise.resolve(undefined)),
        writeFile: jest.fn().mockImplementation(()=>Promise.resolve(undefined)),
        readdir: jest.fn().mockImplementation(()=>Promise.resolve([
                'test.pptx'
            ])),
        unlink: jest.fn().mockImplementation(()=>Promise.resolve(undefined)),
        constants: {
            X_OK: 1
        }
    };
});
// child_processのモック
jest.mock('child_process', ()=>{
    return {
        exec: jest.fn().mockImplementation((cmd, callback)=>{
            if (callback) {
                callback(null, {
                    stdout: '{"success":true}',
                    stderr: ''
                });
            }
            return {
                stdout: '{"success":true}',
                stderr: ''
            };
        })
    };
});
// pathのモック
jest.mock('path', ()=>{
    return {
        join: jest.fn().mockImplementation((...args)=>args.join('/'))
    };
});
// filePathManagerのモック
jest.mock('@/lib/utils/file-utils', ()=>{
    return {
        filePathManager: {
            findActualFilePath: jest.fn().mockResolvedValue('/path/to/test.pptx')
        }
    };
});
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _globals = require("@jest/globals");
const _route = require("@/app/api/pptx/generate/route");
describe('PPTX Generate API', ()=>{
    beforeEach(()=>{
        jest.clearAllMocks();
    });
    describe('POST /api/pptx/generate', ()=>{
        it('認証されていない場合はエラーを返す', async ()=>{
            // getServerSessionをnullを返すようにモック
            const { getServerSession } = require('next-auth');
            getServerSession.mockResolvedValueOnce(null);
            const mockReq = new Request('http://localhost:3000/api/pptx/generate', {
                method: 'POST',
                body: JSON.stringify({
                    fileId: 'test-file',
                    translations: [
                        {
                            text: 'Hello',
                            translation: 'こんにちは'
                        }
                    ]
                })
            });
            const response = await (0, _route.POST)(mockReq);
            (0, _globals.expect)(response.status).toBe(401);
            const data = await response.json();
            (0, _globals.expect)(data.error).toBe('Unauthorized');
        });
        it('必須パラメータが不足している場合はエラーを返す', async ()=>{
            const mockReq = new Request('http://localhost:3000/api/pptx/generate', {
                method: 'POST',
                body: JSON.stringify({})
            });
            const response = await (0, _route.POST)(mockReq);
            (0, _globals.expect)(response.status).toBe(400);
            const data = await response.json();
            (0, _globals.expect)(data.error).toBe('Missing required parameters');
        });
        it('元のファイルが見つからない場合は404エラーを返す', async ()=>{
            // filePathManagerのfindActualFilePathをnullを返すようにモック
            const { filePathManager } = require('@/lib/utils/file-utils');
            filePathManager.findActualFilePath.mockImplementation(()=>Promise.resolve(null));
            // fs.readdirをモックしてエラーを回避
            const fs = require('fs/promises');
            fs.readdir.mockImplementation(()=>Promise.resolve([]));
            // fs.mkdirをモック
            fs.mkdir.mockImplementation(()=>Promise.resolve());
            // fs.accessをモック
            fs.access.mockImplementation((path)=>{
                // ファイルパスに応じて結果を変える
                if (path.includes('test.pptx')) {
                    return Promise.reject(new Error('ENOENT'));
                }
                return Promise.resolve();
            });
            const mockReq = new Request('http://localhost:3000/api/pptx/generate', {
                method: 'POST',
                body: JSON.stringify({
                    fileId: 'non-existent',
                    translations: [
                        {
                            text: 'Hello',
                            translation: 'こんにちは'
                        }
                    ]
                })
            });
            const response = await (0, _route.POST)(mockReq);
            (0, _globals.expect)(response.status).toBe(404);
            const data = await response.json();
            (0, _globals.expect)(data.error).toBe('Original PPTX file not found');
        });
        it('Pythonスクリプトが見つからない場合は500エラーを返す', async ()=>{
            // 元のファイルは見つかるようにする
            const { filePathManager } = require('@/lib/utils/file-utils');
            filePathManager.findActualFilePath.mockImplementation(()=>Promise.resolve('/path/to/test.pptx'));
            // fs.mkdirをモック
            const fs = require('fs/promises');
            fs.mkdir.mockImplementation(()=>Promise.resolve());
            // fs.writeFileをモック
            fs.writeFile.mockImplementation(()=>Promise.resolve());
            // fs.accessをエラーを投げるようにモック
            let accessCount = 0;
            fs.access.mockImplementation((path, mode)=>{
                accessCount++;
                // 1回目のアクセス（元ファイル）は成功
                if (accessCount === 1) {
                    return Promise.resolve();
                }
                // 2回目のアクセス（Pythonスクリプト）は失敗
                if (path.includes('pptx_generator.py')) {
                    return Promise.reject(new Error('ENOENT'));
                }
                return Promise.resolve();
            });
            const mockReq = new Request('http://localhost:3000/api/pptx/generate', {
                method: 'POST',
                body: JSON.stringify({
                    fileId: 'test-file',
                    translations: [
                        {
                            text: 'Hello',
                            translation: 'こんにちは'
                        }
                    ]
                })
            });
            const response = await (0, _route.POST)(mockReq);
            (0, _globals.expect)(response.status).toBe(500);
            const data = await response.json();
            (0, _globals.expect)(data.error).toBe('Python script not found');
        });
        it('Pythonスクリプトの実行に失敗した場合は500エラーを返す', async ()=>{
            // execをエラーを投げるようにモック
            const { exec } = require('child_process');
            exec.mockImplementationOnce((cmd, cb)=>cb(new Error('Python error')));
            const mockReq = new Request('http://localhost:3000/api/pptx/generate', {
                method: 'POST',
                body: JSON.stringify({
                    fileId: 'test-file',
                    translations: [
                        {
                            text: 'Hello',
                            translation: 'こんにちは'
                        }
                    ]
                })
            });
            const response = await (0, _route.POST)(mockReq);
            (0, _globals.expect)(response.status).toBe(500);
            const data = await response.json();
            (0, _globals.expect)(data.error).toContain('Failed to generate PPTX');
        });
        it('PPTXファイルを正常に生成する', async ()=>{
            // 元のファイルは見つかるようにする
            const { filePathManager } = require('@/lib/utils/file-utils');
            filePathManager.findActualFilePath.mockImplementation(()=>Promise.resolve('/path/to/test.pptx'));
            // fs.mkdirをモック
            const fs = require('fs/promises');
            fs.mkdir.mockImplementation(()=>Promise.resolve());
            // fs.writeFileをモック
            fs.writeFile.mockImplementation(()=>Promise.resolve());
            // fs.unlinkをモック
            fs.unlink.mockImplementation(()=>Promise.resolve());
            // fs.accessを常に成功するようにモック
            fs.access.mockImplementation(()=>Promise.resolve(undefined));
            // child_process.execのモックを上書き
            const { exec } = require('child_process');
            exec.mockImplementation((cmd, cb)=>{
                if (cb) {
                    cb(null, {
                        stdout: '{"success":true}',
                        stderr: ''
                    });
                }
                return {
                    stdout: '{"success":true}',
                    stderr: ''
                };
            });
            // util.promisifyのモックを上書き
            const util = require('util');
            util.promisify.mockImplementation((fn)=>{
                return (...args)=>{
                    return Promise.resolve({
                        stdout: '{"success":true}',
                        stderr: ''
                    });
                };
            });
            const mockReq = new Request('http://localhost:3000/api/pptx/generate', {
                method: 'POST',
                body: JSON.stringify({
                    fileId: 'test-file',
                    translations: [
                        {
                            text: 'Hello',
                            translation: 'こんにちは'
                        }
                    ]
                })
            });
            const response = await (0, _route.POST)(mockReq);
            (0, _globals.expect)(response.status).toBe(200);
            const data = await response.json();
            (0, _globals.expect)(data.success).toBe(true);
            (0, _globals.expect)(data.downloadUrl).toBeDefined();
            (0, _globals.expect)(data.downloadUrl).toContain('/api/download/');
        });
    });
});

//# sourceMappingURL=data:application/json;base64,