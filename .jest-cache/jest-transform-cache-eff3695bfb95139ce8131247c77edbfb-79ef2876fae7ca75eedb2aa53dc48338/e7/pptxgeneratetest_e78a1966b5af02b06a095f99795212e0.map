{"version":3,"sources":["/Users/yusuketsunoda/Documents/cursor/ppttranslatorapp/worktrees/cicd-setup/tests/api/pptx-generate.test.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { expect } from '@jest/globals';\n\n// utilのモック\njest.mock('util', () => {\n  return {\n    promisify: jest.fn().mockImplementation((fn: any) => {\n      return (...args: any[]) => {\n        return new Promise((resolve) => {\n          resolve({ stdout: '{\"success\":true}', stderr: '' });\n        });\n      };\n    }),\n  };\n});\n\n// next-authのモック\njest.mock('next-auth', () => {\n  return {\n    getServerSession: jest.fn().mockImplementation(() => {\n      return Promise.resolve({\n        user: {\n          id: 'test-user',\n          email: 'test@example.com',\n        },\n      });\n    }),\n  };\n});\n\n// auth-optionsのモック\njest.mock('@/lib/auth/auth-options', () => {\n  return {\n    authOptions: {}\n  };\n});\n\n// fs/promisesのモック\njest.mock('fs/promises', () => {\n  return {\n    access: jest.fn().mockImplementation(() => Promise.resolve(undefined)),\n    mkdir: jest.fn().mockImplementation(() => Promise.resolve(undefined)),\n    writeFile: jest.fn().mockImplementation(() => Promise.resolve(undefined)),\n    readdir: jest.fn().mockImplementation(() => Promise.resolve(['test.pptx'])),\n    unlink: jest.fn().mockImplementation(() => Promise.resolve(undefined)),\n    constants: { X_OK: 1 },\n  };\n});\n\n// child_processのモック\njest.mock('child_process', () => {\n  return {\n    exec: jest.fn().mockImplementation((cmd, callback) => {\n      if (callback) {\n        callback(null, { stdout: '{\"success\":true}', stderr: '' });\n      }\n      return { stdout: '{\"success\":true}', stderr: '' };\n    }),\n  };\n});\n\n// pathのモック\njest.mock('path', () => {\n  return {\n    join: jest.fn().mockImplementation((...args) => args.join('/')),\n  };\n});\n\n// filePathManagerのモック\njest.mock('@/lib/utils/file-utils', () => {\n  return {\n    filePathManager: {\n      findActualFilePath: jest.fn().mockResolvedValue('/path/to/test.pptx')\n    }\n  };\n});\n\n// app/api/pptx/generate/route.tsのインポート\nimport { POST } from '@/app/api/pptx/generate/route';\n\ndescribe('PPTX Generate API', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('POST /api/pptx/generate', () => {\n    it('認証されていない場合はエラーを返す', async () => {\n      // getServerSessionをnullを返すようにモック\n      const { getServerSession } = require('next-auth');\n      getServerSession.mockResolvedValueOnce(null);\n\n      const mockReq = new Request('http://localhost:3000/api/pptx/generate', {\n        method: 'POST',\n        body: JSON.stringify({\n          fileId: 'test-file',\n          translations: [{ text: 'Hello', translation: 'こんにちは' }],\n        }),\n      }) as NextRequest;\n\n      const response = await POST(mockReq);\n      expect(response.status).toBe(401);\n\n      const data = await response.json();\n      expect(data.error).toBe('Unauthorized');\n    });\n\n    it('必須パラメータが不足している場合はエラーを返す', async () => {\n      const mockReq = new Request('http://localhost:3000/api/pptx/generate', {\n        method: 'POST',\n        body: JSON.stringify({}),\n      }) as NextRequest;\n\n      const response = await POST(mockReq);\n      expect(response.status).toBe(400);\n\n      const data = await response.json();\n      expect(data.error).toBe('Missing required parameters');\n    });\n\n    it('元のファイルが見つからない場合は404エラーを返す', async () => {\n      // filePathManagerのfindActualFilePathをnullを返すようにモック\n      const { filePathManager } = require('@/lib/utils/file-utils');\n      filePathManager.findActualFilePath.mockImplementation(() => Promise.resolve(null));\n\n      // fs.readdirをモックしてエラーを回避\n      const fs = require('fs/promises');\n      fs.readdir.mockImplementation(() => Promise.resolve([]));\n      \n      // fs.mkdirをモック\n      fs.mkdir.mockImplementation(() => Promise.resolve());\n      \n      // fs.accessをモック\n      fs.access.mockImplementation((path: string) => {\n        // ファイルパスに応じて結果を変える\n        if (path.includes('test.pptx')) {\n          return Promise.reject(new Error('ENOENT'));\n        }\n        return Promise.resolve();\n      });\n\n      const mockReq = new Request('http://localhost:3000/api/pptx/generate', {\n        method: 'POST',\n        body: JSON.stringify({\n          fileId: 'non-existent',\n          translations: [{ text: 'Hello', translation: 'こんにちは' }],\n        }),\n      }) as NextRequest;\n\n      const response = await POST(mockReq);\n      expect(response.status).toBe(404);\n\n      const data = await response.json();\n      expect(data.error).toBe('Original PPTX file not found');\n    });\n\n    it('Pythonスクリプトが見つからない場合は500エラーを返す', async () => {\n      // 元のファイルは見つかるようにする\n      const { filePathManager } = require('@/lib/utils/file-utils');\n      filePathManager.findActualFilePath.mockImplementation(() => Promise.resolve('/path/to/test.pptx'));\n\n      // fs.mkdirをモック\n      const fs = require('fs/promises');\n      fs.mkdir.mockImplementation(() => Promise.resolve());\n      \n      // fs.writeFileをモック\n      fs.writeFile.mockImplementation(() => Promise.resolve());\n\n      // fs.accessをエラーを投げるようにモック\n      let accessCount = 0;\n      fs.access.mockImplementation((path: string, mode?: number) => {\n        accessCount++;\n        // 1回目のアクセス（元ファイル）は成功\n        if (accessCount === 1) {\n          return Promise.resolve();\n        }\n        // 2回目のアクセス（Pythonスクリプト）は失敗\n        if (path.includes('pptx_generator.py')) {\n          return Promise.reject(new Error('ENOENT'));\n        }\n        return Promise.resolve();\n      });\n\n      const mockReq = new Request('http://localhost:3000/api/pptx/generate', {\n        method: 'POST',\n        body: JSON.stringify({\n          fileId: 'test-file',\n          translations: [{ text: 'Hello', translation: 'こんにちは' }],\n        }),\n      }) as NextRequest;\n\n      const response = await POST(mockReq);\n      expect(response.status).toBe(500);\n\n      const data = await response.json();\n      expect(data.error).toBe('Python script not found');\n    });\n\n    it('Pythonスクリプトの実行に失敗した場合は500エラーを返す', async () => {\n      // execをエラーを投げるようにモック\n      const { exec } = require('child_process');\n      exec.mockImplementationOnce((cmd: string, cb: (error: Error | null, result?: any) => void) => cb(new Error('Python error')));\n\n      const mockReq = new Request('http://localhost:3000/api/pptx/generate', {\n        method: 'POST',\n        body: JSON.stringify({\n          fileId: 'test-file',\n          translations: [{ text: 'Hello', translation: 'こんにちは' }],\n        }),\n      }) as NextRequest;\n\n      const response = await POST(mockReq);\n      expect(response.status).toBe(500);\n\n      const data = await response.json();\n      expect(data.error).toContain('Failed to generate PPTX');\n    });\n\n    it('PPTXファイルを正常に生成する', async () => {\n      // 元のファイルは見つかるようにする\n      const { filePathManager } = require('@/lib/utils/file-utils');\n      filePathManager.findActualFilePath.mockImplementation(() => Promise.resolve('/path/to/test.pptx'));\n\n      // fs.mkdirをモック\n      const fs = require('fs/promises');\n      fs.mkdir.mockImplementation(() => Promise.resolve());\n      \n      // fs.writeFileをモック\n      fs.writeFile.mockImplementation(() => Promise.resolve());\n      \n      // fs.unlinkをモック\n      fs.unlink.mockImplementation(() => Promise.resolve());\n\n      // fs.accessを常に成功するようにモック\n      fs.access.mockImplementation(() => Promise.resolve(undefined));\n\n      // child_process.execのモックを上書き\n      const { exec } = require('child_process');\n      exec.mockImplementation((cmd: string, cb: Function) => {\n        if (cb) {\n          cb(null, { stdout: '{\"success\":true}', stderr: '' });\n        }\n        return { stdout: '{\"success\":true}', stderr: '' };\n      });\n\n      // util.promisifyのモックを上書き\n      const util = require('util');\n      util.promisify.mockImplementation((fn: any) => {\n        return (...args: any[]) => {\n          return Promise.resolve({ stdout: '{\"success\":true}', stderr: '' });\n        };\n      });\n\n      const mockReq = new Request('http://localhost:3000/api/pptx/generate', {\n        method: 'POST',\n        body: JSON.stringify({\n          fileId: 'test-file',\n          translations: [{ text: 'Hello', translation: 'こんにちは' }],\n        }),\n      }) as NextRequest;\n\n      const response = await POST(mockReq);\n      expect(response.status).toBe(200);\n\n      const data = await response.json();\n      expect(data.success).toBe(true);\n      expect(data.downloadUrl).toBeDefined();\n      expect(data.downloadUrl).toContain('/api/download/');\n    });\n  });\n});\n"],"names":["jest","mock","promisify","fn","mockImplementation","args","Promise","resolve","stdout","stderr","getServerSession","user","id","email","authOptions","access","undefined","mkdir","writeFile","readdir","unlink","constants","X_OK","exec","cmd","callback","join","filePathManager","findActualFilePath","mockResolvedValue","describe","beforeEach","clearAllMocks","it","require","mockResolvedValueOnce","mockReq","Request","method","body","JSON","stringify","fileId","translations","text","translation","response","POST","expect","status","toBe","data","json","error","fs","path","includes","reject","Error","accessCount","mode","mockImplementationOnce","cb","toContain","util","success","downloadUrl","toBeDefined"],"mappings":"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"}