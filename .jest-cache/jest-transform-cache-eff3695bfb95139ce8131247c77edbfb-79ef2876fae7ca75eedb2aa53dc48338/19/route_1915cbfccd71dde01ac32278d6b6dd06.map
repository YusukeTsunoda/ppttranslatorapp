{"version":3,"sources":["/Users/yusuketsunoda/Documents/cursor/ppttranslatorapp/worktrees/cicd-setup/app/api/auth/reset-password/confirm/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport { prisma } from '@/lib/db/prisma';\nimport { hashPassword } from '@/lib/auth/password';\nimport { z } from 'zod';\n\nconst requestSchema = z.object({\n  token: z.string(),\n  password: z.string().min(8, 'パスワードは8文字以上で入力してください'),\n});\n\nexport async function POST(req: Request) {\n  try {\n    const body = await req.json();\n    const { token, password } = requestSchema.parse(body);\n\n    // 注意: 現在のスキーマでは resetToken と resetTokenExpires フィールドが存在しない可能性があります\n    // 実際のスキーマに合わせて修正が必要です\n\n    // トークンの検証 - ダミー実装\n    // 実際のアプリケーションでは、別の方法でトークンを検証する必要があります\n    const user = await prisma.user.findFirst({\n      where: {\n        email: 'dummy@example.com', // 実際には token に基づいてユーザーを検索する必要があります\n      },\n    });\n\n    if (!user) {\n      return NextResponse.json({ error: 'トークンが無効か有効期限が切れています' }, { status: 400 });\n    }\n\n    // パスワードのハッシュ化\n    const hashedPassword = await hashPassword(password);\n\n    // ユーザー情報の更新\n    await prisma.user.update({\n      where: { id: user.id },\n      data: {\n        password: hashedPassword,\n        updatedAt: new Date(),\n      },\n    });\n\n    // アクティビティログの記録 - ActivityLogモデルが存在しないためコメントアウト\n    /*\n    await prisma.activityLog.create({\n      data: {\n        userId: user.id,\n        action: 'update_password',\n        ipAddress: 'unknown',\n        metadata: {\n          timestamp: new Date().toISOString()\n        }\n      }\n    });\n    */\n\n    // 代わりにコンソールにログを出力\n    console.log('Password reset:', {\n      userId: user.id,\n      action: 'update_password',\n      timestamp: new Date().toISOString(),\n    });\n\n    return NextResponse.json({ success: true });\n  } catch (error) {\n    console.error('Password reset confirmation error:', error);\n    return NextResponse.json({ error: 'パスワードのリセットに失敗しました' }, { status: 500 });\n  }\n}\n"],"names":["POST","requestSchema","z","object","token","string","password","min","req","body","json","parse","user","prisma","findFirst","where","email","NextResponse","error","status","hashedPassword","hashPassword","update","id","data","updatedAt","Date","console","log","userId","action","timestamp","toISOString","success"],"mappings":";;;;+BAUsBA;;;eAAAA;;;wBAVO;wBACN;0BACM;qBACX;AAElB,MAAMC,gBAAgBC,MAAC,CAACC,MAAM,CAAC;IAC7BC,OAAOF,MAAC,CAACG,MAAM;IACfC,UAAUJ,MAAC,CAACG,MAAM,GAAGE,GAAG,CAAC,GAAG;AAC9B;AAEO,eAAeP,KAAKQ,GAAY;IACrC,IAAI;QACF,MAAMC,OAAO,MAAMD,IAAIE,IAAI;QAC3B,MAAM,EAAEN,KAAK,EAAEE,QAAQ,EAAE,GAAGL,cAAcU,KAAK,CAACF;QAEhD,mEAAmE;QACnE,sBAAsB;QAEtB,kBAAkB;QAClB,sCAAsC;QACtC,MAAMG,OAAO,MAAMC,cAAM,CAACD,IAAI,CAACE,SAAS,CAAC;YACvCC,OAAO;gBACLC,OAAO;YACT;QACF;QAEA,IAAI,CAACJ,MAAM;YACT,OAAOK,oBAAY,CAACP,IAAI,CAAC;gBAAEQ,OAAO;YAAsB,GAAG;gBAAEC,QAAQ;YAAI;QAC3E;QAEA,cAAc;QACd,MAAMC,iBAAiB,MAAMC,IAAAA,sBAAY,EAACf;QAE1C,YAAY;QACZ,MAAMO,cAAM,CAACD,IAAI,CAACU,MAAM,CAAC;YACvBP,OAAO;gBAAEQ,IAAIX,KAAKW,EAAE;YAAC;YACrBC,MAAM;gBACJlB,UAAUc;gBACVK,WAAW,IAAIC;YACjB;QACF;QAEA,+CAA+C;QAC/C;;;;;;;;;;;IAWA,GAEA,kBAAkB;QAClBC,QAAQC,GAAG,CAAC,mBAAmB;YAC7BC,QAAQjB,KAAKW,EAAE;YACfO,QAAQ;YACRC,WAAW,IAAIL,OAAOM,WAAW;QACnC;QAEA,OAAOf,oBAAY,CAACP,IAAI,CAAC;YAAEuB,SAAS;QAAK;IAC3C,EAAE,OAAOf,OAAO;QACdS,QAAQT,KAAK,CAAC,sCAAsCA;QACpD,OAAOD,oBAAY,CAACP,IAAI,CAAC;YAAEQ,OAAO;QAAoB,GAAG;YAAEC,QAAQ;QAAI;IACzE;AACF"}