7d0f9cfd132ba500a52b5829fc8cdbb3
"use strict";
// use-toastをモック化
jest.mock('@/components/ui/use-toast', ()=>({
        toast: jest.fn()
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _errorhandler = require("@/lib/utils/error-handler");
describe('ErrorHandler', ()=>{
    describe('AppError', ()=>{
        it('AppErrorインスタンスを正しく作成する', ()=>{
            const error = new _errorhandler.AppError({
                type: 'VALIDATION',
                message: 'バリデーションエラー',
                code: 'VALIDATION_ERROR',
                context: {
                    field: 'email'
                }
            });
            expect(error).toBeInstanceOf(Error);
            expect(error).toBeInstanceOf(_errorhandler.AppError);
            expect(error.type).toBe('VALIDATION');
            expect(error.message).toBe('バリデーションエラー');
            expect(error.code).toBe('VALIDATION_ERROR');
            expect(error.context).toEqual({
                field: 'email'
            });
        });
    });
    describe('isAppError', ()=>{
        it('AppErrorインスタンスの場合はtrueを返す', ()=>{
            const error = new _errorhandler.AppError({
                type: 'VALIDATION',
                message: 'バリデーションエラー'
            });
            expect((0, _errorhandler.isAppError)(error)).toBe(true);
        });
        it('通常のErrorインスタンスの場合はfalseを返す', ()=>{
            const error = new Error('通常のエラー');
            expect((0, _errorhandler.isAppError)(error)).toBe(false);
        });
        it('nullやundefinedの場合はfalseを返す', ()=>{
            expect((0, _errorhandler.isAppError)(null)).toBe(false);
            expect((0, _errorhandler.isAppError)(undefined)).toBe(false);
        });
    });
    describe('handleError', ()=>{
        it('AppErrorをそのまま返す', ()=>{
            const appError = new _errorhandler.AppError({
                type: 'VALIDATION',
                message: 'バリデーションエラー'
            });
            const result = (0, _errorhandler.handleError)(appError);
            expect(result).toBe(appError);
        });
        it('ネットワークエラーをAppErrorに変換する', ()=>{
            const networkError = new Error('network connection failed');
            networkError.name = 'NetworkError';
            const result = (0, _errorhandler.handleError)(networkError);
            expect(result).toBeInstanceOf(_errorhandler.AppError);
            expect(result.type).toBe('NETWORK');
            expect(result.originalError).toBe(networkError);
        });
        it('データベースエラーをAppErrorに変換する', ()=>{
            const dbError = new Error('prisma query failed');
            const result = (0, _errorhandler.handleError)(dbError);
            expect(result).toBeInstanceOf(_errorhandler.AppError);
            expect(result.type).toBe('SERVER');
            expect(result.code).toBe(_errorhandler.ErrorCodes.DATABASE_ERROR);
            expect(result.originalError).toBe(dbError);
        });
        it('APIエラーをAppErrorに変換する', ()=>{
            const apiError = new Error('api returned status 500');
            const result = (0, _errorhandler.handleError)(apiError);
            expect(result).toBeInstanceOf(_errorhandler.AppError);
            expect(result.type).toBe('SERVER');
            expect(result.code).toBe(_errorhandler.ErrorCodes.API_ERROR);
            expect(result.originalError).toBe(apiError);
        });
        it('不明なエラーをAppErrorに変換する', ()=>{
            const result = (0, _errorhandler.handleError)('これはエラーではない');
            expect(result).toBeInstanceOf(_errorhandler.AppError);
            expect(result.type).toBe('UNKNOWN');
            expect(result.code).toBe(_errorhandler.ErrorCodes.UNKNOWN_ERROR);
        });
    });
    describe('getErrorMessage', ()=>{
        it('Errorインスタンスからメッセージを取得する', ()=>{
            const error = new Error('テストエラーメッセージ');
            expect((0, _errorhandler.getErrorMessage)(error)).toBe('テストエラーメッセージ');
        });
        it('エラーではない値の場合はデフォルトメッセージを返す', ()=>{
            expect((0, _errorhandler.getErrorMessage)(null)).toBe('Unknown error occurred');
            expect((0, _errorhandler.getErrorMessage)(undefined)).toBe('Unknown error occurred');
            expect((0, _errorhandler.getErrorMessage)(123)).toBe('Unknown error occurred');
        });
    });
    describe('エラー作成関数', ()=>{
        it('createValidationError', ()=>{
            const error = (0, _errorhandler.createValidationError)('入力が無効です', {
                field: 'email'
            });
            expect(error).toBeInstanceOf(_errorhandler.AppError);
            expect(error.type).toBe('VALIDATION');
            expect(error.message).toBe('入力が無効です');
            expect(error.code).toBe(_errorhandler.ErrorCodes.VALIDATION_ERROR);
            expect(error.context).toEqual({
                field: 'email'
            });
        });
        it('createAuthError', ()=>{
            const error = (0, _errorhandler.createAuthError)('認証に失敗しました', 'INVALID_CREDENTIALS', {
                userId: '123'
            });
            expect(error).toBeInstanceOf(_errorhandler.AppError);
            expect(error.type).toBe('AUTH');
            expect(error.message).toBe('認証に失敗しました');
            expect(error.code).toBe('INVALID_CREDENTIALS');
            expect(error.context).toEqual({
                userId: '123'
            });
        });
        it('createForbiddenError', ()=>{
            const error = (0, _errorhandler.createForbiddenError)();
            expect(error).toBeInstanceOf(_errorhandler.AppError);
            expect(error.type).toBe('PERMISSION');
            expect(error.message).toBe('この操作を実行する権限がありません。');
            expect(error.code).toBe(_errorhandler.ErrorCodes.FORBIDDEN);
        });
        it('createNotFoundError', ()=>{
            const error = (0, _errorhandler.createNotFoundError)('ユーザーが見つかりません');
            expect(error).toBeInstanceOf(_errorhandler.AppError);
            expect(error.type).toBe('NOT_FOUND');
            expect(error.message).toBe('ユーザーが見つかりません');
            expect(error.code).toBe(_errorhandler.ErrorCodes.NOT_FOUND);
        });
        it('createRateLimitError', ()=>{
            const error = (0, _errorhandler.createRateLimitError)();
            expect(error).toBeInstanceOf(_errorhandler.AppError);
            expect(error.type).toBe('SERVER');
            expect(error.message).toBe('リクエスト制限を超えました。しばらく待ってから再試行してください。');
            expect(error.code).toBe(_errorhandler.ErrorCodes.RATE_LIMIT_EXCEEDED);
        });
        it('createDatabaseError', ()=>{
            const originalError = new Error('DB connection failed');
            const error = (0, _errorhandler.createDatabaseError)('データベースエラーが発生しました', originalError);
            expect(error).toBeInstanceOf(_errorhandler.AppError);
            expect(error.type).toBe('SERVER');
            expect(error.message).toBe('データベースエラーが発生しました');
            expect(error.code).toBe(_errorhandler.ErrorCodes.DATABASE_ERROR);
            expect(error.originalError).toBe(originalError);
        });
    });
    describe('mapSessionErrorToAppError', ()=>{
        it('EXPIREDエラーを変換する', ()=>{
            const error = (0, _errorhandler.mapSessionErrorToAppError)('EXPIRED', 'セッションエラー');
            expect(error).toBeInstanceOf(_errorhandler.AppError);
            expect(error.type).toBe('AUTH');
            expect(error.message).toBe('セッションの有効期限が切れました');
            expect(error.code).toBe('SESSION_EXPIRED');
        });
        it('INVALIDエラーを変換する', ()=>{
            const error = (0, _errorhandler.mapSessionErrorToAppError)('INVALID', 'セッションエラー');
            expect(error).toBeInstanceOf(_errorhandler.AppError);
            expect(error.type).toBe('AUTH');
            expect(error.message).toBe('無効なセッションです');
            expect(error.code).toBe('SESSION_INVALID');
        });
        it('UNAUTHORIZEDエラーを変換する', ()=>{
            const error = (0, _errorhandler.mapSessionErrorToAppError)('UNAUTHORIZED', 'セッションエラー');
            expect(error).toBeInstanceOf(_errorhandler.AppError);
            expect(error.type).toBe('AUTH');
            expect(error.message).toBe('認証が必要です');
            expect(error.code).toBe('UNAUTHORIZED');
        });
        it('NETWORKエラーを変換する', ()=>{
            var _error_originalError;
            const error = (0, _errorhandler.mapSessionErrorToAppError)('NETWORK', 'ネットワークエラー発生');
            expect(error).toBeInstanceOf(_errorhandler.AppError);
            expect(error.type).toBe('NETWORK');
            expect(error.message).toBe('ネットワークエラーが発生しました');
            expect(error.originalError).toBeInstanceOf(Error);
            expect((_error_originalError = error.originalError) === null || _error_originalError === void 0 ? void 0 : _error_originalError.message).toBe('ネットワークエラー発生');
        });
        it('未知のエラーを変換する', ()=>{
            const error = (0, _errorhandler.mapSessionErrorToAppError)('UNKNOWN', 'その他のエラー');
            expect(error).toBeInstanceOf(_errorhandler.AppError);
            expect(error.type).toBe('AUTH');
            expect(error.message).toBe('その他のエラー');
            expect(error.code).toBe('AUTH_ERROR');
        });
    });
});

//# sourceMappingURL=data:application/json;base64,