{"version":3,"sources":["/Users/yusuketsunoda/Documents/cursor/ppttranslatorapp/worktrees/cicd-setup/tests/lib/utils/error-handler.test.ts"],"sourcesContent":["import {\n  AppError,\n  ErrorCodes,\n  ErrorType,\n  createAuthError,\n  createDatabaseError,\n  createForbiddenError,\n  createNotFoundError,\n  createRateLimitError,\n  createValidationError,\n  getErrorMessage,\n  handleError,\n  isAppError,\n  mapSessionErrorToAppError,\n} from '@/lib/utils/error-handler';\n\n// use-toastをモック化\njest.mock('@/components/ui/use-toast', () => ({\n  toast: jest.fn(),\n}));\n\ndescribe('ErrorHandler', () => {\n  describe('AppError', () => {\n    it('AppErrorインスタンスを正しく作成する', () => {\n      const error = new AppError({\n        type: 'VALIDATION',\n        message: 'バリデーションエラー',\n        code: 'VALIDATION_ERROR',\n        context: { field: 'email' },\n      });\n\n      expect(error).toBeInstanceOf(Error);\n      expect(error).toBeInstanceOf(AppError);\n      expect(error.type).toBe('VALIDATION');\n      expect(error.message).toBe('バリデーションエラー');\n      expect(error.code).toBe('VALIDATION_ERROR');\n      expect(error.context).toEqual({ field: 'email' });\n    });\n  });\n\n  describe('isAppError', () => {\n    it('AppErrorインスタンスの場合はtrueを返す', () => {\n      const error = new AppError({\n        type: 'VALIDATION',\n        message: 'バリデーションエラー',\n      });\n\n      expect(isAppError(error)).toBe(true);\n    });\n\n    it('通常のErrorインスタンスの場合はfalseを返す', () => {\n      const error = new Error('通常のエラー');\n\n      expect(isAppError(error)).toBe(false);\n    });\n\n    it('nullやundefinedの場合はfalseを返す', () => {\n      expect(isAppError(null)).toBe(false);\n      expect(isAppError(undefined)).toBe(false);\n    });\n  });\n\n  describe('handleError', () => {\n    it('AppErrorをそのまま返す', () => {\n      const appError = new AppError({\n        type: 'VALIDATION',\n        message: 'バリデーションエラー',\n      });\n\n      const result = handleError(appError);\n\n      expect(result).toBe(appError);\n    });\n\n    it('ネットワークエラーをAppErrorに変換する', () => {\n      const networkError = new Error('network connection failed');\n      networkError.name = 'NetworkError';\n\n      const result = handleError(networkError);\n\n      expect(result).toBeInstanceOf(AppError);\n      expect(result.type).toBe('NETWORK');\n      expect(result.originalError).toBe(networkError);\n    });\n\n    it('データベースエラーをAppErrorに変換する', () => {\n      const dbError = new Error('prisma query failed');\n\n      const result = handleError(dbError);\n\n      expect(result).toBeInstanceOf(AppError);\n      expect(result.type).toBe('SERVER');\n      expect(result.code).toBe(ErrorCodes.DATABASE_ERROR);\n      expect(result.originalError).toBe(dbError);\n    });\n\n    it('APIエラーをAppErrorに変換する', () => {\n      const apiError = new Error('api returned status 500');\n\n      const result = handleError(apiError);\n\n      expect(result).toBeInstanceOf(AppError);\n      expect(result.type).toBe('SERVER');\n      expect(result.code).toBe(ErrorCodes.API_ERROR);\n      expect(result.originalError).toBe(apiError);\n    });\n\n    it('不明なエラーをAppErrorに変換する', () => {\n      const result = handleError('これはエラーではない');\n\n      expect(result).toBeInstanceOf(AppError);\n      expect(result.type).toBe('UNKNOWN');\n      expect(result.code).toBe(ErrorCodes.UNKNOWN_ERROR);\n    });\n  });\n\n  describe('getErrorMessage', () => {\n    it('Errorインスタンスからメッセージを取得する', () => {\n      const error = new Error('テストエラーメッセージ');\n\n      expect(getErrorMessage(error)).toBe('テストエラーメッセージ');\n    });\n\n    it('エラーではない値の場合はデフォルトメッセージを返す', () => {\n      expect(getErrorMessage(null)).toBe('Unknown error occurred');\n      expect(getErrorMessage(undefined)).toBe('Unknown error occurred');\n      expect(getErrorMessage(123)).toBe('Unknown error occurred');\n    });\n  });\n\n  describe('エラー作成関数', () => {\n    it('createValidationError', () => {\n      const error = createValidationError('入力が無効です', { field: 'email' });\n\n      expect(error).toBeInstanceOf(AppError);\n      expect(error.type).toBe('VALIDATION');\n      expect(error.message).toBe('入力が無効です');\n      expect(error.code).toBe(ErrorCodes.VALIDATION_ERROR);\n      expect(error.context).toEqual({ field: 'email' });\n    });\n\n    it('createAuthError', () => {\n      const error = createAuthError('認証に失敗しました', 'INVALID_CREDENTIALS', { userId: '123' });\n\n      expect(error).toBeInstanceOf(AppError);\n      expect(error.type).toBe('AUTH');\n      expect(error.message).toBe('認証に失敗しました');\n      expect(error.code).toBe('INVALID_CREDENTIALS');\n      expect(error.context).toEqual({ userId: '123' });\n    });\n\n    it('createForbiddenError', () => {\n      const error = createForbiddenError();\n\n      expect(error).toBeInstanceOf(AppError);\n      expect(error.type).toBe('PERMISSION');\n      expect(error.message).toBe('この操作を実行する権限がありません。');\n      expect(error.code).toBe(ErrorCodes.FORBIDDEN);\n    });\n\n    it('createNotFoundError', () => {\n      const error = createNotFoundError('ユーザーが見つかりません');\n\n      expect(error).toBeInstanceOf(AppError);\n      expect(error.type).toBe('NOT_FOUND');\n      expect(error.message).toBe('ユーザーが見つかりません');\n      expect(error.code).toBe(ErrorCodes.NOT_FOUND);\n    });\n\n    it('createRateLimitError', () => {\n      const error = createRateLimitError();\n\n      expect(error).toBeInstanceOf(AppError);\n      expect(error.type).toBe('SERVER');\n      expect(error.message).toBe('リクエスト制限を超えました。しばらく待ってから再試行してください。');\n      expect(error.code).toBe(ErrorCodes.RATE_LIMIT_EXCEEDED);\n    });\n\n    it('createDatabaseError', () => {\n      const originalError = new Error('DB connection failed');\n      const error = createDatabaseError('データベースエラーが発生しました', originalError);\n\n      expect(error).toBeInstanceOf(AppError);\n      expect(error.type).toBe('SERVER');\n      expect(error.message).toBe('データベースエラーが発生しました');\n      expect(error.code).toBe(ErrorCodes.DATABASE_ERROR);\n      expect(error.originalError).toBe(originalError);\n    });\n  });\n\n  describe('mapSessionErrorToAppError', () => {\n    it('EXPIREDエラーを変換する', () => {\n      const error = mapSessionErrorToAppError('EXPIRED', 'セッションエラー');\n\n      expect(error).toBeInstanceOf(AppError);\n      expect(error.type).toBe('AUTH');\n      expect(error.message).toBe('セッションの有効期限が切れました');\n      expect(error.code).toBe('SESSION_EXPIRED');\n    });\n\n    it('INVALIDエラーを変換する', () => {\n      const error = mapSessionErrorToAppError('INVALID', 'セッションエラー');\n\n      expect(error).toBeInstanceOf(AppError);\n      expect(error.type).toBe('AUTH');\n      expect(error.message).toBe('無効なセッションです');\n      expect(error.code).toBe('SESSION_INVALID');\n    });\n\n    it('UNAUTHORIZEDエラーを変換する', () => {\n      const error = mapSessionErrorToAppError('UNAUTHORIZED', 'セッションエラー');\n\n      expect(error).toBeInstanceOf(AppError);\n      expect(error.type).toBe('AUTH');\n      expect(error.message).toBe('認証が必要です');\n      expect(error.code).toBe('UNAUTHORIZED');\n    });\n\n    it('NETWORKエラーを変換する', () => {\n      const error = mapSessionErrorToAppError('NETWORK', 'ネットワークエラー発生');\n\n      expect(error).toBeInstanceOf(AppError);\n      expect(error.type).toBe('NETWORK');\n      expect(error.message).toBe('ネットワークエラーが発生しました');\n      expect(error.originalError).toBeInstanceOf(Error);\n      expect(error.originalError?.message).toBe('ネットワークエラー発生');\n    });\n\n    it('未知のエラーを変換する', () => {\n      const error = mapSessionErrorToAppError('UNKNOWN' as any, 'その他のエラー');\n\n      expect(error).toBeInstanceOf(AppError);\n      expect(error.type).toBe('AUTH');\n      expect(error.message).toBe('その他のエラー');\n      expect(error.code).toBe('AUTH_ERROR');\n    });\n  });\n});\n"],"names":["jest","mock","toast","fn","describe","it","error","AppError","type","message","code","context","field","expect","toBeInstanceOf","Error","toBe","toEqual","isAppError","undefined","appError","result","handleError","networkError","name","originalError","dbError","ErrorCodes","DATABASE_ERROR","apiError","API_ERROR","UNKNOWN_ERROR","getErrorMessage","createValidationError","VALIDATION_ERROR","createAuthError","userId","createForbiddenError","FORBIDDEN","createNotFoundError","NOT_FOUND","createRateLimitError","RATE_LIMIT_EXCEEDED","createDatabaseError","mapSessionErrorToAppError"],"mappings":"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"}