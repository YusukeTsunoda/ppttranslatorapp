{"version":3,"sources":["/Users/yusuketsunoda/Documents/cursor/ppttranslatorapp/worktrees/cicd-setup/app/api/auth/login/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { comparePasswords } from '@/lib/auth/session';\nimport { prisma } from '@/lib/db/prisma';\nimport { PrismaUser } from '@/types/prisma';\n\n// Node.jsランタイムを明示的に指定\n// bcryptjsを使用するため、Edge Runtimeでは動作しません\nexport const runtime = 'nodejs';\n\nexport async function POST(request: NextRequest) {\n  try {\n    // データベース接続確認\n    try {\n      await prisma.$connect();\n    } catch (error) {\n      console.error('Database connection error:', error);\n      return NextResponse.json({ error: 'データベース接続エラー' }, { status: 500 });\n    }\n\n    const { email, password } = await request.json();\n\n    if (!email || !password) {\n      return NextResponse.json({ error: 'メールアドレスとパスワードは必須です' }, { status: 400 });\n    }\n\n    const user = await prisma.user.findUnique({\n      where: { email },\n      select: {\n        id: true,\n        email: true,\n        password: true,\n        name: true,\n      },\n    });\n\n    if (!user || !user.password) {\n      return NextResponse.json({ error: 'メールアドレスまたはパスワードが正しくありません' }, { status: 401 });\n    }\n\n    const isValid = await comparePasswords(password, user.password);\n    if (!isValid) {\n      return NextResponse.json({ error: 'メールアドレスまたはパスワードが正しくありません' }, { status: 401 });\n    }\n\n    // ログイン成功時のアクティビティログを記録\n    // ActivityLogモデルが存在しないためコメントアウト\n    /*\n    await prisma.activityLog.create({\n      data: {\n        userId: user.id,\n        action: 'sign_in',\n        ipAddress: request.ip || 'unknown',\n        metadata: {\n          userAgent: request.headers.get('user-agent'),\n          timestamp: new Date().toISOString(),\n        },\n      },\n    });\n    */\n\n    // 代わりにコンソールにログを出力\n    console.log('User logged in:', {\n      userId: user.id,\n      action: 'sign_in',\n      ipAddress: request.ip || 'unknown',\n      userAgent: request.headers.get('user-agent'),\n      timestamp: new Date().toISOString(),\n    });\n\n    return NextResponse.json({\n      success: true,\n      user: {\n        id: user.id,\n        email: user.email,\n        name: user.name,\n      },\n    });\n  } catch (error) {\n    console.error('Login error:', error);\n    return NextResponse.json({ error: 'ログイン処理中にエラーが発生しました' }, { status: 500 });\n  } finally {\n    await prisma.$disconnect();\n  }\n}\n"],"names":["POST","runtime","request","prisma","$connect","error","console","NextResponse","json","status","email","password","user","findUnique","where","select","id","name","isValid","comparePasswords","log","userId","action","ipAddress","ip","userAgent","headers","get","timestamp","Date","toISOString","success","$disconnect"],"mappings":";;;;;;;;;;;IASsBA,IAAI;eAAJA;;IAFTC,OAAO;eAAPA;;;wBAP6B;yBACT;wBACV;AAKhB,MAAMA,UAAU;AAEhB,eAAeD,KAAKE,OAAoB;IAC7C,IAAI;QACF,aAAa;QACb,IAAI;YACF,MAAMC,cAAM,CAACC,QAAQ;QACvB,EAAE,OAAOC,OAAO;YACdC,QAAQD,KAAK,CAAC,8BAA8BA;YAC5C,OAAOE,oBAAY,CAACC,IAAI,CAAC;gBAAEH,OAAO;YAAc,GAAG;gBAAEI,QAAQ;YAAI;QACnE;QAEA,MAAM,EAAEC,KAAK,EAAEC,QAAQ,EAAE,GAAG,MAAMT,QAAQM,IAAI;QAE9C,IAAI,CAACE,SAAS,CAACC,UAAU;YACvB,OAAOJ,oBAAY,CAACC,IAAI,CAAC;gBAAEH,OAAO;YAAqB,GAAG;gBAAEI,QAAQ;YAAI;QAC1E;QAEA,MAAMG,OAAO,MAAMT,cAAM,CAACS,IAAI,CAACC,UAAU,CAAC;YACxCC,OAAO;gBAAEJ;YAAM;YACfK,QAAQ;gBACNC,IAAI;gBACJN,OAAO;gBACPC,UAAU;gBACVM,MAAM;YACR;QACF;QAEA,IAAI,CAACL,QAAQ,CAACA,KAAKD,QAAQ,EAAE;YAC3B,OAAOJ,oBAAY,CAACC,IAAI,CAAC;gBAAEH,OAAO;YAA2B,GAAG;gBAAEI,QAAQ;YAAI;QAChF;QAEA,MAAMS,UAAU,MAAMC,IAAAA,yBAAgB,EAACR,UAAUC,KAAKD,QAAQ;QAC9D,IAAI,CAACO,SAAS;YACZ,OAAOX,oBAAY,CAACC,IAAI,CAAC;gBAAEH,OAAO;YAA2B,GAAG;gBAAEI,QAAQ;YAAI;QAChF;QAEA,uBAAuB;QACvB,gCAAgC;QAChC;;;;;;;;;;;;IAYA,GAEA,kBAAkB;QAClBH,QAAQc,GAAG,CAAC,mBAAmB;YAC7BC,QAAQT,KAAKI,EAAE;YACfM,QAAQ;YACRC,WAAWrB,QAAQsB,EAAE,IAAI;YACzBC,WAAWvB,QAAQwB,OAAO,CAACC,GAAG,CAAC;YAC/BC,WAAW,IAAIC,OAAOC,WAAW;QACnC;QAEA,OAAOvB,oBAAY,CAACC,IAAI,CAAC;YACvBuB,SAAS;YACTnB,MAAM;gBACJI,IAAIJ,KAAKI,EAAE;gBACXN,OAAOE,KAAKF,KAAK;gBACjBO,MAAML,KAAKK,IAAI;YACjB;QACF;IACF,EAAE,OAAOZ,OAAO;QACdC,QAAQD,KAAK,CAAC,gBAAgBA;QAC9B,OAAOE,oBAAY,CAACC,IAAI,CAAC;YAAEH,OAAO;QAAqB,GAAG;YAAEI,QAAQ;QAAI;IAC1E,SAAU;QACR,MAAMN,cAAM,CAAC6B,WAAW;IAC1B;AACF"}