{"version":3,"sources":["/Users/yusuketsunoda/Documents/cursor/ppttranslatorapp/worktrees/cicd-setup/tests/lib/translation/concurrent.test.ts"],"sourcesContent":["import { describe, expect, it, jest } from '@jest/globals';\nimport { translateConcurrently } from '@/lib/translation/concurrent';\n\ndescribe('Translation Concurrent Processing', () => {\n  describe('translateConcurrently', () => {\n    it('複数のテキストを並行して翻訳する', async () => {\n      const texts = Array.from({ length: 10 }, (_, i) => `Text ${i + 1}`);\n      const sourceLanguage = 'en';\n      const targetLanguage = 'ja';\n\n      const result = await translateConcurrently(texts, sourceLanguage, targetLanguage);\n      expect(result).toHaveLength(texts.length);\n      result.forEach((translation, index) => {\n        expect(translation).toHaveProperty('original', texts[index]);\n        expect(translation).toHaveProperty('translated');\n      });\n    });\n\n    it('バッチサイズを指定して翻訳する', async () => {\n      const texts = Array.from({ length: 20 }, (_, i) => `Text ${i + 1}`);\n      const sourceLanguage = 'en';\n      const targetLanguage = 'ja';\n      const batchSize = 5;\n\n      const result = await translateConcurrently(texts, sourceLanguage, targetLanguage, { batchSize });\n      expect(result).toHaveLength(texts.length);\n    });\n\n    it('同時実行数を制限して翻訳する', async () => {\n      const texts = Array.from({ length: 15 }, (_, i) => `Text ${i + 1}`);\n      const sourceLanguage = 'en';\n      const targetLanguage = 'ja';\n      const concurrency = 3;\n\n      const result = await translateConcurrently(texts, sourceLanguage, targetLanguage, { concurrency });\n      expect(result).toHaveLength(texts.length);\n    });\n\n    it('エラー発生時にリトライする', async () => {\n      const texts = ['Text 1', 'Text 2', 'Text 3'];\n      const sourceLanguage = 'en';\n      const targetLanguage = 'ja';\n\n      // 最初の呼び出しでエラー、2回目で成功するモックを作成\n      let attempts = new Map();\n      const mockTranslate = jest.fn().mockImplementation((text) => {\n        const currentAttempt = (attempts.get(text) || 0) + 1;\n        attempts.set(text, currentAttempt);\n\n        if (currentAttempt === 1) {\n          throw new Error('Temporary error');\n        }\n        return Promise.resolve({ original: text, translated: `Translated ${text}` });\n      });\n\n      const result = await translateConcurrently(texts, sourceLanguage, targetLanguage, {\n        translate: mockTranslate,\n        maxRetries: 3,\n      });\n\n      expect(result).toHaveLength(texts.length);\n      texts.forEach(text => {\n        expect(attempts.get(text)).toBe(2); // 各テキストが2回試行されたことを確認\n      });\n    });\n\n    it('部分的な失敗を処理する', async () => {\n      const texts = ['Text 1', 'Text 2', 'Text 3'];\n      const sourceLanguage = 'en';\n      const targetLanguage = 'ja';\n\n      // Text 2の翻訳が常に失敗するモックを作成\n      const mockTranslate = jest.fn().mockImplementation((text) => {\n        if (text === 'Text 2') {\n          throw new Error('Persistent error');\n        }\n        return Promise.resolve({ original: text, translated: `Translated ${text}` });\n      });\n\n      const result = await translateConcurrently(texts, sourceLanguage, targetLanguage, {\n        translate: mockTranslate,\n        maxRetries: 2,\n      });\n\n      expect(result).toHaveLength(2); // 失敗したテキストを除外\n      expect(result.map(r => r.original)).not.toContain('Text 2');\n    });\n\n    it('進捗コールバックを呼び出す', async () => {\n      const texts = Array.from({ length: 5 }, (_, i) => `Text ${i + 1}`);\n      const sourceLanguage = 'en';\n      const targetLanguage = 'ja';\n      const onProgress = jest.fn();\n\n      await translateConcurrently(texts, sourceLanguage, targetLanguage, { onProgress });\n\n      expect(onProgress).toHaveBeenCalledTimes(texts.length);\n      expect(onProgress).toHaveBeenLastCalledWith(1); // 最後は100%\n    });\n\n    it('キャンセル時に実行中の翻訳を中止する', async () => {\n      const texts = Array.from({ length: 10 }, (_, i) => `Text ${i + 1}`);\n      const sourceLanguage = 'en';\n      const targetLanguage = 'ja';\n      const abortController = new AbortController();\n\n      // 翻訳を開始して即座にキャンセル\n      setTimeout(() => abortController.abort(), 100);\n\n      await expect(\n        translateConcurrently(texts, sourceLanguage, targetLanguage, { signal: abortController.signal })\n      ).rejects.toThrow('Translation cancelled');\n    });\n\n    it('メモリ使用量を監視する', async () => {\n      const texts = Array.from({ length: 100 }, (_, i) => `Text ${i + 1}`);\n      const sourceLanguage = 'en';\n      const targetLanguage = 'ja';\n      const memoryLimit = 100 * 1024 * 1024; // 100MB\n\n      const result = await translateConcurrently(texts, sourceLanguage, targetLanguage, {\n        memoryLimit,\n        onMemoryExceeded: jest.fn(),\n      });\n\n      expect(result).toHaveLength(texts.length);\n    });\n  });\n}); "],"names":["describe","it","texts","Array","from","length","_","i","sourceLanguage","targetLanguage","result","translateConcurrently","expect","toHaveLength","forEach","translation","index","toHaveProperty","batchSize","concurrency","attempts","Map","mockTranslate","jest","fn","mockImplementation","text","currentAttempt","get","set","Error","Promise","resolve","original","translated","translate","maxRetries","toBe","map","r","not","toContain","onProgress","toHaveBeenCalledTimes","toHaveBeenLastCalledWith","abortController","AbortController","setTimeout","abort","signal","rejects","toThrow","memoryLimit","onMemoryExceeded"],"mappings":";;;;yBAA2C;4BACL;AAEtCA,IAAAA,iBAAQ,EAAC,qCAAqC;IAC5CA,IAAAA,iBAAQ,EAAC,yBAAyB;QAChCC,IAAAA,WAAE,EAAC,oBAAoB;YACrB,MAAMC,QAAQC,MAAMC,IAAI,CAAC;gBAAEC,QAAQ;YAAG,GAAG,CAACC,GAAGC,IAAM,CAAC,KAAK,EAAEA,IAAI,GAAG;YAClE,MAAMC,iBAAiB;YACvB,MAAMC,iBAAiB;YAEvB,MAAMC,SAAS,MAAMC,IAAAA,iCAAqB,EAACT,OAAOM,gBAAgBC;YAClEG,IAAAA,eAAM,EAACF,QAAQG,YAAY,CAACX,MAAMG,MAAM;YACxCK,OAAOI,OAAO,CAAC,CAACC,aAAaC;gBAC3BJ,IAAAA,eAAM,EAACG,aAAaE,cAAc,CAAC,YAAYf,KAAK,CAACc,MAAM;gBAC3DJ,IAAAA,eAAM,EAACG,aAAaE,cAAc,CAAC;YACrC;QACF;QAEAhB,IAAAA,WAAE,EAAC,mBAAmB;YACpB,MAAMC,QAAQC,MAAMC,IAAI,CAAC;gBAAEC,QAAQ;YAAG,GAAG,CAACC,GAAGC,IAAM,CAAC,KAAK,EAAEA,IAAI,GAAG;YAClE,MAAMC,iBAAiB;YACvB,MAAMC,iBAAiB;YACvB,MAAMS,YAAY;YAElB,MAAMR,SAAS,MAAMC,IAAAA,iCAAqB,EAACT,OAAOM,gBAAgBC,gBAAgB;gBAAES;YAAU;YAC9FN,IAAAA,eAAM,EAACF,QAAQG,YAAY,CAACX,MAAMG,MAAM;QAC1C;QAEAJ,IAAAA,WAAE,EAAC,kBAAkB;YACnB,MAAMC,QAAQC,MAAMC,IAAI,CAAC;gBAAEC,QAAQ;YAAG,GAAG,CAACC,GAAGC,IAAM,CAAC,KAAK,EAAEA,IAAI,GAAG;YAClE,MAAMC,iBAAiB;YACvB,MAAMC,iBAAiB;YACvB,MAAMU,cAAc;YAEpB,MAAMT,SAAS,MAAMC,IAAAA,iCAAqB,EAACT,OAAOM,gBAAgBC,gBAAgB;gBAAEU;YAAY;YAChGP,IAAAA,eAAM,EAACF,QAAQG,YAAY,CAACX,MAAMG,MAAM;QAC1C;QAEAJ,IAAAA,WAAE,EAAC,iBAAiB;YAClB,MAAMC,QAAQ;gBAAC;gBAAU;gBAAU;aAAS;YAC5C,MAAMM,iBAAiB;YACvB,MAAMC,iBAAiB;YAEvB,6BAA6B;YAC7B,IAAIW,WAAW,IAAIC;YACnB,MAAMC,gBAAgBC,aAAI,CAACC,EAAE,GAAGC,kBAAkB,CAAC,CAACC;gBAClD,MAAMC,iBAAiB,AAACP,CAAAA,SAASQ,GAAG,CAACF,SAAS,CAAA,IAAK;gBACnDN,SAASS,GAAG,CAACH,MAAMC;gBAEnB,IAAIA,mBAAmB,GAAG;oBACxB,MAAM,IAAIG,MAAM;gBAClB;gBACA,OAAOC,QAAQC,OAAO,CAAC;oBAAEC,UAAUP;oBAAMQ,YAAY,CAAC,WAAW,EAAER,MAAM;gBAAC;YAC5E;YAEA,MAAMhB,SAAS,MAAMC,IAAAA,iCAAqB,EAACT,OAAOM,gBAAgBC,gBAAgB;gBAChF0B,WAAWb;gBACXc,YAAY;YACd;YAEAxB,IAAAA,eAAM,EAACF,QAAQG,YAAY,CAACX,MAAMG,MAAM;YACxCH,MAAMY,OAAO,CAACY,CAAAA;gBACZd,IAAAA,eAAM,EAACQ,SAASQ,GAAG,CAACF,OAAOW,IAAI,CAAC,IAAI,qBAAqB;YAC3D;QACF;QAEApC,IAAAA,WAAE,EAAC,eAAe;YAChB,MAAMC,QAAQ;gBAAC;gBAAU;gBAAU;aAAS;YAC5C,MAAMM,iBAAiB;YACvB,MAAMC,iBAAiB;YAEvB,yBAAyB;YACzB,MAAMa,gBAAgBC,aAAI,CAACC,EAAE,GAAGC,kBAAkB,CAAC,CAACC;gBAClD,IAAIA,SAAS,UAAU;oBACrB,MAAM,IAAII,MAAM;gBAClB;gBACA,OAAOC,QAAQC,OAAO,CAAC;oBAAEC,UAAUP;oBAAMQ,YAAY,CAAC,WAAW,EAAER,MAAM;gBAAC;YAC5E;YAEA,MAAMhB,SAAS,MAAMC,IAAAA,iCAAqB,EAACT,OAAOM,gBAAgBC,gBAAgB;gBAChF0B,WAAWb;gBACXc,YAAY;YACd;YAEAxB,IAAAA,eAAM,EAACF,QAAQG,YAAY,CAAC,IAAI,cAAc;YAC9CD,IAAAA,eAAM,EAACF,OAAO4B,GAAG,CAACC,CAAAA,IAAKA,EAAEN,QAAQ,GAAGO,GAAG,CAACC,SAAS,CAAC;QACpD;QAEAxC,IAAAA,WAAE,EAAC,iBAAiB;YAClB,MAAMC,QAAQC,MAAMC,IAAI,CAAC;gBAAEC,QAAQ;YAAE,GAAG,CAACC,GAAGC,IAAM,CAAC,KAAK,EAAEA,IAAI,GAAG;YACjE,MAAMC,iBAAiB;YACvB,MAAMC,iBAAiB;YACvB,MAAMiC,aAAanB,aAAI,CAACC,EAAE;YAE1B,MAAMb,IAAAA,iCAAqB,EAACT,OAAOM,gBAAgBC,gBAAgB;gBAAEiC;YAAW;YAEhF9B,IAAAA,eAAM,EAAC8B,YAAYC,qBAAqB,CAACzC,MAAMG,MAAM;YACrDO,IAAAA,eAAM,EAAC8B,YAAYE,wBAAwB,CAAC,IAAI,UAAU;QAC5D;QAEA3C,IAAAA,WAAE,EAAC,sBAAsB;YACvB,MAAMC,QAAQC,MAAMC,IAAI,CAAC;gBAAEC,QAAQ;YAAG,GAAG,CAACC,GAAGC,IAAM,CAAC,KAAK,EAAEA,IAAI,GAAG;YAClE,MAAMC,iBAAiB;YACvB,MAAMC,iBAAiB;YACvB,MAAMoC,kBAAkB,IAAIC;YAE5B,kBAAkB;YAClBC,WAAW,IAAMF,gBAAgBG,KAAK,IAAI;YAE1C,MAAMpC,IAAAA,eAAM,EACVD,IAAAA,iCAAqB,EAACT,OAAOM,gBAAgBC,gBAAgB;gBAAEwC,QAAQJ,gBAAgBI,MAAM;YAAC,IAC9FC,OAAO,CAACC,OAAO,CAAC;QACpB;QAEAlD,IAAAA,WAAE,EAAC,eAAe;YAChB,MAAMC,QAAQC,MAAMC,IAAI,CAAC;gBAAEC,QAAQ;YAAI,GAAG,CAACC,GAAGC,IAAM,CAAC,KAAK,EAAEA,IAAI,GAAG;YACnE,MAAMC,iBAAiB;YACvB,MAAMC,iBAAiB;YACvB,MAAM2C,cAAc,MAAM,OAAO,MAAM,QAAQ;YAE/C,MAAM1C,SAAS,MAAMC,IAAAA,iCAAqB,EAACT,OAAOM,gBAAgBC,gBAAgB;gBAChF2C;gBACAC,kBAAkB9B,aAAI,CAACC,EAAE;YAC3B;YAEAZ,IAAAA,eAAM,EAACF,QAAQG,YAAY,CAACX,MAAMG,MAAM;QAC1C;IACF;AACF"}