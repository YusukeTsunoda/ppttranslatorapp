{"version":3,"sources":["/Users/yusuketsunoda/Documents/cursor/ppttranslatorapp/worktrees/cicd-setup/tests/app/translate/components/Translation.test.tsx"],"sourcesContent":["/// <reference path=\"../../../jest.d.ts\" />\n\nimport React from 'react';\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react';\nimport { Translation, type TranslationProps, type TextItemType, type TranslationType } from '@/app/(dashboard)/translate/components/Translation';\nimport '@testing-library/jest-dom';\n\n// モックをインポートパスの問題を回避するために更新\njest.mock('@/app/(dashboard)/translate/components/Translation', () => {\n  const React = require('react') as typeof import('react');\n  return {\n    Translation: (props: TranslationProps) => {\n      // 実装をそのまま置き換えるモック\n      const { textItem, onUpdate, onCancel, targetLanguages } = props;\n      const [translationValues, setTranslationValues] = React.useState<Record<string, string>>({});\n\n      React.useEffect(() => {\n        const initialValues: Record<string, string> = {};\n        targetLanguages.forEach((lang: string) => {\n          const translation = textItem.translations.find((t: any) => t.language === lang);\n          initialValues[lang] = translation ? translation.text : '';\n        });\n        setTranslationValues(initialValues);\n      }, [textItem, targetLanguages]);\n\n      return (\n        <div className=\"space-y-4 p-4 border rounded-lg\">\n          <div>\n            <h3 className=\"font-medium mb-2\">元のテキスト:</h3>\n            <p>{textItem.text}</p>\n          </div>\n          <div className=\"space-y-3\">\n            <h3 className=\"font-medium\">翻訳:</h3>\n            {targetLanguages.map((lang: string) => (\n              <div key={lang} className=\"space-y-1\">\n                <label htmlFor={`translation-${lang}`}>{lang === 'en' ? '英語' : '中国語'}</label>\n                <input\n                  id={`translation-${lang}`}\n                  value={translationValues[lang] || ''}\n                  onChange={(e) => setTranslationValues({ ...translationValues, [lang]: e.target.value })}\n                />\n              </div>\n            ))}\n          </div>\n          <div className=\"flex space-x-2 justify-end pt-2\">\n            <button onClick={onCancel}>キャンセル</button>\n            <button\n              onClick={() => {\n                // 自動翻訳処理\n                global.fetch('/api/translate', {\n                  method: 'POST',\n                  headers: { 'Content-Type': 'application/json' },\n                  body: JSON.stringify({\n                    text: textItem.text,\n                    sourceLang: 'ja',\n                    targetLangs: targetLanguages,\n                  }),\n                })\n                  .then((res) => {\n                    if (!res.ok) throw new Error('Translation API error');\n                    return res.json();\n                  })\n                  .then((data) => {\n                    setTranslationValues(data.translations);\n                  })\n                  .catch((error) => {\n                    require('@/components/ui/use-toast').useToast().toast({\n                      variant: 'destructive',\n                      title: 'エラー',\n                      description: '翻訳処理中にエラーが発生しました',\n                    });\n                  });\n              }}\n            >\n              自動翻訳\n            </button>\n            <button\n              onClick={() => {\n                const updatedTranslations = targetLanguages.map((lang: string) => ({\n                  language: lang,\n                  text: translationValues[lang] || '',\n                }));\n                onUpdate({ ...textItem, translations: updatedTranslations });\n              }}\n            >\n              保存\n            </button>\n          </div>\n        </div>\n      );\n    },\n  };\n});\n\n// モックデータ\nconst mockTextItem = {\n  id: 'text1',\n  text: 'サンプルテキスト',\n  position: { x: 100, y: 100, width: 200, height: 50 },\n  translations: [\n    { language: 'en', text: 'Sample text' },\n    { language: 'zh', text: '样本文本' },\n  ],\n};\n\n// モック関数\nconst mockOnUpdate = jest.fn();\nconst mockOnCancel = jest.fn();\n\n// トーストモックをセットアップ\njest.mock('@/components/ui/use-toast', () => ({\n  useToast: jest.fn().mockReturnValue({\n    toast: jest.fn(),\n  }),\n  toast: jest.fn(),\n}));\n\ndescribe('Translation', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n    global.fetch = jest.fn();\n  });\n\n  it('テキスト項目と翻訳フォームを表示する', () => {\n    render(\n      <Translation\n        textItem={mockTextItem}\n        onUpdate={mockOnUpdate}\n        onCancel={mockOnCancel}\n        targetLanguages={['en', 'zh']}\n      />,\n    );\n\n    // 元のテキストが表示されていることを確認\n    expect(screen.getByText('サンプルテキスト')).toBeInTheDocument();\n\n    // 各言語の入力フィールドが表示されていることを確認\n    const englishInput = screen.getByLabelText('英語');\n    const chineseInput = screen.getByLabelText('中国語');\n\n    expect(englishInput).toBeInTheDocument();\n    expect(chineseInput).toBeInTheDocument();\n\n    // 初期値が設定されていることを確認\n    expect(englishInput).toHaveValue('Sample text');\n    expect(chineseInput).toHaveValue('样本文本');\n\n    // 保存ボタンとキャンセルボタンが表示されていることを確認\n    expect(screen.getByRole('button', { name: '保存' })).toBeInTheDocument();\n    expect(screen.getByRole('button', { name: 'キャンセル' })).toBeInTheDocument();\n  });\n\n  it('翻訳文を編集して保存できる', async () => {\n    render(\n      <Translation\n        textItem={mockTextItem}\n        onUpdate={mockOnUpdate}\n        onCancel={mockOnCancel}\n        targetLanguages={['en', 'zh']}\n      />,\n    );\n\n    // 英語の翻訳を編集\n    const englishInput = screen.getByLabelText('英語');\n    fireEvent.change(englishInput, { target: { value: 'Updated sample text' } });\n\n    // 保存ボタンをクリック\n    fireEvent.click(screen.getByRole('button', { name: '保存' }));\n\n    // onUpdate関数が正しいパラメータで呼び出されたことを確認\n    await waitFor(() => {\n      expect(mockOnUpdate).toHaveBeenCalledWith({\n        ...mockTextItem,\n        translations: [\n          { language: 'en', text: 'Updated sample text' },\n          { language: 'zh', text: '样本文本' },\n        ],\n      });\n    });\n  });\n\n  it('キャンセルボタンをクリックするとonCancelが呼び出される', () => {\n    render(\n      <Translation\n        textItem={mockTextItem}\n        onUpdate={mockOnUpdate}\n        onCancel={mockOnCancel}\n        targetLanguages={['en', 'zh']}\n      />,\n    );\n\n    // キャンセルボタンをクリック\n    fireEvent.click(screen.getByRole('button', { name: 'キャンセル' }));\n\n    // onCancel関数が呼び出されたことを確認\n    expect(mockOnCancel).toHaveBeenCalled();\n  });\n\n  it('自動翻訳ボタンが機能する', async () => {\n    (global.fetch as jest.Mock).mockResolvedValue({\n      ok: true,\n      json: () => Promise.resolve({ translations: { en: 'Auto translated text', zh: '自动翻译文本' } }),\n    });\n\n    render(\n      <Translation\n        textItem={mockTextItem}\n        onUpdate={mockOnUpdate}\n        onCancel={mockOnCancel}\n        targetLanguages={['en', 'zh']}\n      />,\n    );\n\n    // 自動翻訳ボタンをクリック\n    fireEvent.click(screen.getByRole('button', { name: '自動翻訳' }));\n\n    // API呼び出しが行われたことを確認\n    await waitFor(() => {\n      expect(global.fetch).toHaveBeenCalled();\n      const fetchArgs = (global.fetch as jest.Mock).mock.calls[0];\n      expect(fetchArgs[0]).toContain('/api/translate');\n      expect(fetchArgs[1]).toHaveProperty('method', 'POST');\n      expect(fetchArgs[1]).toHaveProperty('headers');\n      expect(fetchArgs[1].headers).toHaveProperty('Content-Type', 'application/json');\n      expect(fetchArgs[1]).toHaveProperty('body');\n    });\n  });\n\n  it('翻訳APIがエラーを返した場合にトーストを表示する', async () => {\n    global.fetch = jest.fn().mockResolvedValue({\n      ok: false,\n      status: 500,\n      statusText: 'Internal Server Error',\n    });\n\n    const { toast } = require('@/components/ui/use-toast').useToast();\n\n    render(\n      <Translation\n        textItem={mockTextItem}\n        onUpdate={mockOnUpdate}\n        onCancel={mockOnCancel}\n        targetLanguages={['en', 'zh']}\n      />,\n    );\n\n    // 自動翻訳ボタンをクリック\n    fireEvent.click(screen.getByRole('button', { name: '自動翻訳' }));\n\n    // エラートーストが表示されたことを確認\n    await waitFor(() => {\n      expect(toast).toHaveBeenCalledWith(\n        expect.objectContaining({\n          variant: 'destructive',\n          title: expect.stringContaining('エラー'),\n        }),\n      );\n    });\n  });\n\n  it('翻訳が存在しない言語の場合、空の入力フィールドを表示する', () => {\n    const textItemWithMissingTranslation = {\n      ...mockTextItem,\n      translations: [{ language: 'en', text: 'Sample text' }], // 中国語の翻訳がない\n    };\n\n    render(\n      <Translation\n        textItem={textItemWithMissingTranslation}\n        onUpdate={mockOnUpdate}\n        onCancel={mockOnCancel}\n        targetLanguages={['en', 'zh']}\n      />,\n    );\n\n    // 英語の入力フィールドに値が設定されていることを確認\n    expect(screen.getByLabelText('英語')).toHaveValue('Sample text');\n\n    // 中国語の入力フィールドが空であることを確認\n    expect(screen.getByLabelText('中国語')).toHaveValue('');\n  });\n});\n"],"names":["jest","mock","React","require","Translation","props","textItem","onUpdate","onCancel","targetLanguages","translationValues","setTranslationValues","useState","useEffect","initialValues","forEach","lang","translation","translations","find","t","language","text","div","className","h3","p","map","label","htmlFor","input","id","value","onChange","e","target","button","onClick","global","fetch","method","headers","body","JSON","stringify","sourceLang","targetLangs","then","res","ok","Error","json","data","catch","error","useToast","toast","variant","title","description","updatedTranslations","fn","mockReturnValue","mockTextItem","position","x","y","width","height","mockOnUpdate","mockOnCancel","describe","beforeEach","clearAllMocks","it","render","expect","screen","getByText","toBeInTheDocument","englishInput","getByLabelText","chineseInput","toHaveValue","getByRole","name","fireEvent","change","click","waitFor","toHaveBeenCalledWith","toHaveBeenCalled","mockResolvedValue","Promise","resolve","en","zh","fetchArgs","calls","toContain","toHaveProperty","status","statusText","objectContaining","stringContaining","textItemWithMissingTranslation"],"mappings":"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"}