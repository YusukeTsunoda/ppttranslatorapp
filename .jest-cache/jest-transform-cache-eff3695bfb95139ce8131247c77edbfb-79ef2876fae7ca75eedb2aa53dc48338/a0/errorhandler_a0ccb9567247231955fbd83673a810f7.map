{"version":3,"sources":["/Users/yusuketsunoda/Documents/cursor/ppttranslatorapp/worktrees/cicd-setup/lib/translation/error-handler.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\n\nexport interface TranslationError extends Error {\n  name: string;\n  status?: number;\n  retryable?: boolean;\n  retryAfter?: number;\n}\n\n/**\n * エラーレスポンスを生成する\n * @param error エラーオブジェクト\n * @returns NextResponse\n */\nexport function handleTranslationError(error: TranslationError): NextResponse {\n  console.error('Translation error:', error);\n\n  // エラーの種類に応じたステータスコードとメッセージを設定\n  let status = error.status || 500;\n  let message = error.message;\n  let retryAfter: number | undefined;\n\n  switch (error.name) {\n    case 'RateLimitError':\n      status = 429;\n      message = 'リクエスト制限を超えました。しばらく待ってから再試行してください。';\n      retryAfter = error.retryAfter || 60;\n      break;\n    case 'TimeoutError':\n      status = 504;\n      message = 'リクエストがタイムアウトしました。再試行してください。';\n      break;\n    case 'NetworkError':\n      status = 503;\n      message = 'ネットワークエラーが発生しました。再試行してください。';\n      break;\n    case 'ValidationError':\n      status = 400;\n      message = error.message || 'リクエストが不正です。';\n      break;\n    case 'AuthenticationError':\n      status = 401;\n      message = '認証が必要です。';\n      break;\n    case 'AuthorizationError':\n      status = 403;\n      message = 'アクセスが拒否されました。';\n      break;\n    case 'NotFoundError':\n      status = 404;\n      message = 'リソースが見つかりません。';\n      break;\n    default:\n      status = 500;\n      message = '内部サーバーエラーが発生しました。';\n  }\n\n  // エラーレスポンスを生成\n  const response = {\n    error: message,\n    code: error.name,\n    retryable: error.retryable ?? isRetryableError(status),\n  };\n\n  // レスポンスヘッダーを設定\n  const headers = new Headers({\n    'Content-Type': 'application/json',\n    'Cache-Control': 'no-store',\n  });\n\n  // Retry-Afterヘッダーを設定（必要な場合）\n  if (retryAfter) {\n    headers.set('Retry-After', retryAfter.toString());\n  }\n\n  return new NextResponse(JSON.stringify(response), {\n    status,\n    headers,\n  });\n}\n\n/**\n * リトライ可能なエラーかどうかを判定する\n * @param status HTTPステータスコード\n * @returns リトライ可能な場合はtrue\n */\nfunction isRetryableError(status: number): boolean {\n  return [408, 429, 500, 502, 503, 504].includes(status);\n}\n\n/**\n * リトライ処理を実行する\n * @param operation 実行する処理\n * @param maxRetries 最大リトライ回数\n * @param baseDelay 基本待機時間（ミリ秒）\n * @returns 処理結果\n */\nexport async function withRetry<T>(\n  operation: () => Promise<T>,\n  maxRetries: number = 3,\n  baseDelay: number = 1000\n): Promise<T> {\n  let lastError: Error | null = null;\n  \n  for (let attempt = 0; attempt < maxRetries; attempt++) {\n    try {\n      return await operation();\n    } catch (error) {\n      lastError = error as Error;\n      \n      // リトライ不可能なエラーの場合は即座にスロー\n      if (error instanceof Error && !isRetryableError(getErrorStatus(error))) {\n        throw error;\n      }\n      \n      // 最後の試行でエラーの場合はスロー\n      if (attempt === maxRetries - 1) {\n        throw new Error('最大リトライ回数を超えました。後でもう一度お試しください。');\n      }\n      \n      // 指数バックオフで待機\n      const delay = baseDelay * Math.pow(2, attempt);\n      await new Promise(resolve => setTimeout(resolve, delay));\n    }\n  }\n  \n  throw lastError || new Error('Unknown error');\n}\n\n/**\n * エラーからHTTPステータスコードを取得する\n * @param error エラーオブジェクト\n * @returns HTTPステータスコード\n */\nfunction getErrorStatus(error: Error): number {\n  if ('status' in error && typeof (error as any).status === 'number') {\n    return (error as any).status;\n  }\n  \n  switch (error.name) {\n    case 'RateLimitError':\n      return 429;\n    case 'TimeoutError':\n      return 504;\n    case 'NetworkError':\n      return 503;\n    case 'ValidationError':\n      return 400;\n    case 'AuthenticationError':\n      return 401;\n    case 'AuthorizationError':\n      return 403;\n    case 'NotFoundError':\n      return 404;\n    default:\n      return 500;\n  }\n}\n\n/**\n * エラーログを記録する\n * @param error エラーオブジェクト\n * @param context エラーコンテキスト\n */\nexport function logTranslationError(error: Error, context: Record<string, any> = {}): void {\n  const errorLog = {\n    timestamp: new Date().toISOString(),\n    name: error.name,\n    message: error.message,\n    stack: error.stack,\n    context,\n  };\n\n  // エラーログを出力（本番環境では適切なロギングサービスに送信）\n  console.error('Translation Error:', JSON.stringify(errorLog, null, 2));\n} "],"names":["handleTranslationError","logTranslationError","withRetry","error","console","status","message","retryAfter","name","response","code","retryable","isRetryableError","headers","Headers","set","toString","NextResponse","JSON","stringify","includes","operation","maxRetries","baseDelay","lastError","attempt","Error","getErrorStatus","delay","Math","pow","Promise","resolve","setTimeout","context","errorLog","timestamp","Date","toISOString","stack"],"mappings":"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"}