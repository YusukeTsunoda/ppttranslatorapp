afb10b21c0cf459049d84c3b77c6d991
"use strict";
// Anthropic SDKのモック
jest.mock('@anthropic-ai/sdk');
// getServerSessionのモック
jest.mock('next-auth', ()=>({
        getServerSession: jest.fn()
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _interop_require_default = require("@swc/helpers/_/_interop_require_default");
const _route = require("@/app/api/translate/route");
const _server = require("next/server");
const _nextauth = require("next-auth");
const _client = require("@prisma/client");
const _mockSetup = require("@/tests/helpers/mockSetup");
const _sdk = /*#__PURE__*/ _interop_require_default._(require("@anthropic-ai/sdk"));
// console.logのモック
const mockConsoleLog = jest.spyOn(console, 'log').mockImplementation();
const mockConsoleError = jest.spyOn(console, 'error').mockImplementation();
const prismaMock = (0, _mockSetup.createPrismaMock)();
const getServerSessionMock = _nextauth.getServerSession;
describe('POST /api/translate', ()=>{
    const mockAnthropicMessages = {
        create: jest.fn()
    };
    beforeEach(()=>{
        (0, _mockSetup.clearAllMocks)();
        process.env.ANTHROPIC_API_KEY = 'test-api-key';
        _sdk.default.mockImplementation(()=>({
                messages: mockAnthropicMessages
            }));
    });
    afterEach(()=>{
        mockConsoleLog.mockClear();
        mockConsoleError.mockClear();
    });
    it('should translate text successfully', async ()=>{
        const mockUser = (0, _mockSetup.createMockUser)({
            id: 'test-user-id',
            isPremium: true,
            credits: 10
        });
        getServerSessionMock.mockResolvedValue({
            user: mockUser
        });
        const mockFile = {
            id: 'test-file-id',
            name: 'test.pptx'
        };
        prismaMock.file.findUnique.mockResolvedValue(mockFile);
        prismaMock.user.findUnique.mockResolvedValue(mockUser);
        prismaMock.user.update.mockResolvedValue({
            ...mockUser,
            credits: 9
        });
        prismaMock.translationHistory.create.mockResolvedValue({
            id: 'test-history-id',
            userId: mockUser.id,
            fileId: mockFile.id,
            status: _client.TranslationStatus.COMPLETED
        });
        mockAnthropicMessages.create.mockResolvedValue({
            content: [
                {
                    text: '翻訳されたテキスト'
                }
            ]
        });
        const requestBody = {
            texts: [
                'Hello'
            ],
            sourceLang: _client.Language.EN,
            targetLang: _client.Language.JA,
            model: 'claude-3-haiku-20240307',
            fileName: 'test.pptx',
            fileId: 'test-file-id',
            slides: [
                {
                    index: 0,
                    texts: [
                        {
                            text: 'Hello',
                            index: 0
                        }
                    ]
                }
            ]
        };
        const req = new _server.NextRequest('http://localhost/api/translate', {
            method: 'POST',
            body: JSON.stringify(requestBody),
            headers: {
                'Content-Type': 'application/json'
            }
        });
        const response = await (0, _route.POST)(req);
        const responseBody = await response.json();
        expect(response.status).toBe(200);
        expect(responseBody.success).toBe(true);
        expect(responseBody.translatedSlides).toHaveLength(1);
        expect(responseBody.translatedSlides[0].translations[0].text).toBe('翻訳されたテキスト');
        expect(prismaMock.user.update).toHaveBeenCalledWith({
            where: {
                id: mockUser.id
            },
            data: {
                credits: {
                    decrement: 1
                }
            }
        });
    });
    it('should return 401 if not authenticated', async ()=>{
        getServerSessionMock.mockResolvedValue(null);
        const req = new _server.NextRequest('http://localhost/api/translate', {
            method: 'POST',
            body: JSON.stringify({}),
            headers: {
                'Content-Type': 'application/json'
            }
        });
        const response = await (0, _route.POST)(req);
        const responseBody = await response.json();
        expect(response.status).toBe(401);
        expect(responseBody.error).toBe('認証が必要です');
    });
    it('should return 400 if fileId is missing', async ()=>{
        const mockUser = (0, _mockSetup.createMockUser)({
            id: 'test-user-id'
        });
        getServerSessionMock.mockResolvedValue({
            user: mockUser
        });
        const req = new _server.NextRequest('http://localhost/api/translate', {
            method: 'POST',
            body: JSON.stringify({
                texts: [
                    'Hello'
                ],
                sourceLang: _client.Language.EN,
                targetLang: _client.Language.JA
            }),
            headers: {
                'Content-Type': 'application/json'
            }
        });
        const response = await (0, _route.POST)(req);
        const responseBody = await response.json();
        expect(response.status).toBe(400);
        expect(responseBody.error).toBe('ファイルIDが必要です');
    });
    it('should return 404 if file not found', async ()=>{
        const mockUser = (0, _mockSetup.createMockUser)({
            id: 'test-user-id'
        });
        getServerSessionMock.mockResolvedValue({
            user: mockUser
        });
        prismaMock.file.findUnique.mockResolvedValue(null);
        const req = new _server.NextRequest('http://localhost/api/translate', {
            method: 'POST',
            body: JSON.stringify({
                texts: [
                    'Hello'
                ],
                sourceLang: _client.Language.EN,
                targetLang: _client.Language.JA,
                fileId: 'non-existent-file-id'
            }),
            headers: {
                'Content-Type': 'application/json'
            }
        });
        const response = await (0, _route.POST)(req);
        const responseBody = await response.json();
        expect(response.status).toBe(404);
        expect(responseBody.error).toBe('指定されたファイルIDがデータベースに存在しません');
    });
    it('should return 403 if user has insufficient credits', async ()=>{
        const mockUser = (0, _mockSetup.createMockUser)({
            id: 'test-user-id',
            credits: 0
        });
        getServerSessionMock.mockResolvedValue({
            user: mockUser
        });
        const mockFile = {
            id: 'test-file-id',
            name: 'test.pptx'
        };
        prismaMock.file.findUnique.mockResolvedValue(mockFile);
        prismaMock.user.findUnique.mockResolvedValue(mockUser);
        const req = new _server.NextRequest('http://localhost/api/translate', {
            method: 'POST',
            body: JSON.stringify({
                texts: [
                    'Hello'
                ],
                sourceLang: _client.Language.EN,
                targetLang: _client.Language.JA,
                fileId: 'test-file-id',
                slides: [
                    {
                        index: 0,
                        texts: [
                            {
                                text: 'Hello',
                                index: 0
                            }
                        ]
                    }
                ]
            }),
            headers: {
                'Content-Type': 'application/json'
            }
        });
        const response = await (0, _route.POST)(req);
        const responseBody = await response.json();
        expect(response.status).toBe(403);
        expect(responseBody.error).toBe('クレジットが不足しています');
        expect(responseBody.availableCredits).toBe(0);
        expect(responseBody.requiredCredits).toBe(1);
    });
    it('should use default model for non-premium users', async ()=>{
        const mockUser = (0, _mockSetup.createMockUser)({
            id: 'test-user-id',
            isPremium: false,
            credits: 10
        });
        getServerSessionMock.mockResolvedValue({
            user: mockUser
        });
        const mockFile = {
            id: 'test-file-id',
            name: 'test.pptx'
        };
        prismaMock.file.findUnique.mockResolvedValue(mockFile);
        prismaMock.user.findUnique.mockResolvedValue(mockUser);
        prismaMock.user.update.mockResolvedValue({
            ...mockUser,
            credits: 9
        });
        mockAnthropicMessages.create.mockResolvedValue({
            content: [
                {
                    text: '翻訳されたテキスト'
                }
            ]
        });
        const req = new _server.NextRequest('http://localhost/api/translate', {
            method: 'POST',
            body: JSON.stringify({
                texts: [
                    'Hello'
                ],
                sourceLang: _client.Language.EN,
                targetLang: _client.Language.JA,
                model: 'claude-3-opus-20240229',
                fileId: 'test-file-id',
                slides: [
                    {
                        index: 0,
                        texts: [
                            {
                                text: 'Hello',
                                index: 0
                            }
                        ]
                    }
                ]
            }),
            headers: {
                'Content-Type': 'application/json'
            }
        });
        await (0, _route.POST)(req);
        expect(mockAnthropicMessages.create).toHaveBeenCalledWith(expect.objectContaining({
            model: 'claude-3-haiku-20240307'
        }));
    });
    it('should handle translation API errors', async ()=>{
        const mockUser = (0, _mockSetup.createMockUser)({
            id: 'test-user-id',
            credits: 10
        });
        getServerSessionMock.mockResolvedValue({
            user: mockUser
        });
        const mockFile = {
            id: 'test-file-id',
            name: 'test.pptx'
        };
        prismaMock.file.findUnique.mockResolvedValue(mockFile);
        prismaMock.user.findUnique.mockResolvedValue(mockUser);
        mockAnthropicMessages.create.mockRejectedValue(new Error('API Error'));
        const req = new _server.NextRequest('http://localhost/api/translate', {
            method: 'POST',
            body: JSON.stringify({
                texts: [
                    'Hello'
                ],
                sourceLang: _client.Language.EN,
                targetLang: _client.Language.JA,
                fileId: 'test-file-id',
                slides: [
                    {
                        index: 0,
                        texts: [
                            {
                                text: 'Hello',
                                index: 0
                            }
                        ]
                    }
                ]
            }),
            headers: {
                'Content-Type': 'application/json'
            }
        });
        const response = await (0, _route.POST)(req);
        const responseBody = await response.json();
        expect(response.status).toBe(500);
        expect(responseBody.error).toBe('翻訳に失敗しました');
        expect(prismaMock.translationHistory.create).toHaveBeenCalledWith(expect.objectContaining({
            status: _client.TranslationStatus.FAILED,
            errorMessage: expect.any(String)
        }));
    });
});

//# sourceMappingURL=data:application/json;base64,