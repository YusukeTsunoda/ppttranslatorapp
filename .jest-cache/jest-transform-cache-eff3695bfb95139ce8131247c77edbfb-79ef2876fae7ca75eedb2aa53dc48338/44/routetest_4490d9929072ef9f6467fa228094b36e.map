{"version":3,"sources":["/Users/yusuketsunoda/Documents/cursor/ppttranslatorapp/worktrees/cicd-setup/tests/api/translate/route.test.ts"],"sourcesContent":["import { POST } from '@/app/api/translate/route';\nimport { NextRequest } from 'next/server';\nimport { getServerSession } from 'next-auth';\nimport { Language, TranslationStatus } from '@prisma/client';\nimport { createPrismaMock, createMockUser, clearAllMocks } from '@/tests/helpers/mockSetup';\nimport Anthropic from '@anthropic-ai/sdk';\n\n// Anthropic SDKのモック\njest.mock('@anthropic-ai/sdk');\n\n// getServerSessionのモック\njest.mock('next-auth', () => ({\n  getServerSession: jest.fn(),\n}));\n\n// console.logのモック\nconst mockConsoleLog = jest.spyOn(console, 'log').mockImplementation();\nconst mockConsoleError = jest.spyOn(console, 'error').mockImplementation();\n\nconst prismaMock = createPrismaMock();\nconst getServerSessionMock = getServerSession as jest.Mock;\n\ndescribe('POST /api/translate', () => {\n  const mockAnthropicMessages = {\n    create: jest.fn(),\n  };\n\n  beforeEach(() => {\n    clearAllMocks();\n    process.env.ANTHROPIC_API_KEY = 'test-api-key';\n    (Anthropic as jest.Mock).mockImplementation(() => ({\n      messages: mockAnthropicMessages,\n    }));\n  });\n\n  afterEach(() => {\n    mockConsoleLog.mockClear();\n    mockConsoleError.mockClear();\n  });\n\n  it('should translate text successfully', async () => {\n    const mockUser = createMockUser({\n      id: 'test-user-id',\n      isPremium: true,\n      credits: 10,\n    });\n\n    getServerSessionMock.mockResolvedValue({\n      user: mockUser,\n    });\n\n    const mockFile = {\n      id: 'test-file-id',\n      name: 'test.pptx',\n    };\n\n    prismaMock.file.findUnique.mockResolvedValue(mockFile);\n    prismaMock.user.findUnique.mockResolvedValue(mockUser);\n    prismaMock.user.update.mockResolvedValue({ ...mockUser, credits: 9 });\n    prismaMock.translationHistory.create.mockResolvedValue({\n      id: 'test-history-id',\n      userId: mockUser.id,\n      fileId: mockFile.id,\n      status: TranslationStatus.COMPLETED,\n    });\n\n    mockAnthropicMessages.create.mockResolvedValue({\n      content: [{ text: '翻訳されたテキスト' }],\n    });\n\n    const requestBody = {\n      texts: ['Hello'],\n      sourceLang: Language.EN,\n      targetLang: Language.JA,\n      model: 'claude-3-haiku-20240307',\n      fileName: 'test.pptx',\n      fileId: 'test-file-id',\n      slides: [\n        {\n          index: 0,\n          texts: [{ text: 'Hello', index: 0 }],\n        },\n      ],\n    };\n\n    const req = new NextRequest('http://localhost/api/translate', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: { 'Content-Type': 'application/json' },\n    });\n\n    const response = await POST(req);\n    const responseBody = await response.json();\n\n    expect(response.status).toBe(200);\n    expect(responseBody.success).toBe(true);\n    expect(responseBody.translatedSlides).toHaveLength(1);\n    expect(responseBody.translatedSlides[0].translations[0].text).toBe('翻訳されたテキスト');\n    expect(prismaMock.user.update).toHaveBeenCalledWith({\n      where: { id: mockUser.id },\n      data: { credits: { decrement: 1 } },\n    });\n  });\n\n  it('should return 401 if not authenticated', async () => {\n    getServerSessionMock.mockResolvedValue(null);\n\n    const req = new NextRequest('http://localhost/api/translate', {\n      method: 'POST',\n      body: JSON.stringify({}),\n      headers: { 'Content-Type': 'application/json' },\n    });\n\n    const response = await POST(req);\n    const responseBody = await response.json();\n\n    expect(response.status).toBe(401);\n    expect(responseBody.error).toBe('認証が必要です');\n  });\n\n  it('should return 400 if fileId is missing', async () => {\n    const mockUser = createMockUser({ id: 'test-user-id' });\n    getServerSessionMock.mockResolvedValue({ user: mockUser });\n\n    const req = new NextRequest('http://localhost/api/translate', {\n      method: 'POST',\n      body: JSON.stringify({\n        texts: ['Hello'],\n        sourceLang: Language.EN,\n        targetLang: Language.JA,\n      }),\n      headers: { 'Content-Type': 'application/json' },\n    });\n\n    const response = await POST(req);\n    const responseBody = await response.json();\n\n    expect(response.status).toBe(400);\n    expect(responseBody.error).toBe('ファイルIDが必要です');\n  });\n\n  it('should return 404 if file not found', async () => {\n    const mockUser = createMockUser({ id: 'test-user-id' });\n    getServerSessionMock.mockResolvedValue({ user: mockUser });\n\n    prismaMock.file.findUnique.mockResolvedValue(null);\n\n    const req = new NextRequest('http://localhost/api/translate', {\n      method: 'POST',\n      body: JSON.stringify({\n        texts: ['Hello'],\n        sourceLang: Language.EN,\n        targetLang: Language.JA,\n        fileId: 'non-existent-file-id',\n      }),\n      headers: { 'Content-Type': 'application/json' },\n    });\n\n    const response = await POST(req);\n    const responseBody = await response.json();\n\n    expect(response.status).toBe(404);\n    expect(responseBody.error).toBe('指定されたファイルIDがデータベースに存在しません');\n  });\n\n  it('should return 403 if user has insufficient credits', async () => {\n    const mockUser = createMockUser({\n      id: 'test-user-id',\n      credits: 0,\n    });\n\n    getServerSessionMock.mockResolvedValue({ user: mockUser });\n\n    const mockFile = {\n      id: 'test-file-id',\n      name: 'test.pptx',\n    };\n\n    prismaMock.file.findUnique.mockResolvedValue(mockFile);\n    prismaMock.user.findUnique.mockResolvedValue(mockUser);\n\n    const req = new NextRequest('http://localhost/api/translate', {\n      method: 'POST',\n      body: JSON.stringify({\n        texts: ['Hello'],\n        sourceLang: Language.EN,\n        targetLang: Language.JA,\n        fileId: 'test-file-id',\n        slides: [{ index: 0, texts: [{ text: 'Hello', index: 0 }] }],\n      }),\n      headers: { 'Content-Type': 'application/json' },\n    });\n\n    const response = await POST(req);\n    const responseBody = await response.json();\n\n    expect(response.status).toBe(403);\n    expect(responseBody.error).toBe('クレジットが不足しています');\n    expect(responseBody.availableCredits).toBe(0);\n    expect(responseBody.requiredCredits).toBe(1);\n  });\n\n  it('should use default model for non-premium users', async () => {\n    const mockUser = createMockUser({\n      id: 'test-user-id',\n      isPremium: false,\n      credits: 10,\n    });\n\n    getServerSessionMock.mockResolvedValue({ user: mockUser });\n\n    const mockFile = {\n      id: 'test-file-id',\n      name: 'test.pptx',\n    };\n\n    prismaMock.file.findUnique.mockResolvedValue(mockFile);\n    prismaMock.user.findUnique.mockResolvedValue(mockUser);\n    prismaMock.user.update.mockResolvedValue({ ...mockUser, credits: 9 });\n    mockAnthropicMessages.create.mockResolvedValue({\n      content: [{ text: '翻訳されたテキスト' }],\n    });\n\n    const req = new NextRequest('http://localhost/api/translate', {\n      method: 'POST',\n      body: JSON.stringify({\n        texts: ['Hello'],\n        sourceLang: Language.EN,\n        targetLang: Language.JA,\n        model: 'claude-3-opus-20240229',\n        fileId: 'test-file-id',\n        slides: [{ index: 0, texts: [{ text: 'Hello', index: 0 }] }],\n      }),\n      headers: { 'Content-Type': 'application/json' },\n    });\n\n    await POST(req);\n\n    expect(mockAnthropicMessages.create).toHaveBeenCalledWith(\n      expect.objectContaining({\n        model: 'claude-3-haiku-20240307',\n      })\n    );\n  });\n\n  it('should handle translation API errors', async () => {\n    const mockUser = createMockUser({\n      id: 'test-user-id',\n      credits: 10,\n    });\n\n    getServerSessionMock.mockResolvedValue({ user: mockUser });\n\n    const mockFile = {\n      id: 'test-file-id',\n      name: 'test.pptx',\n    };\n\n    prismaMock.file.findUnique.mockResolvedValue(mockFile);\n    prismaMock.user.findUnique.mockResolvedValue(mockUser);\n    mockAnthropicMessages.create.mockRejectedValue(new Error('API Error'));\n\n    const req = new NextRequest('http://localhost/api/translate', {\n      method: 'POST',\n      body: JSON.stringify({\n        texts: ['Hello'],\n        sourceLang: Language.EN,\n        targetLang: Language.JA,\n        fileId: 'test-file-id',\n        slides: [{ index: 0, texts: [{ text: 'Hello', index: 0 }] }],\n      }),\n      headers: { 'Content-Type': 'application/json' },\n    });\n\n    const response = await POST(req);\n    const responseBody = await response.json();\n\n    expect(response.status).toBe(500);\n    expect(responseBody.error).toBe('翻訳に失敗しました');\n    expect(prismaMock.translationHistory.create).toHaveBeenCalledWith(\n      expect.objectContaining({\n        status: TranslationStatus.FAILED,\n        errorMessage: expect.any(String),\n      })\n    );\n  });\n}); "],"names":["jest","mock","getServerSession","fn","mockConsoleLog","spyOn","console","mockImplementation","mockConsoleError","prismaMock","createPrismaMock","getServerSessionMock","describe","mockAnthropicMessages","create","beforeEach","clearAllMocks","process","env","ANTHROPIC_API_KEY","Anthropic","messages","afterEach","mockClear","it","mockUser","createMockUser","id","isPremium","credits","mockResolvedValue","user","mockFile","name","file","findUnique","update","translationHistory","userId","fileId","status","TranslationStatus","COMPLETED","content","text","requestBody","texts","sourceLang","Language","EN","targetLang","JA","model","fileName","slides","index","req","NextRequest","method","body","JSON","stringify","headers","response","POST","responseBody","json","expect","toBe","success","translatedSlides","toHaveLength","translations","toHaveBeenCalledWith","where","data","decrement","error","availableCredits","requiredCredits","objectContaining","mockRejectedValue","Error","FAILED","errorMessage","any","String"],"mappings":"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"}