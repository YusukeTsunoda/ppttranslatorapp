{"version":3,"sources":["/Users/yusuketsunoda/Documents/cursor/ppttranslatorapp/worktrees/cicd-setup/tests/utils/db.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client';\nimport { execSync } from 'child_process';\nimport { mockPrisma } from './test-utils';\n\nconst prisma = new PrismaClient();\n\nexport const setupTestDatabase = async () => {\n  try {\n    // DockerコンテナのステータスチェックとDB接続テスト\n    execSync('docker-compose -f docker-compose.test.yml ps test-db | grep \"Up\"');\n    await prisma.$connect();\n\n    // テストデータベースのリセット\n    await prisma.$executeRaw`DROP SCHEMA IF EXISTS public CASCADE`;\n    await prisma.$executeRaw`CREATE SCHEMA public`;\n\n    // マイグレーションの実行\n    execSync('npx prisma migrate deploy');\n\n    // テスト用の初期データ投入\n    await seedTestData();\n\n  } catch (error) {\n    console.error('テストデータベースのセットアップに失敗しました:', error);\n    throw error;\n  }\n};\n\nexport const teardownTestDatabase = async () => {\n  try {\n    await prisma.$disconnect();\n  } catch (error) {\n    console.error('テストデータベースの切断に失敗しました:', error);\n    throw error;\n  }\n};\n\nexport const seedTestData = async () => {\n  try {\n    // テスト用管理者アカウントの作成\n    await prisma.user.create({\n      data: {\n        email: 'admin@example.com',\n        name: 'Test Admin',\n        role: 'ADMIN',\n      },\n    });\n\n    // テスト用一般ユーザーアカウントの作成\n    await prisma.user.create({\n      data: {\n        email: 'user@example.com',\n        name: 'Test User',\n        role: 'USER',\n      },\n    });\n\n  } catch (error) {\n    console.error('テストデータの投入に失敗しました:', error);\n    throw error;\n  }\n};\n\n// トランザクションヘルパー\nexport const withTestTransaction = async (callback: (tx: PrismaClient) => Promise<void>) => {\n  try {\n    await prisma.$transaction(async (tx) => {\n      await callback(tx as unknown as PrismaClient);\n    });\n  } catch (error) {\n    console.error('トランザクションの実行に失敗しました:', error);\n    throw error;\n  }\n}; "],"names":["seedTestData","setupTestDatabase","teardownTestDatabase","withTestTransaction","prisma","PrismaClient","execSync","$connect","$executeRaw","error","console","$disconnect","user","create","data","email","name","role","callback","$transaction","tx"],"mappings":";;;;;;;;;;;IAqCaA,YAAY;eAAZA;;IA/BAC,iBAAiB;eAAjBA;;IAsBAC,oBAAoB;eAApBA;;IAoCAC,mBAAmB;eAAnBA;;;wBAhEgB;+BACJ;AAGzB,MAAMC,SAAS,IAAIC,oBAAY;AAExB,MAAMJ,oBAAoB;IAC/B,IAAI;QACF,+BAA+B;QAC/BK,IAAAA,uBAAQ,EAAC;QACT,MAAMF,OAAOG,QAAQ;QAErB,iBAAiB;QACjB,MAAMH,OAAOI,WAAW,CAAC,oCAAoC,CAAC;QAC9D,MAAMJ,OAAOI,WAAW,CAAC,oBAAoB,CAAC;QAE9C,cAAc;QACdF,IAAAA,uBAAQ,EAAC;QAET,eAAe;QACf,MAAMN;IAER,EAAE,OAAOS,OAAO;QACdC,QAAQD,KAAK,CAAC,4BAA4BA;QAC1C,MAAMA;IACR;AACF;AAEO,MAAMP,uBAAuB;IAClC,IAAI;QACF,MAAME,OAAOO,WAAW;IAC1B,EAAE,OAAOF,OAAO;QACdC,QAAQD,KAAK,CAAC,wBAAwBA;QACtC,MAAMA;IACR;AACF;AAEO,MAAMT,eAAe;IAC1B,IAAI;QACF,kBAAkB;QAClB,MAAMI,OAAOQ,IAAI,CAACC,MAAM,CAAC;YACvBC,MAAM;gBACJC,OAAO;gBACPC,MAAM;gBACNC,MAAM;YACR;QACF;QAEA,qBAAqB;QACrB,MAAMb,OAAOQ,IAAI,CAACC,MAAM,CAAC;YACvBC,MAAM;gBACJC,OAAO;gBACPC,MAAM;gBACNC,MAAM;YACR;QACF;IAEF,EAAE,OAAOR,OAAO;QACdC,QAAQD,KAAK,CAAC,qBAAqBA;QACnC,MAAMA;IACR;AACF;AAGO,MAAMN,sBAAsB,OAAOe;IACxC,IAAI;QACF,MAAMd,OAAOe,YAAY,CAAC,OAAOC;YAC/B,MAAMF,SAASE;QACjB;IACF,EAAE,OAAOX,OAAO;QACdC,QAAQD,KAAK,CAAC,uBAAuBA;QACrC,MAAMA;IACR;AACF"}