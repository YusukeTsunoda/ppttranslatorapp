d2be87c3fee0fffd09c3178c9e95621d
"use strict";
jest.mock('@/lib/db/prisma', ()=>({
        prisma: prismaMock
    }));
// hashPasswordのモック
jest.mock('@/lib/auth/password', ()=>({
        hashPassword: jest.fn()
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jestmockextended = require("jest-mock-extended");
const _client = require("@prisma/client");
const _mockSetup = require("@/tests/helpers/mockSetup");
const _password = require("@/lib/auth/password");
const _route = require("@/app/api/auth/register/route");
// Prismaのモックを直接設定
const prismaMock = (0, _jestmockextended.mockDeep)();
// Jestのexpect関数をモック化しないようにする
const actualExpect = global.expect;
const hashPasswordMock = _password.hashPassword;
describe('POST /api/auth/register', ()=>{
    beforeEach(()=>{
        (0, _mockSetup.clearAllMocks)();
        hashPasswordMock.mockResolvedValue('hashed_password');
    });
    it('should register a new user successfully', async ()=>{
        const requestBody = {
            email: 'test@example.com',
            password: 'password123',
            name: 'Test User'
        };
        const req = new Request('http://localhost/api/auth/register', {
            method: 'POST',
            body: JSON.stringify(requestBody),
            headers: {
                'Content-Type': 'application/json'
            }
        });
        prismaMock.user.findUnique.mockResolvedValue(null);
        const createdUser = (0, _mockSetup.createMockUser)({
            id: 'generated-uuid',
            email: requestBody.email,
            name: requestBody.name,
            password: 'hashed_password',
            credits: 15,
            role: _client.UserRole.USER
        });
        prismaMock.user.create.mockResolvedValue(createdUser);
        const response = await (0, _route.POST)(req);
        const responseBody = await response.json();
        actualExpect(response.status).toBe(200);
        actualExpect(responseBody.success).toBe(true);
        actualExpect(responseBody.userId).toBe(createdUser.id);
        actualExpect(prismaMock.user.findUnique).toHaveBeenCalledWith({
            where: {
                email: requestBody.email
            }
        });
        actualExpect(hashPasswordMock).toHaveBeenCalledWith(requestBody.password);
        actualExpect(prismaMock.user.create).toHaveBeenCalledWith(actualExpect.objectContaining({
            data: actualExpect.objectContaining({
                email: requestBody.email,
                name: requestBody.name,
                password: 'hashed_password',
                credits: 15
            })
        }));
    });
    it('should return 400 if email already exists', async ()=>{
        const requestBody = {
            email: 'existing@example.com',
            password: 'password123',
            name: 'Existing User'
        };
        const req = new Request('http://localhost/api/auth/register', {
            method: 'POST',
            body: JSON.stringify(requestBody),
            headers: {
                'Content-Type': 'application/json'
            }
        });
        prismaMock.user.findUnique.mockResolvedValue((0, _mockSetup.createMockUser)({
            email: requestBody.email,
            name: requestBody.name
        }));
        const response = await (0, _route.POST)(req);
        const responseBody = await response.json();
        actualExpect(response.status).toBe(400);
        actualExpect(responseBody.error).toBe('このメールアドレスは既に登録されています');
        actualExpect(prismaMock.user.create).not.toHaveBeenCalled();
    });
    it('should return 500 if hashing password fails', async ()=>{
        const requestBody = {
            email: 'test2@example.com',
            password: 'password123',
            name: 'Test User 2'
        };
        const req = new Request('http://localhost/api/auth/register', {
            method: 'POST',
            body: JSON.stringify(requestBody),
            headers: {
                'Content-Type': 'application/json'
            }
        });
        prismaMock.user.findUnique.mockResolvedValue(null);
        hashPasswordMock.mockRejectedValue(new Error('Hashing failed'));
        const response = await (0, _route.POST)(req);
        const responseBody = await response.json();
        actualExpect(response.status).toBe(500);
        actualExpect(responseBody.error).toBe('ユーザー登録中にエラーが発生しました');
        actualExpect(prismaMock.user.create).not.toHaveBeenCalled();
    });
    it('should return 500 if creating user fails', async ()=>{
        const requestBody = {
            email: 'test3@example.com',
            password: 'password123',
            name: 'Test User 3'
        };
        const req = new Request('http://localhost/api/auth/register', {
            method: 'POST',
            body: JSON.stringify(requestBody),
            headers: {
                'Content-Type': 'application/json'
            }
        });
        prismaMock.user.findUnique.mockResolvedValue(null);
        hashPasswordMock.mockResolvedValue('hashed_password_for_test3');
        prismaMock.user.create.mockRejectedValue(new Error('DB error'));
        const response = await (0, _route.POST)(req);
        const responseBody = await response.json();
        actualExpect(response.status).toBe(500);
        actualExpect(responseBody.error).toBe('ユーザー登録中にエラーが発生しました');
    });
// TODO: リクエストボディのバリデーションに関するテストケースを追加
// (例: email, password, name が欠落している場合など。現状のAPIは自前でバリデーションしていないため、
//  NextRequestの挙動や、将来的なバリデーションライブラリ導入時にテスト追加を検討)
});

//# sourceMappingURL=data:application/json;base64,