{"version":3,"sources":["/Users/yusuketsunoda/Documents/cursor/ppttranslatorapp/worktrees/cicd-setup/tests/api/auth/session.test.ts"],"sourcesContent":["// next-authのモック化\njest.mock('next-auth', () => ({\n  getServerSession: jest.fn(),\n}));\n\n// auth-optionsのモック化\njest.mock('@/lib/auth/auth-options', () => ({\n  authOptions: {}\n}));\n\n// モジュールのインポートはモック化後に行う\nimport { GET } from '@/app/api/auth/session/route';\nimport { NextResponse } from 'next/server';\nimport { getServerSession } from 'next-auth';\nimport { authOptions } from '@/lib/auth/auth-options';\nimport { createMockUser, clearAllMocks } from '@/tests/helpers/mockSetup';\n\n// getServerSessionのモックを直接使用\nconst getServerSessionMock = getServerSession as jest.Mock;\n\ndescribe('GET /api/auth/session', () => {\n  beforeEach(() => {\n    clearAllMocks();\n  });\n\n  it('should return user information if session exists', async () => {\n    const mockUser = createMockUser({\n      id: 'user123',\n      name: 'Test User',\n      email: 'test@example.com',\n    });\n    // モックの返値を設定\n    getServerSessionMock.mockResolvedValueOnce({\n      user: mockUser,\n      expires: 'some-date',\n    });\n\n    const response = await GET();\n    const responseBody = await response.json();\n\n    expect(response.status).toBe(200);\n    expect(responseBody.user).toEqual(mockUser);\n    expect(getServerSessionMock).toHaveBeenCalledWith(authOptions);\n  });\n\n  it('should return null for user if session does not exist', async () => {\n    getServerSessionMock.mockResolvedValueOnce(null);\n\n    const response = await GET();\n    const responseBody = await response.json();\n\n    expect(response.status).toBe(200);\n    expect(responseBody.user).toBeNull();\n    expect(getServerSessionMock).toHaveBeenCalledWith(authOptions);\n  });\n\n  it('should return null for user if getServerSession throws an error', async () => {\n    getServerSessionMock.mockRejectedValueOnce(new Error('Session fetch error'));\n\n    const response = await GET();\n    const responseBody = await response.json();\n\n    expect(response.status).toBe(200); // APIはエラーをキャッチしてnullを返す\n    expect(responseBody.user).toBeNull();\n    expect(getServerSessionMock).toHaveBeenCalledWith(authOptions);\n  });\n}); "],"names":["jest","mock","getServerSession","fn","authOptions","getServerSessionMock","describe","beforeEach","clearAllMocks","it","mockUser","createMockUser","id","name","email","mockResolvedValueOnce","user","expires","response","GET","responseBody","json","expect","status","toBe","toEqual","toHaveBeenCalledWith","toBeNull","mockRejectedValueOnce","Error"],"mappings":"AAAA,iBAAiB;;AACjBA,KAAKC,IAAI,CAAC,aAAa,IAAO,CAAA;QAC5BC,kBAAkBF,KAAKG,EAAE;IAC3B,CAAA;AAEA,oBAAoB;AACpBH,KAAKC,IAAI,CAAC,2BAA2B,IAAO,CAAA;QAC1CG,aAAa,CAAC;IAChB,CAAA;;;;uBAGoB;0BAEa;6BACL;2BACkB;AAE9C,4BAA4B;AAC5B,MAAMC,uBAAuBH,0BAAgB;AAE7CI,SAAS,yBAAyB;IAChCC,WAAW;QACTC,IAAAA,wBAAa;IACf;IAEAC,GAAG,oDAAoD;QACrD,MAAMC,WAAWC,IAAAA,yBAAc,EAAC;YAC9BC,IAAI;YACJC,MAAM;YACNC,OAAO;QACT;QACA,YAAY;QACZT,qBAAqBU,qBAAqB,CAAC;YACzCC,MAAMN;YACNO,SAAS;QACX;QAEA,MAAMC,WAAW,MAAMC,IAAAA,UAAG;QAC1B,MAAMC,eAAe,MAAMF,SAASG,IAAI;QAExCC,OAAOJ,SAASK,MAAM,EAAEC,IAAI,CAAC;QAC7BF,OAAOF,aAAaJ,IAAI,EAAES,OAAO,CAACf;QAClCY,OAAOjB,sBAAsBqB,oBAAoB,CAACtB,wBAAW;IAC/D;IAEAK,GAAG,yDAAyD;QAC1DJ,qBAAqBU,qBAAqB,CAAC;QAE3C,MAAMG,WAAW,MAAMC,IAAAA,UAAG;QAC1B,MAAMC,eAAe,MAAMF,SAASG,IAAI;QAExCC,OAAOJ,SAASK,MAAM,EAAEC,IAAI,CAAC;QAC7BF,OAAOF,aAAaJ,IAAI,EAAEW,QAAQ;QAClCL,OAAOjB,sBAAsBqB,oBAAoB,CAACtB,wBAAW;IAC/D;IAEAK,GAAG,mEAAmE;QACpEJ,qBAAqBuB,qBAAqB,CAAC,IAAIC,MAAM;QAErD,MAAMX,WAAW,MAAMC,IAAAA,UAAG;QAC1B,MAAMC,eAAe,MAAMF,SAASG,IAAI;QAExCC,OAAOJ,SAASK,MAAM,EAAEC,IAAI,CAAC,MAAM,wBAAwB;QAC3DF,OAAOF,aAAaJ,IAAI,EAAEW,QAAQ;QAClCL,OAAOjB,sBAAsBqB,oBAAoB,CAACtB,wBAAW;IAC/D;AACF"}