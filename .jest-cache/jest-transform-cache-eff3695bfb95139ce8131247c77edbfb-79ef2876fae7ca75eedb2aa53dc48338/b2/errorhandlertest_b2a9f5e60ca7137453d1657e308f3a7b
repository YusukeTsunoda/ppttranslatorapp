36f146218fa92314c50c96c666b3cdf8
// error-handlerモジュールをモックしないように、直接インポートする
"use strict";
jest.unmock('@/lib/utils/error-handler');
// トーストのモック
jest.mock('@/components/ui/use-toast', ()=>({
        toast: jest.fn()
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _errorhandler = require("@/lib/utils/error-handler");
const _globals = require("@jest/globals");
// コンソールのモック
const originalConsoleError = console.error;
beforeAll(()=>{
    console.error = jest.fn();
});
afterAll(()=>{
    console.error = originalConsoleError;
});
describe('エラーハンドリングユーティリティ', ()=>{
    beforeEach(()=>{
        jest.clearAllMocks();
    });
    describe('エラー作成関数', ()=>{
        it('認証エラーを正しく作成する', ()=>{
            const error = (0, _errorhandler.createAuthError)('認証に失敗しました');
            (0, _globals.expect)(error).toBeInstanceOf(_errorhandler.AppError);
            (0, _globals.expect)(error.type).toBe(_errorhandler.ErrorType.AUTH);
            (0, _globals.expect)(error.message).toBe('認証に失敗しました');
            (0, _globals.expect)(error.statusCode).toBe(401);
        });
        it('バリデーションエラーを正しく作成する', ()=>{
            const error = (0, _errorhandler.createValidationError)('入力が無効です');
            (0, _globals.expect)(error).toBeInstanceOf(_errorhandler.AppError);
            (0, _globals.expect)(error.type).toBe(_errorhandler.ErrorType.VALIDATION);
            (0, _globals.expect)(error.message).toBe('入力が無効です');
            (0, _globals.expect)(error.statusCode).toBe(400);
        });
        it('Not Foundエラーを正しく作成する', ()=>{
            const error = (0, _errorhandler.createNotFoundError)('リソースが見つかりません');
            (0, _globals.expect)(error).toBeInstanceOf(_errorhandler.AppError);
            (0, _globals.expect)(error.type).toBe(_errorhandler.ErrorType.NOT_FOUND);
            (0, _globals.expect)(error.message).toBe('リソースが見つかりません');
            (0, _globals.expect)(error.statusCode).toBe(404);
        });
        it('権限エラーを正しく作成する', ()=>{
            const error = (0, _errorhandler.createForbiddenError)('権限がありません');
            (0, _globals.expect)(error).toBeInstanceOf(_errorhandler.AppError);
            (0, _globals.expect)(error.type).toBe(_errorhandler.ErrorType.FORBIDDEN);
            (0, _globals.expect)(error.message).toBe('権限がありません');
            (0, _globals.expect)(error.statusCode).toBe(403);
        });
        it('データベースエラーを正しく作成する', ()=>{
            const error = (0, _errorhandler.createDatabaseError)('データベースエラーが発生しました');
            (0, _globals.expect)(error).toBeInstanceOf(_errorhandler.AppError);
            (0, _globals.expect)(error.type).toBe(_errorhandler.ErrorType.DATABASE);
            (0, _globals.expect)(error.message).toBe('データベースエラーが発生しました');
            (0, _globals.expect)(error.statusCode).toBe(500);
        });
        it('レート制限エラーを正しく作成する', ()=>{
            const error = (0, _errorhandler.createRateLimitError)('リクエスト数が制限を超えました');
            (0, _globals.expect)(error).toBeInstanceOf(_errorhandler.AppError);
            (0, _globals.expect)(error.type).toBe(_errorhandler.ErrorType.RATE_LIMIT);
            (0, _globals.expect)(error.message).toBe('リクエスト数が制限を超えました');
            (0, _globals.expect)(error.statusCode).toBe(429);
        });
    });
    describe('エラーハンドリング関数', ()=>{
        it('クライアントエラーを正しく処理する', ()=>{
            const error = new Error('クライアントエラー');
            (0, _errorhandler.handleClientError)(error);
            (0, _globals.expect)(console.error).toHaveBeenCalledWith('Client error:', error);
        });
        it('AppErrorのクライアントエラーを正しく処理する', ()=>{
            const error = (0, _errorhandler.createAuthError)('AppError認証エラー');
            (0, _errorhandler.handleClientError)(error);
            (0, _globals.expect)(console.error).toHaveBeenCalledWith('Client error:', error);
        });
        it('APIエラーを正しく処理する', ()=>{
            const error = new Error('APIエラー');
            const result = (0, _errorhandler.handleApiError)(error);
            (0, _globals.expect)(console.error).toHaveBeenCalledWith('API error:', error);
            (0, _globals.expect)(result).toEqual({
                error: 'APIエラー',
                code: _errorhandler.ErrorCodes.UNKNOWN_ERROR,
                status: 500
            });
        });
        it('ネットワークエラーを正しく処理する', ()=>{
            const error = new Error('Failed to fetch');
            (0, _errorhandler.handleClientError)(error);
            (0, _globals.expect)(console.error).toHaveBeenCalledWith('Client error:', _globals.expect.any(_errorhandler.AppError));
        });
        it('プリズマエラーを正しく処理する', ()=>{
            const error = new Error('Prisma error');
            error.name = 'PrismaClientKnownRequestError';
            (0, _errorhandler.handleClientError)(error);
            (0, _globals.expect)(console.error).toHaveBeenCalledWith('Client error:', _globals.expect.any(_errorhandler.AppError));
        });
        it('nullエラーを処理できる', ()=>{
            (0, _errorhandler.handleClientError)(null);
            (0, _globals.expect)(console.error).toHaveBeenCalledWith('Client error:', _globals.expect.any(_errorhandler.AppError));
        });
    });
    describe('AppErrorクラス', ()=>{
        it('正しく初期化される', ()=>{
            const error = new _errorhandler.AppError({
                message: 'テストエラー',
                type: _errorhandler.ErrorType.AUTH,
                statusCode: 401
            });
            (0, _globals.expect)(error.message).toBe('テストエラー');
            (0, _globals.expect)(error.type).toBe(_errorhandler.ErrorType.AUTH);
            (0, _globals.expect)(error.statusCode).toBe(401);
            (0, _globals.expect)(error.name).toBe('AppError');
        });
        it('コンテキスト情報を持つことができる', ()=>{
            const context = {
                userId: '123',
                action: 'login'
            };
            const error = new _errorhandler.AppError({
                message: 'テストエラー',
                type: _errorhandler.ErrorType.AUTH,
                statusCode: 401,
                context
            });
            (0, _globals.expect)(error.context).toEqual(context);
        });
        it('元のエラーを保持できる', ()=>{
            const originalError = new Error('元のエラー');
            const error = new _errorhandler.AppError({
                message: 'テストエラー',
                type: _errorhandler.ErrorType.AUTH,
                statusCode: 401,
                originalError
            });
            (0, _globals.expect)(error.originalError).toBe(originalError);
        });
        it('デフォルト値で初期化できる', ()=>{
            const error = new _errorhandler.AppError({
                message: 'テストエラー'
            });
            (0, _globals.expect)(error.message).toBe('テストエラー');
            (0, _globals.expect)(error.type).toBe(_errorhandler.ErrorType.UNKNOWN);
            (0, _globals.expect)(error.statusCode).toBe(500);
        });
    });
    describe('Error Creators', ()=>{
        it('createValidationErrorが正しいAppErrorを作成する', ()=>{
            const error = (0, _errorhandler.createValidationError)('検証エラー');
            (0, _globals.expect)(error).toBeInstanceOf(_errorhandler.AppError);
            (0, _globals.expect)(error.type).toBe(_errorhandler.ErrorType.VALIDATION);
            (0, _globals.expect)(error.message).toBe('検証エラー');
            (0, _globals.expect)(error.code).toBe(_errorhandler.ErrorCodes.VALIDATION_ERROR);
        });
        it('createAuthErrorが正しいAppErrorを作成する', ()=>{
            const error = (0, _errorhandler.createAuthError)('認証エラー');
            (0, _globals.expect)(error).toBeInstanceOf(_errorhandler.AppError);
            (0, _globals.expect)(error.type).toBe(_errorhandler.ErrorType.AUTH);
            (0, _globals.expect)(error.message).toBe('認証エラー');
            (0, _globals.expect)(error.code).toBe(_errorhandler.ErrorCodes.UNAUTHORIZED);
        });
        it('createForbiddenErrorが正しいAppErrorを作成する', ()=>{
            const error = (0, _errorhandler.createForbiddenError)('アクセス拒否エラー');
            (0, _globals.expect)(error).toBeInstanceOf(_errorhandler.AppError);
            (0, _globals.expect)(error.type).toBe(_errorhandler.ErrorType.FORBIDDEN);
            (0, _globals.expect)(error.message).toBe('アクセス拒否エラー');
            (0, _globals.expect)(error.code).toBe(_errorhandler.ErrorCodes.FORBIDDEN);
        });
        it('createNotFoundErrorが正しいAppErrorを作成する', ()=>{
            const error = (0, _errorhandler.createNotFoundError)('未検出エラー');
            (0, _globals.expect)(error).toBeInstanceOf(_errorhandler.AppError);
            (0, _globals.expect)(error.type).toBe(_errorhandler.ErrorType.NOT_FOUND);
            (0, _globals.expect)(error.message).toBe('未検出エラー');
            (0, _globals.expect)(error.code).toBe(_errorhandler.ErrorCodes.NOT_FOUND);
        });
        it('createRateLimitErrorが正しいAppErrorを作成する', ()=>{
            const error = (0, _errorhandler.createRateLimitError)('レート制限エラー');
            (0, _globals.expect)(error).toBeInstanceOf(_errorhandler.AppError);
            (0, _globals.expect)(error.type).toBe(_errorhandler.ErrorType.RATE_LIMIT);
            (0, _globals.expect)(error.message).toBe('レート制限エラー');
            (0, _globals.expect)(error.code).toBe(_errorhandler.ErrorCodes.RATE_LIMIT_EXCEEDED);
        });
        it('createDatabaseErrorが正しいAppErrorを作成する', ()=>{
            const error = (0, _errorhandler.createDatabaseError)('データベースエラー');
            (0, _globals.expect)(error).toBeInstanceOf(_errorhandler.AppError);
            (0, _globals.expect)(error.type).toBe(_errorhandler.ErrorType.DATABASE);
            (0, _globals.expect)(error.message).toBe('データベースエラー');
            (0, _globals.expect)(error.code).toBe(_errorhandler.ErrorCodes.DATABASE_ERROR);
        });
    });
    describe('mapSessionErrorToAppError', ()=>{
        it('EXPIREDエラーを正しく変換する', ()=>{
            const error = (0, _errorhandler.mapSessionErrorToAppError)({
                type: 'EXPIRED'
            });
            (0, _globals.expect)(error).toBeInstanceOf(_errorhandler.AppError);
            (0, _globals.expect)(error.type).toBe(_errorhandler.ErrorType.AUTH);
            (0, _globals.expect)(error.message).toBe('セッションの有効期限が切れました');
            (0, _globals.expect)(error.statusCode).toBe(401);
        });
        it('INVALIDエラーを正しく変換する', ()=>{
            const error = (0, _errorhandler.mapSessionErrorToAppError)({
                type: 'INVALID'
            });
            (0, _globals.expect)(error).toBeInstanceOf(_errorhandler.AppError);
            (0, _globals.expect)(error.type).toBe(_errorhandler.ErrorType.AUTH);
            (0, _globals.expect)(error.message).toBe('無効なセッションです');
            (0, _globals.expect)(error.statusCode).toBe(401);
        });
        it('NETWORKエラーを正しく変換する', ()=>{
            const error = (0, _errorhandler.mapSessionErrorToAppError)({
                type: 'NETWORK'
            });
            (0, _globals.expect)(error).toBeInstanceOf(_errorhandler.AppError);
            (0, _globals.expect)(error.type).toBe(_errorhandler.ErrorType.NETWORK);
            (0, _globals.expect)(error.message).toBe('ネットワークエラーが発生しました');
            (0, _globals.expect)(error.statusCode).toBe(500);
        });
        it('UNAUTHORIZEDエラーを正しく変換する', ()=>{
            const error = (0, _errorhandler.mapSessionErrorToAppError)({
                type: 'UNAUTHORIZED'
            });
            (0, _globals.expect)(error).toBeInstanceOf(_errorhandler.AppError);
            (0, _globals.expect)(error.type).toBe(_errorhandler.ErrorType.AUTH);
            (0, _globals.expect)(error.message).toBe('認証が必要です');
            (0, _globals.expect)(error.statusCode).toBe(401);
        });
        it('UNKNOWNエラーを正しく変換する', ()=>{
            const error = (0, _errorhandler.mapSessionErrorToAppError)({
                type: 'UNKNOWN'
            });
            (0, _globals.expect)(error).toBeInstanceOf(_errorhandler.AppError);
            (0, _globals.expect)(error.type).toBe(_errorhandler.ErrorType.UNKNOWN);
            (0, _globals.expect)(error.message).toBe('不明なエラーが発生しました');
            (0, _globals.expect)(error.statusCode).toBe(500);
        });
        it('不明なタイプのエラーを正しく変換する', ()=>{
            const error = (0, _errorhandler.mapSessionErrorToAppError)({
                type: 'SOMETHING_ELSE'
            });
            (0, _globals.expect)(error).toBeInstanceOf(_errorhandler.AppError);
            (0, _globals.expect)(error.type).toBe(_errorhandler.ErrorType.UNKNOWN);
            (0, _globals.expect)(error.message).toBe('不明なエラーが発生しました');
            (0, _globals.expect)(error.statusCode).toBe(500);
        });
    });
    describe('handleError関数', ()=>{
        it('AppErrorをそのまま返す', ()=>{
            const appError = (0, _errorhandler.createAuthError)('認証エラー');
            const result = (0, _errorhandler.handleError)(appError);
            (0, _globals.expect)(result).toBe(appError);
        });
        it('一般的なErrorをAppErrorに変換する', ()=>{
            const error = new Error('一般的なエラー');
            const result = (0, _errorhandler.handleError)(error);
            (0, _globals.expect)(result).toBeInstanceOf(_errorhandler.AppError);
            (0, _globals.expect)(result.message).toBe('一般的なエラー');
            (0, _globals.expect)(result.type).toBe(_errorhandler.ErrorType.UNKNOWN);
        });
        it('nullやundefinedを処理できる', ()=>{
            const result = (0, _errorhandler.handleError)(null);
            (0, _globals.expect)(result).toBeInstanceOf(_errorhandler.AppError);
            (0, _globals.expect)(result.message).toBe('不明なエラーが発生しました');
            (0, _globals.expect)(result.type).toBe(_errorhandler.ErrorType.UNKNOWN);
        });
        it('objectを文字列化して処理できる', ()=>{
            const obj = {
                foo: 'bar'
            };
            const result = (0, _errorhandler.handleError)(obj);
            (0, _globals.expect)(result).toBeInstanceOf(_errorhandler.AppError);
            (0, _globals.expect)(result.message).toContain('{"foo":"bar"}');
        });
    });
    describe('isAppError関数', ()=>{
        it('AppErrorの場合はtrueを返す', ()=>{
            const error = (0, _errorhandler.createAuthError)('認証エラー');
            (0, _globals.expect)((0, _errorhandler.isAppError)(error)).toBe(true);
        });
        it('一般的なErrorの場合はfalseを返す', ()=>{
            const error = new Error('一般的なエラー');
            (0, _globals.expect)((0, _errorhandler.isAppError)(error)).toBe(false);
        });
        it('nullやundefinedの場合はfalseを返す', ()=>{
            (0, _globals.expect)((0, _errorhandler.isAppError)(null)).toBe(false);
            (0, _globals.expect)((0, _errorhandler.isAppError)(undefined)).toBe(false);
        });
    });
    describe('getErrorMessage関数', ()=>{
        it('Errorインスタンスからメッセージを取得する', ()=>{
            const error = new Error('エラーメッセージ');
            (0, _globals.expect)((0, _errorhandler.getErrorMessage)(error)).toBe('エラーメッセージ');
        });
        it('文字列をそのまま返す', ()=>{
            (0, _globals.expect)((0, _errorhandler.getErrorMessage)('エラー文字列')).toBe('エラー文字列');
        });
        it('AppErrorからメッセージを取得する', ()=>{
            const error = (0, _errorhandler.createAuthError)('AppErrorメッセージ');
            (0, _globals.expect)((0, _errorhandler.getErrorMessage)(error)).toBe('AppErrorメッセージ');
        });
        it('オブジェクトをJSON文字列に変換する', ()=>{
            const obj = {
                error: 'オブジェクトエラー'
            };
            (0, _globals.expect)((0, _errorhandler.getErrorMessage)(obj)).toBe('{"error":"オブジェクトエラー"}');
        });
        it('nullやundefinedの場合はデフォルトメッセージを返す', ()=>{
            (0, _globals.expect)((0, _errorhandler.getErrorMessage)(null)).toBe('不明なエラーが発生しました');
            (0, _globals.expect)((0, _errorhandler.getErrorMessage)(undefined)).toBe('不明なエラーが発生しました');
        });
    });
});

//# sourceMappingURL=data:application/json;base64,