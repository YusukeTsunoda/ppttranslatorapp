{"version":3,"sources":["/Users/yusuketsunoda/Documents/cursor/ppttranslatorapp/worktrees/cicd-setup/tests/utils/error-handler.test.ts"],"sourcesContent":["// error-handlerモジュールをモックしないように、直接インポートする\njest.unmock('@/lib/utils/error-handler');\n\nimport {\n  createAuthError,\n  createValidationError,\n  createNotFoundError,\n  createForbiddenError,\n  createDatabaseError,\n  handleClientError,\n  handleApiError,\n  AppError,\n  ErrorType,\n  ErrorCodes,\n  isAppError,\n  handleError,\n  getErrorMessage,\n  createRateLimitError,\n  mapSessionErrorToAppError,\n} from '@/lib/utils/error-handler';\nimport { toast } from '@/components/ui/use-toast';\nimport { expect } from '@jest/globals';\n\n// トーストのモック\njest.mock('@/components/ui/use-toast', () => ({\n  toast: jest.fn(),\n}));\n\n// コンソールのモック\nconst originalConsoleError = console.error;\nbeforeAll(() => {\n  console.error = jest.fn();\n});\nafterAll(() => {\n  console.error = originalConsoleError;\n});\n\ndescribe('エラーハンドリングユーティリティ', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('エラー作成関数', () => {\n    it('認証エラーを正しく作成する', () => {\n      const error = createAuthError('認証に失敗しました');\n\n      expect(error).toBeInstanceOf(AppError);\n      expect(error.type).toBe(ErrorType.AUTH);\n      expect(error.message).toBe('認証に失敗しました');\n      expect(error.statusCode).toBe(401);\n    });\n\n    it('バリデーションエラーを正しく作成する', () => {\n      const error = createValidationError('入力が無効です');\n\n      expect(error).toBeInstanceOf(AppError);\n      expect(error.type).toBe(ErrorType.VALIDATION);\n      expect(error.message).toBe('入力が無効です');\n      expect(error.statusCode).toBe(400);\n    });\n\n    it('Not Foundエラーを正しく作成する', () => {\n      const error = createNotFoundError('リソースが見つかりません');\n\n      expect(error).toBeInstanceOf(AppError);\n      expect(error.type).toBe(ErrorType.NOT_FOUND);\n      expect(error.message).toBe('リソースが見つかりません');\n      expect(error.statusCode).toBe(404);\n    });\n\n    it('権限エラーを正しく作成する', () => {\n      const error = createForbiddenError('権限がありません');\n\n      expect(error).toBeInstanceOf(AppError);\n      expect(error.type).toBe(ErrorType.FORBIDDEN);\n      expect(error.message).toBe('権限がありません');\n      expect(error.statusCode).toBe(403);\n    });\n\n    it('データベースエラーを正しく作成する', () => {\n      const error = createDatabaseError('データベースエラーが発生しました');\n\n      expect(error).toBeInstanceOf(AppError);\n      expect(error.type).toBe(ErrorType.DATABASE);\n      expect(error.message).toBe('データベースエラーが発生しました');\n      expect(error.statusCode).toBe(500);\n    });\n\n    it('レート制限エラーを正しく作成する', () => {\n      const error = createRateLimitError('リクエスト数が制限を超えました');\n\n      expect(error).toBeInstanceOf(AppError);\n      expect(error.type).toBe(ErrorType.RATE_LIMIT);\n      expect(error.message).toBe('リクエスト数が制限を超えました');\n      expect(error.statusCode).toBe(429);\n    });\n  });\n\n  describe('エラーハンドリング関数', () => {\n    it('クライアントエラーを正しく処理する', () => {\n      const error = new Error('クライアントエラー');\n      handleClientError(error);\n\n      expect(console.error).toHaveBeenCalledWith('Client error:', error);\n    });\n\n    it('AppErrorのクライアントエラーを正しく処理する', () => {\n      const error = createAuthError('AppError認証エラー');\n      handleClientError(error);\n\n      expect(console.error).toHaveBeenCalledWith('Client error:', error);\n    });\n\n    it('APIエラーを正しく処理する', () => {\n      const error = new Error('APIエラー');\n      const result = handleApiError(error);\n\n      expect(console.error).toHaveBeenCalledWith('API error:', error);\n      expect(result).toEqual({\n        error: 'APIエラー',\n        code: ErrorCodes.UNKNOWN_ERROR,\n        status: 500,\n      });\n    });\n\n    it('ネットワークエラーを正しく処理する', () => {\n      const error = new Error('Failed to fetch');\n      handleClientError(error);\n\n      expect(console.error).toHaveBeenCalledWith('Client error:', expect.any(AppError));\n    });\n\n    it('プリズマエラーを正しく処理する', () => {\n      const error = new Error('Prisma error');\n      error.name = 'PrismaClientKnownRequestError';\n      handleClientError(error);\n\n      expect(console.error).toHaveBeenCalledWith('Client error:', expect.any(AppError));\n    });\n\n    it('nullエラーを処理できる', () => {\n      handleClientError(null);\n\n      expect(console.error).toHaveBeenCalledWith('Client error:', expect.any(AppError));\n    });\n  });\n\n  describe('AppErrorクラス', () => {\n    it('正しく初期化される', () => {\n      const error = new AppError({\n        message: 'テストエラー',\n        type: ErrorType.AUTH,\n        statusCode: 401,\n      });\n\n      expect(error.message).toBe('テストエラー');\n      expect(error.type).toBe(ErrorType.AUTH);\n      expect(error.statusCode).toBe(401);\n      expect(error.name).toBe('AppError');\n    });\n\n    it('コンテキスト情報を持つことができる', () => {\n      const context = { userId: '123', action: 'login' };\n      const error = new AppError({\n        message: 'テストエラー',\n        type: ErrorType.AUTH,\n        statusCode: 401,\n        context,\n      });\n\n      expect(error.context).toEqual(context);\n    });\n\n    it('元のエラーを保持できる', () => {\n      const originalError = new Error('元のエラー');\n      const error = new AppError({\n        message: 'テストエラー',\n        type: ErrorType.AUTH,\n        statusCode: 401,\n        originalError,\n      });\n\n      expect(error.originalError).toBe(originalError);\n    });\n\n    it('デフォルト値で初期化できる', () => {\n      const error = new AppError({\n        message: 'テストエラー',\n      });\n\n      expect(error.message).toBe('テストエラー');\n      expect(error.type).toBe(ErrorType.UNKNOWN);\n      expect(error.statusCode).toBe(500);\n    });\n  });\n\n  describe('Error Creators', () => {\n    it('createValidationErrorが正しいAppErrorを作成する', () => {\n      const error = createValidationError('検証エラー');\n\n      expect(error).toBeInstanceOf(AppError);\n      expect(error.type).toBe(ErrorType.VALIDATION);\n      expect(error.message).toBe('検証エラー');\n      expect(error.code).toBe(ErrorCodes.VALIDATION_ERROR);\n    });\n\n    it('createAuthErrorが正しいAppErrorを作成する', () => {\n      const error = createAuthError('認証エラー');\n\n      expect(error).toBeInstanceOf(AppError);\n      expect(error.type).toBe(ErrorType.AUTH);\n      expect(error.message).toBe('認証エラー');\n      expect(error.code).toBe(ErrorCodes.UNAUTHORIZED);\n    });\n\n    it('createForbiddenErrorが正しいAppErrorを作成する', () => {\n      const error = createForbiddenError('アクセス拒否エラー');\n\n      expect(error).toBeInstanceOf(AppError);\n      expect(error.type).toBe(ErrorType.FORBIDDEN);\n      expect(error.message).toBe('アクセス拒否エラー');\n      expect(error.code).toBe(ErrorCodes.FORBIDDEN);\n    });\n\n    it('createNotFoundErrorが正しいAppErrorを作成する', () => {\n      const error = createNotFoundError('未検出エラー');\n\n      expect(error).toBeInstanceOf(AppError);\n      expect(error.type).toBe(ErrorType.NOT_FOUND);\n      expect(error.message).toBe('未検出エラー');\n      expect(error.code).toBe(ErrorCodes.NOT_FOUND);\n    });\n\n    it('createRateLimitErrorが正しいAppErrorを作成する', () => {\n      const error = createRateLimitError('レート制限エラー');\n\n      expect(error).toBeInstanceOf(AppError);\n      expect(error.type).toBe(ErrorType.RATE_LIMIT);\n      expect(error.message).toBe('レート制限エラー');\n      expect(error.code).toBe(ErrorCodes.RATE_LIMIT_EXCEEDED);\n    });\n\n    it('createDatabaseErrorが正しいAppErrorを作成する', () => {\n      const error = createDatabaseError('データベースエラー');\n\n      expect(error).toBeInstanceOf(AppError);\n      expect(error.type).toBe(ErrorType.DATABASE);\n      expect(error.message).toBe('データベースエラー');\n      expect(error.code).toBe(ErrorCodes.DATABASE_ERROR);\n    });\n  });\n\n  describe('mapSessionErrorToAppError', () => {\n    it('EXPIREDエラーを正しく変換する', () => {\n      const error = mapSessionErrorToAppError({ type: 'EXPIRED' });\n\n      expect(error).toBeInstanceOf(AppError);\n      expect(error.type).toBe(ErrorType.AUTH);\n      expect(error.message).toBe('セッションの有効期限が切れました');\n      expect(error.statusCode).toBe(401);\n    });\n\n    it('INVALIDエラーを正しく変換する', () => {\n      const error = mapSessionErrorToAppError({ type: 'INVALID' });\n\n      expect(error).toBeInstanceOf(AppError);\n      expect(error.type).toBe(ErrorType.AUTH);\n      expect(error.message).toBe('無効なセッションです');\n      expect(error.statusCode).toBe(401);\n    });\n\n    it('NETWORKエラーを正しく変換する', () => {\n      const error = mapSessionErrorToAppError({ type: 'NETWORK' });\n\n      expect(error).toBeInstanceOf(AppError);\n      expect(error.type).toBe(ErrorType.NETWORK);\n      expect(error.message).toBe('ネットワークエラーが発生しました');\n      expect(error.statusCode).toBe(500);\n    });\n\n    it('UNAUTHORIZEDエラーを正しく変換する', () => {\n      const error = mapSessionErrorToAppError({ type: 'UNAUTHORIZED' });\n\n      expect(error).toBeInstanceOf(AppError);\n      expect(error.type).toBe(ErrorType.AUTH);\n      expect(error.message).toBe('認証が必要です');\n      expect(error.statusCode).toBe(401);\n    });\n\n    it('UNKNOWNエラーを正しく変換する', () => {\n      const error = mapSessionErrorToAppError({ type: 'UNKNOWN' });\n\n      expect(error).toBeInstanceOf(AppError);\n      expect(error.type).toBe(ErrorType.UNKNOWN);\n      expect(error.message).toBe('不明なエラーが発生しました');\n      expect(error.statusCode).toBe(500);\n    });\n\n    it('不明なタイプのエラーを正しく変換する', () => {\n      const error = mapSessionErrorToAppError({ type: 'SOMETHING_ELSE' as any });\n\n      expect(error).toBeInstanceOf(AppError);\n      expect(error.type).toBe(ErrorType.UNKNOWN);\n      expect(error.message).toBe('不明なエラーが発生しました');\n      expect(error.statusCode).toBe(500);\n    });\n  });\n\n  describe('handleError関数', () => {\n    it('AppErrorをそのまま返す', () => {\n      const appError = createAuthError('認証エラー');\n      const result = handleError(appError);\n      \n      expect(result).toBe(appError);\n    });\n    \n    it('一般的なErrorをAppErrorに変換する', () => {\n      const error = new Error('一般的なエラー');\n      const result = handleError(error);\n      \n      expect(result).toBeInstanceOf(AppError);\n      expect(result.message).toBe('一般的なエラー');\n      expect(result.type).toBe(ErrorType.UNKNOWN);\n    });\n    \n    it('nullやundefinedを処理できる', () => {\n      const result = handleError(null);\n      \n      expect(result).toBeInstanceOf(AppError);\n      expect(result.message).toBe('不明なエラーが発生しました');\n      expect(result.type).toBe(ErrorType.UNKNOWN);\n    });\n\n    it('objectを文字列化して処理できる', () => {\n      const obj = { foo: 'bar' };\n      const result = handleError(obj as any);\n      \n      expect(result).toBeInstanceOf(AppError);\n      expect(result.message).toContain('{\"foo\":\"bar\"}');\n    });\n  });\n\n  describe('isAppError関数', () => {\n    it('AppErrorの場合はtrueを返す', () => {\n      const error = createAuthError('認証エラー');\n      expect(isAppError(error)).toBe(true);\n    });\n    \n    it('一般的なErrorの場合はfalseを返す', () => {\n      const error = new Error('一般的なエラー');\n      expect(isAppError(error)).toBe(false);\n    });\n    \n    it('nullやundefinedの場合はfalseを返す', () => {\n      expect(isAppError(null)).toBe(false);\n      expect(isAppError(undefined)).toBe(false);\n    });\n  });\n\n  describe('getErrorMessage関数', () => {\n    it('Errorインスタンスからメッセージを取得する', () => {\n      const error = new Error('エラーメッセージ');\n      expect(getErrorMessage(error)).toBe('エラーメッセージ');\n    });\n    \n    it('文字列をそのまま返す', () => {\n      expect(getErrorMessage('エラー文字列')).toBe('エラー文字列');\n    });\n    \n    it('AppErrorからメッセージを取得する', () => {\n      const error = createAuthError('AppErrorメッセージ');\n      expect(getErrorMessage(error)).toBe('AppErrorメッセージ');\n    });\n    \n    it('オブジェクトをJSON文字列に変換する', () => {\n      const obj = { error: 'オブジェクトエラー' };\n      expect(getErrorMessage(obj)).toBe('{\"error\":\"オブジェクトエラー\"}');\n    });\n    \n    it('nullやundefinedの場合はデフォルトメッセージを返す', () => {\n      expect(getErrorMessage(null)).toBe('不明なエラーが発生しました');\n      expect(getErrorMessage(undefined)).toBe('不明なエラーが発生しました');\n    });\n  });\n});\n"],"names":["jest","unmock","mock","toast","fn","originalConsoleError","console","error","beforeAll","afterAll","describe","beforeEach","clearAllMocks","it","createAuthError","expect","toBeInstanceOf","AppError","type","toBe","ErrorType","AUTH","message","statusCode","createValidationError","VALIDATION","createNotFoundError","NOT_FOUND","createForbiddenError","FORBIDDEN","createDatabaseError","DATABASE","createRateLimitError","RATE_LIMIT","Error","handleClientError","toHaveBeenCalledWith","result","handleApiError","toEqual","code","ErrorCodes","UNKNOWN_ERROR","status","any","name","context","userId","action","originalError","UNKNOWN","VALIDATION_ERROR","UNAUTHORIZED","RATE_LIMIT_EXCEEDED","DATABASE_ERROR","mapSessionErrorToAppError","NETWORK","appError","handleError","obj","foo","toContain","isAppError","undefined","getErrorMessage"],"mappings":"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"}