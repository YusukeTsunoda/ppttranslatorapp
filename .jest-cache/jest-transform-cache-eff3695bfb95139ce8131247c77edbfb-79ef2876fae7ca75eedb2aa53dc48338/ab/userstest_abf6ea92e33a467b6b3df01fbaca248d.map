{"version":3,"sources":["/Users/yusuketsunoda/Documents/cursor/ppttranslatorapp/worktrees/cicd-setup/tests/api/admin/users.test.ts"],"sourcesContent":["import { describe, expect, it, beforeAll, afterAll, jest } from '@jest/globals';\nimport { createMockRequest, mockPrisma } from '@/tests/utils/test-utils';\nimport { setupTestDatabase, teardownTestDatabase } from '@/tests/utils/db';\nimport { GET, POST, PUT, DELETE } from '@/app/api/admin/users/route';\nimport { NextRequest } from 'next/server';\n\ndescribe('User Management API', () => {\n  let testUser: any;\n  let adminUser: any;\n\n  beforeAll(async () => {\n    await setupTestDatabase();\n    \n    // モックユーザーデータの設定\n    adminUser = {\n      id: 'admin-id',\n      email: 'admin@example.com',\n      role: 'ADMIN',\n    };\n    \n    testUser = {\n      id: 'user-id',\n      email: 'user@example.com',\n      role: 'USER',\n    };\n\n    // Prismaモックの設定\n    mockPrisma.user.findUnique.mockResolvedValue(adminUser);\n  });\n\n  afterAll(async () => {\n    await teardownTestDatabase();\n  });\n\n  describe('GET /api/admin/users', () => {\n    it('should return list of users for admin', async () => {\n      const req = createMockRequest('GET');\n      mockPrisma.user.findMany.mockResolvedValue([testUser, adminUser]);\n\n      const response = await GET(req);\n      expect(response.status).toBe(200);\n\n      const data = await response.json();\n      expect(data.users).toHaveLength(2);\n    });\n\n    it('should deny access for non-admin users', async () => {\n      const req = createMockRequest('GET');\n      mockPrisma.user.findUnique.mockResolvedValue(testUser);\n\n      const response = await GET(req);\n      expect(response.status).toBe(403);\n    });\n  });\n\n  describe('POST /api/admin/users', () => {\n    it('should create a new user', async () => {\n      const newUser = {\n        email: 'new@example.com',\n        name: 'New User',\n        role: 'USER',\n      };\n\n      const req = createMockRequest('POST', newUser);\n      mockPrisma.user.create.mockResolvedValue({ ...newUser, id: 'new-id' });\n\n      const response = await POST(req);\n      expect(response.status).toBe(201);\n\n      const data = await response.json();\n      expect(data.user.email).toBe(newUser.email);\n    });\n  });\n\n  describe('PUT /api/admin/users/:id', () => {\n    it('should update user details', async () => {\n      const updates = {\n        name: 'Updated Name',\n        role: 'ADMIN',\n      };\n\n      const req = createMockRequest('PUT', updates);\n      mockPrisma.user.update.mockResolvedValue({ ...testUser, ...updates });\n\n      const response = await PUT(req);\n      expect(response.status).toBe(200);\n\n      const data = await response.json();\n      expect(data.user.name).toBe(updates.name);\n    });\n  });\n\n  describe('DELETE /api/admin/users/:id', () => {\n    it('should soft delete a user', async () => {\n      const req = createMockRequest('DELETE');\n      mockPrisma.user.update.mockResolvedValue({ ...testUser, deletedAt: new Date() });\n\n      const response = await DELETE(req);\n      expect(response.status).toBe(200);\n\n      const data = await response.json();\n      expect(data.success).toBe(true);\n    });\n  });\n}); "],"names":["describe","testUser","adminUser","beforeAll","setupTestDatabase","id","email","role","mockPrisma","user","findUnique","mockResolvedValue","afterAll","teardownTestDatabase","it","req","createMockRequest","findMany","response","GET","expect","status","toBe","data","json","users","toHaveLength","newUser","name","create","POST","updates","update","PUT","deletedAt","Date","DELETE","success"],"mappings":"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"}