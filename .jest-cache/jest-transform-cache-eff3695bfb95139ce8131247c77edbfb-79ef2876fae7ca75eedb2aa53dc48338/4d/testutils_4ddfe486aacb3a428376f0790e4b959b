f2852c547a5ff299fe5ac35b00319b43
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    createMockRequest: function() {
        return createMockRequest;
    },
    createMockResponse: function() {
        return createMockResponse;
    },
    mockFs: function() {
        return mockFs;
    },
    mockPrisma: function() {
        return mockPrisma;
    }
});
const _interop_require_default = require("@swc/helpers/_/_interop_require_default");
const _fs = /*#__PURE__*/ _interop_require_default._(require("fs"));
const _server = require("next/server");
const mockPrisma = {
    user: {
        findUnique: jest.fn(),
        findMany: jest.fn(),
        create: jest.fn(),
        update: jest.fn(),
        delete: jest.fn()
    },
    file: {
        findUnique: jest.fn(),
        create: jest.fn(),
        update: jest.fn()
    },
    translationHistory: {
        create: jest.fn(),
        findMany: jest.fn(),
        findUnique: jest.fn()
    },
    $executeRaw: jest.fn(),
    $queryRaw: jest.fn()
};
const mockFs = {
    ..._fs.default,
    createReadStream: jest.fn(),
    existsSync: jest.fn(),
    promises: {
        ..._fs.default.promises,
        readFile: jest.fn(),
        writeFile: jest.fn(),
        unlink: jest.fn()
    }
};
const createMockRequest = (method, body, headers)=>{
    const req = new _server.NextRequest(new URL('http://localhost:3000'), {
        method,
        body: body ? JSON.stringify(body) : undefined,
        headers
    });
    return req;
};
const createMockResponse = ()=>{
    return {
        status: jest.fn().mockReturnThis(),
        json: jest.fn()
    };
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy95dXN1a2V0c3Vub2RhL0RvY3VtZW50cy9jdXJzb3IvcHB0dHJhbnNsYXRvcmFwcC93b3JrdHJlZXMvY2ljZC1zZXR1cC90ZXN0cy91dGlscy90ZXN0LXV0aWxzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFByaXNtYUNsaWVudCB9IGZyb20gJ0BwcmlzbWEvY2xpZW50JztcbmltcG9ydCBmcyBmcm9tICdmcyc7XG5pbXBvcnQgeyBOZXh0UmVxdWVzdCwgTmV4dFJlc3BvbnNlIH0gZnJvbSAnbmV4dC9zZXJ2ZXInO1xuXG4vLyBQcmlzbWHjga7jg6Ljg4Pjgq9cbmV4cG9ydCBjb25zdCBtb2NrUHJpc21hID0ge1xuICB1c2VyOiB7XG4gICAgZmluZFVuaXF1ZTogamVzdC5mbigpLFxuICAgIGZpbmRNYW55OiBqZXN0LmZuKCksXG4gICAgY3JlYXRlOiBqZXN0LmZuKCksXG4gICAgdXBkYXRlOiBqZXN0LmZuKCksXG4gICAgZGVsZXRlOiBqZXN0LmZuKCksXG4gIH0sXG4gIGZpbGU6IHtcbiAgICBmaW5kVW5pcXVlOiBqZXN0LmZuKCksXG4gICAgY3JlYXRlOiBqZXN0LmZuKCksXG4gICAgdXBkYXRlOiBqZXN0LmZuKCksXG4gIH0sXG4gIHRyYW5zbGF0aW9uSGlzdG9yeToge1xuICAgIGNyZWF0ZTogamVzdC5mbigpLFxuICAgIGZpbmRNYW55OiBqZXN0LmZuKCksXG4gICAgZmluZFVuaXF1ZTogamVzdC5mbigpLFxuICB9LFxuICAkZXhlY3V0ZVJhdzogamVzdC5mbigpLFxuICAkcXVlcnlSYXc6IGplc3QuZm4oKSxcbn0gYXMgdW5rbm93biBhcyBQcmlzbWFDbGllbnQ7XG5cbi8vIOODleOCoeOCpOODq+OCt+OCueODhuODoOOBruODouODg+OCr1xuZXhwb3J0IGNvbnN0IG1vY2tGcyA9IHtcbiAgLi4uZnMsXG4gIGNyZWF0ZVJlYWRTdHJlYW06IGplc3QuZm4oKSxcbiAgZXhpc3RzU3luYzogamVzdC5mbigpLFxuICBwcm9taXNlczoge1xuICAgIC4uLmZzLnByb21pc2VzLFxuICAgIHJlYWRGaWxlOiBqZXN0LmZuKCksXG4gICAgd3JpdGVGaWxlOiBqZXN0LmZuKCksXG4gICAgdW5saW5rOiBqZXN0LmZuKCksXG4gIH0sXG59O1xuXG4vLyBOZXh0Lmpz44GuQVBJ44Or44O844OI44OY44Or44OR44O8XG5leHBvcnQgY29uc3QgY3JlYXRlTW9ja1JlcXVlc3QgPSAobWV0aG9kOiBzdHJpbmcsIGJvZHk/OiBhbnksIGhlYWRlcnM/OiBIZWFkZXJzSW5pdCk6IE5leHRSZXF1ZXN0ID0+IHtcbiAgY29uc3QgcmVxID0gbmV3IE5leHRSZXF1ZXN0KG5ldyBVUkwoJ2h0dHA6Ly9sb2NhbGhvc3Q6MzAwMCcpLCB7XG4gICAgbWV0aG9kLFxuICAgIGJvZHk6IGJvZHkgPyBKU09OLnN0cmluZ2lmeShib2R5KSA6IHVuZGVmaW5lZCxcbiAgICBoZWFkZXJzLFxuICB9KTtcbiAgcmV0dXJuIHJlcTtcbn07XG5cbmV4cG9ydCBjb25zdCBjcmVhdGVNb2NrUmVzcG9uc2UgPSAoKSA9PiB7XG4gIHJldHVybiB7XG4gICAgc3RhdHVzOiBqZXN0LmZuKCkubW9ja1JldHVyblRoaXMoKSxcbiAgICBqc29uOiBqZXN0LmZuKCksXG4gIH0gYXMgdW5rbm93biBhcyBOZXh0UmVzcG9uc2U7XG59OyAiXSwibmFtZXMiOlsiY3JlYXRlTW9ja1JlcXVlc3QiLCJjcmVhdGVNb2NrUmVzcG9uc2UiLCJtb2NrRnMiLCJtb2NrUHJpc21hIiwidXNlciIsImZpbmRVbmlxdWUiLCJqZXN0IiwiZm4iLCJmaW5kTWFueSIsImNyZWF0ZSIsInVwZGF0ZSIsImRlbGV0ZSIsImZpbGUiLCJ0cmFuc2xhdGlvbkhpc3RvcnkiLCIkZXhlY3V0ZVJhdyIsIiRxdWVyeVJhdyIsImZzIiwiY3JlYXRlUmVhZFN0cmVhbSIsImV4aXN0c1N5bmMiLCJwcm9taXNlcyIsInJlYWRGaWxlIiwid3JpdGVGaWxlIiwidW5saW5rIiwibWV0aG9kIiwiYm9keSIsImhlYWRlcnMiLCJyZXEiLCJOZXh0UmVxdWVzdCIsIlVSTCIsIkpTT04iLCJzdHJpbmdpZnkiLCJ1bmRlZmluZWQiLCJzdGF0dXMiLCJtb2NrUmV0dXJuVGhpcyIsImpzb24iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0lBeUNhQSxpQkFBaUI7ZUFBakJBOztJQVNBQyxrQkFBa0I7ZUFBbEJBOztJQXRCQUMsTUFBTTtlQUFOQTs7SUF2QkFDLFVBQVU7ZUFBVkE7Ozs7NkRBSkU7d0JBQzJCO0FBR25DLE1BQU1BLGFBQWE7SUFDeEJDLE1BQU07UUFDSkMsWUFBWUMsS0FBS0MsRUFBRTtRQUNuQkMsVUFBVUYsS0FBS0MsRUFBRTtRQUNqQkUsUUFBUUgsS0FBS0MsRUFBRTtRQUNmRyxRQUFRSixLQUFLQyxFQUFFO1FBQ2ZJLFFBQVFMLEtBQUtDLEVBQUU7SUFDakI7SUFDQUssTUFBTTtRQUNKUCxZQUFZQyxLQUFLQyxFQUFFO1FBQ25CRSxRQUFRSCxLQUFLQyxFQUFFO1FBQ2ZHLFFBQVFKLEtBQUtDLEVBQUU7SUFDakI7SUFDQU0sb0JBQW9CO1FBQ2xCSixRQUFRSCxLQUFLQyxFQUFFO1FBQ2ZDLFVBQVVGLEtBQUtDLEVBQUU7UUFDakJGLFlBQVlDLEtBQUtDLEVBQUU7SUFDckI7SUFDQU8sYUFBYVIsS0FBS0MsRUFBRTtJQUNwQlEsV0FBV1QsS0FBS0MsRUFBRTtBQUNwQjtBQUdPLE1BQU1MLFNBQVM7SUFDcEIsR0FBR2MsV0FBRTtJQUNMQyxrQkFBa0JYLEtBQUtDLEVBQUU7SUFDekJXLFlBQVlaLEtBQUtDLEVBQUU7SUFDbkJZLFVBQVU7UUFDUixHQUFHSCxXQUFFLENBQUNHLFFBQVE7UUFDZEMsVUFBVWQsS0FBS0MsRUFBRTtRQUNqQmMsV0FBV2YsS0FBS0MsRUFBRTtRQUNsQmUsUUFBUWhCLEtBQUtDLEVBQUU7SUFDakI7QUFDRjtBQUdPLE1BQU1QLG9CQUFvQixDQUFDdUIsUUFBZ0JDLE1BQVlDO0lBQzVELE1BQU1DLE1BQU0sSUFBSUMsbUJBQVcsQ0FBQyxJQUFJQyxJQUFJLDBCQUEwQjtRQUM1REw7UUFDQUMsTUFBTUEsT0FBT0ssS0FBS0MsU0FBUyxDQUFDTixRQUFRTztRQUNwQ047SUFDRjtJQUNBLE9BQU9DO0FBQ1Q7QUFFTyxNQUFNekIscUJBQXFCO0lBQ2hDLE9BQU87UUFDTCtCLFFBQVExQixLQUFLQyxFQUFFLEdBQUcwQixjQUFjO1FBQ2hDQyxNQUFNNUIsS0FBS0MsRUFBRTtJQUNmO0FBQ0YifQ==