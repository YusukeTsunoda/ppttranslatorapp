ebf93b22c52fcff1b5033b839cae814f
"use strict";
// Token 生成関数のモック
jest.mock('@/lib/auth/token', ()=>({
        generateResetToken: jest.fn()
    }));
// メール送信関数のモック
jest.mock('@/lib/email/send', ()=>({
        sendPasswordResetEmail: jest.fn()
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _route = require("@/app/api/auth/reset-password/route");
const _token = require("@/lib/auth/token");
const _send = require("@/lib/email/send");
const _mockSetup = require("@/tests/helpers/mockSetup");
const _client = require("@prisma/client");
// Jestのexpect関数をモック化しないようにする
const actualExpect = global.expect;
const prismaMock = (0, _mockSetup.createPrismaMock)();
const generateResetTokenMock = _token.generateResetToken;
const sendPasswordResetEmailMock = _send.sendPasswordResetEmail;
const originalEnv = process.env;
describe('POST /api/auth/reset-password', ()=>{
    beforeEach(()=>{
        jest.resetModules();
        process.env = {
            ...originalEnv
        };
        (0, _mockSetup.clearAllMocks)();
        generateResetTokenMock.mockResolvedValue('mocked-reset-token');
        sendPasswordResetEmailMock.mockResolvedValue(undefined);
        process.env.RESEND_API_KEY = 'test-resend-api-key';
    });
    afterAll(()=>{
        process.env = originalEnv;
    });
    it('should return success true when user exists and email is sent', async ()=>{
        const requestBody = {
            email: 'user@example.com'
        };
        const req = new Request('http://localhost/api/auth/reset-password', {
            method: 'POST',
            body: JSON.stringify(requestBody),
            headers: {
                'Content-Type': 'application/json'
            }
        });
        const mockUser = (0, _mockSetup.createMockUser)({
            id: 'user-id',
            email: requestBody.email,
            name: 'Test User',
            credits: 10,
            role: _client.UserRole.USER
        });
        prismaMock.user.findUnique.mockResolvedValue(mockUser);
        prismaMock.user.update.mockResolvedValue(mockUser);
        const response = await (0, _route.POST)(req);
        const responseBody = await response.json();
        actualExpect(response.status).toBe(200);
        actualExpect(responseBody.success).toBe(true);
        actualExpect(prismaMock.user.findUnique).toHaveBeenCalledWith({
            where: {
                email: requestBody.email
            }
        });
        actualExpect(generateResetTokenMock).toHaveBeenCalled();
        actualExpect(prismaMock.user.update).toHaveBeenCalledWith({
            where: {
                id: mockUser.id
            },
            data: {
                updatedAt: actualExpect.any(Date)
            }
        });
        actualExpect(sendPasswordResetEmailMock).toHaveBeenCalledWith(requestBody.email, 'mocked-reset-token');
    });
    it('should return success true even if user does not exist (security measure)', async ()=>{
        const requestBody = {
            email: 'nonexistent@example.com'
        };
        const req = new Request('http://localhost/api/auth/reset-password', {
            method: 'POST',
            body: JSON.stringify(requestBody),
            headers: {
                'Content-Type': 'application/json'
            }
        });
        prismaMock.user.findUnique.mockResolvedValue(null);
        const response = await (0, _route.POST)(req);
        const responseBody = await response.json();
        actualExpect(response.status).toBe(200);
        actualExpect(responseBody.success).toBe(true);
        actualExpect(generateResetTokenMock).not.toHaveBeenCalled();
        actualExpect(prismaMock.user.update).not.toHaveBeenCalled();
        actualExpect(sendPasswordResetEmailMock).not.toHaveBeenCalled();
    });
    it('should return 400 for invalid email format', async ()=>{
        const requestBody = {
            email: 'invalid-email'
        };
        const req = new Request('http://localhost/api/auth/reset-password', {
            method: 'POST',
            body: JSON.stringify(requestBody),
            headers: {
                'Content-Type': 'application/json'
            }
        });
        const response = await (0, _route.POST)(req);
        const responseBody = await response.json();
        actualExpect(response.status).toBe(500); // zodのparseエラーは現状500になるが、将来的には400にしたい
        // expect(responseBody.error).toContain('Invalid email'); // zodのエラーメッセージを確認
        actualExpect(responseBody.error).toBe('パスワードリセットの要求に失敗しました'); // 現状は汎用エラー
    });
    it('should return 500 if RESEND_API_KEY is not set', async ()=>{
        delete process.env.RESEND_API_KEY; // 環境変数を削除
        const requestBody = {
            email: 'user@example.com'
        };
        const req = new Request('http://localhost/api/auth/reset-password', {
            method: 'POST',
            body: JSON.stringify(requestBody),
            headers: {
                'Content-Type': 'application/json'
            }
        });
        const response = await (0, _route.POST)(req);
        const responseBody = await response.json();
        actualExpect(response.status).toBe(500);
        actualExpect(responseBody.error).toBe('Email service configuration error');
    });
    it('should return 500 if generateResetToken fails', async ()=>{
        const requestBody = {
            email: 'user@example.com'
        };
        const req = new Request('http://localhost/api/auth/reset-password', {
            method: 'POST',
            body: JSON.stringify(requestBody),
            headers: {
                'Content-Type': 'application/json'
            }
        });
        const mockUser = (0, _mockSetup.createMockUser)({
            id: 'user-id'
        });
        prismaMock.user.findUnique.mockResolvedValue(mockUser);
        generateResetTokenMock.mockRejectedValue(new Error('Token generation failed'));
        const response = await (0, _route.POST)(req);
        const responseBody = await response.json();
        actualExpect(response.status).toBe(500);
        actualExpect(responseBody.error).toBe('パスワードリセットの要求に失敗しました');
    });
    it('should return 500 if sendPasswordResetEmail fails', async ()=>{
        const requestBody = {
            email: 'user@example.com'
        };
        const req = new Request('http://localhost/api/auth/reset-password', {
            method: 'POST',
            body: JSON.stringify(requestBody),
            headers: {
                'Content-Type': 'application/json'
            }
        });
        const mockUser = (0, _mockSetup.createMockUser)({
            id: 'user-id'
        });
        prismaMock.user.findUnique.mockResolvedValue(mockUser);
        prismaMock.user.update.mockResolvedValue(mockUser);
        sendPasswordResetEmailMock.mockRejectedValue(new Error('Email sending failed'));
        const response = await (0, _route.POST)(req);
        const responseBody = await response.json();
        actualExpect(response.status).toBe(500);
        actualExpect(responseBody.error).toBe('パスワードリセットの要求に失敗しました');
    });
    it('should return 500 if prisma.user.update fails', async ()=>{
        const requestBody = {
            email: 'user@example.com'
        };
        const req = new Request('http://localhost/api/auth/reset-password', {
            method: 'POST',
            body: JSON.stringify(requestBody),
            headers: {
                'Content-Type': 'application/json'
            }
        });
        const mockUser = (0, _mockSetup.createMockUser)({
            id: 'user-id'
        });
        prismaMock.user.findUnique.mockResolvedValue(mockUser);
        prismaMock.user.update.mockRejectedValue(new Error('DB update failed'));
        const response = await (0, _route.POST)(req);
        const responseBody = await response.json();
        actualExpect(response.status).toBe(500);
        actualExpect(responseBody.error).toBe('パスワードリセットの要求に失敗しました');
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy95dXN1a2V0c3Vub2RhL0RvY3VtZW50cy9jdXJzb3IvcHB0dHJhbnNsYXRvcmFwcC93b3JrdHJlZXMvY2ljZC1zZXR1cC90ZXN0cy9hcGkvYXV0aC9yZXNldC1wYXNzd29yZC9yb3V0ZS50ZXN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBPU1QgfSBmcm9tICdAL2FwcC9hcGkvYXV0aC9yZXNldC1wYXNzd29yZC9yb3V0ZSc7XG5pbXBvcnQgeyBnZW5lcmF0ZVJlc2V0VG9rZW4gfSBmcm9tICdAL2xpYi9hdXRoL3Rva2VuJztcbmltcG9ydCB7IHNlbmRQYXNzd29yZFJlc2V0RW1haWwgfSBmcm9tICdAL2xpYi9lbWFpbC9zZW5kJztcbmltcG9ydCB7IGNyZWF0ZVByaXNtYU1vY2ssIGNyZWF0ZU1vY2tVc2VyLCBjbGVhckFsbE1vY2tzIH0gZnJvbSAnQC90ZXN0cy9oZWxwZXJzL21vY2tTZXR1cCc7XG5pbXBvcnQgeyBVc2VyUm9sZSB9IGZyb20gJ0BwcmlzbWEvY2xpZW50JztcblxuLy8gSmVzdOOBrmV4cGVjdOmWouaVsOOCkuODouODg+OCr+WMluOBl+OBquOBhOOCiOOBhuOBq+OBmeOCi1xuY29uc3QgYWN0dWFsRXhwZWN0ID0gZ2xvYmFsLmV4cGVjdDtcblxuLy8gVG9rZW4g55Sf5oiQ6Zai5pWw44Gu44Oi44OD44KvXG5qZXN0Lm1vY2soJ0AvbGliL2F1dGgvdG9rZW4nLCAoKSA9PiAoe1xuICBnZW5lcmF0ZVJlc2V0VG9rZW46IGplc3QuZm4oKSxcbn0pKTtcblxuLy8g44Oh44O844Or6YCB5L+h6Zai5pWw44Gu44Oi44OD44KvXG5qZXN0Lm1vY2soJ0AvbGliL2VtYWlsL3NlbmQnLCAoKSA9PiAoe1xuICBzZW5kUGFzc3dvcmRSZXNldEVtYWlsOiBqZXN0LmZuKCksXG59KSk7XG5cbmNvbnN0IHByaXNtYU1vY2sgPSBjcmVhdGVQcmlzbWFNb2NrKCk7XG5jb25zdCBnZW5lcmF0ZVJlc2V0VG9rZW5Nb2NrID0gZ2VuZXJhdGVSZXNldFRva2VuIGFzIGplc3QuTW9jaztcbmNvbnN0IHNlbmRQYXNzd29yZFJlc2V0RW1haWxNb2NrID0gc2VuZFBhc3N3b3JkUmVzZXRFbWFpbCBhcyBqZXN0Lk1vY2s7XG5cbmNvbnN0IG9yaWdpbmFsRW52ID0gcHJvY2Vzcy5lbnY7XG5cbmRlc2NyaWJlKCdQT1NUIC9hcGkvYXV0aC9yZXNldC1wYXNzd29yZCcsICgpID0+IHtcbiAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgamVzdC5yZXNldE1vZHVsZXMoKTtcbiAgICBwcm9jZXNzLmVudiA9IHsgLi4ub3JpZ2luYWxFbnYgfTtcbiAgICBjbGVhckFsbE1vY2tzKCk7XG4gICAgZ2VuZXJhdGVSZXNldFRva2VuTW9jay5tb2NrUmVzb2x2ZWRWYWx1ZSgnbW9ja2VkLXJlc2V0LXRva2VuJyk7XG4gICAgc2VuZFBhc3N3b3JkUmVzZXRFbWFpbE1vY2subW9ja1Jlc29sdmVkVmFsdWUodW5kZWZpbmVkKTtcbiAgICBwcm9jZXNzLmVudi5SRVNFTkRfQVBJX0tFWSA9ICd0ZXN0LXJlc2VuZC1hcGkta2V5JztcbiAgfSk7XG5cbiAgYWZ0ZXJBbGwoKCkgPT4ge1xuICAgIHByb2Nlc3MuZW52ID0gb3JpZ2luYWxFbnY7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgcmV0dXJuIHN1Y2Nlc3MgdHJ1ZSB3aGVuIHVzZXIgZXhpc3RzIGFuZCBlbWFpbCBpcyBzZW50JywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IHJlcXVlc3RCb2R5ID0geyBlbWFpbDogJ3VzZXJAZXhhbXBsZS5jb20nIH07XG4gICAgY29uc3QgcmVxID0gbmV3IFJlcXVlc3QoJ2h0dHA6Ly9sb2NhbGhvc3QvYXBpL2F1dGgvcmVzZXQtcGFzc3dvcmQnLCB7XG4gICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHJlcXVlc3RCb2R5KSxcbiAgICAgIGhlYWRlcnM6IHsgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyB9LFxuICAgIH0pO1xuXG4gICAgY29uc3QgbW9ja1VzZXIgPSBjcmVhdGVNb2NrVXNlcih7XG4gICAgICBpZDogJ3VzZXItaWQnLFxuICAgICAgZW1haWw6IHJlcXVlc3RCb2R5LmVtYWlsLFxuICAgICAgbmFtZTogJ1Rlc3QgVXNlcicsXG4gICAgICBjcmVkaXRzOiAxMCxcbiAgICAgIHJvbGU6IFVzZXJSb2xlLlVTRVIsXG4gICAgfSk7XG4gICAgcHJpc21hTW9jay51c2VyLmZpbmRVbmlxdWUubW9ja1Jlc29sdmVkVmFsdWUobW9ja1VzZXIpO1xuICAgIHByaXNtYU1vY2sudXNlci51cGRhdGUubW9ja1Jlc29sdmVkVmFsdWUobW9ja1VzZXIpO1xuXG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBQT1NUKHJlcSBhcyBSZXF1ZXN0KTtcbiAgICBjb25zdCByZXNwb25zZUJvZHkgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG5cbiAgICBhY3R1YWxFeHBlY3QocmVzcG9uc2Uuc3RhdHVzKS50b0JlKDIwMCk7XG4gICAgYWN0dWFsRXhwZWN0KHJlc3BvbnNlQm9keS5zdWNjZXNzKS50b0JlKHRydWUpO1xuICAgIGFjdHVhbEV4cGVjdChwcmlzbWFNb2NrLnVzZXIuZmluZFVuaXF1ZSkudG9IYXZlQmVlbkNhbGxlZFdpdGgoeyB3aGVyZTogeyBlbWFpbDogcmVxdWVzdEJvZHkuZW1haWwgfSB9KTtcbiAgICBhY3R1YWxFeHBlY3QoZ2VuZXJhdGVSZXNldFRva2VuTW9jaykudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgIGFjdHVhbEV4cGVjdChwcmlzbWFNb2NrLnVzZXIudXBkYXRlKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCh7XG4gICAgICB3aGVyZTogeyBpZDogbW9ja1VzZXIuaWQgfSxcbiAgICAgIGRhdGE6IHtcbiAgICAgICAgdXBkYXRlZEF0OiBhY3R1YWxFeHBlY3QuYW55KERhdGUpLFxuICAgICAgfSxcbiAgICB9KTtcbiAgICBhY3R1YWxFeHBlY3Qoc2VuZFBhc3N3b3JkUmVzZXRFbWFpbE1vY2spLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKHJlcXVlc3RCb2R5LmVtYWlsLCAnbW9ja2VkLXJlc2V0LXRva2VuJyk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgcmV0dXJuIHN1Y2Nlc3MgdHJ1ZSBldmVuIGlmIHVzZXIgZG9lcyBub3QgZXhpc3QgKHNlY3VyaXR5IG1lYXN1cmUpJywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IHJlcXVlc3RCb2R5ID0geyBlbWFpbDogJ25vbmV4aXN0ZW50QGV4YW1wbGUuY29tJyB9O1xuICAgIGNvbnN0IHJlcSA9IG5ldyBSZXF1ZXN0KCdodHRwOi8vbG9jYWxob3N0L2FwaS9hdXRoL3Jlc2V0LXBhc3N3b3JkJywge1xuICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShyZXF1ZXN0Qm9keSksXG4gICAgICBoZWFkZXJzOiB7ICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicgfSxcbiAgICB9KTtcblxuICAgIHByaXNtYU1vY2sudXNlci5maW5kVW5pcXVlLm1vY2tSZXNvbHZlZFZhbHVlKG51bGwpO1xuXG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBQT1NUKHJlcSBhcyBSZXF1ZXN0KTtcbiAgICBjb25zdCByZXNwb25zZUJvZHkgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG5cbiAgICBhY3R1YWxFeHBlY3QocmVzcG9uc2Uuc3RhdHVzKS50b0JlKDIwMCk7XG4gICAgYWN0dWFsRXhwZWN0KHJlc3BvbnNlQm9keS5zdWNjZXNzKS50b0JlKHRydWUpO1xuICAgIGFjdHVhbEV4cGVjdChnZW5lcmF0ZVJlc2V0VG9rZW5Nb2NrKS5ub3QudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgIGFjdHVhbEV4cGVjdChwcmlzbWFNb2NrLnVzZXIudXBkYXRlKS5ub3QudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgIGFjdHVhbEV4cGVjdChzZW5kUGFzc3dvcmRSZXNldEVtYWlsTW9jaykubm90LnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCByZXR1cm4gNDAwIGZvciBpbnZhbGlkIGVtYWlsIGZvcm1hdCcsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCByZXF1ZXN0Qm9keSA9IHsgZW1haWw6ICdpbnZhbGlkLWVtYWlsJyB9O1xuICAgIGNvbnN0IHJlcSA9IG5ldyBSZXF1ZXN0KCdodHRwOi8vbG9jYWxob3N0L2FwaS9hdXRoL3Jlc2V0LXBhc3N3b3JkJywge1xuICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShyZXF1ZXN0Qm9keSksXG4gICAgICBoZWFkZXJzOiB7ICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicgfSxcbiAgICB9KTtcblxuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgUE9TVChyZXEgYXMgUmVxdWVzdCk7XG4gICAgY29uc3QgcmVzcG9uc2VCb2R5ID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuXG4gICAgYWN0dWFsRXhwZWN0KHJlc3BvbnNlLnN0YXR1cykudG9CZSg1MDApOyAvLyB6b2Tjga5wYXJzZeOCqOODqeODvOOBr+ePvueKtjUwMOOBq+OBquOCi+OBjOOAgeWwhuadpeeahOOBq+OBrzQwMOOBq+OBl+OBn+OBhFxuICAgIC8vIGV4cGVjdChyZXNwb25zZUJvZHkuZXJyb3IpLnRvQ29udGFpbignSW52YWxpZCBlbWFpbCcpOyAvLyB6b2Tjga7jgqjjg6njg7zjg6Hjg4Pjgrvjg7zjgrjjgpLnorroqo1cbiAgICBhY3R1YWxFeHBlY3QocmVzcG9uc2VCb2R5LmVycm9yKS50b0JlKCfjg5Hjgrnjg6/jg7zjg4njg6rjgrvjg4Pjg4jjga7opoHmsYLjgavlpLHmlZfjgZfjgb7jgZfjgZ8nKTsgLy8g54++54q244Gv5rGO55So44Ko44Op44O8XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgcmV0dXJuIDUwMCBpZiBSRVNFTkRfQVBJX0tFWSBpcyBub3Qgc2V0JywgYXN5bmMgKCkgPT4ge1xuICAgIGRlbGV0ZSBwcm9jZXNzLmVudi5SRVNFTkRfQVBJX0tFWTsgLy8g55Kw5aKD5aSJ5pWw44KS5YmK6ZmkXG4gICAgY29uc3QgcmVxdWVzdEJvZHkgPSB7IGVtYWlsOiAndXNlckBleGFtcGxlLmNvbScgfTtcbiAgICBjb25zdCByZXEgPSBuZXcgUmVxdWVzdCgnaHR0cDovL2xvY2FsaG9zdC9hcGkvYXV0aC9yZXNldC1wYXNzd29yZCcsIHtcbiAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkocmVxdWVzdEJvZHkpLFxuICAgICAgaGVhZGVyczogeyAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nIH0sXG4gICAgfSk7XG5cbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IFBPU1QocmVxIGFzIFJlcXVlc3QpO1xuICAgIGNvbnN0IHJlc3BvbnNlQm9keSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcblxuICAgIGFjdHVhbEV4cGVjdChyZXNwb25zZS5zdGF0dXMpLnRvQmUoNTAwKTtcbiAgICBhY3R1YWxFeHBlY3QocmVzcG9uc2VCb2R5LmVycm9yKS50b0JlKCdFbWFpbCBzZXJ2aWNlIGNvbmZpZ3VyYXRpb24gZXJyb3InKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCByZXR1cm4gNTAwIGlmIGdlbmVyYXRlUmVzZXRUb2tlbiBmYWlscycsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCByZXF1ZXN0Qm9keSA9IHsgZW1haWw6ICd1c2VyQGV4YW1wbGUuY29tJyB9O1xuICAgIGNvbnN0IHJlcSA9IG5ldyBSZXF1ZXN0KCdodHRwOi8vbG9jYWxob3N0L2FwaS9hdXRoL3Jlc2V0LXBhc3N3b3JkJywge1xuICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShyZXF1ZXN0Qm9keSksXG4gICAgICBoZWFkZXJzOiB7ICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicgfSxcbiAgICB9KTtcbiAgICBjb25zdCBtb2NrVXNlciA9IGNyZWF0ZU1vY2tVc2VyKHsgaWQ6ICd1c2VyLWlkJyB9KTtcbiAgICBwcmlzbWFNb2NrLnVzZXIuZmluZFVuaXF1ZS5tb2NrUmVzb2x2ZWRWYWx1ZShtb2NrVXNlcik7XG4gICAgZ2VuZXJhdGVSZXNldFRva2VuTW9jay5tb2NrUmVqZWN0ZWRWYWx1ZShuZXcgRXJyb3IoJ1Rva2VuIGdlbmVyYXRpb24gZmFpbGVkJykpO1xuXG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBQT1NUKHJlcSBhcyBSZXF1ZXN0KTtcbiAgICBjb25zdCByZXNwb25zZUJvZHkgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG5cbiAgICBhY3R1YWxFeHBlY3QocmVzcG9uc2Uuc3RhdHVzKS50b0JlKDUwMCk7XG4gICAgYWN0dWFsRXhwZWN0KHJlc3BvbnNlQm9keS5lcnJvcikudG9CZSgn44OR44K544Ov44O844OJ44Oq44K744OD44OI44Gu6KaB5rGC44Gr5aSx5pWX44GX44G+44GX44GfJyk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgcmV0dXJuIDUwMCBpZiBzZW5kUGFzc3dvcmRSZXNldEVtYWlsIGZhaWxzJywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IHJlcXVlc3RCb2R5ID0geyBlbWFpbDogJ3VzZXJAZXhhbXBsZS5jb20nIH07XG4gICAgY29uc3QgcmVxID0gbmV3IFJlcXVlc3QoJ2h0dHA6Ly9sb2NhbGhvc3QvYXBpL2F1dGgvcmVzZXQtcGFzc3dvcmQnLCB7XG4gICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHJlcXVlc3RCb2R5KSxcbiAgICAgIGhlYWRlcnM6IHsgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyB9LFxuICAgIH0pO1xuICAgIGNvbnN0IG1vY2tVc2VyID0gY3JlYXRlTW9ja1VzZXIoeyBpZDogJ3VzZXItaWQnIH0pO1xuICAgIHByaXNtYU1vY2sudXNlci5maW5kVW5pcXVlLm1vY2tSZXNvbHZlZFZhbHVlKG1vY2tVc2VyKTtcbiAgICBwcmlzbWFNb2NrLnVzZXIudXBkYXRlLm1vY2tSZXNvbHZlZFZhbHVlKG1vY2tVc2VyKTtcbiAgICBzZW5kUGFzc3dvcmRSZXNldEVtYWlsTW9jay5tb2NrUmVqZWN0ZWRWYWx1ZShuZXcgRXJyb3IoJ0VtYWlsIHNlbmRpbmcgZmFpbGVkJykpO1xuXG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBQT1NUKHJlcSBhcyBSZXF1ZXN0KTtcbiAgICBjb25zdCByZXNwb25zZUJvZHkgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG5cbiAgICBhY3R1YWxFeHBlY3QocmVzcG9uc2Uuc3RhdHVzKS50b0JlKDUwMCk7XG4gICAgYWN0dWFsRXhwZWN0KHJlc3BvbnNlQm9keS5lcnJvcikudG9CZSgn44OR44K544Ov44O844OJ44Oq44K744OD44OI44Gu6KaB5rGC44Gr5aSx5pWX44GX44G+44GX44GfJyk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgcmV0dXJuIDUwMCBpZiBwcmlzbWEudXNlci51cGRhdGUgZmFpbHMnLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgcmVxdWVzdEJvZHkgPSB7IGVtYWlsOiAndXNlckBleGFtcGxlLmNvbScgfTtcbiAgICBjb25zdCByZXEgPSBuZXcgUmVxdWVzdCgnaHR0cDovL2xvY2FsaG9zdC9hcGkvYXV0aC9yZXNldC1wYXNzd29yZCcsIHtcbiAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkocmVxdWVzdEJvZHkpLFxuICAgICAgaGVhZGVyczogeyAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nIH0sXG4gICAgfSk7XG4gICAgY29uc3QgbW9ja1VzZXIgPSBjcmVhdGVNb2NrVXNlcih7IGlkOiAndXNlci1pZCcgfSk7XG4gICAgcHJpc21hTW9jay51c2VyLmZpbmRVbmlxdWUubW9ja1Jlc29sdmVkVmFsdWUobW9ja1VzZXIpO1xuICAgIHByaXNtYU1vY2sudXNlci51cGRhdGUubW9ja1JlamVjdGVkVmFsdWUobmV3IEVycm9yKCdEQiB1cGRhdGUgZmFpbGVkJykpO1xuXG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBQT1NUKHJlcSBhcyBSZXF1ZXN0KTtcbiAgICBjb25zdCByZXNwb25zZUJvZHkgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG5cbiAgICBhY3R1YWxFeHBlY3QocmVzcG9uc2Uuc3RhdHVzKS50b0JlKDUwMCk7XG4gICAgYWN0dWFsRXhwZWN0KHJlc3BvbnNlQm9keS5lcnJvcikudG9CZSgn44OR44K544Ov44O844OJ44Oq44K744OD44OI44Gu6KaB5rGC44Gr5aSx5pWX44GX44G+44GX44GfJyk7XG4gIH0pO1xufSk7ICJdLCJuYW1lcyI6WyJqZXN0IiwibW9jayIsImdlbmVyYXRlUmVzZXRUb2tlbiIsImZuIiwic2VuZFBhc3N3b3JkUmVzZXRFbWFpbCIsImFjdHVhbEV4cGVjdCIsImdsb2JhbCIsImV4cGVjdCIsInByaXNtYU1vY2siLCJjcmVhdGVQcmlzbWFNb2NrIiwiZ2VuZXJhdGVSZXNldFRva2VuTW9jayIsInNlbmRQYXNzd29yZFJlc2V0RW1haWxNb2NrIiwib3JpZ2luYWxFbnYiLCJwcm9jZXNzIiwiZW52IiwiZGVzY3JpYmUiLCJiZWZvcmVFYWNoIiwicmVzZXRNb2R1bGVzIiwiY2xlYXJBbGxNb2NrcyIsIm1vY2tSZXNvbHZlZFZhbHVlIiwidW5kZWZpbmVkIiwiUkVTRU5EX0FQSV9LRVkiLCJhZnRlckFsbCIsIml0IiwicmVxdWVzdEJvZHkiLCJlbWFpbCIsInJlcSIsIlJlcXVlc3QiLCJtZXRob2QiLCJib2R5IiwiSlNPTiIsInN0cmluZ2lmeSIsImhlYWRlcnMiLCJtb2NrVXNlciIsImNyZWF0ZU1vY2tVc2VyIiwiaWQiLCJuYW1lIiwiY3JlZGl0cyIsInJvbGUiLCJVc2VyUm9sZSIsIlVTRVIiLCJ1c2VyIiwiZmluZFVuaXF1ZSIsInVwZGF0ZSIsInJlc3BvbnNlIiwiUE9TVCIsInJlc3BvbnNlQm9keSIsImpzb24iLCJzdGF0dXMiLCJ0b0JlIiwic3VjY2VzcyIsInRvSGF2ZUJlZW5DYWxsZWRXaXRoIiwid2hlcmUiLCJ0b0hhdmVCZWVuQ2FsbGVkIiwiZGF0YSIsInVwZGF0ZWRBdCIsImFueSIsIkRhdGUiLCJub3QiLCJlcnJvciIsIm1vY2tSZWplY3RlZFZhbHVlIiwiRXJyb3IiXSwibWFwcGluZ3MiOiI7QUFTQSxpQkFBaUI7QUFDakJBLEtBQUtDLElBQUksQ0FBQyxvQkFBb0IsSUFBTyxDQUFBO1FBQ25DQyxvQkFBb0JGLEtBQUtHLEVBQUU7SUFDN0IsQ0FBQTtBQUVBLGNBQWM7QUFDZEgsS0FBS0MsSUFBSSxDQUFDLG9CQUFvQixJQUFPLENBQUE7UUFDbkNHLHdCQUF3QkosS0FBS0csRUFBRTtJQUNqQyxDQUFBOzs7O3VCQWpCcUI7dUJBQ2M7c0JBQ0k7MkJBQ3lCO3dCQUN2QztBQUV6Qiw2QkFBNkI7QUFDN0IsTUFBTUUsZUFBZUMsT0FBT0MsTUFBTTtBQVlsQyxNQUFNQyxhQUFhQyxJQUFBQSwyQkFBZ0I7QUFDbkMsTUFBTUMseUJBQXlCUix5QkFBa0I7QUFDakQsTUFBTVMsNkJBQTZCUCw0QkFBc0I7QUFFekQsTUFBTVEsY0FBY0MsUUFBUUMsR0FBRztBQUUvQkMsU0FBUyxpQ0FBaUM7SUFDeENDLFdBQVc7UUFDVGhCLEtBQUtpQixZQUFZO1FBQ2pCSixRQUFRQyxHQUFHLEdBQUc7WUFBRSxHQUFHRixXQUFXO1FBQUM7UUFDL0JNLElBQUFBLHdCQUFhO1FBQ2JSLHVCQUF1QlMsaUJBQWlCLENBQUM7UUFDekNSLDJCQUEyQlEsaUJBQWlCLENBQUNDO1FBQzdDUCxRQUFRQyxHQUFHLENBQUNPLGNBQWMsR0FBRztJQUMvQjtJQUVBQyxTQUFTO1FBQ1BULFFBQVFDLEdBQUcsR0FBR0Y7SUFDaEI7SUFFQVcsR0FBRyxpRUFBaUU7UUFDbEUsTUFBTUMsY0FBYztZQUFFQyxPQUFPO1FBQW1CO1FBQ2hELE1BQU1DLE1BQU0sSUFBSUMsUUFBUSw0Q0FBNEM7WUFDbEVDLFFBQVE7WUFDUkMsTUFBTUMsS0FBS0MsU0FBUyxDQUFDUDtZQUNyQlEsU0FBUztnQkFBRSxnQkFBZ0I7WUFBbUI7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