{"version":3,"sources":["/Users/yusuketsunoda/Documents/cursor/ppttranslatorapp/worktrees/cicd-setup/tests/api/auth/reset-password/route.test.ts"],"sourcesContent":["import { POST } from '@/app/api/auth/reset-password/route';\nimport { generateResetToken } from '@/lib/auth/token';\nimport { sendPasswordResetEmail } from '@/lib/email/send';\nimport { NextRequest } from 'next/server';\nimport { createPrismaMock, createMockUser, clearAllMocks } from '@/tests/helpers/mockSetup';\n\n// Token 生成関数のモック\njest.mock('@/lib/auth/token', () => ({\n  generateResetToken: jest.fn(),\n}));\n\n// メール送信関数のモック\njest.mock('@/lib/email/send', () => ({\n  sendPasswordResetEmail: jest.fn(),\n}));\n\nconst prismaMock = createPrismaMock();\nconst generateResetTokenMock = generateResetToken as jest.Mock;\nconst sendPasswordResetEmailMock = sendPasswordResetEmail as jest.Mock;\n\nconst originalEnv = process.env;\n\ndescribe('POST /api/auth/reset-password', () => {\n  beforeEach(() => {\n    jest.resetModules();\n    process.env = { ...originalEnv };\n    clearAllMocks();\n    generateResetTokenMock.mockResolvedValue('mocked-reset-token');\n    sendPasswordResetEmailMock.mockResolvedValue(undefined);\n    process.env.RESEND_API_KEY = 'test-resend-api-key';\n  });\n\n  afterAll(() => {\n    process.env = originalEnv;\n  });\n\n  it('should return success true when user exists and email is sent', async () => {\n    const requestBody = { email: 'user@example.com' };\n    const req = new NextRequest('http://localhost/api/auth/reset-password', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: { 'Content-Type': 'application/json' },\n    });\n\n    const mockUser = createMockUser({\n      id: 'user-id',\n      email: requestBody.email,\n      name: 'Test User',\n      credits: 10,\n    });\n    prismaMock.user.findUnique.mockResolvedValue(mockUser);\n    prismaMock.user.update.mockResolvedValue(mockUser);\n\n    const response = await POST(req as Request);\n    const responseBody = await response.json();\n\n    expect(response.status).toBe(200);\n    expect(responseBody.success).toBe(true);\n    expect(prismaMock.user.findUnique).toHaveBeenCalledWith({ where: { email: requestBody.email } });\n    expect(generateResetTokenMock).toHaveBeenCalled();\n    expect(prismaMock.user.update).toHaveBeenCalledWith({\n      where: { id: mockUser.id },\n      data: {\n        updatedAt: expect.any(Date),\n      },\n    });\n    expect(sendPasswordResetEmailMock).toHaveBeenCalledWith(requestBody.email, 'mocked-reset-token');\n  });\n\n  it('should return success true even if user does not exist (security measure)', async () => {\n    const requestBody = { email: 'nonexistent@example.com' };\n    const req = new NextRequest('http://localhost/api/auth/reset-password', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: { 'Content-Type': 'application/json' },\n    });\n\n    prismaMock.user.findUnique.mockResolvedValue(null);\n\n    const response = await POST(req as Request);\n    const responseBody = await response.json();\n\n    expect(response.status).toBe(200);\n    expect(responseBody.success).toBe(true);\n    expect(generateResetTokenMock).not.toHaveBeenCalled();\n    expect(prismaMock.user.update).not.toHaveBeenCalled();\n    expect(sendPasswordResetEmailMock).not.toHaveBeenCalled();\n  });\n\n  it('should return 400 for invalid email format', async () => {\n    const requestBody = { email: 'invalid-email' };\n    const req = new NextRequest('http://localhost/api/auth/reset-password', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: { 'Content-Type': 'application/json' },\n    });\n\n    const response = await POST(req as Request);\n    const responseBody = await response.json();\n\n    expect(response.status).toBe(500); // zodのparseエラーは現状500になるが、将来的には400にしたい\n    // expect(responseBody.error).toContain('Invalid email'); // zodのエラーメッセージを確認\n    expect(responseBody.error).toBe('パスワードリセットの要求に失敗しました'); // 現状は汎用エラー\n  });\n\n  it('should return 500 if RESEND_API_KEY is not set', async () => {\n    delete process.env.RESEND_API_KEY; // 環境変数を削除\n    const requestBody = { email: 'user@example.com' };\n    const req = new NextRequest('http://localhost/api/auth/reset-password', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: { 'Content-Type': 'application/json' },\n    });\n\n    const response = await POST(req as Request);\n    const responseBody = await response.json();\n\n    expect(response.status).toBe(500);\n    expect(responseBody.error).toBe('Email service configuration error');\n  });\n\n  it('should return 500 if generateResetToken fails', async () => {\n    const requestBody = { email: 'user@example.com' };\n    const req = new NextRequest('http://localhost/api/auth/reset-password', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: { 'Content-Type': 'application/json' },\n    });\n    const mockUser = createMockUser({ id: 'user-id' });\n    prismaMock.user.findUnique.mockResolvedValue(mockUser);\n    generateResetTokenMock.mockRejectedValue(new Error('Token generation failed'));\n\n    const response = await POST(req as Request);\n    const responseBody = await response.json();\n\n    expect(response.status).toBe(500);\n    expect(responseBody.error).toBe('パスワードリセットの要求に失敗しました');\n  });\n\n  it('should return 500 if sendPasswordResetEmail fails', async () => {\n    const requestBody = { email: 'user@example.com' };\n    const req = new NextRequest('http://localhost/api/auth/reset-password', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: { 'Content-Type': 'application/json' },\n    });\n    const mockUser = createMockUser({ id: 'user-id' });\n    prismaMock.user.findUnique.mockResolvedValue(mockUser);\n    prismaMock.user.update.mockResolvedValue(mockUser);\n    sendPasswordResetEmailMock.mockRejectedValue(new Error('Email sending failed'));\n\n    const response = await POST(req as Request);\n    const responseBody = await response.json();\n\n    expect(response.status).toBe(500);\n    expect(responseBody.error).toBe('パスワードリセットの要求に失敗しました');\n  });\n\n  it('should return 500 if prisma.user.update fails', async () => {\n    const requestBody = { email: 'user@example.com' };\n    const req = new NextRequest('http://localhost/api/auth/reset-password', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: { 'Content-Type': 'application/json' },\n    });\n    const mockUser = createMockUser({ id: 'user-id' });\n    prismaMock.user.findUnique.mockResolvedValue(mockUser);\n    prismaMock.user.update.mockRejectedValue(new Error('DB update failed'));\n\n    const response = await POST(req as Request);\n    const responseBody = await response.json();\n\n    expect(response.status).toBe(500);\n    expect(responseBody.error).toBe('パスワードリセットの要求に失敗しました');\n  });\n}); "],"names":["jest","mock","generateResetToken","fn","sendPasswordResetEmail","prismaMock","createPrismaMock","generateResetTokenMock","sendPasswordResetEmailMock","originalEnv","process","env","describe","beforeEach","resetModules","clearAllMocks","mockResolvedValue","undefined","RESEND_API_KEY","afterAll","it","requestBody","email","req","NextRequest","method","body","JSON","stringify","headers","mockUser","createMockUser","id","name","credits","user","findUnique","update","response","POST","responseBody","json","expect","status","toBe","success","toHaveBeenCalledWith","where","toHaveBeenCalled","data","updatedAt","any","Date","not","error","mockRejectedValue","Error"],"mappings":"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"}