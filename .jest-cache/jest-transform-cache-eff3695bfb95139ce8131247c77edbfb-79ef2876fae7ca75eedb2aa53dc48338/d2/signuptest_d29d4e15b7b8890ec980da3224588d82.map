{"version":3,"sources":["/Users/yusuketsunoda/Documents/cursor/ppttranslatorapp/worktrees/cicd-setup/tests/api/auth/signup.test.ts"],"sourcesContent":["import { POST } from '@/app/api/auth/signup/route';\nimport { PrismaClient } from '@prisma/client';\nimport { NextRequest } from 'next/server';\nimport bcrypt from 'bcrypt';\n\n// モック設定\njest.mock('@prisma/client', () => ({\n  PrismaClient: jest.fn().mockImplementation(() => ({\n    user: {\n      findUnique: jest.fn(),\n      create: jest.fn(),\n    },\n    $disconnect: jest.fn(),\n  })),\n}));\n\njest.mock('bcrypt', () => ({\n  hash: jest.fn(),\n}));\n\n// テスト用のモック関数\nconst bcryptHashMock = bcrypt.hash as jest.Mock;\n\ndescribe('Signup API', () => {\n  let prisma: jest.Mocked<PrismaClient>;\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n    prisma = new PrismaClient() as jest.Mocked<PrismaClient>;\n    bcryptHashMock.mockResolvedValue('hashed_password');\n  });\n\n  describe('POST /api/auth/signup', () => {\n    it('正常なサインアップリクエストを処理できる', async () => {\n      // ユーザーが存在しない場合のモック設定\n      prisma.user.findUnique.mockResolvedValue(null);\n      \n      // パスワードハッシュ化のモック\n      (bcrypt.hash as jest.Mock).mockResolvedValue('hashed_password');\n\n      // ユーザー作成のモック\n      prisma.user.create.mockResolvedValue({\n        id: 'test-user-id',\n        name: 'Test User',\n        email: 'test@example.com',\n        password: 'hashed_password',\n        credits: 100,\n        updatedAt: new Date(),\n      });\n\n      const req = new Request('http://localhost:3000/api/auth/signup', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          name: 'Test User',\n          email: 'test@example.com',\n          password: 'password123',\n        }),\n      });\n\n      const response = await POST(req as unknown as NextRequest);\n      expect(response.status).toBe(201);\n\n      const data = await response.json();\n      expect(data.message).toBe('ユーザーが正常に作成されました');\n      expect(data.user).toEqual({\n        id: 'test-user-id',\n        name: 'Test User',\n        email: 'test@example.com',\n      });\n    });\n\n    it('必須フィールドが欠けている場合は400エラーを返す', async () => {\n      const testCases = [\n        { \n          body: { email: 'test@example.com', password: 'password123' },\n          expectedError: '名前は必須です'\n        },\n        { \n          body: { name: 'Test User', password: 'password123' },\n          expectedError: '有効なメールアドレスを入力してください'\n        },\n        { \n          body: { name: 'Test User', email: 'test@example.com' },\n          expectedError: 'パスワードは6文字以上必要です'\n        },\n      ];\n\n      for (const testCase of testCases) {\n        const req = new Request('http://localhost:3000/api/auth/signup', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify(testCase.body),\n        });\n\n        const response = await POST(req as unknown as NextRequest);\n        expect(response.status).toBe(400);\n\n        const data = await response.json();\n        expect(data.error).toBe(testCase.expectedError);\n      }\n    });\n\n    it('既存のメールアドレスの場合は400エラーを返す', async () => {\n      // ユーザーが既に存在する場合のモック設定\n      prisma.user.findUnique.mockResolvedValue({\n        id: 'existing-user-id',\n        name: 'Existing User',\n        email: 'test@example.com',\n        password: 'hashed_password',\n      });\n\n      const req = new Request('http://localhost:3000/api/auth/signup', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          name: 'Test User',\n          email: 'test@example.com',\n          password: 'password123',\n        }),\n      });\n\n      const response = await POST(req as unknown as NextRequest);\n      expect(response.status).toBe(400);\n\n      const data = await response.json();\n      expect(data.error).toBe('このメールアドレスは既に登録されています');\n    });\n\n    it('パスワードが短すぎる場合は400エラーを返す', async () => {\n      const req = new Request('http://localhost:3000/api/auth/signup', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          name: 'Test User',\n          email: 'test@example.com',\n          password: '12345', // 6文字未満\n        }),\n      });\n\n      const response = await POST(req as unknown as NextRequest);\n      expect(response.status).toBe(400);\n\n      const data = await response.json();\n      expect(data.error).toBe('パスワードは6文字以上必要です');\n    });\n\n    it('メールアドレスの形式が不正な場合は400エラーを返す', async () => {\n      const req = new Request('http://localhost:3000/api/auth/signup', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          name: 'Test User',\n          email: 'invalid-email', // 不正なメールアドレス形式\n          password: 'password123',\n        }),\n      });\n\n      const response = await POST(req as unknown as NextRequest);\n      expect(response.status).toBe(400);\n\n      const data = await response.json();\n      expect(data.error).toBe('有効なメールアドレスを入力してください');\n    });\n\n    it('データベースエラーの場合は500エラーを返す', async () => {\n      // データベースエラーのモック設定\n      prisma.user.findUnique.mockRejectedValue(new Error('Database error'));\n\n      const req = new Request('http://localhost:3000/api/auth/signup', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          name: 'Test User',\n          email: 'test@example.com',\n          password: 'password123',\n        }),\n      });\n\n      const response = await POST(req as unknown as NextRequest);\n      expect(response.status).toBe(500);\n\n      const data = await response.json();\n      expect(data.error).toBeTruthy();\n    });\n  });\n});"],"names":["jest","mock","PrismaClient","fn","mockImplementation","user","findUnique","create","$disconnect","hash","bcryptHashMock","bcrypt","describe","prisma","beforeEach","clearAllMocks","mockResolvedValue","it","id","name","email","password","credits","updatedAt","Date","req","Request","method","headers","body","JSON","stringify","response","POST","expect","status","toBe","data","json","message","toEqual","testCases","expectedError","testCase","error","mockRejectedValue","Error","toBeTruthy"],"mappings":"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"}