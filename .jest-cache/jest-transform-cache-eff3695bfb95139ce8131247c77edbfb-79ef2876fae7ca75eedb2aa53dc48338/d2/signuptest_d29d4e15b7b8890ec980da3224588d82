983d6d6e8e2252cd6aa28c2957867125
"use strict";
// モック設定
jest.mock('@prisma/client', ()=>({
        PrismaClient: jest.fn().mockImplementation(()=>({
                user: {
                    findUnique: jest.fn(),
                    create: jest.fn()
                },
                $disconnect: jest.fn()
            }))
    }));
jest.mock('bcrypt', ()=>({
        hash: jest.fn()
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _interop_require_default = require("@swc/helpers/_/_interop_require_default");
const _route = require("@/app/api/auth/signup/route");
const _client = require("@prisma/client");
const _bcrypt = /*#__PURE__*/ _interop_require_default._(require("bcrypt"));
// テスト用のモック関数
const bcryptHashMock = _bcrypt.default.hash;
describe('Signup API', ()=>{
    let prisma;
    beforeEach(()=>{
        jest.clearAllMocks();
        prisma = new _client.PrismaClient();
        bcryptHashMock.mockResolvedValue('hashed_password');
    });
    describe('POST /api/auth/signup', ()=>{
        it('正常なサインアップリクエストを処理できる', async ()=>{
            // ユーザーが存在しない場合のモック設定
            prisma.user.findUnique.mockResolvedValue(null);
            // パスワードハッシュ化のモック
            _bcrypt.default.hash.mockResolvedValue('hashed_password');
            // ユーザー作成のモック
            prisma.user.create.mockResolvedValue({
                id: 'test-user-id',
                name: 'Test User',
                email: 'test@example.com',
                password: 'hashed_password',
                credits: 100,
                updatedAt: new Date()
            });
            const req = new Request('http://localhost:3000/api/auth/signup', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    name: 'Test User',
                    email: 'test@example.com',
                    password: 'password123'
                })
            });
            const response = await (0, _route.POST)(req);
            expect(response.status).toBe(201);
            const data = await response.json();
            expect(data.message).toBe('ユーザーが正常に作成されました');
            expect(data.user).toEqual({
                id: 'test-user-id',
                name: 'Test User',
                email: 'test@example.com'
            });
        });
        it('必須フィールドが欠けている場合は400エラーを返す', async ()=>{
            const testCases = [
                {
                    body: {
                        email: 'test@example.com',
                        password: 'password123'
                    },
                    expectedError: '名前は必須です'
                },
                {
                    body: {
                        name: 'Test User',
                        password: 'password123'
                    },
                    expectedError: '有効なメールアドレスを入力してください'
                },
                {
                    body: {
                        name: 'Test User',
                        email: 'test@example.com'
                    },
                    expectedError: 'パスワードは6文字以上必要です'
                }
            ];
            for (const testCase of testCases){
                const req = new Request('http://localhost:3000/api/auth/signup', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(testCase.body)
                });
                const response = await (0, _route.POST)(req);
                expect(response.status).toBe(400);
                const data = await response.json();
                expect(data.error).toBe(testCase.expectedError);
            }
        });
        it('既存のメールアドレスの場合は400エラーを返す', async ()=>{
            // ユーザーが既に存在する場合のモック設定
            prisma.user.findUnique.mockResolvedValue({
                id: 'existing-user-id',
                name: 'Existing User',
                email: 'test@example.com',
                password: 'hashed_password'
            });
            const req = new Request('http://localhost:3000/api/auth/signup', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    name: 'Test User',
                    email: 'test@example.com',
                    password: 'password123'
                })
            });
            const response = await (0, _route.POST)(req);
            expect(response.status).toBe(400);
            const data = await response.json();
            expect(data.error).toBe('このメールアドレスは既に登録されています');
        });
        it('パスワードが短すぎる場合は400エラーを返す', async ()=>{
            const req = new Request('http://localhost:3000/api/auth/signup', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    name: 'Test User',
                    email: 'test@example.com',
                    password: '12345'
                })
            });
            const response = await (0, _route.POST)(req);
            expect(response.status).toBe(400);
            const data = await response.json();
            expect(data.error).toBe('パスワードは6文字以上必要です');
        });
        it('メールアドレスの形式が不正な場合は400エラーを返す', async ()=>{
            const req = new Request('http://localhost:3000/api/auth/signup', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    name: 'Test User',
                    email: 'invalid-email',
                    password: 'password123'
                })
            });
            const response = await (0, _route.POST)(req);
            expect(response.status).toBe(400);
            const data = await response.json();
            expect(data.error).toBe('有効なメールアドレスを入力してください');
        });
        it('データベースエラーの場合は500エラーを返す', async ()=>{
            // データベースエラーのモック設定
            prisma.user.findUnique.mockRejectedValue(new Error('Database error'));
            const req = new Request('http://localhost:3000/api/auth/signup', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    name: 'Test User',
                    email: 'test@example.com',
                    password: 'password123'
                })
            });
            const response = await (0, _route.POST)(req);
            expect(response.status).toBe(500);
            const data = await response.json();
            expect(data.error).toBeTruthy();
        });
    });
});

//# sourceMappingURL=data:application/json;base64,