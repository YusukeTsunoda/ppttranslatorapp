cca10bf8a65534dc9941adb98a1c0699
"use strict";
// Radixコンポーネントのモック
jest.mock('@radix-ui/react-dialog', ()=>{
    const original = jest.requireActual('@radix-ui/react-dialog');
    return {
        ...original,
        Root: ({ children, open, onOpenChange })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "dialog-root",
                "data-open": open,
                onClick: ()=>onOpenChange && onOpenChange(!open),
                children: children
            }),
        Trigger: ({ children })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                "data-testid": "dialog-trigger",
                children: children
            }),
        Portal: ({ children })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "dialog-portal",
                children: children
            }),
        Overlay: /*#__PURE__*/ _react.default.forwardRef(({ children, className, ...props }, ref)=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "dialog-overlay",
                className: className,
                ...props,
                ref: ref,
                children: children
            })),
        Content: /*#__PURE__*/ _react.default.forwardRef(({ children, className, ...props }, ref)=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "dialog-content",
                className: className,
                ...props,
                ref: ref,
                children: children
            })),
        Title: /*#__PURE__*/ _react.default.forwardRef(({ children, className, ...props }, ref)=>/*#__PURE__*/ (0, _jsxruntime.jsx)("h2", {
                "data-testid": "dialog-title",
                className: className,
                ...props,
                ref: ref,
                children: children
            })),
        Description: /*#__PURE__*/ _react.default.forwardRef(({ children, className, ...props }, ref)=>/*#__PURE__*/ (0, _jsxruntime.jsx)("p", {
                "data-testid": "dialog-description",
                className: className,
                ...props,
                ref: ref,
                children: children
            })),
        Close: ({ children })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                "data-testid": "dialog-close",
                children: children
            })
    };
});
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _interop_require_default = require("@swc/helpers/_/_interop_require_default");
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default._(require("react"));
const _react1 = require("@testing-library/react");
const _dialog = require("@/components/ui/dialog");
require("@testing-library/jest-dom");
describe('Dialog', ()=>{
    it('すべてのコンポーネントが正しくレンダリングされること', ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsxs)(_dialog.Dialog, {
            children: [
                /*#__PURE__*/ (0, _jsxruntime.jsx)(_dialog.DialogTrigger, {
                    children: "ダイアログを開く"
                }),
                /*#__PURE__*/ (0, _jsxruntime.jsxs)(_dialog.DialogContent, {
                    children: [
                        /*#__PURE__*/ (0, _jsxruntime.jsxs)(_dialog.DialogHeader, {
                            children: [
                                /*#__PURE__*/ (0, _jsxruntime.jsx)(_dialog.DialogTitle, {
                                    children: "ダイアログタイトル"
                                }),
                                /*#__PURE__*/ (0, _jsxruntime.jsx)(_dialog.DialogDescription, {
                                    children: "これはダイアログの説明です。"
                                })
                            ]
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                            children: "ダイアログの内容"
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsx)(_dialog.DialogFooter, {
                            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_dialog.DialogClose, {
                                children: "閉じる"
                            })
                        })
                    ]
                })
            ]
        }));
        expect(_react1.screen.getByText('ダイアログを開く')).toBeInTheDocument();
        expect(_react1.screen.getByTestId('dialog-root')).toBeInTheDocument();
        expect(_react1.screen.getByTestId('dialog-trigger')).toBeInTheDocument();
        expect(_react1.screen.getByTestId('dialog-portal')).toBeInTheDocument();
        expect(_react1.screen.getByTestId('dialog-content')).toBeInTheDocument();
        expect(_react1.screen.getByTestId('dialog-title')).toHaveTextContent('ダイアログタイトル');
        expect(_react1.screen.getByTestId('dialog-description')).toHaveTextContent('これはダイアログの説明です。');
        expect(_react1.screen.getAllByTestId('dialog-close')).toHaveLength(2);
    });
    it('クラス名が正しく適用されること', ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_dialog.Dialog, {
            children: /*#__PURE__*/ (0, _jsxruntime.jsxs)(_dialog.DialogContent, {
                className: "custom-content",
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)(_dialog.DialogHeader, {
                        className: "custom-header",
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_dialog.DialogTitle, {
                                className: "custom-title",
                                children: "タイトル"
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsx)(_dialog.DialogDescription, {
                                className: "custom-description",
                                children: "説明"
                            })
                        ]
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_dialog.DialogFooter, {
                        className: "custom-footer",
                        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_dialog.DialogClose, {
                            children: "閉じる"
                        })
                    })
                ]
            })
        }));
        expect(_react1.screen.getByTestId('dialog-content').className).toContain('custom-content');
        expect(_react1.screen.getByTestId('dialog-title').className).toContain('custom-title');
        expect(_react1.screen.getByTestId('dialog-description').className).toContain('custom-description');
    });
});
