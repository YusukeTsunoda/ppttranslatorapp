058ee1e2eb3df5ef1aa56a1c0de59f36
"use strict";
// SWRのモック
jest.mock('swr', ()=>{
    return {
        __esModule: true,
        default: jest.fn((_key, _fetcher, options)=>{
            // デフォルトのモックデータを返す
            return {
                data: {
                    success: true,
                    data: [
                        {
                            id: 1,
                            name: 'テストデータ'
                        }
                    ]
                },
                error: undefined,
                isLoading: false,
                isValidating: false,
                mutate: jest.fn()
            };
        })
    };
});
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _useapi = require("@/lib/hooks/use-api");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// fetchのモック
globalThis.fetch = jest.fn();
const mockFetch = globalThis.fetch;
describe('APIフック', ()=>{
    beforeEach(()=>{
        jest.clearAllMocks();
    });
    describe('useApiMutation', ()=>{
        it('ミューテーションを正しく実行する', async ()=>{
            const mockData = {
                id: 1,
                name: '更新されたデータ'
            };
            const updateData = {
                name: '更新されたデータ'
            };
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async ()=>mockData
            });
            const { result } = (0, _react1.renderHook)(()=>(0, _useapi.useApiMutation)('/api/test'));
            expect(result.current.isLoading).toBe(false);
            await (0, _react1.act)(async ()=>{
                await result.current.mutate(updateData);
            });
            expect(mockFetch).toHaveBeenCalledWith('/api/test', expect.objectContaining({
                method: 'POST',
                headers: expect.objectContaining({
                    'Content-Type': 'application/json'
                }),
                body: JSON.stringify(updateData),
                credentials: 'include'
            }));
            expect(result.current.data).toEqual(mockData);
            expect(result.current.error).toBeUndefined();
        });
        it('ミューテーションエラーを正しく処理する', async ()=>{
            mockFetch.mockResolvedValueOnce({
                ok: false,
                status: 500,
                statusText: 'Internal Server Error',
                json: async ()=>({
                        message: 'サーバーエラー'
                    })
            });
            const { result } = (0, _react1.renderHook)(()=>(0, _useapi.useApiMutation)('/api/test'));
            await (0, _react1.act)(async ()=>{
                await result.current.mutate({
                    name: 'テスト'
                });
            });
            expect(result.current.isLoading).toBe(false);
            expect(result.current.data).toBeUndefined();
            expect(result.current.error).toBeDefined();
        });
        it('カスタムメソッドを使用できる', async ()=>{
            const mockData = {
                id: 1,
                name: 'テストデータ'
            };
            mockFetch.mockResolvedValueOnce({
                ok: true,
                json: async ()=>mockData
            });
            const { result } = (0, _react1.renderHook)(()=>(0, _useapi.useApiMutation)('/api/test', {
                    method: 'PUT'
                }));
            await (0, _react1.act)(async ()=>{
                await result.current.mutate({
                    name: 'テスト'
                });
            });
            expect(mockFetch).toHaveBeenCalledWith('/api/test', expect.objectContaining({
                method: 'PUT',
                headers: expect.objectContaining({
                    'Content-Type': 'application/json'
                }),
                body: JSON.stringify({
                    name: 'テスト'
                }),
                credentials: 'include'
            }));
        });
    });
    // useApiRequestのテストは実装しづらいので、一旦スキップ
    describe('useApiRequest', ()=>{
        // テスト実装に問題があるためスキップ
        it.skip('GETリクエストを正しく実行する', ()=>{
        // テスト実装
        });
        it.skip('カスタムヘッダーを設定できる', ()=>{
        // テスト実装
        });
        it.skip('エラーハンドリングが機能する', ()=>{
        // テスト実装
        });
    });
});

//# sourceMappingURL=data:application/json;base64,