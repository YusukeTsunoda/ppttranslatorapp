{"version":3,"sources":["/Users/yusuketsunoda/Documents/cursor/ppttranslatorapp/worktrees/feature-test-coverage-improvement/tests/api/download/route.test.ts"],"sourcesContent":["// モックの設定\njest.mock('next-auth', () => ({\n  getServerSession: jest.fn(),\n}));\n\njest.mock('fs');\njest.mock('@/lib/utils/file-utils');\n\nimport { NextRequest } from 'next/server';\nimport { getServerSession } from 'next-auth';\nimport { promises as fs } from 'fs';\nimport { join } from 'path';\nimport { filePathManager } from '@/lib/utils/file-utils';\nimport { createMocks } from 'node-mocks-http';\nimport { GET } from '@/app/api/download/[userId]/[filename]/route';\nimport { mockDeep, mockReset } from 'jest-mock-extended';\n\nconst mockFs = mockDeep<typeof fs>();\nconst mockFilePathManager = mockDeep<typeof filePathManager>();\n\n// モックの実装を上書き\njest.mocked(fs).promises = mockFs;\njest.mocked(filePathManager, true).findActualFilePath = mockFilePathManager.findActualFilePath;\n\ndescribe('/api/download/[userId]/[filename]', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n    mockReset(mockFs);\n    mockReset(mockFilePathManager);\n  });\n\n  // テストユーザーの設定\n  const testUser = {\n    id: 'test-user-id',\n    name: 'Test User',\n    email: 'test@example.com',\n  };\n\n  // テストファイルの設定\n  const testFile = {\n    id: 'test-file-id',\n    name: 'test-file.pptx',\n    content: Buffer.from('test file content'),\n  };\n\n  it('未認証ユーザーのアクセスを拒否する', async () => {\n    // getServerSessionのモックを設定\n    (getServerSession as jest.Mock).mockResolvedValue(null);\n\n    const { req } = createMocks({\n      method: 'GET',\n    });\n\n    const response = await GET(req as unknown as NextRequest, {\n      params: {\n        userId: testUser.id,\n        filename: testFile.name,\n      },\n    });\n\n    expect(response.status).toBe(401);\n    const data = await response.json();\n    expect(data.error).toBe('認証が必要です');\n  });\n\n  it('他のユーザーのファイルへのアクセスを拒否する', async () => {\n    // getServerSessionのモックを設定\n    (getServerSession as jest.Mock).mockResolvedValue({\n      user: testUser,\n    });\n\n    const { req } = createMocks({\n      method: 'GET',\n    });\n\n    const response = await GET(req as unknown as NextRequest, {\n      params: {\n        userId: 'other-user-id',\n        filename: testFile.name,\n      },\n    });\n\n    expect(response.status).toBe(403);\n    const data = await response.json();\n    expect(data.error).toBe('アクセス権限がありません');\n  });\n\n  it('存在しないファイルへのアクセスを404で返す', async () => {\n    // getServerSessionのモックを設定\n    (getServerSession as jest.Mock).mockResolvedValue({\n      user: testUser,\n    });\n\n    // filePathManagerのモックを設定\n    mockFilePathManager.findActualFilePath.mockResolvedValue(null);\n\n    const { req } = createMocks({\n      method: 'GET',\n    });\n\n    const response = await GET(req as unknown as NextRequest, {\n      params: {\n        userId: testUser.id,\n        filename: 'non-existent-file.pptx',\n      },\n    });\n\n    expect(response.status).toBe(404);\n    const data = await response.json();\n    expect(data.error).toBe('ファイルが見つかりません');\n  });\n\n  it('正常なファイルダウンロードを処理する', async () => {\n    // getServerSessionのモックを設定\n    (getServerSession as jest.Mock).mockResolvedValue({\n      user: testUser,\n    });\n\n    // filePathManagerのモックを設定\n    const testFilePath = '/test/path/test-file.pptx';\n    mockFilePathManager.findActualFilePath.mockResolvedValue(testFilePath);\n\n    // fs.readFileのモックを設定\n    mockFs.readFile.mockResolvedValue(testFile.content);\n\n    const { req } = createMocks({\n      method: 'GET',\n    });\n\n    const response = await GET(req as unknown as NextRequest, {\n      params: {\n        userId: testUser.id,\n        filename: testFile.name,\n      },\n    });\n\n    expect(response.status).toBe(200);\n    expect(response.headers.get('Content-Type')).toBe(\n      'application/vnd.openxmlformats-officedocument.presentationml.presentation'\n    );\n    expect(response.headers.get('Content-Disposition')).toBe(\n      `attachment; filename=\"${testFile.name}\"`\n    );\n\n    const buffer = await response.arrayBuffer();\n    expect(Buffer.from(buffer)).toEqual(testFile.content);\n  });\n\n  it('ファイル読み込みエラーを処理する', async () => {\n    // getServerSessionのモックを設定\n    (getServerSession as jest.Mock).mockResolvedValue({\n      user: testUser,\n    });\n\n    // filePathManagerのモックを設定\n    const testFilePath = '/test/path/test-file.pptx';\n    mockFilePathManager.findActualFilePath.mockResolvedValue(testFilePath);\n\n    // fs.readFileのモックを設定してエラーを投げる\n    mockFs.readFile.mockRejectedValue(new Error('ファイル読み込みエラー'));\n\n    const { req } = createMocks({\n      method: 'GET',\n    });\n\n    const response = await GET(req as unknown as NextRequest, {\n      params: {\n        userId: testUser.id,\n        filename: testFile.name,\n      },\n    });\n\n    expect(response.status).toBe(500);\n    const data = await response.json();\n    expect(data.error).toBe('ファイルのダウンロードに失敗しました');\n  });\n}); "],"names":["jest","mock","getServerSession","fn","mockFs","mockDeep","mockFilePathManager","mocked","fs","promises","filePathManager","findActualFilePath","describe","beforeEach","clearAllMocks","mockReset","testUser","id","name","email","testFile","content","Buffer","from","it","mockResolvedValue","req","createMocks","method","response","GET","params","userId","filename","expect","status","toBe","data","json","error","user","testFilePath","readFile","headers","get","buffer","arrayBuffer","toEqual","mockRejectedValue","Error"],"mappings":"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"}