{"version":3,"sources":["/Users/yusuketsunoda/Documents/cursor/ppttranslatorapp/worktrees/feature-test-coverage-improvement/tests/app/translate/components/TextList.test.tsx"],"sourcesContent":["/// <reference path=\"../../../jest.d.ts\" />\n\nimport React from 'react';\nimport { render, screen, fireEvent } from '@testing-library/react';\nimport '@testing-library/jest-dom';\nimport TextList from '@/app/(dashboard)/translate/components/TextList';\nimport { SlideText } from '@/lib/pptx/types';\n\n// テスト用の型定義\ninterface Translation {\n  language: string;\n  text: string;\n}\n\ninterface TextItem {\n  id: string;\n  text: string;\n  position: {\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n  };\n  translations: Translation[];\n}\n\ninterface TextListProps {\n  texts: TextItem[];\n  onTextSelect?: (index: number) => void;\n  selectedTextIndex?: number | null;\n  onTextHover?: (index: number | null) => void;\n  searchTerm?: string;\n  hideTranslated?: boolean;\n  selectedLanguage?: string;\n}\n\n// モックデータ\nconst mockTexts: SlideText[] = [\n  { id: '1', text: 'Hello world', position: { x: 0, y: 0, width: 100, height: 50 } },\n  { id: '2', text: 'Welcome to testing', position: { x: 0, y: 100, width: 100, height: 50 } },\n  { id: '3', text: 'Testing is important', position: { x: 0, y: 200, width: 100, height: 50 } },\n];\n\nconst mockTranslations = {\n  '1': 'こんにちは世界',\n  '2': 'テストへようこそ',\n};\n\ndescribe('TextList', () => {\n  it('テキストリストを表示する', () => {\n    render(\n      <TextList\n        texts={mockTexts}\n        onSelectText={() => {}}\n        onHoverText={() => {}}\n        selectedTextId={null}\n        searchText=\"\"\n        hideTranslated={false}\n        translations={{}}\n      />\n    );\n\n    expect(screen.getByText('Hello world')).toBeInTheDocument();\n    expect(screen.getByText('Welcome to testing')).toBeInTheDocument();\n    expect(screen.getByText('Testing is important')).toBeInTheDocument();\n  });\n\n  it('テキスト選択コールバックが機能する', () => {\n    const handleSelectText = jest.fn();\n    render(\n      <TextList\n        texts={mockTexts}\n        onSelectText={handleSelectText}\n        onHoverText={() => {}}\n        selectedTextId={null}\n        searchText=\"\"\n        hideTranslated={false}\n        translations={{}}\n      />\n    );\n\n    fireEvent.click(screen.getByText('Hello world'));\n    expect(handleSelectText).toHaveBeenCalledWith('1');\n  });\n\n  it('選択されたテキストにselectedクラスが付与される', () => {\n    render(\n      <TextList\n        texts={mockTexts}\n        onSelectText={() => {}}\n        onHoverText={() => {}}\n        selectedTextId=\"2\"\n        searchText=\"\"\n        hideTranslated={false}\n        translations={{}}\n      />\n    );\n\n    const selectedItem = screen.getByText('Welcome to testing').closest('li');\n    expect(selectedItem).toHaveClass('selected');\n  });\n\n  it('テキストホバーコールバックが機能する', () => {\n    const handleHoverText = jest.fn();\n    render(\n      <TextList\n        texts={mockTexts}\n        onSelectText={() => {}}\n        onHoverText={handleHoverText}\n        selectedTextId={null}\n        searchText=\"\"\n        hideTranslated={false}\n        translations={{}}\n      />\n    );\n\n    fireEvent.mouseEnter(screen.getByText('Hello world'));\n    expect(handleHoverText).toHaveBeenCalledWith('1');\n\n    fireEvent.mouseLeave(screen.getByText('Hello world'));\n    expect(handleHoverText).toHaveBeenCalledWith(null);\n  });\n\n  it('検索語に基づいてテキストをフィルタリングする', () => {\n    render(\n      <TextList\n        texts={mockTexts}\n        onSelectText={() => {}}\n        onHoverText={() => {}}\n        selectedTextId={null}\n        searchText=\"world\"\n        hideTranslated={false}\n        translations={{}}\n      />\n    );\n\n    expect(screen.getByText('Hello world')).toBeInTheDocument();\n    expect(screen.queryByText('Welcome to testing')).not.toBeInTheDocument();\n    expect(screen.queryByText('Testing is important')).not.toBeInTheDocument();\n  });\n\n  it('翻訳済みのテキストを非表示にする', () => {\n    render(\n      <TextList\n        texts={mockTexts}\n        onSelectText={() => {}}\n        onHoverText={() => {}}\n        selectedTextId={null}\n        searchText=\"\"\n        hideTranslated={true}\n        translations={mockTranslations}\n      />\n    );\n\n    expect(screen.queryByText('Hello world')).not.toBeInTheDocument();\n    expect(screen.queryByText('Welcome to testing')).not.toBeInTheDocument();\n    expect(screen.getByText('Testing is important')).toBeInTheDocument();\n  });\n\n  it('翻訳情報を表示する', () => {\n    render(\n      <TextList\n        texts={mockTexts}\n        onSelectText={() => {}}\n        onHoverText={() => {}}\n        selectedTextId={null}\n        searchText=\"\"\n        hideTranslated={false}\n        translations={mockTranslations}\n      />\n    );\n\n    expect(screen.getByText('こんにちは世界')).toBeInTheDocument();\n    expect(screen.getByText('テストへようこそ')).toBeInTheDocument();\n  });\n\n  it('空のテキストリストを適切に処理する', () => {\n    render(\n      <TextList\n        texts={[]}\n        onSelectText={() => {}}\n        onHoverText={() => {}}\n        selectedTextId={null}\n        searchText=\"\"\n        hideTranslated={false}\n        translations={{}}\n      />\n    );\n\n    expect(screen.getByText('テキストが見つかりません')).toBeInTheDocument();\n  });\n\n  it('大文字小文字を区別せずに検索する', () => {\n    render(\n      <TextList\n        texts={mockTexts}\n        onSelectText={() => {}}\n        onHoverText={() => {}}\n        selectedTextId={null}\n        searchText=\"WORLD\"\n        hideTranslated={false}\n        translations={{}}\n      />\n    );\n\n    expect(screen.getByText('Hello world')).toBeInTheDocument();\n    expect(screen.queryByText('Welcome to testing')).not.toBeInTheDocument();\n  });\n\n  it('検索結果が空の場合に適切なメッセージを表示する', () => {\n    render(\n      <TextList\n        texts={mockTexts}\n        onSelectText={() => {}}\n        onHoverText={() => {}}\n        selectedTextId={null}\n        searchText=\"xyz123\"\n        hideTranslated={false}\n        translations={{}}\n      />\n    );\n\n    expect(screen.getByText('検索結果がありません')).toBeInTheDocument();\n  });\n\n  it('正しい順序でテキストを表示する', () => {\n    const { container } = render(\n      <TextList\n        texts={mockTexts}\n        onSelectText={() => {}}\n        onHoverText={() => {}}\n        selectedTextId={null}\n        searchText=\"\"\n        hideTranslated={false}\n        translations={{}}\n      />\n    );\n\n    const listItems = container.querySelectorAll('li');\n    expect(listItems[0].textContent).toContain('Hello world');\n    expect(listItems[1].textContent).toContain('Welcome to testing');\n    expect(listItems[2].textContent).toContain('Testing is important');\n  });\n});\n"],"names":["mockTexts","id","text","position","x","y","width","height","mockTranslations","describe","it","render","TextList","texts","onSelectText","onHoverText","selectedTextId","searchText","hideTranslated","translations","expect","screen","getByText","toBeInTheDocument","handleSelectText","jest","fn","fireEvent","click","toHaveBeenCalledWith","selectedItem","closest","toHaveClass","handleHoverText","mouseEnter","mouseLeave","queryByText","not","container","listItems","querySelectorAll","textContent","toContain"],"mappings":"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"}