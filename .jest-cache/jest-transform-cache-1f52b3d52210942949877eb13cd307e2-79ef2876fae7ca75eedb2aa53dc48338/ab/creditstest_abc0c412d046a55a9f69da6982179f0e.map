{"version":3,"sources":["/Users/yusuketsunoda/Documents/cursor/ppttranslatorapp/worktrees/feature-test-coverage-improvement/tests/api/user/credits.test.ts"],"sourcesContent":["import { GET } from '@/app/api/user/credits/route';\nimport { getServerSession } from 'next-auth';\nimport { prisma } from '@/lib/db/prisma';\nimport { NextRequest } from 'next/server'; // GETリクエストには不要だが、一応入れておく\nimport { mockDeep, DeepMockProxy } from 'jest-mock-extended';\nimport { authOptions } from '@/lib/auth/auth-options';\nimport { User } from '@prisma/client';\n\n// getServerSession のモック\njest.mock('next-auth', () => ({\n    ...jest.requireActual('next-auth'),\n    getServerSession: jest.fn(),\n}));\n\n// Prisma Client のモック\njest.mock('@/lib/db/prisma', () => ({\n  prisma: mockDeep<DeepMockProxy<typeof prisma>>(),\n}));\n\nconst getServerSessionMock = getServerSession as jest.Mock;\nconst prismaMock = prisma as unknown as DeepMockProxy<typeof prisma>;\n\ndescribe('GET /api/user/credits', () => {\n  const mockUserId = 'user-credits-test-id';\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  it('should return user credits successfully', async () => {\n    getServerSessionMock.mockResolvedValue({\n      user: { id: mockUserId, name: 'Test User', email: 'test@example.com' },\n      expires: 'some-date',\n    });\n    prismaMock.user.findUnique.mockResolvedValue({\n      id: mockUserId,\n      credits: 100,\n      // 他のUserモデルのフィールドはselectで指定されていないので不要\n    } as unknown as Pick<User, 'credits'> ); // Pickで型を合わせる\n\n    const response = await GET();\n    const responseBody = await response.json();\n\n    expect(response.status).toBe(200);\n    expect(responseBody.credits).toBe(100);\n    expect(getServerSessionMock).toHaveBeenCalledWith(authOptions);\n    expect(prismaMock.user.findUnique).toHaveBeenCalledWith({\n      where: { id: mockUserId },\n      select: { credits: true },\n    });\n  });\n\n  it('should return 0 credits if user credits are zero or negative', async () => {\n    getServerSessionMock.mockResolvedValue({ user: { id: mockUserId } } as any);\n    prismaMock.user.findUnique.mockResolvedValue({ credits: -50 } as Pick<User, 'credits'>);\n\n    let response = await GET();\n    let responseBody = await response.json();\n    expect(response.status).toBe(200);\n    expect(responseBody.credits).toBe(0);\n\n    prismaMock.user.findUnique.mockResolvedValue({ credits: 0 } as Pick<User, 'credits'>);\n    response = await GET();\n    responseBody = await response.json();\n    expect(response.status).toBe(200);\n    expect(responseBody.credits).toBe(0);\n  });\n\n  it('should return 401 if user is not authenticated', async () => {\n    getServerSessionMock.mockResolvedValue(null); // No session\n\n    const response = await GET();\n    const responseBody = await response.json();\n\n    expect(response.status).toBe(401);\n    expect(responseBody.error).toBe('認証が必要です');\n    expect(prismaMock.user.findUnique).not.toHaveBeenCalled();\n  });\n\n  it('should return 404 if user is not found in DB', async () => {\n    getServerSessionMock.mockResolvedValue({ user: { id: mockUserId } } as any);\n    prismaMock.user.findUnique.mockResolvedValue(null); // User not found\n\n    const response = await GET();\n    const responseBody = await response.json();\n\n    expect(response.status).toBe(404);\n    expect(responseBody.error).toBe('ユーザーが見つかりません');\n  });\n\n  it('should return 500 if prisma.user.findUnique fails', async () => {\n    getServerSessionMock.mockResolvedValue({ user: { id: mockUserId } } as any);\n    prismaMock.user.findUnique.mockRejectedValue(new Error('DB query failed'));\n\n    const response = await GET();\n    const responseBody = await response.json();\n\n    expect(response.status).toBe(500);\n    expect(responseBody.error).toBe('クレジット残高の取得に失敗しました');\n  });\n}); "],"names":["jest","mock","requireActual","getServerSession","fn","prisma","mockDeep","getServerSessionMock","prismaMock","describe","mockUserId","beforeEach","clearAllMocks","it","mockResolvedValue","user","id","name","email","expires","findUnique","credits","response","GET","responseBody","json","expect","status","toBe","toHaveBeenCalledWith","authOptions","where","select","error","not","toHaveBeenCalled","mockRejectedValue","Error"],"mappings":"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"}