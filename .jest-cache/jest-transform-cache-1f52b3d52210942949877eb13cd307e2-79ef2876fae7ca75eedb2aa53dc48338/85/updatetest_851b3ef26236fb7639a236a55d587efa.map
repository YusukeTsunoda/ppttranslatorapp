{"version":3,"sources":["/Users/yusuketsunoda/Documents/cursor/ppttranslatorapp/worktrees/feature-test-coverage-improvement/tests/api/profile/update.test.ts"],"sourcesContent":["import { POST } from '@/app/api/profile/update/route';\nimport { NextRequest } from 'next/server';\nimport { authOptions } from '@/lib/auth/auth-options';\nimport { createPrismaMock, createSessionMock, clearAllMocks, createMockUser } from '@/tests/helpers/mockSetup';\n\nconst prismaMock = createPrismaMock();\nconst getServerSessionMock = createSessionMock();\n\ndescribe('POST /api/profile/update', () => {\n  const mockUserId = 'user-123-profile';\n  const mockUserEmail = 'testuser@example.com';\n\n  beforeEach(() => {\n    clearAllMocks();\n  });\n\n  it('should update user profile successfully', async () => {\n    const newName = 'Updated Test User';\n    const req = new NextRequest('http://localhost/api/profile/update', {\n      method: 'POST',\n      body: JSON.stringify({ name: newName }),\n      headers: { 'Content-Type': 'application/json' },\n    });\n\n    getServerSessionMock.mockResolvedValue({\n      user: { id: mockUserId, email: mockUserEmail, name: 'Old Name' },\n      expires: 'some-date',\n    });\n\n    const updatedUserDbResult = createMockUser({\n      id: mockUserId,\n      name: newName,\n      email: mockUserEmail,\n    });\n    prismaMock.user.update.mockResolvedValue(updatedUserDbResult);\n\n    const response = await POST(req as Request);\n    const responseBody = await response.json();\n\n    expect(response.status).toBe(200);\n    expect(responseBody.success).toBe(true);\n    expect(responseBody.user.id).toBe(mockUserId);\n    expect(responseBody.user.name).toBe(newName);\n    expect(responseBody.user.email).toBe(mockUserEmail);\n\n    expect(getServerSessionMock).toHaveBeenCalledWith(authOptions);\n    expect(prismaMock.user.update).toHaveBeenCalledWith({\n      where: { id: mockUserId },\n      data: {\n        name: newName,\n        updatedAt: expect.any(Date),\n      },\n    });\n  });\n\n  it('should return 401 if user is not authenticated', async () => {\n    const req = new NextRequest('http://localhost/api/profile/update', {\n      method: 'POST',\n      body: JSON.stringify({ name: 'Any Name' }),\n    });\n\n    getServerSessionMock.mockResolvedValue(null);\n\n    const response = await POST(req as Request);\n    const responseBody = await response.json();\n\n    expect(response.status).toBe(401);\n    expect(responseBody.error).toBe('認証が必要です');\n    expect(prismaMock.user.update).not.toHaveBeenCalled();\n  });\n\n  it('should return 400 if name is not provided', async () => {\n    const req = new NextRequest('http://localhost/api/profile/update', {\n      method: 'POST',\n      body: JSON.stringify({}),\n    });\n\n    getServerSessionMock.mockResolvedValue({ user: { id: mockUserId } });\n\n    const response = await POST(req as Request);\n    const responseBody = await response.json();\n\n    expect(response.status).toBe(400);\n    expect(responseBody.error).toBe('名前は必須です');\n    expect(prismaMock.user.update).not.toHaveBeenCalled();\n  });\n\n  it('should return 500 if prisma.user.update fails', async () => {\n    const req = new NextRequest('http://localhost/api/profile/update', {\n      method: 'POST',\n      body: JSON.stringify({ name: 'Valid Name' }),\n    });\n\n    getServerSessionMock.mockResolvedValue({ user: { id: mockUserId } });\n    prismaMock.user.update.mockRejectedValue(new Error('DB update failed'));\n\n    const response = await POST(req as Request);\n    const responseBody = await response.json();\n\n    expect(response.status).toBe(500);\n    expect(responseBody.error).toBe('プロフィールの更新に失敗しました');\n  });\n}); "],"names":["prismaMock","createPrismaMock","getServerSessionMock","createSessionMock","describe","mockUserId","mockUserEmail","beforeEach","clearAllMocks","it","newName","req","NextRequest","method","body","JSON","stringify","name","headers","mockResolvedValue","user","id","email","expires","updatedUserDbResult","createMockUser","update","response","POST","responseBody","json","expect","status","toBe","success","toHaveBeenCalledWith","authOptions","where","data","updatedAt","any","Date","error","not","toHaveBeenCalled","mockRejectedValue","Error"],"mappings":"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"}