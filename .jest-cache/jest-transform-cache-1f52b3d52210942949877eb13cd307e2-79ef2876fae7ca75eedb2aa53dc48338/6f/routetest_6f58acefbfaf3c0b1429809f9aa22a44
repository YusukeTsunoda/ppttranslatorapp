41e030477ca256481995f5cfd383af72
"use strict";
// モックの設定
jest.mock('next-auth', ()=>({
        getServerSession: jest.fn()
    }));
jest.mock('fs', ()=>({
        promises: {
            readFile: jest.fn(),
            access: jest.fn()
        }
    }));
jest.mock('@/lib/utils/file-utils', ()=>({
        filePathManager: {
            findActualFilePath: jest.fn()
        },
        logFileOperation: jest.fn()
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _nextauth = require("next-auth");
const _fs = require("fs");
const _fileutils = require("@/lib/utils/file-utils");
const _nodemockshttp = require("node-mocks-http");
const _route = require("@/app/api/download/[userId]/[filename]/route");
// モックの型定義
const mockGetServerSession = _nextauth.getServerSession;
const mockReadFile = _fs.promises.readFile;
const mockFindActualFilePath = _fileutils.filePathManager.findActualFilePath;
describe('/api/download/[userId]/[filename]', ()=>{
    beforeEach(()=>{
        jest.clearAllMocks();
    });
    // テストユーザーの設定
    const testUser = {
        id: 'test-user-id',
        name: 'Test User',
        email: 'test@example.com'
    };
    // テストファイルの設定
    const testFile = {
        id: 'test-file-id',
        name: 'test-file.pptx',
        content: Buffer.from('test file content')
    };
    it('未認証ユーザーのアクセスを拒否する', async ()=>{
        // getServerSessionのモックを設定
        mockGetServerSession.mockResolvedValue(null);
        const { req } = (0, _nodemockshttp.createMocks)({
            method: 'GET'
        });
        const response = await (0, _route.GET)(req, {
            params: {
                userId: testUser.id,
                filename: testFile.name
            }
        });
        expect(response.status).toBe(401);
        const data = await response.json();
        expect(data.error).toBe('認証が必要です');
    });
    it('他のユーザーのファイルへのアクセスを拒否する', async ()=>{
        // getServerSessionのモックを設定
        mockGetServerSession.mockResolvedValue({
            user: testUser
        });
        const { req } = (0, _nodemockshttp.createMocks)({
            method: 'GET'
        });
        const response = await (0, _route.GET)(req, {
            params: {
                userId: 'other-user-id',
                filename: testFile.name
            }
        });
        expect(response.status).toBe(403);
        const data = await response.json();
        expect(data.error).toBe('アクセス権限がありません');
    });
    it('存在しないファイルへのアクセスを404で返す', async ()=>{
        // getServerSessionのモックを設定
        mockGetServerSession.mockResolvedValue({
            user: testUser
        });
        // filePathManagerのモックを設定
        mockFindActualFilePath.mockResolvedValue(null);
        const { req } = (0, _nodemockshttp.createMocks)({
            method: 'GET'
        });
        const response = await (0, _route.GET)(req, {
            params: {
                userId: testUser.id,
                filename: 'non-existent-file.pptx'
            }
        });
        expect(response.status).toBe(404);
        const data = await response.json();
        expect(data.error).toBe('ファイルが見つかりません');
    });
    it('正常なファイルダウンロードを処理する', async ()=>{
        // getServerSessionのモックを設定
        mockGetServerSession.mockResolvedValue({
            user: testUser
        });
        // filePathManagerのモックを設定
        const testFilePath = '/test/path/test-file.pptx';
        mockFindActualFilePath.mockResolvedValue(testFilePath);
        // fs.readFileのモックを設定
        mockReadFile.mockResolvedValue(testFile.content);
        const { req } = (0, _nodemockshttp.createMocks)({
            method: 'GET'
        });
        const response = await (0, _route.GET)(req, {
            params: {
                userId: testUser.id,
                filename: testFile.name
            }
        });
        expect(response.status).toBe(200);
        expect(response.headers.get('Content-Type')).toBe('application/vnd.openxmlformats-officedocument.presentationml.presentation');
        expect(response.headers.get('Content-Disposition')).toBe(`attachment; filename="${testFile.name}"`);
        const buffer = await response.arrayBuffer();
        expect(Buffer.from(buffer)).toEqual(testFile.content);
    });
    it('ファイル読み込みエラーを処理する', async ()=>{
        // getServerSessionのモックを設定
        mockGetServerSession.mockResolvedValue({
            user: testUser
        });
        // filePathManagerのモックを設定
        const testFilePath = '/test/path/test-file.pptx';
        mockFindActualFilePath.mockResolvedValue(testFilePath);
        // fs.readFileのモックを設定してエラーを投げる
        mockReadFile.mockRejectedValue(new Error('ファイル読み込みエラー'));
        const { req } = (0, _nodemockshttp.createMocks)({
            method: 'GET'
        });
        const response = await (0, _route.GET)(req, {
            params: {
                userId: testUser.id,
                filename: testFile.name
            }
        });
        expect(response.status).toBe(500);
        const data = await response.json();
        expect(data.error).toBe('ファイルのダウンロードに失敗しました');
    });
});

//# sourceMappingURL=data:application/json;base64,