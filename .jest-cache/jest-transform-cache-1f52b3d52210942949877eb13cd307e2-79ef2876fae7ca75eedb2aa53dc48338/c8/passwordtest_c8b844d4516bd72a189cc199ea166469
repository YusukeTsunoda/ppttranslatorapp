9c9c1860c60cb7d4f3d660a4786b6901
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _password = require("@/lib/auth/password");
describe('パスワード関連ユーティリティ', ()=>{
    describe('hashPassword', ()=>{
        it('パスワードをハッシュ化できる', async ()=>{
            const password = 'testPassword123';
            const hashedPassword = await (0, _password.hashPassword)(password);
            // ハッシュ化されたパスワードは元のパスワードと異なるはず
            expect(hashedPassword).not.toBe(password);
            // ハッシュ化されたパスワードはbcryptの形式に従っているはず
            expect(hashedPassword).toMatch(/^\$2[aby]\$\d+\$/);
        });
        it('同じパスワードでも異なるハッシュを生成する', async ()=>{
            const password = 'testPassword123';
            const hash1 = await (0, _password.hashPassword)(password);
            const hash2 = await (0, _password.hashPassword)(password);
            // 同じパスワードでもソルトが異なるため、ハッシュも異なる
            expect(hash1).not.toBe(hash2);
        });
    });
    describe('comparePasswords', ()=>{
        it('正しいパスワードを検証できる', async ()=>{
            const password = 'testPassword123';
            const hashedPassword = await (0, _password.hashPassword)(password);
            const isValid = await (0, _password.comparePasswords)(password, hashedPassword);
            expect(isValid).toBe(true);
        });
        it('誤ったパスワードを検出できる', async ()=>{
            const password = 'testPassword123';
            const wrongPassword = 'wrongPassword123';
            const hashedPassword = await (0, _password.hashPassword)(password);
            const isValid = await (0, _password.comparePasswords)(wrongPassword, hashedPassword);
            expect(isValid).toBe(false);
        });
        it('空のパスワードを検証できる', async ()=>{
            const password = '';
            const hashedPassword = await (0, _password.hashPassword)(password);
            const isValid = await (0, _password.comparePasswords)(password, hashedPassword);
            expect(isValid).toBe(true);
        });
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy95dXN1a2V0c3Vub2RhL0RvY3VtZW50cy9jdXJzb3IvcHB0dHJhbnNsYXRvcmFwcC93b3JrdHJlZXMvZmVhdHVyZS10ZXN0LWNvdmVyYWdlLWltcHJvdmVtZW50L3Rlc3RzL2xpYi9hdXRoL3Bhc3N3b3JkLnRlc3QudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaGFzaFBhc3N3b3JkLCBjb21wYXJlUGFzc3dvcmRzIH0gZnJvbSAnQC9saWIvYXV0aC9wYXNzd29yZCc7XG5cbmRlc2NyaWJlKCfjg5Hjgrnjg6/jg7zjg4nplqLpgKPjg6bjg7zjg4bjgqPjg6rjg4bjgqMnLCAoKSA9PiB7XG4gIGRlc2NyaWJlKCdoYXNoUGFzc3dvcmQnLCAoKSA9PiB7XG4gICAgaXQoJ+ODkeOCueODr+ODvOODieOCkuODj+ODg+OCt+ODpeWMluOBp+OBjeOCiycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHBhc3N3b3JkID0gJ3Rlc3RQYXNzd29yZDEyMyc7XG4gICAgICBjb25zdCBoYXNoZWRQYXNzd29yZCA9IGF3YWl0IGhhc2hQYXNzd29yZChwYXNzd29yZCk7XG4gICAgICBcbiAgICAgIC8vIOODj+ODg+OCt+ODpeWMluOBleOCjOOBn+ODkeOCueODr+ODvOODieOBr+WFg+OBruODkeOCueODr+ODvOODieOBqOeVsOOBquOCi+OBr+OBmlxuICAgICAgZXhwZWN0KGhhc2hlZFBhc3N3b3JkKS5ub3QudG9CZShwYXNzd29yZCk7XG4gICAgICBcbiAgICAgIC8vIOODj+ODg+OCt+ODpeWMluOBleOCjOOBn+ODkeOCueODr+ODvOODieOBr2JjcnlwdOOBruW9ouW8j+OBq+W+k+OBo+OBpuOBhOOCi+OBr+OBmlxuICAgICAgZXhwZWN0KGhhc2hlZFBhc3N3b3JkKS50b01hdGNoKC9eXFwkMlthYnldXFwkXFxkK1xcJC8pO1xuICAgIH0pO1xuICAgIFxuICAgIGl0KCflkIzjgZjjg5Hjgrnjg6/jg7zjg4njgafjgoLnlbDjgarjgovjg4/jg4Pjgrfjg6XjgpLnlJ/miJDjgZnjgosnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBwYXNzd29yZCA9ICd0ZXN0UGFzc3dvcmQxMjMnO1xuICAgICAgY29uc3QgaGFzaDEgPSBhd2FpdCBoYXNoUGFzc3dvcmQocGFzc3dvcmQpO1xuICAgICAgY29uc3QgaGFzaDIgPSBhd2FpdCBoYXNoUGFzc3dvcmQocGFzc3dvcmQpO1xuICAgICAgXG4gICAgICAvLyDlkIzjgZjjg5Hjgrnjg6/jg7zjg4njgafjgoLjgr3jg6vjg4jjgYznlbDjgarjgovjgZ/jgoHjgIHjg4/jg4Pjgrfjg6XjgoLnlbDjgarjgotcbiAgICAgIGV4cGVjdChoYXNoMSkubm90LnRvQmUoaGFzaDIpO1xuICAgIH0pO1xuICB9KTtcbiAgXG4gIGRlc2NyaWJlKCdjb21wYXJlUGFzc3dvcmRzJywgKCkgPT4ge1xuICAgIGl0KCfmraPjgZfjgYTjg5Hjgrnjg6/jg7zjg4njgpLmpJzoqLzjgafjgY3jgosnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBwYXNzd29yZCA9ICd0ZXN0UGFzc3dvcmQxMjMnO1xuICAgICAgY29uc3QgaGFzaGVkUGFzc3dvcmQgPSBhd2FpdCBoYXNoUGFzc3dvcmQocGFzc3dvcmQpO1xuICAgICAgXG4gICAgICBjb25zdCBpc1ZhbGlkID0gYXdhaXQgY29tcGFyZVBhc3N3b3JkcyhwYXNzd29yZCwgaGFzaGVkUGFzc3dvcmQpO1xuICAgICAgZXhwZWN0KGlzVmFsaWQpLnRvQmUodHJ1ZSk7XG4gICAgfSk7XG4gICAgXG4gICAgaXQoJ+iqpOOBo+OBn+ODkeOCueODr+ODvOODieOCkuaknOWHuuOBp+OBjeOCiycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHBhc3N3b3JkID0gJ3Rlc3RQYXNzd29yZDEyMyc7XG4gICAgICBjb25zdCB3cm9uZ1Bhc3N3b3JkID0gJ3dyb25nUGFzc3dvcmQxMjMnO1xuICAgICAgY29uc3QgaGFzaGVkUGFzc3dvcmQgPSBhd2FpdCBoYXNoUGFzc3dvcmQocGFzc3dvcmQpO1xuICAgICAgXG4gICAgICBjb25zdCBpc1ZhbGlkID0gYXdhaXQgY29tcGFyZVBhc3N3b3Jkcyh3cm9uZ1Bhc3N3b3JkLCBoYXNoZWRQYXNzd29yZCk7XG4gICAgICBleHBlY3QoaXNWYWxpZCkudG9CZShmYWxzZSk7XG4gICAgfSk7XG4gICAgXG4gICAgaXQoJ+epuuOBruODkeOCueODr+ODvOODieOCkuaknOiovOOBp+OBjeOCiycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHBhc3N3b3JkID0gJyc7XG4gICAgICBjb25zdCBoYXNoZWRQYXNzd29yZCA9IGF3YWl0IGhhc2hQYXNzd29yZChwYXNzd29yZCk7XG4gICAgICBcbiAgICAgIGNvbnN0IGlzVmFsaWQgPSBhd2FpdCBjb21wYXJlUGFzc3dvcmRzKHBhc3N3b3JkLCBoYXNoZWRQYXNzd29yZCk7XG4gICAgICBleHBlY3QoaXNWYWxpZCkudG9CZSh0cnVlKTtcbiAgICB9KTtcbiAgfSk7XG59KTtcbiJdLCJuYW1lcyI6WyJkZXNjcmliZSIsIml0IiwicGFzc3dvcmQiLCJoYXNoZWRQYXNzd29yZCIsImhhc2hQYXNzd29yZCIsImV4cGVjdCIsIm5vdCIsInRvQmUiLCJ0b01hdGNoIiwiaGFzaDEiLCJoYXNoMiIsImlzVmFsaWQiLCJjb21wYXJlUGFzc3dvcmRzIiwid3JvbmdQYXNzd29yZCJdLCJtYXBwaW5ncyI6Ijs7OzswQkFBK0M7QUFFL0NBLFNBQVMsa0JBQWtCO0lBQ3pCQSxTQUFTLGdCQUFnQjtRQUN2QkMsR0FBRyxrQkFBa0I7WUFDbkIsTUFBTUMsV0FBVztZQUNqQixNQUFNQyxpQkFBaUIsTUFBTUMsSUFBQUEsc0JBQVksRUFBQ0Y7WUFFMUMsOEJBQThCO1lBQzlCRyxPQUFPRixnQkFBZ0JHLEdBQUcsQ0FBQ0MsSUFBSSxDQUFDTDtZQUVoQyxrQ0FBa0M7WUFDbENHLE9BQU9GLGdCQUFnQkssT0FBTyxDQUFDO1FBQ2pDO1FBRUFQLEdBQUcseUJBQXlCO1lBQzFCLE1BQU1DLFdBQVc7WUFDakIsTUFBTU8sUUFBUSxNQUFNTCxJQUFBQSxzQkFBWSxFQUFDRjtZQUNqQyxNQUFNUSxRQUFRLE1BQU1OLElBQUFBLHNCQUFZLEVBQUNGO1lBRWpDLDhCQUE4QjtZQUM5QkcsT0FBT0ksT0FBT0gsR0FBRyxDQUFDQyxJQUFJLENBQUNHO1FBQ3pCO0lBQ0Y7SUFFQVYsU0FBUyxvQkFBb0I7UUFDM0JDLEdBQUcsa0JBQWtCO1lBQ25CLE1BQU1DLFdBQVc7WUFDakIsTUFBTUMsaUJBQWlCLE1BQU1DLElBQUFBLHNCQUFZLEVBQUNGO1lBRTFDLE1BQU1TLFVBQVUsTUFBTUMsSUFBQUEsMEJBQWdCLEVBQUNWLFVBQVVDO1lBQ2pERSxPQUFPTSxTQUFTSixJQUFJLENBQUM7UUFDdkI7UUFFQU4sR0FBRyxrQkFBa0I7WUFDbkIsTUFBTUMsV0FBVztZQUNqQixNQUFNVyxnQkFBZ0I7WUFDdEIsTUFBTVYsaUJBQWlCLE1BQU1DLElBQUFBLHNCQUFZLEVBQUNGO1lBRTFDLE1BQU1TLFVBQVUsTUFBTUMsSUFBQUEsMEJBQWdCLEVBQUNDLGVBQWVWO1lBQ3RERSxPQUFPTSxTQUFTSixJQUFJLENBQUM7UUFDdkI7UUFFQU4sR0FBRyxpQkFBaUI7WUFDbEIsTUFBTUMsV0FBVztZQUNqQixNQUFNQyxpQkFBaUIsTUFBTUMsSUFBQUEsc0JBQVksRUFBQ0Y7WUFFMUMsTUFBTVMsVUFBVSxNQUFNQyxJQUFBQSwwQkFBZ0IsRUFBQ1YsVUFBVUM7WUFDakRFLE9BQU9NLFNBQVNKLElBQUksQ0FBQztRQUN2QjtJQUNGO0FBQ0YifQ==