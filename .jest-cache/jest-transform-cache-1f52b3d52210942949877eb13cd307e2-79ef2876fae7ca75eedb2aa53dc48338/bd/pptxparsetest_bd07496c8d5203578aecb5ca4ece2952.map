{"version":3,"sources":["/Users/yusuketsunoda/Documents/cursor/ppttranslatorapp/worktrees/feature-test-coverage-improvement/tests/api/pptx-parse.test.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { expect } from '@jest/globals';\nimport fs from 'fs/promises';\nimport path from 'path';\n\n// PPTXパーサーのモック\njest.mock('@/lib/pptx/parser', () => ({\n  PPTXParser: jest.fn().mockImplementation(() => ({\n    parse: jest.fn().mockResolvedValue({\n      slides: [\n        {\n          id: 'slide1',\n          title: 'テストスライド1',\n          content: 'スライド1のコンテンツ',\n        },\n        {\n          id: 'slide2',\n          title: 'テストスライド2',\n          content: 'スライド2のコンテンツ',\n        },\n      ],\n      metadata: {\n        title: 'テストプレゼンテーション',\n        author: 'テストユーザー',\n        totalSlides: 2,\n      },\n    }),\n  })),\n}));\n\n// 認証のモック\njest.mock('@/lib/auth/auth', () => ({\n  auth: jest.fn().mockResolvedValue({\n    user: {\n      id: 'test-user',\n      email: 'test@example.com',\n    },\n  }),\n}));\n\n// fs/promisesのモック\njest.mock('fs/promises', () => ({\n  mkdir: jest.fn().mockResolvedValue(undefined),\n  writeFile: jest.fn().mockResolvedValue(undefined),\n  readdir: jest.fn().mockResolvedValue(['file1.pptx', 'file2.pptx']),\n  unlink: jest.fn().mockResolvedValue(undefined),\n}));\n\n// uuidのモック\njest.mock('uuid', () => ({\n  v4: jest.fn().mockReturnValue('test-uuid'),\n}));\n\n// app/api/pptx/parse/route.tsのモック\njest.mock('@/app/api/pptx/parse/route', () => {\n  // モック用のレスポンス生成関数\n  const mockJsonResponse = (data: any, status = 200) => {\n    return {\n      json: () => Promise.resolve(data),\n      status,\n    };\n  };\n\n  return {\n    POST: jest.fn().mockImplementation(async (req) => {\n      const formData = await req.formData();\n      const file = formData.get('file');\n\n      if (!file) {\n        return mockJsonResponse({ success: false, error: 'ファイルが指定されていません' }, 400);\n      }\n\n      if (file.type !== 'application/vnd.openxmlformats-officedocument.presentationml.presentation') {\n        return mockJsonResponse({ success: false, error: 'PPTXファイルのみアップロード可能です' }, 400);\n      }\n\n      return mockJsonResponse({\n        success: true,\n        fileId: 'test-uuid',\n        slides: [\n          {\n            id: 'slide1',\n            title: 'テストスライド1',\n            content: 'スライド1のコンテンツ',\n          },\n          {\n            id: 'slide2',\n            title: 'テストスライド2',\n            content: 'スライド2のコンテンツ',\n          },\n        ],\n        metadata: {\n          title: 'テストプレゼンテーション',\n          author: 'テストユーザー',\n          totalSlides: 2,\n        },\n      });\n    }),\n    GET: jest.fn().mockImplementation(() => {\n      return mockJsonResponse({\n        success: true,\n        message: 'PPTXパーサーAPIは正常に動作しています',\n      });\n    }),\n  };\n});\n\n// インポートはモックの後に行う\nimport { POST, GET } from '@/app/api/pptx/parse/route';\n\ndescribe('PPTX Parse API', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('POST /api/pptx/parse', () => {\n    it('有効なPPTXファイルをパースする', async () => {\n      // FormDataとFileオブジェクトのモック\n      const mockFile = new File(['dummy content'], 'test.pptx', {\n        type: 'application/vnd.openxmlformats-officedocument.presentationml.presentation',\n      });\n\n      const formData = new FormData();\n      formData.append('file', mockFile);\n\n      // リクエストオブジェクトのモック\n      const mockReq = {\n        formData: jest.fn().mockResolvedValue(formData),\n      } as unknown as NextRequest;\n\n      // APIハンドラを呼び出す\n      const response = await POST(mockReq);\n\n      // レスポンスを検証\n      expect(response.status).toBe(200);\n\n      // レスポンスボディを取得\n      const data = await response.json();\n\n      // レスポンスボディを検証\n      expect(data.success).toBe(true);\n      expect(data.fileId).toBe('test-uuid');\n      expect(data.slides).toHaveLength(2);\n      expect(data.slides[0].title).toBe('テストスライド1');\n      expect(data.metadata.title).toBe('テストプレゼンテーション');\n    });\n\n    it('ファイルが指定されていない場合はエラーを返す', async () => {\n      // 空のFormDataを作成\n      const formData = new FormData();\n\n      // リクエストオブジェクトのモック\n      const mockReq = {\n        formData: jest.fn().mockResolvedValue(formData),\n      } as unknown as NextRequest;\n\n      // APIハンドラを呼び出す\n      const response = await POST(mockReq);\n\n      // レスポンスを検証\n      expect(response.status).toBe(400);\n\n      // レスポンスボディを取得\n      const data = await response.json();\n\n      // レスポンスボディを検証\n      expect(data.success).toBe(false);\n      expect(data.error).toBe('ファイルが指定されていません');\n    });\n\n    it('無効なファイルタイプの場合はエラーを返す', async () => {\n      // 無効なファイルタイプのFileオブジェクトを作成\n      const mockFile = new File(['dummy content'], 'test.txt', {\n        type: 'text/plain',\n      });\n\n      const formData = new FormData();\n      formData.append('file', mockFile);\n\n      // リクエストオブジェクトのモック\n      const mockReq = {\n        formData: jest.fn().mockResolvedValue(formData),\n      } as unknown as NextRequest;\n\n      // APIハンドラを呼び出す\n      const response = await POST(mockReq);\n\n      // レスポンスを検証\n      expect(response.status).toBe(400);\n\n      // レスポンスボディを取得\n      const data = await response.json();\n\n      // レスポンスボディを検証\n      expect(data.success).toBe(false);\n      expect(data.error).toBe('PPTXファイルのみアップロード可能です');\n    });\n  });\n\n  describe('GET /api/pptx/parse', () => {\n    it('ヘルスチェックエンドポイントが正常に応答する', async () => {\n      // APIハンドラを呼び出す\n      const response = await GET();\n\n      // レスポンスを検証\n      expect(response.status).toBe(200);\n\n      // レスポンスボディを取得\n      const data = await response.json();\n\n      // レスポンスボディを検証\n      expect(data.success).toBe(true);\n      expect(data.message).toBe('PPTXパーサーAPIは正常に動作しています');\n    });\n  });\n});\n"],"names":["jest","mock","PPTXParser","fn","mockImplementation","parse","mockResolvedValue","slides","id","title","content","metadata","author","totalSlides","auth","user","email","mkdir","undefined","writeFile","readdir","unlink","v4","mockReturnValue","mockJsonResponse","data","status","json","Promise","resolve","POST","req","formData","file","get","success","error","type","fileId","GET","message","describe","beforeEach","clearAllMocks","it","mockFile","File","FormData","append","mockReq","response","expect","toBe","toHaveLength"],"mappings":"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"}