{"version":3,"sources":["/Users/yusuketsunoda/Documents/cursor/ppttranslatorapp/worktrees/feature-test-coverage-improvement/tests/api/download/route.test.ts"],"sourcesContent":["import { NextRequest } from 'next/server';\nimport { getServerSession } from 'next-auth';\nimport { promises as fs } from 'fs';\nimport { join } from 'path';\nimport { filePathManager } from '@/lib/utils/file-utils';\nimport { createMocks } from 'node-mocks-http';\nimport { GET } from '@/app/api/download/[userId]/[filename]/route';\nimport { mockDeep, mockReset } from 'jest-mock-extended';\n\n// モックの設定\njest.mock('next-auth', () => ({\n  getServerSession: jest.fn(),\n}));\n\nconst mockFs = mockDeep<typeof fs>();\njest.mock('fs', () => ({\n  promises: mockFs,\n}));\n\nconst mockFilePathManager = mockDeep<typeof filePathManager>();\njest.mock('@/lib/utils/file-utils', () => ({\n  filePathManager: mockFilePathManager,\n}));\n\ndescribe('/api/download/[userId]/[filename]', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n    mockReset(mockFs);\n    mockReset(mockFilePathManager);\n  });\n\n  // テストユーザーの設定\n  const testUser = {\n    id: 'test-user-id',\n    name: 'Test User',\n    email: 'test@example.com',\n  };\n\n  // テストファイルの設定\n  const testFile = {\n    id: 'test-file-id',\n    name: 'test-file.pptx',\n    content: Buffer.from('test file content'),\n  };\n\n  it('未認証ユーザーのアクセスを拒否する', async () => {\n    // getServerSessionのモックを設定\n    (getServerSession as jest.Mock).mockResolvedValue(null);\n\n    const { req } = createMocks({\n      method: 'GET',\n    });\n\n    const response = await GET(req as unknown as NextRequest, {\n      params: {\n        userId: testUser.id,\n        filename: testFile.name,\n      },\n    });\n\n    expect(response.status).toBe(401);\n    const data = await response.json();\n    expect(data.error).toBe('認証が必要です');\n  });\n\n  it('他のユーザーのファイルへのアクセスを拒否する', async () => {\n    // getServerSessionのモックを設定\n    (getServerSession as jest.Mock).mockResolvedValue({\n      user: testUser,\n    });\n\n    const { req } = createMocks({\n      method: 'GET',\n    });\n\n    const response = await GET(req as unknown as NextRequest, {\n      params: {\n        userId: 'other-user-id',\n        filename: testFile.name,\n      },\n    });\n\n    expect(response.status).toBe(403);\n    const data = await response.json();\n    expect(data.error).toBe('アクセス権限がありません');\n  });\n\n  it('存在しないファイルへのアクセスを404で返す', async () => {\n    // getServerSessionのモックを設定\n    (getServerSession as jest.Mock).mockResolvedValue({\n      user: testUser,\n    });\n\n    // filePathManagerのモックを設定\n    mockFilePathManager.findActualFilePath.mockResolvedValue(null);\n\n    const { req } = createMocks({\n      method: 'GET',\n    });\n\n    const response = await GET(req as unknown as NextRequest, {\n      params: {\n        userId: testUser.id,\n        filename: 'non-existent-file.pptx',\n      },\n    });\n\n    expect(response.status).toBe(404);\n    const data = await response.json();\n    expect(data.error).toBe('ファイルが見つかりません');\n  });\n\n  it('正常なファイルダウンロードを処理する', async () => {\n    // getServerSessionのモックを設定\n    (getServerSession as jest.Mock).mockResolvedValue({\n      user: testUser,\n    });\n\n    // filePathManagerのモックを設定\n    const testFilePath = '/test/path/test-file.pptx';\n    mockFilePathManager.findActualFilePath.mockResolvedValue(testFilePath);\n\n    // fs.readFileのモックを設定\n    mockFs.readFile.mockResolvedValue(testFile.content);\n\n    const { req } = createMocks({\n      method: 'GET',\n    });\n\n    const response = await GET(req as unknown as NextRequest, {\n      params: {\n        userId: testUser.id,\n        filename: testFile.name,\n      },\n    });\n\n    expect(response.status).toBe(200);\n    expect(response.headers.get('Content-Type')).toBe(\n      'application/vnd.openxmlformats-officedocument.presentationml.presentation'\n    );\n    expect(response.headers.get('Content-Disposition')).toBe(\n      `attachment; filename=\"${testFile.name}\"`\n    );\n\n    const buffer = await response.arrayBuffer();\n    expect(Buffer.from(buffer)).toEqual(testFile.content);\n  });\n\n  it('ファイル読み込みエラーを処理する', async () => {\n    // getServerSessionのモックを設定\n    (getServerSession as jest.Mock).mockResolvedValue({\n      user: testUser,\n    });\n\n    // filePathManagerのモックを設定\n    const testFilePath = '/test/path/test-file.pptx';\n    mockFilePathManager.findActualFilePath.mockResolvedValue(testFilePath);\n\n    // fs.readFileのモックを設定してエラーを投げる\n    mockFs.readFile.mockRejectedValue(new Error('ファイル読み込みエラー'));\n\n    const { req } = createMocks({\n      method: 'GET',\n    });\n\n    const response = await GET(req as unknown as NextRequest, {\n      params: {\n        userId: testUser.id,\n        filename: testFile.name,\n      },\n    });\n\n    expect(response.status).toBe(500);\n    const data = await response.json();\n    expect(data.error).toBe('ファイルのダウンロードに失敗しました');\n  });\n}); "],"names":["jest","mock","getServerSession","fn","promises","mockFs","filePathManager","mockFilePathManager","mockDeep","describe","beforeEach","clearAllMocks","mockReset","testUser","id","name","email","testFile","content","Buffer","from","it","mockResolvedValue","req","createMocks","method","response","GET","params","userId","filename","expect","status","toBe","data","json","error","user","findActualFilePath","testFilePath","readFile","headers","get","buffer","arrayBuffer","toEqual","mockRejectedValue","Error"],"mappings":"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"}