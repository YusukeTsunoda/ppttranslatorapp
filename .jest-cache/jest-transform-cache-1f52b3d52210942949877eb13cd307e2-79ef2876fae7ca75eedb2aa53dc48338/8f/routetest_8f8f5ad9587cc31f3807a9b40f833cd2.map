{"version":3,"sources":["/Users/yusuketsunoda/Documents/cursor/ppttranslatorapp/worktrees/feature-test-coverage-improvement/tests/api/history/route.test.ts"],"sourcesContent":["import { GET } from '@/app/api/history/route';\nimport { NextResponse } from 'next/server';\nimport { getServerSession } from 'next-auth';\nimport { prisma } from '@/lib/db/prisma';\nimport { Language, TranslationStatus } from '@prisma/client';\n\n// NodeJSでRequestオブジェクトを模倣\nglobal.Request = class MockRequest {\n  url: string;\n  constructor(url: string) {\n    this.url = url;\n  }\n} as any;\n\n// NextResponseのモック\nconst originalNextResponse = NextResponse;\njest.mock('next/server', () => ({\n  NextResponse: {\n    json: jest.fn().mockImplementation((data, options) => {\n      return {\n        status: options?.status || 200,\n        json: async () => data,\n      };\n    }),\n  },\n}));\n\n// モック\njest.mock('next-auth', () => ({\n  getServerSession: jest.fn(),\n}));\n\njest.mock('@/lib/db/prisma', () => ({\n  prisma: {\n    translationHistory: {\n      count: jest.fn(),\n      findMany: jest.fn(),\n    },\n    $transaction: jest.fn(),\n  },\n}));\n\ndescribe('履歴API', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  it('認証がない場合は401エラーを返す', async () => {\n    (getServerSession as jest.Mock).mockResolvedValue(null);\n\n    const req = new Request('http://localhost:3000/api/history');\n    const response = await GET(req);\n\n    expect(response.status).toBe(401);\n    expect(await response.json()).toEqual({ error: '認証が必要です' });\n  });\n\n  it('デフォルトパラメータで履歴を取得できる', async () => {\n    // セッションモック\n    (getServerSession as jest.Mock).mockResolvedValue({\n      user: { id: 'test-user-id' },\n    });\n\n    // prismaモック\n    const mockHistory = [\n      {\n        id: 'history1',\n        createdAt: new Date(),\n        file: { originalName: 'test1.pptx' },\n      },\n      {\n        id: 'history2',\n        createdAt: new Date(),\n        file: { originalName: 'test2.pptx' },\n      },\n    ];\n\n    (prisma.$transaction as jest.Mock).mockResolvedValue([2, mockHistory]);\n\n    const req = new Request('http://localhost:3000/api/history');\n    const response = await GET(req);\n    const responseData = await response.json();\n\n    expect(response.status).toBe(200);\n    expect(responseData.data).toHaveLength(2);\n    expect(responseData.total).toBe(2);\n    expect(responseData.page).toBe(1);\n    expect(responseData.limit).toBe(10);\n\n    expect(prisma.$transaction).toHaveBeenCalledWith(expect.anything());\n  });\n\n  it('クエリパラメータを正しく処理する', async () => {\n    // セッションモック\n    (getServerSession as jest.Mock).mockResolvedValue({\n      user: { id: 'test-user-id' },\n    });\n\n    // prismaモック\n    const mockHistory = [{ id: 'history1', file: { originalName: 'test1.pptx' } }];\n    (prisma.$transaction as jest.Mock).mockResolvedValue([1, mockHistory]);\n\n    // クエリパラメータ付きリクエスト\n    const req = new Request(\n      'http://localhost:3000/api/history?page=2&limit=5&sort=createdAt&order=asc&search=test&startDate=2023-01-01&endDate=2023-12-31&status=COMPLETED&sourceLang=en&targetLang=ja'\n    );\n    const response = await GET(req);\n    const responseData = await response.json();\n\n    expect(response.status).toBe(200);\n    expect(responseData.page).toBe(2);\n    expect(responseData.limit).toBe(5);\n\n    // Prismaトランザクションが正しいパラメータで呼ばれているか確認\n    expect(prisma.$transaction).toHaveBeenCalledWith(expect.anything());\n  });\n\n  it('無効なページパラメータでは400エラーを返す', async () => {\n    (getServerSession as jest.Mock).mockResolvedValue({\n      user: { id: 'test-user-id' },\n    });\n\n    const req = new Request('http://localhost:3000/api/history?page=invalid');\n    const response = await GET(req);\n\n    expect(response.status).toBe(400);\n    expect(await response.json()).toEqual({ error: '無効なページ番号です' });\n  });\n\n  it('無効なlimitパラメータでは400エラーを返す', async () => {\n    (getServerSession as jest.Mock).mockResolvedValue({\n      user: { id: 'test-user-id' },\n    });\n\n    const req = new Request('http://localhost:3000/api/history?limit=1000');\n    const response = await GET(req);\n\n    expect(response.status).toBe(400);\n    expect(await response.json()).toEqual({ error: '無効な制限数です' });\n  });\n\n  it('無効なソートパラメータでは400エラーを返す', async () => {\n    (getServerSession as jest.Mock).mockResolvedValue({\n      user: { id: 'test-user-id' },\n    });\n\n    const req = new Request('http://localhost:3000/api/history?sort=invalidField');\n    const response = await GET(req);\n\n    expect(response.status).toBe(400);\n    expect(await response.json()).toEqual({ error: expect.stringContaining('無効なソートキー') });\n  });\n\n  it('無効なorder値では400エラーを返す', async () => {\n    (getServerSession as jest.Mock).mockResolvedValue({\n      user: { id: 'test-user-id' },\n    });\n\n    const req = new Request('http://localhost:3000/api/history?order=invalid');\n    const response = await GET(req);\n\n    expect(response.status).toBe(400);\n    expect(await response.json()).toEqual({ error: '無効なソート順序です' });\n  });\n\n  it('データベースエラーの場合は500エラーを返す', async () => {\n    (getServerSession as jest.Mock).mockResolvedValue({\n      user: { id: 'test-user-id' },\n    });\n\n    (prisma.$transaction as jest.Mock).mockRejectedValue(new Error('データベースエラー'));\n\n    const req = new Request('http://localhost:3000/api/history');\n    const response = await GET(req);\n\n    expect(response.status).toBe(500);\n    expect(await response.json()).toEqual({ error: expect.stringContaining('データベースエラー') });\n  });\n}); "],"names":["jest","mock","NextResponse","json","fn","mockImplementation","data","options","status","getServerSession","prisma","translationHistory","count","findMany","$transaction","global","Request","MockRequest","constructor","url","originalNextResponse","describe","beforeEach","clearAllMocks","it","mockResolvedValue","req","response","GET","expect","toBe","toEqual","error","user","id","mockHistory","createdAt","Date","file","originalName","responseData","toHaveLength","total","page","limit","toHaveBeenCalledWith","anything","stringContaining","mockRejectedValue","Error"],"mappings":";AAgBAA,KAAKC,IAAI,CAAC,eAAe,IAAO,CAAA;QAC9BC,cAAc;YACZC,MAAMH,KAAKI,EAAE,GAAGC,kBAAkB,CAAC,CAACC,MAAMC;gBACxC,OAAO;oBACLC,QAAQD,CAAAA,oBAAAA,8BAAAA,QAASC,MAAM,KAAI;oBAC3BL,MAAM,UAAYG;gBACpB;YACF;QACF;IACF,CAAA;AAEA,MAAM;AACNN,KAAKC,IAAI,CAAC,aAAa,IAAO,CAAA;QAC5BQ,kBAAkBT,KAAKI,EAAE;IAC3B,CAAA;AAEAJ,KAAKC,IAAI,CAAC,mBAAmB,IAAO,CAAA;QAClCS,QAAQ;YACNC,oBAAoB;gBAClBC,OAAOZ,KAAKI,EAAE;gBACdS,UAAUb,KAAKI,EAAE;YACnB;YACAU,cAAcd,KAAKI,EAAE;QACvB;IACF,CAAA;;;;uBAxCoB;wBACS;0BACI;wBACV;;;;;;;;;;;;;;AAGvB,0BAA0B;AAC1BW,OAAOC,OAAO,GAAG,MAAMC;IAErBC,YAAYC,GAAW,CAAE;QADzBA,uBAAAA,OAAAA,KAAAA;QAEE,IAAI,CAACA,GAAG,GAAGA;IACb;AACF;AAEA,mBAAmB;AACnB,MAAMC,uBAAuBlB,oBAAY;AA2BzCmB,SAAS,SAAS;IAChBC,WAAW;QACTtB,KAAKuB,aAAa;IACpB;IAEAC,GAAG,qBAAqB;QACrBf,0BAAgB,CAAegB,iBAAiB,CAAC;QAElD,MAAMC,MAAM,IAAIV,QAAQ;QACxB,MAAMW,WAAW,MAAMC,IAAAA,UAAG,EAACF;QAE3BG,OAAOF,SAASnB,MAAM,EAAEsB,IAAI,CAAC;QAC7BD,OAAO,MAAMF,SAASxB,IAAI,IAAI4B,OAAO,CAAC;YAAEC,OAAO;QAAU;IAC3D;IAEAR,GAAG,uBAAuB;QACxB,WAAW;QACVf,0BAAgB,CAAegB,iBAAiB,CAAC;YAChDQ,MAAM;gBAAEC,IAAI;YAAe;QAC7B;QAEA,YAAY;QACZ,MAAMC,cAAc;YAClB;gBACED,IAAI;gBACJE,WAAW,IAAIC;gBACfC,MAAM;oBAAEC,cAAc;gBAAa;YACrC;YACA;gBACEL,IAAI;gBACJE,WAAW,IAAIC;gBACfC,MAAM;oBAAEC,cAAc;gBAAa;YACrC;SACD;QAEA7B,cAAM,CAACI,YAAY,CAAeW,iBAAiB,CAAC;YAAC;YAAGU;SAAY;QAErE,MAAMT,MAAM,IAAIV,QAAQ;QACxB,MAAMW,WAAW,MAAMC,IAAAA,UAAG,EAACF;QAC3B,MAAMc,eAAe,MAAMb,SAASxB,IAAI;QAExC0B,OAAOF,SAASnB,MAAM,EAAEsB,IAAI,CAAC;QAC7BD,OAAOW,aAAalC,IAAI,EAAEmC,YAAY,CAAC;QACvCZ,OAAOW,aAAaE,KAAK,EAAEZ,IAAI,CAAC;QAChCD,OAAOW,aAAaG,IAAI,EAAEb,IAAI,CAAC;QAC/BD,OAAOW,aAAaI,KAAK,EAAEd,IAAI,CAAC;QAEhCD,OAAOnB,cAAM,CAACI,YAAY,EAAE+B,oBAAoB,CAAChB,OAAOiB,QAAQ;IAClE;IAEAtB,GAAG,oBAAoB;QACrB,WAAW;QACVf,0BAAgB,CAAegB,iBAAiB,CAAC;YAChDQ,MAAM;gBAAEC,IAAI;YAAe;QAC7B;QAEA,YAAY;QACZ,MAAMC,cAAc;YAAC;gBAAED,IAAI;gBAAYI,MAAM;oBAAEC,cAAc;gBAAa;YAAE;SAAE;QAC7E7B,cAAM,CAACI,YAAY,CAAeW,iBAAiB,CAAC;YAAC;YAAGU;SAAY;QAErE,kBAAkB;QAClB,MAAMT,MAAM,IAAIV,QACd;QAEF,MAAMW,WAAW,MAAMC,IAAAA,UAAG,EAACF;QAC3B,MAAMc,eAAe,MAAMb,SAASxB,IAAI;QAExC0B,OAAOF,SAASnB,MAAM,EAAEsB,IAAI,CAAC;QAC7BD,OAAOW,aAAaG,IAAI,EAAEb,IAAI,CAAC;QAC/BD,OAAOW,aAAaI,KAAK,EAAEd,IAAI,CAAC;QAEhC,oCAAoC;QACpCD,OAAOnB,cAAM,CAACI,YAAY,EAAE+B,oBAAoB,CAAChB,OAAOiB,QAAQ;IAClE;IAEAtB,GAAG,0BAA0B;QAC1Bf,0BAAgB,CAAegB,iBAAiB,CAAC;YAChDQ,MAAM;gBAAEC,IAAI;YAAe;QAC7B;QAEA,MAAMR,MAAM,IAAIV,QAAQ;QACxB,MAAMW,WAAW,MAAMC,IAAAA,UAAG,EAACF;QAE3BG,OAAOF,SAASnB,MAAM,EAAEsB,IAAI,CAAC;QAC7BD,OAAO,MAAMF,SAASxB,IAAI,IAAI4B,OAAO,CAAC;YAAEC,OAAO;QAAa;IAC9D;IAEAR,GAAG,4BAA4B;QAC5Bf,0BAAgB,CAAegB,iBAAiB,CAAC;YAChDQ,MAAM;gBAAEC,IAAI;YAAe;QAC7B;QAEA,MAAMR,MAAM,IAAIV,QAAQ;QACxB,MAAMW,WAAW,MAAMC,IAAAA,UAAG,EAACF;QAE3BG,OAAOF,SAASnB,MAAM,EAAEsB,IAAI,CAAC;QAC7BD,OAAO,MAAMF,SAASxB,IAAI,IAAI4B,OAAO,CAAC;YAAEC,OAAO;QAAW;IAC5D;IAEAR,GAAG,0BAA0B;QAC1Bf,0BAAgB,CAAegB,iBAAiB,CAAC;YAChDQ,MAAM;gBAAEC,IAAI;YAAe;QAC7B;QAEA,MAAMR,MAAM,IAAIV,QAAQ;QACxB,MAAMW,WAAW,MAAMC,IAAAA,UAAG,EAACF;QAE3BG,OAAOF,SAASnB,MAAM,EAAEsB,IAAI,CAAC;QAC7BD,OAAO,MAAMF,SAASxB,IAAI,IAAI4B,OAAO,CAAC;YAAEC,OAAOH,OAAOkB,gBAAgB,CAAC;QAAY;IACrF;IAEAvB,GAAG,wBAAwB;QACxBf,0BAAgB,CAAegB,iBAAiB,CAAC;YAChDQ,MAAM;gBAAEC,IAAI;YAAe;QAC7B;QAEA,MAAMR,MAAM,IAAIV,QAAQ;QACxB,MAAMW,WAAW,MAAMC,IAAAA,UAAG,EAACF;QAE3BG,OAAOF,SAASnB,MAAM,EAAEsB,IAAI,CAAC;QAC7BD,OAAO,MAAMF,SAASxB,IAAI,IAAI4B,OAAO,CAAC;YAAEC,OAAO;QAAa;IAC9D;IAEAR,GAAG,0BAA0B;QAC1Bf,0BAAgB,CAAegB,iBAAiB,CAAC;YAChDQ,MAAM;gBAAEC,IAAI;YAAe;QAC7B;QAECxB,cAAM,CAACI,YAAY,CAAekC,iBAAiB,CAAC,IAAIC,MAAM;QAE/D,MAAMvB,MAAM,IAAIV,QAAQ;QACxB,MAAMW,WAAW,MAAMC,IAAAA,UAAG,EAACF;QAE3BG,OAAOF,SAASnB,MAAM,EAAEsB,IAAI,CAAC;QAC7BD,OAAO,MAAMF,SAASxB,IAAI,IAAI4B,OAAO,CAAC;YAAEC,OAAOH,OAAOkB,gBAAgB,CAAC;QAAa;IACtF;AACF"}