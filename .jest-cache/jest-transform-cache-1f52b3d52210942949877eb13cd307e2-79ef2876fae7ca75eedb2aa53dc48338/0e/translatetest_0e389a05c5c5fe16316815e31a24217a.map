{"version":3,"sources":["/Users/yusuketsunoda/Documents/cursor/ppttranslatorapp/worktrees/feature-test-coverage-improvement/tests/api/translate.test.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { mockDeep } from 'jest-mock-extended';\nimport { expect } from '@jest/globals';\n\n// Anthropicのモック\njest.mock('@anthropic-ai/sdk', () => {\n  return jest.fn().mockImplementation(() => ({\n    messages: {\n      create: jest.fn().mockResolvedValue({\n        content: [\n          {\n            type: 'text',\n            text: '{\"translations\":[{\"original\":\"Hello\",\"translated\":\"こんにちは\"},{\"original\":\"World\",\"translated\":\"世界\"}]}',\n          },\n        ],\n      }),\n    },\n  }));\n});\n\n// next-authのモック\njest.mock('next-auth', () => ({\n  getServerSession: jest.fn().mockResolvedValue({\n    user: {\n      id: 'test-user',\n      email: 'test@example.com',\n      isPremium: true,\n    },\n  }),\n}));\n\n// prismaのモック\njest.mock('@/lib/db/prisma', () => ({\n  prisma: {\n    translation: {\n      create: jest.fn().mockResolvedValue({\n        id: 'test-translation-id',\n        userId: 'test-user',\n        sourceLanguage: 'en',\n        targetLanguage: 'ja',\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      }),\n      findMany: jest.fn().mockResolvedValue([\n        {\n          id: 'test-translation-id',\n          userId: 'test-user',\n          sourceLanguage: 'en',\n          targetLanguage: 'ja',\n          createdAt: new Date(),\n          updatedAt: new Date(),\n        },\n      ]),\n    },\n  },\n}));\n\n// モックレスポンスの作成\nconst mockSuccessResponse = {\n  status: 200,\n  json: async () => ({\n    success: true,\n    translations: [\n      { original: 'Hello', translated: 'こんにちは' },\n      { original: 'World', translated: '世界' },\n    ],\n  }),\n};\n\nconst mockErrorResponse = {\n  status: 400,\n  json: async () => ({ error: 'Invalid request' }),\n};\n\n// app/api/translate/route.tsのモック\njest.mock('@/app/api/translate/route', () => ({\n  POST: jest.fn().mockImplementation(async (req) => {\n    const body = await req.json();\n\n    if (!body.texts || !body.sourceLanguage || !body.targetLanguage) {\n      return mockErrorResponse;\n    }\n\n    return mockSuccessResponse;\n  }),\n  GET: jest.fn().mockImplementation(async () => {\n    return {\n      status: 200,\n      json: async () => ({\n        translations: [\n          {\n            id: 'test-translation-id',\n            userId: 'test-user',\n            sourceLanguage: 'en',\n            targetLanguage: 'ja',\n            createdAt: new Date(),\n            updatedAt: new Date(),\n          },\n        ],\n      }),\n    };\n  }),\n}));\n\n// インポートはモックの後に行う\nimport { POST, GET } from '@/app/api/translate/route';\n\ndescribe('Translate API', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('POST /api/translate', () => {\n    it('有効なリクエストで翻訳を実行する', async () => {\n      // リクエストボディの作成\n      const requestBody = {\n        texts: ['Hello', 'World'],\n        sourceLanguage: 'en',\n        targetLanguage: 'ja',\n      };\n\n      // モックのリクエストオブジェクトを作成\n      const mockReq = {\n        json: jest.fn().mockResolvedValue(requestBody),\n      };\n\n      // APIハンドラを呼び出す\n      const response = await POST(mockReq as unknown as NextRequest);\n\n      // レスポンスを検証\n      expect(response.status).toBe(200);\n\n      // レスポンスボディを取得\n      const data = await response.json();\n\n      // レスポンスボディを検証\n      expect(data.success).toBe(true);\n      expect(data.translations).toHaveLength(2);\n      expect(data.translations[0].original).toBe('Hello');\n      expect(data.translations[0].translated).toBe('こんにちは');\n    });\n\n    it('無効なリクエストでエラーを返す', async () => {\n      // 無効なリクエストボディの作成（textsが欠けている）\n      const requestBody = {\n        sourceLanguage: 'en',\n        targetLanguage: 'ja',\n      };\n\n      // モックのリクエストオブジェクトを作成\n      const mockReq = {\n        json: jest.fn().mockResolvedValue(requestBody),\n      };\n\n      // APIハンドラを呼び出す\n      const response = await POST(mockReq as unknown as NextRequest);\n\n      // レスポンスを検証\n      expect(response.status).toBe(400);\n\n      // レスポンスボディを取得\n      const data = await response.json();\n\n      // レスポンスボディを検証\n      expect(data.error).toBe('Invalid request');\n    });\n  });\n\n  describe('GET /api/translate', () => {\n    it('翻訳履歴を取得する', async () => {\n      // モックのリクエストオブジェクトを作成\n      const mockReq = {} as unknown as NextRequest;\n\n      // APIハンドラを呼び出す\n      const response = await GET(mockReq);\n\n      // レスポンスを検証\n      expect(response.status).toBe(200);\n\n      // レスポンスボディを取得\n      const data = await response.json();\n\n      // レスポンスボディを検証\n      expect(data.translations).toHaveLength(1);\n      expect(data.translations[0].userId).toBe('test-user');\n      expect(data.translations[0].sourceLanguage).toBe('en');\n      expect(data.translations[0].targetLanguage).toBe('ja');\n    });\n  });\n});\n"],"names":["jest","mock","fn","mockImplementation","messages","create","mockResolvedValue","content","type","text","getServerSession","user","id","email","isPremium","prisma","translation","userId","sourceLanguage","targetLanguage","createdAt","Date","updatedAt","findMany","POST","req","body","json","texts","mockErrorResponse","mockSuccessResponse","GET","status","translations","success","original","translated","error","describe","beforeEach","clearAllMocks","it","requestBody","mockReq","response","expect","toBe","data","toHaveLength"],"mappings":"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"}