{"version":3,"sources":["/Users/yusuketsunoda/Documents/cursor/ppttranslatorapp/worktrees/feature-test-coverage-improvement/tests/lib/utils/file-utils.test.ts"],"sourcesContent":["import { describe, it, expect, jest, beforeEach, afterEach } from '@jest/globals';\nimport { FilePathManager, FILE_CONFIG, generateFileId, wait, withRetry } from '@/lib/utils/file-utils';\nimport { join } from 'path';\n\n// fs/promises と fs のモックは jest.setup.js で設定済み\njest.mock('fs/promises');\njest.mock('fs');\n\n// グローバルのユーティリティ関数を使用\ndeclare global {\n  function __mockReaddir(files: string[]): void;\n  function __mockExistsSync(exists: boolean): void;\n  function __mockMkdir(implementationFn?: Function): void;\n}\n\ndescribe('ファイルユーティリティ', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('FilePathManager', () => {\n    let filePathManager: FilePathManager;\n    const userId = 'user123';\n    const fileId = 'file123';\n\n    beforeEach(() => {\n      filePathManager = new FilePathManager();\n    });\n\n    describe('getTempPath', () => {\n      it('正しい一時ファイルパスを返す', () => {\n        const result = filePathManager.getTempPath(userId, fileId);\n        const expected = join(FILE_CONFIG.tempDir, userId, 'uploads', `${fileId}_original.pptx`);\n        expect(result).toBe(expected);\n      });\n    });\n\n    describe('getPublicPath', () => {\n      it('正しい公開ファイルパスを返す', () => {\n        const result = filePathManager.getPublicPath(userId, fileId);\n        expect(result).toBe(`uploads/${userId}/${fileId}_translated.pptx`);\n      });\n    });\n\n    describe('getProcessingPath', () => {\n      it('正しい処理中ファイルパスを返す', () => {\n        const result = filePathManager.getProcessingPath(userId, fileId);\n        expect(result).toBe(`${FILE_CONFIG.processingDir}/${userId}/${fileId}`);\n      });\n    });\n  });\n\n  describe('generateFileId', () => {\n    it('一意のファイルIDを生成する', () => {\n      const id = generateFileId();\n      expect(id).toMatch(/^\\d+_[a-z0-9]+$/);\n    });\n  });\n\n  describe('wait', () => {\n    it('指定された時間だけ待機する', async () => {\n      jest.useFakeTimers();\n      const waitPromise = wait(1000);\n      jest.advanceTimersByTime(1000);\n      await waitPromise;\n      jest.useRealTimers();\n    });\n  });\n\n  describe('withRetry', () => {\n    beforeEach(() => {\n      jest.useFakeTimers();\n    });\n\n    afterEach(() => {\n      jest.useRealTimers();\n    });\n\n    it('初回で成功した場合はリトライしない', async () => {\n      const operation = jest.fn<() => Promise<string>>().mockResolvedValue('成功');\n      const onError = jest.fn();\n\n      const result = await withRetry(operation, { maxRetries: 3, delay: 100, onError });\n\n      expect(result).toBe('成功');\n      expect(operation).toHaveBeenCalledTimes(1);\n      expect(onError).not.toHaveBeenCalled();\n    });\n\n    it('失敗後にリトライして成功する場合', async () => {\n      const operation = jest\n        .fn<() => Promise<string>>()\n        .mockRejectedValueOnce(new Error('エラー1'))\n        .mockResolvedValue('成功');\n      const onError = jest.fn();\n\n      const retryPromise = withRetry(operation, { maxRetries: 3, delay: 100, onError });\n\n      await Promise.resolve(); // 初回実行\n      jest.advanceTimersByTime(100); // 遅延\n      await Promise.resolve(); // リトライ\n\n      const result = await retryPromise;\n\n      expect(result).toBe('成功');\n      expect(operation).toHaveBeenCalledTimes(2);\n      expect(onError).toHaveBeenCalledTimes(1);\n    });\n\n    it('最大リトライ回数を超えた場合はエラーをスロー', async () => {\n      const operation = jest.fn<() => Promise<string>>().mockRejectedValue(new Error('エラー'));\n      const onError = jest.fn();\n\n      const retryPromise = withRetry(operation, { maxRetries: 2, delay: 100, onError });\n\n      await Promise.resolve(); // 初回実行\n      jest.advanceTimersByTime(100); // 1回目の遅延\n      await Promise.resolve(); // 1回目のリトライ\n      jest.advanceTimersByTime(200); // 2回目の遅延\n\n      await expect(retryPromise).rejects.toThrow('エラー');\n      expect(operation).toHaveBeenCalledTimes(2);\n      expect(onError).toHaveBeenCalledTimes(2);\n    });\n  });\n});\n"],"names":["jest","mock","describe","beforeEach","clearAllMocks","filePathManager","userId","fileId","FilePathManager","it","result","getTempPath","expected","join","FILE_CONFIG","tempDir","expect","toBe","getPublicPath","getProcessingPath","processingDir","id","generateFileId","toMatch","useFakeTimers","waitPromise","wait","advanceTimersByTime","useRealTimers","afterEach","operation","fn","mockResolvedValue","onError","withRetry","maxRetries","delay","toHaveBeenCalledTimes","not","toHaveBeenCalled","mockRejectedValueOnce","Error","retryPromise","Promise","resolve","mockRejectedValue","rejects","toThrow"],"mappings":"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"}