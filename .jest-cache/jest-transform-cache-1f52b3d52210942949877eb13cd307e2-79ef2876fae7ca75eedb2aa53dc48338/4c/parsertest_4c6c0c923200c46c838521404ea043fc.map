{"version":3,"sources":["/Users/yusuketsunoda/Documents/cursor/ppttranslatorapp/worktrees/feature-test-coverage-improvement/tests/lib/pptx/parser.test.ts"],"sourcesContent":["/// <reference path=\"../../jest.d.ts\" />\n\nimport { PPTXParser } from '@/lib/pptx/parser';\nimport fs from 'fs';\nimport path from 'path';\nimport { PythonShell } from 'python-shell';\nimport { SlideContent } from '@/lib/pptx/types';\n\n// モックの設定\njest.mock('fs', () => ({\n  readFileSync: jest.fn(),\n  existsSync: jest.fn().mockReturnValue(true),\n  mkdirSync: jest.fn(),\n  writeFileSync: jest.fn(),\n  promises: {\n    access: jest.fn().mockResolvedValue(undefined),\n  },\n}));\n\njest.mock('fs/promises', () => ({\n  access: jest.fn().mockResolvedValue(undefined),\n  writeFile: jest.fn().mockResolvedValue(undefined),\n  readFile: jest.fn().mockResolvedValue(Buffer.from('mock file data')),\n}));\n\njest.mock('path', () => ({\n  join: jest.fn().mockImplementation((...args) => args.join('/')),\n  dirname: jest.fn().mockReturnValue('/mock/dir'),\n  basename: jest.fn().mockImplementation((path, ext) => (ext ? 'test' : 'pptx_parser.py')),\n}));\n\n// PythonShellモック\njest.mock('python-shell', () => {\n  const mockStream = {\n    write: jest.fn(),\n    end: jest.fn(),\n    on: jest.fn(),\n    removeListener: jest.fn(),\n    pipe: jest.fn(),\n    unpipe: jest.fn(),\n  };\n\n  const defaultImplementation = {\n    on: jest.fn().mockImplementation((event, callback) => {\n      if (event === 'message') {\n        callback(\n          JSON.stringify({\n            slides: [\n              {\n                index: 0,\n                image_path: 'slide_1.png',\n                texts: ['テストテキスト1'],\n                positions: [{ x: 100, y: 100, width: 200, height: 50 }],\n              },\n            ],\n          }),\n        );\n      }\n      return { on: jest.fn() };\n    }),\n    end: jest.fn().mockImplementation((callback) => {\n      callback(null);\n    }),\n    scriptPath: '',\n    command: 'python3',\n    mode: 'json',\n    formatter: null,\n    pythonPath: 'python3',\n    pythonOptions: [],\n    scriptArgs: [],\n    stdoutParser: jest.fn(),\n    stderrParser: jest.fn(),\n    terminated: false,\n    childProcess: null,\n    parser: jest.fn(),\n    stdin: mockStream,\n    stdout: mockStream,\n    stderr: mockStream,\n    exitSignal: null,\n    exitCode: 0,\n    stderrHasEnded: false,\n    stdoutHasEnded: false,\n    send: jest.fn(),\n    kill: jest.fn(),\n    terminate: jest.fn(),\n    _remaining: '',\n    _endCallback: null,\n    parseError: null,\n    addListener: jest.fn(),\n    removeAllListeners: jest.fn(),\n    setMaxListeners: jest.fn(),\n    getMaxListeners: jest.fn(),\n    listeners: jest.fn(),\n    rawListeners: jest.fn(),\n    emit: jest.fn(),\n    listenerCount: jest.fn(),\n    prependListener: jest.fn(),\n    prependOnceListener: jest.fn(),\n    eventNames: jest.fn(),\n    once: jest.fn(),\n    off: jest.fn(),\n  } as unknown as PythonShell;\n\n  return {\n    PythonShell: jest.fn().mockImplementation(() => defaultImplementation),\n  };\n});\n\njest.mock('child_process', () => {\n  const mockExec = jest.fn().mockImplementation((cmd, callback) => {\n    if (cmd === 'python3 --version') {\n      callback(null, { stdout: 'Python 3.11.0\\n' });\n    } else {\n      callback(null, { stdout: 'All dependencies are installed\\n' });\n    }\n  });\n  return {\n    exec: mockExec,\n    promisify: jest.fn().mockImplementation((fn) => {\n      return () => Promise.resolve({ stdout: 'Python 3.11.0\\n' });\n    }),\n  };\n});\n\ndescribe('PPTXパーサー', () => {\n  let parser: PPTXParser;\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n    parser = PPTXParser.getInstance();\n  });\n\n  describe('parsePPTX', () => {\n    it('PPTXファイルを正しくパースする', async () => {\n      // fs.existsSyncがtrueを返すようにモック\n      (fs.existsSync as jest.Mock).mockReturnValue(true);\n\n      const result = await parser.parsePPTX('test.pptx', '/tmp');\n\n      expect(result).toBeDefined();\n      expect(result.slides).toHaveLength(1);\n      expect(result.slides[0].textElements[0].text).toBe('テストテキスト1');\n      expect(result.slides[0].imagePath).toBe('slide_1.png');\n    });\n\n    it('Pythonスクリプトが見つからない場合はエラーを投げる', async () => {\n      // fs.existsSyncを一時的にfalseを返すように設定\n      const existsSyncMock = jest\n        .fn()\n        .mockReturnValueOnce(false) // 最初の呼び出しでfalse\n        .mockReturnValue(true); // その後の呼び出しではtrue\n      (fs.existsSync as jest.Mock).mockImplementation(existsSyncMock);\n\n      await expect(parser.parsePPTX('test.pptx', '/tmp')).rejects.toThrow('Python script not found');\n      expect(existsSyncMock).toHaveBeenCalled();\n    });\n\n    it('Pythonスクリプトの実行エラーを適切に処理する', async () => {\n      // fs.existsSyncがtrueを返すように設定\n      (fs.existsSync as jest.Mock).mockReturnValue(true);\n\n      const mockStream = {\n        write: jest.fn(),\n        end: jest.fn(),\n        on: jest.fn(),\n        removeListener: jest.fn(),\n        pipe: jest.fn(),\n        unpipe: jest.fn(),\n      };\n\n      // PythonShellのモックを一時的にエラーを返すように設定\n      const errorImplementation = {\n        on: jest.fn().mockImplementation((event, callback) => {\n          if (event === 'stderr') {\n            callback('Python execution error');\n          }\n          return { on: jest.fn() };\n        }),\n        end: jest.fn().mockImplementation((callback) => {\n          callback(new Error('Python execution error'));\n        }),\n        scriptPath: '',\n        command: 'python3',\n        mode: 'json',\n        formatter: null,\n        pythonPath: 'python3',\n        pythonOptions: [],\n        scriptArgs: [],\n        stdoutParser: jest.fn(),\n        stderrParser: jest.fn(),\n        terminated: false,\n        childProcess: null,\n        parser: jest.fn(),\n        stdin: mockStream,\n        stdout: mockStream,\n        stderr: mockStream,\n        exitSignal: null,\n        exitCode: 1,\n        stderrHasEnded: true,\n        stdoutHasEnded: true,\n        send: jest.fn(),\n        kill: jest.fn(),\n        terminate: jest.fn(),\n        _remaining: '',\n        _endCallback: null,\n        parseError: null,\n        addListener: jest.fn(),\n        removeAllListeners: jest.fn(),\n        setMaxListeners: jest.fn(),\n        getMaxListeners: jest.fn(),\n        listeners: jest.fn(),\n        rawListeners: jest.fn(),\n        emit: jest.fn(),\n        listenerCount: jest.fn(),\n        prependListener: jest.fn(),\n        prependOnceListener: jest.fn(),\n        eventNames: jest.fn(),\n        once: jest.fn(),\n        off: jest.fn(),\n      } as unknown as PythonShell;\n\n      jest.mocked(PythonShell).mockImplementationOnce(() => errorImplementation);\n\n      await expect(parser.parsePPTX('test.pptx', '/tmp')).rejects.toThrow('Python execution error');\n    });\n\n    it('複雑なスライドレイアウトを正しく解析する', async () => {\n      const complexSlideData = {\n        slides: [\n          {\n            index: 0,\n            image_path: 'slide_1.png',\n            texts: [\n              {\n                text: 'タイトル',\n                position: { x: 100, y: 50, width: 400, height: 100 },\n                type: 'title',\n                paragraphs: [{ font: { name: 'Arial', size: 44, color: '#000000' } }]\n              },\n              {\n                text: '本文テキスト',\n                position: { x: 100, y: 200, width: 300, height: 150 },\n                type: 'body',\n                paragraphs: [{ font: { name: 'MS Gothic', size: 24, color: '#333333' } }]\n              }\n            ],\n            shapes: [\n              { type: 'rectangle', x: 50, y: 30, width: 500, height: 140 },\n              { type: 'ellipse', x: 80, y: 180, width: 340, height: 190 }\n            ]\n          }\n        ],\n        metadata: {\n          title: 'テストプレゼンテーション',\n          author: 'テストユーザー',\n          created: '2024-03-20T10:00:00Z',\n          modified: '2024-03-20T11:00:00Z',\n          company: 'テスト株式会社'\n        }\n      };\n\n      // PythonShellのモックを一時的に変更\n      (PythonShell as jest.Mock).mockImplementation(() => ({\n        on: jest.fn().mockImplementation((event, callback) => {\n          if (event === 'message') {\n            callback(JSON.stringify(complexSlideData));\n          }\n          return { on: jest.fn() };\n        }),\n        end: jest.fn().mockImplementation((callback) => {\n          callback(null);\n        })\n      }));\n\n      const result = await parser.parsePPTX('test.pptx', '/tmp');\n\n      // スライドの基本情報を検証\n      expect(result).toBeDefined();\n      expect(result.slides).toHaveLength(1);\n      expect(result.totalSlides).toBe(1);\n      expect(result.filename).toBe('test.pptx');\n\n      // メタデータを検証\n      expect(result.metadata).toEqual({\n        title: 'テストプレゼンテーション',\n        author: 'テストユーザー',\n        created: '2024-03-20T10:00:00Z',\n        modified: '2024-03-20T11:00:00Z',\n        company: 'テスト株式会社'\n      });\n\n      // テキスト要素を検証\n      const slide = result.slides[0];\n      expect(slide.textElements).toHaveLength(2);\n      \n      // タイトルテキストを検証\n      const titleElement = slide.textElements[0];\n      expect(titleElement.text).toBe('タイトル');\n      expect(titleElement.type).toBe('title');\n      expect(titleElement.position).toEqual({ x: 100, y: 50, width: 400, height: 100 });\n      expect(titleElement.fontInfo).toEqual({ name: 'Arial', size: 44, color: '#000000' });\n\n      // 本文テキストを検証\n      const bodyElement = slide.textElements[1];\n      expect(bodyElement.text).toBe('本文テキスト');\n      expect(bodyElement.type).toBe('body');\n      expect(bodyElement.position).toEqual({ x: 100, y: 200, width: 300, height: 150 });\n      expect(bodyElement.fontInfo).toEqual({ name: 'MS Gothic', size: 24, color: '#333333' });\n    });\n\n    it('無効なファイル形式を適切に処理する', async () => {\n      // PythonShellのモックを一時的にエラーを返すように設定\n      (PythonShell as jest.Mock).mockImplementation(() => ({\n        on: jest.fn().mockImplementation((event, callback) => {\n          if (event === 'stderr') {\n            callback('Invalid file format: File is not a valid PPTX file');\n          }\n          return { on: jest.fn() };\n        }),\n        end: jest.fn().mockImplementation((callback) => {\n          callback(new Error('Invalid file format'));\n        })\n      }));\n\n      await expect(parser.parsePPTX('invalid.pptx', '/tmp')).rejects.toThrow('Invalid file format');\n    });\n\n    it('破損したファイルを適切に処理する', async () => {\n      // PythonShellのモックを一時的にエラーを返すように設定\n      (PythonShell as jest.Mock).mockImplementation(() => ({\n        on: jest.fn().mockImplementation((event, callback) => {\n          if (event === 'stderr') {\n            callback('Corrupted PPTX file: Unable to read file structure');\n          }\n          return { on: jest.fn() };\n        }),\n        end: jest.fn().mockImplementation((callback) => {\n          callback(new Error('Corrupted PPTX file'));\n        })\n      }));\n\n      await expect(parser.parsePPTX('corrupted.pptx', '/tmp')).rejects.toThrow('Corrupted PPTX file');\n    });\n\n    it('特殊なレイアウトを含むスライドを正しく処理する', async () => {\n      const specialLayoutData = {\n        slides: [\n          {\n            index: 0,\n            image_path: 'slide_1.png',\n            texts: [\n              {\n                text: '縦書きテキスト',\n                position: { x: 50, y: 50, width: 100, height: 400 },\n                type: 'vertical',\n                paragraphs: [{ font: { name: 'MS Mincho', size: 24, color: '#000000' } }]\n              },\n              {\n                text: '回転テキスト',\n                position: { x: 200, y: 100, width: 200, height: 50 },\n                type: 'rotated',\n                rotation: 45,\n                paragraphs: [{ font: { name: 'Arial', size: 20, color: '#333333' } }]\n              },\n              {\n                text: 'テーブルセル',\n                position: { x: 300, y: 200, width: 100, height: 50 },\n                type: 'table_cell',\n                table_info: { row: 0, col: 0 },\n                paragraphs: [{ font: { name: 'MS Gothic', size: 16, color: '#666666' } }]\n              }\n            ]\n          }\n        ]\n      };\n\n      // PythonShellのモックを一時的に変更\n      (PythonShell as jest.Mock).mockImplementation(() => ({\n        on: jest.fn().mockImplementation((event, callback) => {\n          if (event === 'message') {\n            callback(JSON.stringify(specialLayoutData));\n          }\n          return { on: jest.fn() };\n        }),\n        end: jest.fn().mockImplementation((callback) => {\n          callback(null);\n        })\n      }));\n\n      const result = await parser.parsePPTX('special_layout.pptx', '/tmp');\n\n      // 特殊なレイアウト要素を検証\n      expect(result.slides[0].textElements).toHaveLength(3);\n      \n      // 縦書きテキストを検証\n      const verticalText = result.slides[0].textElements[0];\n      expect(verticalText.text).toBe('縦書きテキスト');\n      expect(verticalText.type).toBe('vertical');\n      expect(verticalText.position.height).toBe(400);\n      expect(verticalText.fontInfo.name).toBe('MS Mincho');\n\n      // 回転テキストを検証\n      const rotatedText = result.slides[0].textElements[1];\n      expect(rotatedText.text).toBe('回転テキスト');\n      expect(rotatedText.type).toBe('rotated');\n      expect(rotatedText.rotation).toBe(45);\n\n      // テーブルセルを検証\n      const tableCell = result.slides[0].textElements[2];\n      expect(tableCell.text).toBe('テーブルセル');\n      expect(tableCell.type).toBe('table_cell');\n      expect(tableCell.table_info).toEqual({ row: 0, col: 0 });\n    });\n  });\n\n  describe('extractTexts', () => {\n    it('パース結果からテキストを抽出する', () => {\n      const mockParseResult = {\n        slides: [\n          {\n            index: 0,\n            textElements: [\n              {\n                id: 'text_0_0',\n                text: 'テキスト1',\n                position: { x: 0, y: 0, width: 0, height: 0 },\n              },\n              {\n                id: 'text_0_1',\n                text: 'テキスト2',\n                position: { x: 0, y: 0, width: 0, height: 0 },\n              },\n            ],\n            imagePath: 'slide_1.png',\n          },\n        ],\n        metadata: {\n          totalSlides: 1,\n          title: 'test',\n          lastModified: new Date().toISOString(),\n        },\n      };\n\n      const result = parser.extractTexts(mockParseResult);\n\n      expect(result).toHaveLength(2);\n      expect(result[0]).toBe('テキスト1');\n      expect(result[1]).toBe('テキスト2');\n    });\n  });\n\n  describe('getTextWithPositions', () => {\n    it('パース結果からテキストと位置情報を取得する', () => {\n      const mockSlide: SlideContent = {\n        index: 0,\n        textElements: [\n          { id: 'text_0_0', text: 'テキスト1', position: { x: 100, y: 100, width: 200, height: 50 } },\n          { id: 'text_0_1', text: 'テキスト2', position: { x: 100, y: 200, width: 200, height: 50 } },\n        ],\n        imagePath: 'slide_1.png',\n      };\n\n      const mockParseResult = {\n        slides: [mockSlide],\n        metadata: {\n          totalSlides: 1,\n          title: 'test',\n          lastModified: new Date().toISOString(),\n        },\n      };\n\n      const result = parser.getTextWithPositions(mockParseResult);\n\n      expect(result).toHaveLength(1);\n      expect(result[0].index).toBe(0);\n      expect(result[0].textElements).toHaveLength(2);\n      expect(result[0].textElements[0].text).toBe('テキスト1');\n      expect(result[0].textElements[1].text).toBe('テキスト2');\n      expect(result[0].textElements[0].position.x).toBe(100);\n    });\n  });\n});\n"],"names":["jest","mock","readFileSync","fn","existsSync","mockReturnValue","mkdirSync","writeFileSync","promises","access","mockResolvedValue","undefined","writeFile","readFile","Buffer","from","join","mockImplementation","args","dirname","basename","path","ext","mockStream","write","end","on","removeListener","pipe","unpipe","defaultImplementation","event","callback","JSON","stringify","slides","index","image_path","texts","positions","x","y","width","height","scriptPath","command","mode","formatter","pythonPath","pythonOptions","scriptArgs","stdoutParser","stderrParser","terminated","childProcess","parser","stdin","stdout","stderr","exitSignal","exitCode","stderrHasEnded","stdoutHasEnded","send","kill","terminate","_remaining","_endCallback","parseError","addListener","removeAllListeners","setMaxListeners","getMaxListeners","listeners","rawListeners","emit","listenerCount","prependListener","prependOnceListener","eventNames","once","off","PythonShell","mockExec","cmd","exec","promisify","Promise","resolve","describe","beforeEach","clearAllMocks","PPTXParser","getInstance","it","fs","result","parsePPTX","expect","toBeDefined","toHaveLength","textElements","text","toBe","imagePath","existsSyncMock","mockReturnValueOnce","rejects","toThrow","toHaveBeenCalled","errorImplementation","Error","mocked","mockImplementationOnce","complexSlideData","position","type","paragraphs","font","name","size","color","shapes","metadata","title","author","created","modified","company","totalSlides","filename","toEqual","slide","titleElement","fontInfo","bodyElement","specialLayoutData","rotation","table_info","row","col","verticalText","rotatedText","tableCell","mockParseResult","id","lastModified","Date","toISOString","extractTexts","mockSlide","getTextWithPositions"],"mappings":"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"}