{"version":3,"sources":["/Users/yusuketsunoda/Documents/cursor/ppttranslatorapp/worktrees/feature-test-coverage-improvement/tests/lib/utils/file-utils.test.ts"],"sourcesContent":["import { describe, it, expect, jest, beforeEach } from '@jest/globals';\nimport { FilePathManager, FILE_CONFIG, generateFileId, withRetry } from '@/lib/utils/file-utils';\nimport { join } from 'path';\nimport { promises as fs } from 'fs';\n\n// fsモジュールのモック\njest.mock('fs/promises', () => ({\n  mkdir: jest.fn().mockResolvedValue(undefined),\n  readdir: jest.fn().mockResolvedValue(['test-file.pptx']),\n  copyFile: jest.fn().mockResolvedValue(undefined),\n  stat: jest.fn().mockResolvedValue({ mtimeMs: Date.now() }),\n  unlink: jest.fn().mockResolvedValue(undefined),\n}));\n\njest.mock('fs', () => ({\n  existsSync: jest.fn().mockReturnValue(true),\n}));\n\ndescribe('FilePathManager', () => {\n  let filePathManager: FilePathManager;\n  const userId = 'test-user';\n  const fileId = 'test-file';\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n    filePathManager = new FilePathManager();\n  });\n\n  describe('パス生成メソッド', () => {\n    it('getTempPathが正しいパスを返す', () => {\n      const originalPath = filePathManager.getTempPath(userId, fileId, 'original');\n      const translatedPath = filePathManager.getTempPath(userId, fileId, 'translated');\n\n      expect(originalPath).toBe(join(FILE_CONFIG.tempDir, userId, 'uploads', `${fileId}_original.pptx`));\n      expect(translatedPath).toBe(join(FILE_CONFIG.tempDir, userId, 'uploads', `${fileId}_translated.pptx`));\n    });\n\n    it('getPublicPathが正しいパスを返す', () => {\n      const originalPath = filePathManager.getPublicPath(userId, fileId, 'original');\n      const translatedPath = filePathManager.getPublicPath(userId, fileId, 'translated');\n\n      expect(originalPath).toBe(join('uploads', userId, `${fileId}_original.pptx`));\n      expect(translatedPath).toBe(join('uploads', userId, `${fileId}_translated.pptx`));\n    });\n\n    it('getProcessingPathが正しいパスを返す', () => {\n      const path = filePathManager.getProcessingPath(userId, fileId);\n      expect(path).toBe(join(FILE_CONFIG.processingDir, userId, fileId));\n    });\n\n    it('getSlidesPathが正しいパスを返す', () => {\n      const path = filePathManager.getSlidesPath(userId, fileId);\n      expect(path).toBe(join(FILE_CONFIG.tempDir, userId, fileId, 'slides'));\n    });\n  });\n\n  describe('パス変換メソッド', () => {\n    it('getAbsolutePathが相対パスを絶対パスに変換する', () => {\n      const relativePath = 'uploads/test-file.pptx';\n      const absolutePath = filePathManager.getAbsolutePath(relativePath);\n      expect(absolutePath).toBe(join(process.cwd(), relativePath));\n    });\n\n    it('getAbsolutePathが絶対パスをそのまま返す', () => {\n      const absolutePath = '/absolute/path/to/file.pptx';\n      const result = filePathManager.getAbsolutePath(absolutePath);\n      expect(result).toBe(absolutePath);\n    });\n  });\n\n  describe('ファイル操作メソッド', () => {\n    it('findActualFilePathが正しいファイルを見つける', async () => {\n      const mockFiles = [`${fileId}.pptx`, `${fileId}_translated.pptx`];\n      (fs.readdir as jest.Mock).mockResolvedValue(mockFiles);\n\n      const originalPath = await filePathManager.findActualFilePath(userId, fileId, 'original');\n      const translatedPath = await filePathManager.findActualFilePath(userId, fileId, 'translated');\n\n      expect(originalPath).toBe(join(FILE_CONFIG.tempDir, userId, 'uploads', `${fileId}.pptx`));\n      expect(translatedPath).toBe(join(FILE_CONFIG.tempDir, userId, 'uploads', `${fileId}_translated.pptx`));\n    });\n\n    it('findActualFilePathがファイルが見つからない場合nullを返す', async () => {\n      (fs.readdir as jest.Mock).mockResolvedValue(['other-file.pptx']);\n\n      const result = await filePathManager.findActualFilePath(userId, fileId, 'original');\n      expect(result).toBeNull();\n    });\n\n    it('ensurePathがディレクトリを作成する', async () => {\n      const filePath = join('uploads', userId, 'test-file.pptx');\n      await filePathManager.ensurePath(filePath);\n\n      expect(fs.mkdir).toHaveBeenCalledWith(\n        join(process.cwd(), 'uploads', userId),\n        { recursive: true }\n      );\n    });\n\n    it('moveToPublicがファイルを公開ディレクトリに移動する', async () => {\n      const sourcePath = join(FILE_CONFIG.tempDir, userId, 'uploads', `${fileId}_translated.pptx`);\n      const destPath = join(FILE_CONFIG.publicDir, userId, `${fileId}_translated.pptx`);\n      \n      (fs.readdir as jest.Mock).mockResolvedValue([`${fileId}_translated.pptx`]);\n\n      const result = await filePathManager.moveToPublic(userId, fileId);\n\n      expect(fs.mkdir).toHaveBeenCalledWith(\n        join(process.cwd(), FILE_CONFIG.publicDir, userId),\n        { recursive: true }\n      );\n      expect(fs.copyFile).toHaveBeenCalledWith(\n        join(process.cwd(), sourcePath),\n        join(process.cwd(), destPath)\n      );\n      expect(result).toBe(join('uploads', userId, `${fileId}_translated.pptx`));\n    });\n  });\n});\n\ndescribe('ユーティリティ関数', () => {\n  describe('generateFileId', () => {\n    it('一意のファイルIDを生成する', () => {\n      const id1 = generateFileId();\n      const id2 = generateFileId();\n      expect(id1).not.toBe(id2);\n      expect(id1).toMatch(/^[a-f0-9-]+$/);\n    });\n  });\n\n  describe('withRetry', () => {\n    it('成功時に結果を返す', async () => {\n      const operation = jest.fn().mockResolvedValue('success');\n      const result = await withRetry(operation, { maxRetries: 3, delay: 100 });\n      expect(result).toBe('success');\n      expect(operation).toHaveBeenCalledTimes(1);\n    });\n\n    it('失敗時にリトライする', async () => {\n      const operation = jest.fn()\n        .mockRejectedValueOnce(new Error('fail'))\n        .mockRejectedValueOnce(new Error('fail'))\n        .mockResolvedValue('success');\n\n      const result = await withRetry(operation, { maxRetries: 3, delay: 100 });\n      expect(result).toBe('success');\n      expect(operation).toHaveBeenCalledTimes(3);\n    });\n\n    it('最大リトライ回数を超えた場合にエラーを投げる', async () => {\n      const operation = jest.fn().mockRejectedValue(new Error('fail'));\n      await expect(withRetry(operation, { maxRetries: 3, delay: 100 }))\n        .rejects.toThrow('fail');\n      expect(operation).toHaveBeenCalledTimes(3);\n    });\n  });\n});\n"],"names":["jest","mock","mkdir","fn","mockResolvedValue","undefined","readdir","copyFile","stat","mtimeMs","Date","now","unlink","existsSync","mockReturnValue","describe","filePathManager","userId","fileId","beforeEach","clearAllMocks","FilePathManager","it","originalPath","getTempPath","translatedPath","expect","toBe","join","FILE_CONFIG","tempDir","getPublicPath","path","getProcessingPath","processingDir","getSlidesPath","relativePath","absolutePath","getAbsolutePath","process","cwd","result","mockFiles","fs","findActualFilePath","toBeNull","filePath","ensurePath","toHaveBeenCalledWith","recursive","sourcePath","destPath","publicDir","moveToPublic","id1","generateFileId","id2","not","toMatch","operation","withRetry","maxRetries","delay","toHaveBeenCalledTimes","mockRejectedValueOnce","Error","mockRejectedValue","rejects","toThrow"],"mappings":"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"}