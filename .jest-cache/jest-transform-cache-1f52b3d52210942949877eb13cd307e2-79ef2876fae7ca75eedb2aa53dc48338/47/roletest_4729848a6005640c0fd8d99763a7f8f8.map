{"version":3,"sources":["/Users/yusuketsunoda/Documents/cursor/ppttranslatorapp/worktrees/feature-test-coverage-improvement/tests/api/user/role.test.ts"],"sourcesContent":["import { GET } from '@/app/api/user/role/route';\nimport { getServerSession } from 'next-auth';\nimport { prisma } from '@/lib/db/prisma';\nimport { NextRequest } from 'next/server';\nimport { mockDeep, DeepMockProxy } from 'jest-mock-extended';\nimport { authOptions } from '@/lib/auth/auth-options';\nimport { User, UserRole } from '@prisma/client'; // UserRoleもインポート\n\n// getServerSession のモック\njest.mock('next-auth', () => ({\n    ...jest.requireActual('next-auth'),\n    getServerSession: jest.fn(),\n}));\n\n// Prisma Client のモック\njest.mock('@/lib/db/prisma', () => ({\n  prisma: mockDeep<DeepMockProxy<typeof prisma>>(),\n}));\n\nconst getServerSessionMock = getServerSession as jest.Mock;\nconst prismaMock = prisma as unknown as DeepMockProxy<typeof prisma>;\n\ndescribe('GET /api/user/role', () => {\n  const mockUserId = 'user-role-test-id';\n  // NextRequestのモックはGETでは通常不要だが、型合わせのためにダミーを渡すことがある\n  const mockRequest = new NextRequest('http://localhost/api/user/role'); \n\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  it('should return isAdmin true and role ADMIN for admin user', async () => {\n    getServerSessionMock.mockResolvedValue({ user: { id: mockUserId } } as any);\n    prismaMock.user.findUnique.mockResolvedValue({ role: UserRole.ADMIN } as Pick<User, 'role'>);\n\n    const response = await GET(mockRequest);\n    const responseBody = await response.json();\n\n    expect(response.status).toBe(200);\n    expect(responseBody.isAdmin).toBe(true);\n    expect(responseBody.role).toBe(UserRole.ADMIN);\n    expect(getServerSessionMock).toHaveBeenCalledWith(authOptions);\n    expect(prismaMock.user.findUnique).toHaveBeenCalledWith({\n      where: { id: mockUserId },\n      select: { role: true },\n    });\n  });\n\n  it('should return isAdmin false and role USER for non-admin user', async () => {\n    getServerSessionMock.mockResolvedValue({ user: { id: mockUserId } } as any);\n    prismaMock.user.findUnique.mockResolvedValue({ role: UserRole.USER } as Pick<User, 'role'>);\n\n    const response = await GET(mockRequest);\n    const responseBody = await response.json();\n\n    expect(response.status).toBe(200);\n    expect(responseBody.isAdmin).toBe(false);\n    expect(responseBody.role).toBe(UserRole.USER);\n  });\n\n  it('should return 401 with isAdmin false and role null if not authenticated', async () => {\n    getServerSessionMock.mockResolvedValue(null); // No session\n\n    const response = await GET(mockRequest);\n    const responseBody = await response.json();\n\n    expect(response.status).toBe(401);\n    expect(responseBody.isAdmin).toBe(false);\n    expect(responseBody.role).toBeNull();\n    expect(prismaMock.user.findUnique).not.toHaveBeenCalled();\n  });\n\n  it('should return 404 with isAdmin false and role null if user not found', async () => {\n    getServerSessionMock.mockResolvedValue({ user: { id: mockUserId } } as any);\n    prismaMock.user.findUnique.mockResolvedValue(null); // User not found\n\n    const response = await GET(mockRequest);\n    const responseBody = await response.json();\n\n    expect(response.status).toBe(404);\n    expect(responseBody.isAdmin).toBe(false);\n    expect(responseBody.role).toBeNull();\n  });\n\n  it('should return 500 if prisma.user.findUnique fails', async () => {\n    getServerSessionMock.mockResolvedValue({ user: { id: mockUserId } } as any);\n    prismaMock.user.findUnique.mockRejectedValue(new Error('DB query failed'));\n\n    const response = await GET(mockRequest);\n    const responseBody = await response.json();\n\n    expect(response.status).toBe(500);\n    expect(responseBody.error).toBe('ユーザーロールの取得に失敗しました');\n  });\n}); "],"names":["jest","mock","requireActual","getServerSession","fn","prisma","mockDeep","getServerSessionMock","prismaMock","describe","mockUserId","mockRequest","NextRequest","beforeEach","clearAllMocks","it","mockResolvedValue","user","id","findUnique","role","UserRole","ADMIN","response","GET","responseBody","json","expect","status","toBe","isAdmin","toHaveBeenCalledWith","authOptions","where","select","USER","toBeNull","not","toHaveBeenCalled","mockRejectedValue","Error","error"],"mappings":"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"}