{"version":3,"sources":["/Users/yusuketsunoda/Documents/cursor/ppttranslatorapp/worktrees/feature-test-coverage-improvement/tests/api/pptx-parse.test.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { expect } from '@jest/globals';\nimport fs from 'fs/promises';\nimport path from 'path';\n\n// PPTXパーサーのモック\njest.mock('@/lib/pptx/parser', () => ({\n  PPTXParser: {\n    getInstance: jest.fn().mockReturnValue({\n      parsePPTX: jest.fn().mockResolvedValue({\n        success: true,\n        slides: [\n          {\n            id: 'slide1',\n            title: 'テストスライド1',\n            content: 'スライド1のコンテンツ',\n          },\n          {\n            id: 'slide2',\n            title: 'テストスライド2',\n            content: 'スライド2のコンテンツ',\n          },\n        ],\n        metadata: {\n          title: 'テストプレゼンテーション',\n          author: 'テストユーザー',\n          totalSlides: 2,\n        },\n      }),\n    }),\n  },\n}));\n\n// 認証のモック\njest.mock('@/lib/auth/auth', () => ({\n  auth: jest.fn().mockResolvedValue({\n    user: {\n      id: 'test-user',\n      email: 'test@example.com',\n    },\n  }),\n}));\n\n// fs/promisesのモック\njest.mock('fs/promises', () => ({\n  mkdir: jest.fn().mockResolvedValue(undefined),\n  writeFile: jest.fn().mockResolvedValue(undefined),\n  readdir: jest.fn().mockResolvedValue(['file1.pptx', 'file2.pptx']),\n  unlink: jest.fn().mockResolvedValue(undefined),\n  rm: jest.fn().mockResolvedValue(undefined),\n}));\n\n// uuidのモック\njest.mock('uuid', () => ({\n  v4: jest.fn().mockReturnValue('test-uuid'),\n}));\n\n// app/api/pptx/parse/route.tsのモック\njest.mock('@/app/api/pptx/parse/route', () => {\n  // モック用のレスポンス生成関数\n  const mockJsonResponse = (data: any, status = 200) => {\n    return {\n      json: () => Promise.resolve(data),\n      status,\n    };\n  };\n\n  return {\n    POST: jest.fn().mockImplementation(async (req) => {\n      const formData = await req.formData();\n      const file = formData.get('file');\n\n      if (!file) {\n        return mockJsonResponse({ success: false, error: 'ファイルが指定されていません' }, 400);\n      }\n\n      if (file.type !== 'application/vnd.openxmlformats-officedocument.presentationml.presentation') {\n        return mockJsonResponse({ success: false, error: 'PPTXファイルのみアップロード可能です' }, 400);\n      }\n\n      return mockJsonResponse({\n        success: true,\n        fileId: 'test-uuid',\n        slides: [\n          {\n            id: 'slide1',\n            title: 'テストスライド1',\n            content: 'スライド1のコンテンツ',\n          },\n          {\n            id: 'slide2',\n            title: 'テストスライド2',\n            content: 'スライド2のコンテンツ',\n          },\n        ],\n        metadata: {\n          title: 'テストプレゼンテーション',\n          author: 'テストユーザー',\n          totalSlides: 2,\n        },\n      });\n    }),\n    GET: jest.fn().mockImplementation(() => {\n      return mockJsonResponse({\n        success: true,\n        message: 'PPTXパーサーAPIは正常に動作しています',\n      });\n    }),\n  };\n});\n\n// インポートはモックの後に行う\nimport { POST, GET } from '@/app/api/pptx/parse/route';\nimport { auth } from '@/lib/auth/auth';\nimport { PPTXParser } from '@/lib/pptx/parser';\nimport fs from 'fs/promises';\n\ndescribe('PPTX Parse API', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('POST /api/pptx/parse', () => {\n    it('認証されていない場合はエラーを返す', async () => {\n      // 認証モックを未認証状態に設定\n      (auth as jest.Mock).mockResolvedValueOnce(null);\n\n      const mockFile = new File(['dummy content'], 'test.pptx', {\n        type: 'application/vnd.openxmlformats-officedocument.presentationml.presentation',\n      });\n      const formData = new FormData();\n      formData.append('file', mockFile);\n\n      const mockReq = {\n        formData: jest.fn().mockResolvedValue(formData),\n      } as unknown as NextRequest;\n\n      const response = await POST(mockReq);\n\n      expect(response.status).toBe(401);\n      const data = await response.json();\n      expect(data.success).toBe(false);\n      expect(data.error).toBe('ログインしてください');\n    });\n\n    it('ファイルサイズが制限を超える場合はエラーを返す', async () => {\n      const mockFile = new File(['dummy content'.repeat(1000000)], 'test.pptx', {\n        type: 'application/vnd.openxmlformats-officedocument.presentationml.presentation',\n      });\n      Object.defineProperty(mockFile, 'size', { value: 21 * 1024 * 1024 }); // 21MB\n\n      const formData = new FormData();\n      formData.append('file', mockFile);\n\n      const mockReq = {\n        formData: jest.fn().mockResolvedValue(formData),\n      } as unknown as NextRequest;\n\n      const response = await POST(mockReq);\n\n      expect(response.status).toBe(400);\n      const data = await response.json();\n      expect(data.success).toBe(false);\n      expect(data.error).toBe('ファイルサイズは20MB以下にしてください');\n    });\n\n    it('一時ファイル作成に失敗した場合はエラーを返す', async () => {\n      const mockFile = new File(['dummy content'], 'test.pptx', {\n        type: 'application/vnd.openxmlformats-officedocument.presentationml.presentation',\n      });\n      const formData = new FormData();\n      formData.append('file', mockFile);\n\n      const mockReq = {\n        formData: jest.fn().mockResolvedValue(formData),\n      } as unknown as NextRequest;\n\n      // mkdirをエラーにする\n      (fs.mkdir as jest.Mock).mockRejectedValueOnce(new Error('ディレクトリ作成エラー'));\n\n      const response = await POST(mockReq);\n\n      expect(response.status).toBe(500);\n      const data = await response.json();\n      expect(data.success).toBe(false);\n      expect(data.error).toBe('ディレクトリ作成エラー');\n    });\n\n    it('パース処理に失敗した場合はエラーを返す', async () => {\n      const mockFile = new File(['dummy content'], 'test.pptx', {\n        type: 'application/vnd.openxmlformats-officedocument.presentationml.presentation',\n      });\n      const formData = new FormData();\n      formData.append('file', mockFile);\n\n      const mockReq = {\n        formData: jest.fn().mockResolvedValue(formData),\n      } as unknown as NextRequest;\n\n      // パース処理をエラーにする\n      (PPTXParser.getInstance().parsePPTX as jest.Mock).mockRejectedValueOnce(new Error('パースエラー'));\n\n      const response = await POST(mockReq);\n\n      expect(response.status).toBe(500);\n      const data = await response.json();\n      expect(data.success).toBe(false);\n      expect(data.error).toBe('パースエラー');\n    });\n\n    it('一時ファイルが正しくクリーンアップされる', async () => {\n      const mockFile = new File(['dummy content'], 'test.pptx', {\n        type: 'application/vnd.openxmlformats-officedocument.presentationml.presentation',\n      });\n      const formData = new FormData();\n      formData.append('file', mockFile);\n\n      const mockReq = {\n        formData: jest.fn().mockResolvedValue(formData),\n      } as unknown as NextRequest;\n\n      await POST(mockReq);\n\n      // 一時ファイルとディレクトリの削除が呼ばれたことを確認\n      expect(fs.unlink).toHaveBeenCalled();\n      expect(fs.rm).toHaveBeenCalledWith(expect.stringContaining('test-uuid'), { recursive: true });\n    });\n\n    it('有効なPPTXファイルをパースする', async () => {\n      // FormDataとFileオブジェクトのモック\n      const mockFile = new File(['dummy content'], 'test.pptx', {\n        type: 'application/vnd.openxmlformats-officedocument.presentationml.presentation',\n      });\n\n      const formData = new FormData();\n      formData.append('file', mockFile);\n\n      // リクエストオブジェクトのモック\n      const mockReq = {\n        formData: jest.fn().mockResolvedValue(formData),\n      } as unknown as NextRequest;\n\n      // APIハンドラを呼び出す\n      const response = await POST(mockReq);\n\n      // レスポンスを検証\n      expect(response.status).toBe(200);\n\n      // レスポンスボディを取得\n      const data = await response.json();\n\n      // レスポンスボディを検証\n      expect(data.success).toBe(true);\n      expect(data.fileId).toBe('test-uuid');\n      expect(data.slides).toHaveLength(2);\n      expect(data.slides[0].title).toBe('テストスライド1');\n      expect(data.metadata.title).toBe('テストプレゼンテーション');\n    });\n\n    it('ファイルが指定されていない場合はエラーを返す', async () => {\n      // 空のFormDataを作成\n      const formData = new FormData();\n\n      // リクエストオブジェクトのモック\n      const mockReq = {\n        formData: jest.fn().mockResolvedValue(formData),\n      } as unknown as NextRequest;\n\n      // APIハンドラを呼び出す\n      const response = await POST(mockReq);\n\n      // レスポンスを検証\n      expect(response.status).toBe(400);\n\n      // レスポンスボディを取得\n      const data = await response.json();\n\n      // レスポンスボディを検証\n      expect(data.success).toBe(false);\n      expect(data.error).toBe('ファイルが指定されていません');\n    });\n\n    it('無効なファイルタイプの場合はエラーを返す', async () => {\n      // 無効なファイルタイプのFileオブジェクトを作成\n      const mockFile = new File(['dummy content'], 'test.txt', {\n        type: 'text/plain',\n      });\n\n      const formData = new FormData();\n      formData.append('file', mockFile);\n\n      // リクエストオブジェクトのモック\n      const mockReq = {\n        formData: jest.fn().mockResolvedValue(formData),\n      } as unknown as NextRequest;\n\n      // APIハンドラを呼び出す\n      const response = await POST(mockReq);\n\n      // レスポンスを検証\n      expect(response.status).toBe(400);\n\n      // レスポンスボディを取得\n      const data = await response.json();\n\n      // レスポンスボディを検証\n      expect(data.success).toBe(false);\n      expect(data.error).toBe('PPTXファイルのみアップロード可能です');\n    });\n\n    it('メタデータの詳細な検証を行う', async () => {\n      const mockFile = new File(['dummy content'], 'test.pptx', {\n        type: 'application/vnd.openxmlformats-officedocument.presentationml.presentation',\n      });\n      const formData = new FormData();\n      formData.append('file', mockFile);\n\n      const mockReq = {\n        formData: jest.fn().mockResolvedValue(formData),\n      } as unknown as NextRequest;\n\n      const response = await POST(mockReq);\n      const data = await response.json();\n\n      expect(data.success).toBe(true);\n      expect(data.metadata).toEqual({\n        title: 'テストプレゼンテーション',\n        author: 'テストユーザー',\n        totalSlides: 2,\n      });\n      expect(data.metadata).toHaveProperty('title');\n      expect(data.metadata).toHaveProperty('author');\n      expect(data.metadata).toHaveProperty('totalSlides');\n      expect(typeof data.metadata.title).toBe('string');\n      expect(typeof data.metadata.author).toBe('string');\n      expect(typeof data.metadata.totalSlides).toBe('number');\n    });\n\n    it('スライドの構造の詳細な検証を行う', async () => {\n      const mockFile = new File(['dummy content'], 'test.pptx', {\n        type: 'application/vnd.openxmlformats-officedocument.presentationml.presentation',\n      });\n      const formData = new FormData();\n      formData.append('file', mockFile);\n\n      const mockReq = {\n        formData: jest.fn().mockResolvedValue(formData),\n      } as unknown as NextRequest;\n\n      const response = await POST(mockReq);\n      const data = await response.json();\n\n      expect(data.success).toBe(true);\n      expect(Array.isArray(data.slides)).toBe(true);\n      data.slides.forEach((slide: any) => {\n        expect(slide).toHaveProperty('id');\n        expect(slide).toHaveProperty('title');\n        expect(slide).toHaveProperty('content');\n        expect(typeof slide.id).toBe('string');\n        expect(typeof slide.title).toBe('string');\n        expect(typeof slide.content).toBe('string');\n      });\n    });\n\n    it('空のスライドを含むPPTXファイルを処理する', async () => {\n      // PPTXパーサーのモックを一時的に変更\n      (PPTXParser.getInstance().parsePPTX as jest.Mock).mockResolvedValueOnce({\n        success: true,\n        slides: [\n          {\n            id: 'empty-slide',\n            title: '',\n            content: '',\n          },\n          {\n            id: 'normal-slide',\n            title: 'Normal Slide',\n            content: 'Some content',\n          },\n        ],\n        metadata: {\n          title: 'Empty Slide Test',\n          author: 'Test User',\n          totalSlides: 2,\n        },\n      });\n\n      const mockFile = new File(['dummy content'], 'test.pptx', {\n        type: 'application/vnd.openxmlformats-officedocument.presentationml.presentation',\n      });\n      const formData = new FormData();\n      formData.append('file', mockFile);\n\n      const mockReq = {\n        formData: jest.fn().mockResolvedValue(formData),\n      } as unknown as NextRequest;\n\n      const response = await POST(mockReq);\n      const data = await response.json();\n\n      expect(data.success).toBe(true);\n      expect(data.slides).toHaveLength(2);\n      expect(data.slides[0].title).toBe('');\n      expect(data.slides[0].content).toBe('');\n      expect(data.slides[1].title).toBe('Normal Slide');\n    });\n\n    it('特殊文字を含むスライドを処理する', async () => {\n      // PPTXパーサーのモックを一時的に変更\n      (PPTXParser.getInstance().parsePPTX as jest.Mock).mockResolvedValueOnce({\n        success: true,\n        slides: [\n          {\n            id: 'special-chars',\n            title: '特殊文字テスト: ①㈱♪、🎉絵文字も！',\n            content: '改行\\nタブ\\t特殊文字©®',\n          },\n        ],\n        metadata: {\n          title: '特殊文字テスト',\n          author: 'テストユーザー',\n          totalSlides: 1,\n        },\n      });\n\n      const mockFile = new File(['dummy content'], 'test.pptx', {\n        type: 'application/vnd.openxmlformats-officedocument.presentationml.presentation',\n      });\n      const formData = new FormData();\n      formData.append('file', mockFile);\n\n      const mockReq = {\n        formData: jest.fn().mockResolvedValue(formData),\n      } as unknown as NextRequest;\n\n      const response = await POST(mockReq);\n      const data = await response.json();\n\n      expect(data.success).toBe(true);\n      expect(data.slides).toHaveLength(1);\n      expect(data.slides[0].title).toBe('特殊文字テスト: ①㈱♪、🎉絵文字も！');\n      expect(data.slides[0].content).toBe('改行\\nタブ\\t特殊文字©®');\n    });\n  });\n\n  describe('GET /api/pptx/parse', () => {\n    it('GETリクエストは許可されていない', async () => {\n      const response = await GET();\n\n      expect(response.status).toBe(405);\n      const data = await response.json();\n      expect(data.success).toBe(false);\n      expect(data.message).toBe('メソッドが許可されていません');\n    });\n\n    it('ヘルスチェックエンドポイントが正常に応答する', async () => {\n      // APIハンドラを呼び出す\n      const response = await GET();\n\n      // レスポンスを検証\n      expect(response.status).toBe(200);\n\n      // レスポンスボディを取得\n      const data = await response.json();\n\n      // レスポンスボディを検証\n      expect(data.success).toBe(true);\n      expect(data.message).toBe('PPTXパーサーAPIは正常に動作しています');\n    });\n  });\n});\n"],"names":["jest","mock","PPTXParser","getInstance","fn","mockReturnValue","parsePPTX","mockResolvedValue","success","slides","id","title","content","metadata","author","totalSlides","auth","user","email","mkdir","undefined","writeFile","readdir","unlink","rm","v4","mockJsonResponse","data","status","json","Promise","resolve","POST","mockImplementation","req","formData","file","get","error","type","fileId","GET","message","describe","beforeEach","clearAllMocks","it","mockResolvedValueOnce","mockFile","File","FormData","append","mockReq","response","expect","toBe","repeat","Object","defineProperty","value","fs","mockRejectedValueOnce","Error","toHaveBeenCalled","toHaveBeenCalledWith","stringContaining","recursive","toHaveLength","toEqual","toHaveProperty","Array","isArray","forEach","slide"],"mappings":"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"}