{"version":3,"sources":["/Users/yusuketsunoda/Documents/cursor/ppttranslatorapp/worktrees/feature-test-coverage-improvement/tests/lib/auth/password.test.ts"],"sourcesContent":["import { hashPassword, comparePasswords } from '@/lib/auth/password';\n\ndescribe('パスワード関連ユーティリティ', () => {\n  describe('hashPassword', () => {\n    it('パスワードをハッシュ化できる', async () => {\n      const password = 'testPassword123';\n      const hashedPassword = await hashPassword(password);\n      \n      // ハッシュ化されたパスワードは元のパスワードと異なるはず\n      expect(hashedPassword).not.toBe(password);\n      \n      // ハッシュ化されたパスワードはbcryptの形式に従っているはず\n      expect(hashedPassword).toMatch(/^\\$2[aby]\\$\\d+\\$/);\n    });\n    \n    it('同じパスワードでも異なるハッシュを生成する', async () => {\n      const password = 'testPassword123';\n      const hash1 = await hashPassword(password);\n      const hash2 = await hashPassword(password);\n      \n      // 同じパスワードでもソルトが異なるため、ハッシュも異なる\n      expect(hash1).not.toBe(hash2);\n    });\n  });\n  \n  describe('comparePasswords', () => {\n    it('正しいパスワードを検証できる', async () => {\n      const password = 'testPassword123';\n      const hashedPassword = await hashPassword(password);\n      \n      const isValid = await comparePasswords(password, hashedPassword);\n      expect(isValid).toBe(true);\n    });\n    \n    it('誤ったパスワードを検出できる', async () => {\n      const password = 'testPassword123';\n      const wrongPassword = 'wrongPassword123';\n      const hashedPassword = await hashPassword(password);\n      \n      const isValid = await comparePasswords(wrongPassword, hashedPassword);\n      expect(isValid).toBe(false);\n    });\n    \n    it('空のパスワードを検証できる', async () => {\n      const password = '';\n      const hashedPassword = await hashPassword(password);\n      \n      const isValid = await comparePasswords(password, hashedPassword);\n      expect(isValid).toBe(true);\n    });\n  });\n});\n"],"names":["describe","it","password","hashedPassword","hashPassword","expect","not","toBe","toMatch","hash1","hash2","isValid","comparePasswords","wrongPassword"],"mappings":";;;;0BAA+C;AAE/CA,SAAS,kBAAkB;IACzBA,SAAS,gBAAgB;QACvBC,GAAG,kBAAkB;YACnB,MAAMC,WAAW;YACjB,MAAMC,iBAAiB,MAAMC,IAAAA,sBAAY,EAACF;YAE1C,8BAA8B;YAC9BG,OAAOF,gBAAgBG,GAAG,CAACC,IAAI,CAACL;YAEhC,kCAAkC;YAClCG,OAAOF,gBAAgBK,OAAO,CAAC;QACjC;QAEAP,GAAG,yBAAyB;YAC1B,MAAMC,WAAW;YACjB,MAAMO,QAAQ,MAAML,IAAAA,sBAAY,EAACF;YACjC,MAAMQ,QAAQ,MAAMN,IAAAA,sBAAY,EAACF;YAEjC,8BAA8B;YAC9BG,OAAOI,OAAOH,GAAG,CAACC,IAAI,CAACG;QACzB;IACF;IAEAV,SAAS,oBAAoB;QAC3BC,GAAG,kBAAkB;YACnB,MAAMC,WAAW;YACjB,MAAMC,iBAAiB,MAAMC,IAAAA,sBAAY,EAACF;YAE1C,MAAMS,UAAU,MAAMC,IAAAA,0BAAgB,EAACV,UAAUC;YACjDE,OAAOM,SAASJ,IAAI,CAAC;QACvB;QAEAN,GAAG,kBAAkB;YACnB,MAAMC,WAAW;YACjB,MAAMW,gBAAgB;YACtB,MAAMV,iBAAiB,MAAMC,IAAAA,sBAAY,EAACF;YAE1C,MAAMS,UAAU,MAAMC,IAAAA,0BAAgB,EAACC,eAAeV;YACtDE,OAAOM,SAASJ,IAAI,CAAC;QACvB;QAEAN,GAAG,iBAAiB;YAClB,MAAMC,WAAW;YACjB,MAAMC,iBAAiB,MAAMC,IAAAA,sBAAY,EAACF;YAE1C,MAAMS,UAAU,MAAMC,IAAAA,0BAAgB,EAACV,UAAUC;YACjDE,OAAOM,SAASJ,IAAI,CAAC;QACvB;IACF;AACF"}