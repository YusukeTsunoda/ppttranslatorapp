{"version":3,"sources":["/Users/yusuketsunoda/Documents/cursor/ppttranslatorapp/worktrees/feature-test-coverage-improvement/tests/api/auth/signup.test.ts"],"sourcesContent":["import { POST } from '@/app/api/auth/signup/route';\nimport { User } from '@prisma/client';\nimport { NextRequest } from 'next/server';\nimport { createPrismaMock, createMockUser, clearAllMocks } from '@/tests/helpers/mockSetup';\nimport bcrypt from 'bcrypt';\nimport crypto from 'crypto';\n\n// bcrypt.hash のモック\njest.mock('bcrypt', () => ({\n  hash: jest.fn(),\n}));\n\n// crypto.randomUUID のモック\njest.mock('crypto', () => ({\n  ...jest.requireActual('crypto'),\n  randomUUID: jest.fn(),\n}));\n\nconst prismaMock = createPrismaMock();\nconst bcryptHashMock = bcrypt.hash as jest.Mock;\nconst cryptoRandomUUIDMock = crypto.randomUUID as jest.Mock;\n\ndescribe('POST /api/auth/signup', () => {\n  beforeEach(() => {\n    clearAllMocks();\n    bcryptHashMock.mockResolvedValue('hashed_password_signup');\n    cryptoRandomUUIDMock.mockReturnValue('mocked-uuid-signup');\n  });\n\n  it('should signup a new user successfully and return 201', async () => {\n    const requestBody = {\n      email: 'newuser@example.com',\n      password: 'password1234',\n      name: 'New Signup User',\n    };\n    const req = new NextRequest('http://localhost/api/auth/signup', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: { 'Content-Type': 'application/json' },\n    });\n\n    prismaMock.user.findUnique.mockResolvedValue(null);\n    const createdUser = createMockUser({\n      id: 'mocked-uuid-signup',\n      email: requestBody.email,\n      name: requestBody.name,\n      password: 'hashed_password_signup',\n      credits: 100,\n    });\n    prismaMock.user.create.mockResolvedValue(createdUser);\n\n    const response = await POST(req as Request);\n    const responseBody = await response.json();\n\n    expect(response.status).toBe(201);\n    expect(responseBody.message).toBe('ユーザーが正常に作成されました');\n    expect(responseBody.user.id).toBe(createdUser.id);\n    expect(responseBody.user.email).toBe(requestBody.email);\n    expect(responseBody.user.name).toBe(requestBody.name);\n\n    expect(prismaMock.user.findUnique).toHaveBeenCalledWith({\n      where: { email: requestBody.email },\n    });\n    expect(bcryptHashMock).toHaveBeenCalledWith(requestBody.password, 10);\n    expect(cryptoRandomUUIDMock).toHaveBeenCalled();\n    expect(prismaMock.user.create).toHaveBeenCalledWith({\n      data: {\n        id: 'mocked-uuid-signup',\n        email: requestBody.email,\n        name: requestBody.name,\n        password: 'hashed_password_signup',\n        credits: 100,\n        updatedAt: expect.any(Date),\n      },\n    });\n    expect(prismaMock.$disconnect).toHaveBeenCalled();\n  });\n\n  it('should return 400 if email already exists', async () => {\n    const requestBody = {\n      email: 'existing-signup@example.com',\n      password: 'password1234',\n      name: 'Existing Signup User',\n    };\n    const req = new NextRequest('http://localhost/api/auth/signup', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: { 'Content-Type': 'application/json' },\n    });\n\n    prismaMock.user.findUnique.mockResolvedValue(createMockUser({\n      id: 'existing-user-id',\n      email: requestBody.email,\n      name: requestBody.name,\n    }));\n\n    const response = await POST(req as Request);\n    const responseBody = await response.json();\n\n    expect(response.status).toBe(400);\n    expect(responseBody.error).toBe('このメールアドレスは既に登録されています');\n    expect(prismaMock.user.create).not.toHaveBeenCalled();\n    expect(prismaMock.$disconnect).toHaveBeenCalled();\n  });\n\n  it('should return 400 for invalid input based on zod schema (e.g., short password)', async () => {\n    const requestBody = {\n      email: 'invalid@example.com',\n      password: '123', // Too short\n      name: 'Invalid User',\n    };\n    const req = new NextRequest('http://localhost/api/auth/signup', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: { 'Content-Type': 'application/json' },\n    });\n\n    const response = await POST(req as Request);\n    const responseBody = await response.json();\n\n    expect(response.status).toBe(400);\n    expect(responseBody.error).toBe('パスワードは6文字以上必要です');\n    expect(prismaMock.user.findUnique).not.toHaveBeenCalled();\n    expect(prismaMock.user.create).not.toHaveBeenCalled();\n    // $disconnect might or might not be called depending on where the validation error is caught\n  });\n\n  it('should return 500 if bcrypt.hash fails', async () => {\n    const requestBody = {\n      email: 'bcryptfail@example.com',\n      password: 'password1234',\n      name: 'Bcrypt Fail User',\n    };\n    const req = new NextRequest('http://localhost/api/auth/signup', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: { 'Content-Type': 'application/json' },\n    });\n\n    prismaMock.user.findUnique.mockResolvedValue(null);\n    bcryptHashMock.mockRejectedValue(new Error('bcrypt hashing failed'));\n\n    const response = await POST(req as Request);\n    const responseBody = await response.json();\n\n    expect(response.status).toBe(500);\n    expect(responseBody.error).toBe('bcrypt hashing failed');\n    expect(prismaMock.user.create).not.toHaveBeenCalled();\n    // $disconnect might or might not be called\n  });\n\n  it('should return 500 if prisma.user.create fails', async () => {\n    const requestBody = {\n      email: 'prismacreatefail@example.com',\n      password: 'password1234',\n      name: 'Prisma Create Fail User',\n    };\n    const req = new NextRequest('http://localhost/api/auth/signup', {\n      method: 'POST',\n      body: JSON.stringify(requestBody),\n      headers: { 'Content-Type': 'application/json' },\n    });\n\n    prismaMock.user.findUnique.mockResolvedValue(null);\n    bcryptHashMock.mockResolvedValue('hashed_password_prisma_fail');\n    cryptoRandomUUIDMock.mockReturnValue('uuid_prisma_fail');\n    prismaMock.user.create.mockRejectedValue(new Error('DB create error'));\n\n    const response = await POST(req as Request);\n    const responseBody = await response.json();\n\n    expect(response.status).toBe(500);\n    expect(responseBody.error).toBe('DB create error');\n    // $disconnect might or might not be called\n  });\n}); "],"names":["jest","mock","hash","fn","requireActual","randomUUID","prismaMock","createPrismaMock","bcryptHashMock","bcrypt","cryptoRandomUUIDMock","crypto","describe","beforeEach","clearAllMocks","mockResolvedValue","mockReturnValue","it","requestBody","email","password","name","req","NextRequest","method","body","JSON","stringify","headers","user","findUnique","createdUser","createMockUser","id","credits","create","response","POST","responseBody","json","expect","status","toBe","message","toHaveBeenCalledWith","where","toHaveBeenCalled","data","updatedAt","any","Date","$disconnect","error","not","mockRejectedValue","Error"],"mappings":"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"}