{"version":3,"sources":["/Users/yusuketsunoda/Documents/cursor/ppttranslatorapp/worktrees/feature-test-coverage-improvement/tests/api/download/route.test.ts"],"sourcesContent":["import { NextRequest } from 'next/server';\nimport { getServerSession } from 'next-auth';\nimport { promises as fs } from 'fs';\nimport { join } from 'path';\nimport { filePathManager } from '@/lib/utils/file-utils';\nimport { createMocks } from 'node-mocks-http';\nimport { GET } from '@/app/api/download/[userId]/[filename]/route';\n\n// モックの設定\njest.mock('next-auth');\njest.mock('fs', () => ({\n  promises: {\n    readFile: jest.fn(),\n    access: jest.fn(),\n  },\n}));\njest.mock('@/lib/utils/file-utils', () => ({\n  filePathManager: {\n    findActualFilePath: jest.fn(),\n  },\n}));\n\ndescribe('/api/download/[userId]/[filename]', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  // テストユーザーの設定\n  const testUser = {\n    id: 'test-user-id',\n    name: 'Test User',\n    email: 'test@example.com',\n  };\n\n  // テストファイルの設定\n  const testFile = {\n    id: 'test-file-id',\n    name: 'test-file.pptx',\n    content: Buffer.from('test file content'),\n  };\n\n  it('未認証ユーザーのアクセスを拒否する', async () => {\n    // getServerSessionのモックを設定\n    (getServerSession as jest.Mock).mockResolvedValue(null);\n\n    const { req } = createMocks({\n      method: 'GET',\n    });\n\n    const response = await GET(req as unknown as NextRequest, {\n      params: {\n        userId: testUser.id,\n        filename: testFile.name,\n      },\n    });\n\n    expect(response.status).toBe(401);\n    const data = await response.json();\n    expect(data.error).toBe('認証が必要です');\n  });\n\n  it('他のユーザーのファイルへのアクセスを拒否する', async () => {\n    // getServerSessionのモックを設定\n    (getServerSession as jest.Mock).mockResolvedValue({\n      user: testUser,\n    });\n\n    const { req } = createMocks({\n      method: 'GET',\n    });\n\n    const response = await GET(req as unknown as NextRequest, {\n      params: {\n        userId: 'other-user-id',\n        filename: testFile.name,\n      },\n    });\n\n    expect(response.status).toBe(403);\n    const data = await response.json();\n    expect(data.error).toBe('アクセス権限がありません');\n  });\n\n  it('存在しないファイルへのアクセスを404で返す', async () => {\n    // getServerSessionのモックを設定\n    (getServerSession as jest.Mock).mockResolvedValue({\n      user: testUser,\n    });\n\n    // filePathManagerのモックを設定\n    (filePathManager.findActualFilePath as jest.Mock).mockResolvedValue(null);\n\n    const { req } = createMocks({\n      method: 'GET',\n    });\n\n    const response = await GET(req as unknown as NextRequest, {\n      params: {\n        userId: testUser.id,\n        filename: 'non-existent-file.pptx',\n      },\n    });\n\n    expect(response.status).toBe(404);\n    const data = await response.json();\n    expect(data.error).toBe('ファイルが見つかりません');\n  });\n\n  it('正常なファイルダウンロードを処理する', async () => {\n    // getServerSessionのモックを設定\n    (getServerSession as jest.Mock).mockResolvedValue({\n      user: testUser,\n    });\n\n    // filePathManagerのモックを設定\n    const testFilePath = '/test/path/test-file.pptx';\n    (filePathManager.findActualFilePath as jest.Mock).mockResolvedValue(testFilePath);\n\n    // fs.readFileのモックを設定\n    (fs.readFile as jest.Mock).mockResolvedValue(testFile.content);\n\n    const { req } = createMocks({\n      method: 'GET',\n    });\n\n    const response = await GET(req as unknown as NextRequest, {\n      params: {\n        userId: testUser.id,\n        filename: testFile.name,\n      },\n    });\n\n    expect(response.status).toBe(200);\n    expect(response.headers.get('Content-Type')).toBe(\n      'application/vnd.openxmlformats-officedocument.presentationml.presentation'\n    );\n    expect(response.headers.get('Content-Disposition')).toBe(\n      `attachment; filename=\"${testFile.name}\"`\n    );\n\n    const buffer = await response.arrayBuffer();\n    expect(Buffer.from(buffer)).toEqual(testFile.content);\n  });\n\n  it('ファイル読み込みエラーを処理する', async () => {\n    // getServerSessionのモックを設定\n    (getServerSession as jest.Mock).mockResolvedValue({\n      user: testUser,\n    });\n\n    // filePathManagerのモックを設定\n    const testFilePath = '/test/path/test-file.pptx';\n    (filePathManager.findActualFilePath as jest.Mock).mockResolvedValue(testFilePath);\n\n    // fs.readFileのモックを設定してエラーを投げる\n    (fs.readFile as jest.Mock).mockRejectedValue(new Error('ファイル読み込みエラー'));\n\n    const { req } = createMocks({\n      method: 'GET',\n    });\n\n    const response = await GET(req as unknown as NextRequest, {\n      params: {\n        userId: testUser.id,\n        filename: testFile.name,\n      },\n    });\n\n    expect(response.status).toBe(500);\n    const data = await response.json();\n    expect(data.error).toBe('ファイルのダウンロードに失敗しました');\n  });\n}); "],"names":["jest","mock","promises","readFile","fn","access","filePathManager","findActualFilePath","describe","beforeEach","clearAllMocks","testUser","id","name","email","testFile","content","Buffer","from","it","getServerSession","mockResolvedValue","req","createMocks","method","response","GET","params","userId","filename","expect","status","toBe","data","json","error","user","testFilePath","fs","headers","get","buffer","arrayBuffer","toEqual","mockRejectedValue","Error"],"mappings":"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"}