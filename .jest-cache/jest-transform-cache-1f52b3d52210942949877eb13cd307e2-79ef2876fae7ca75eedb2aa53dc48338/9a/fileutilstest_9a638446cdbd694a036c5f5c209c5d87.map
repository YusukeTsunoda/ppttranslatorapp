{"version":3,"sources":["/Users/yusuketsunoda/Documents/cursor/ppttranslatorapp/worktrees/feature-test-coverage-improvement/tests/utils/file-utils.test.ts"],"sourcesContent":["import {\n  FilePathManager,\n  FileState,\n  FILE_CONFIG,\n  generateFileId,\n  createUserDirectories,\n  cleanupOldFiles,\n  withRetry,\n} from '@/lib/utils/file-utils';\nimport { join } from 'path';\nimport { expect } from '@jest/globals';\n\n// fsモジュールのモック\njest.mock('fs/promises', () => {\n  return {\n    mkdir: jest.fn().mockResolvedValue(undefined),\n    writeFile: jest.fn().mockResolvedValue(undefined),\n    readdir: jest.fn().mockResolvedValue(['file1.pptx']),\n    stat: jest.fn().mockResolvedValue({ mtimeMs: Date.now() }),\n    unlink: jest.fn().mockResolvedValue(undefined),\n    copyFile: jest.fn().mockResolvedValue(undefined),\n  };\n});\n\njest.mock('fs', () => ({\n  existsSync: jest.fn().mockReturnValue(true),\n}));\n\n// prismaのモック\njest.mock('@/lib/db/prisma', () => ({\n  prisma: {\n    file: {\n      findUnique: jest.fn().mockResolvedValue(null),\n      findMany: jest.fn().mockResolvedValue([]),\n      create: jest.fn().mockResolvedValue({}),\n      update: jest.fn().mockResolvedValue({}),\n      delete: jest.fn().mockResolvedValue({}),\n    },\n  },\n}));\n\n// FilePathManagerのメソッドをモック\njest.mock('@/lib/utils/file-utils', () => {\n  const original = jest.requireActual('@/lib/utils/file-utils');\n  return {\n    ...original,\n    FilePathManager: jest.fn().mockImplementation(() => ({\n      getTempPath: jest.fn().mockImplementation((userId, fileId, type = 'original') => {\n        return `tmp/users/${userId}/uploads/${fileId}_${type}.pptx`;\n      }),\n      getPublicPath: jest.fn().mockImplementation((userId, fileId, type = 'translated') => {\n        return `uploads/${userId}/${fileId}_${type}.pptx`;\n      }),\n      getProcessingPath: jest.fn().mockImplementation((userId, fileId) => {\n        return `tmp/processing/${userId}/${fileId}`;\n      }),\n      getSlidesPath: jest.fn().mockImplementation((userId, fileId) => {\n        return `tmp/users/${userId}/slides/${fileId}`;\n      }),\n      getAbsolutePath: jest.fn().mockImplementation((path) => {\n        if (path.startsWith('/')) return path;\n        return `/mock/root/${path}`;\n      }),\n      ensurePath: jest.fn().mockResolvedValue(undefined),\n      findActualFilePath: jest.fn().mockImplementation((userId, fileId, type) => {\n        if (type === 'original') {\n          return Promise.resolve(`tmp/users/${userId}/uploads/${fileId}_original.pptx`);\n        } else {\n          return Promise.resolve(`tmp/users/${userId}/uploads/${fileId}_translated.pptx`);\n        }\n      }),\n      moveFile: jest.fn().mockResolvedValue(undefined),\n      ensurePublicDirectory: jest.fn().mockResolvedValue(undefined),\n      moveToPublic: jest.fn().mockResolvedValue('uploads/test-user/test-file.pptx'),\n    })),\n    createUserDirectories: jest.fn().mockResolvedValue({\n      uploadDir: '/mock/root/tmp/users/test-user/uploads',\n      slidesDir: '/mock/root/tmp/users/test-user/slides/test-file',\n    }),\n    cleanupOldFiles: jest.fn().mockResolvedValue(undefined),\n    FILE_CONFIG: original.FILE_CONFIG,\n    FileState: original.FileState,\n    generateFileId: jest.fn().mockReturnValue('mock-file-id'),\n    withRetry: original.withRetry,\n  };\n});\n\ndescribe('File Utilities', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('FilePathManager', () => {\n    const filePathManager = new FilePathManager();\n    const userId = 'test-user';\n    const fileId = 'test-file';\n\n    it('getTempPathが正しいパスを返す', () => {\n      const originalPath = filePathManager.getTempPath(userId, fileId, 'original');\n      const translatedPath = filePathManager.getTempPath(userId, fileId, 'translated');\n\n      expect(originalPath).toBe(join('tmp/users', userId, 'uploads', `${fileId}_original.pptx`));\n      expect(translatedPath).toBe(join('tmp/users', userId, 'uploads', `${fileId}_translated.pptx`));\n      expect(filePathManager.getTempPath).toHaveBeenCalledTimes(2);\n    });\n\n    it('getPublicPathが正しいパスを返す', () => {\n      const originalPath = filePathManager.getPublicPath(userId, fileId, 'original');\n      const translatedPath = filePathManager.getPublicPath(userId, fileId, 'translated');\n\n      expect(originalPath).toBe(join('uploads', userId, `${fileId}_original.pptx`));\n      expect(translatedPath).toBe(join('uploads', userId, `${fileId}_translated.pptx`));\n      expect(filePathManager.getPublicPath).toHaveBeenCalledTimes(2);\n    });\n\n    it('getProcessingPathが正しいパスを返す', () => {\n      const processingPath = filePathManager.getProcessingPath(userId, fileId);\n\n      expect(processingPath).toBe(join('tmp/processing', userId, fileId));\n      expect(filePathManager.getProcessingPath).toHaveBeenCalledTimes(1);\n    });\n\n    it('getSlidesPathが正しいパスを返す', () => {\n      const slidesPath = filePathManager.getSlidesPath(userId, fileId);\n\n      expect(slidesPath).toBe(join('tmp/users', userId, 'slides', fileId));\n      expect(filePathManager.getSlidesPath).toHaveBeenCalledTimes(1);\n    });\n\n    it('getAbsolutePathが相対パスを絶対パスに変換する', () => {\n      const relativePath = 'uploads/test-file.pptx';\n      const absolutePath = filePathManager.getAbsolutePath(relativePath);\n\n      expect(absolutePath).toBe(join('/mock/root', relativePath));\n      expect(filePathManager.getAbsolutePath).toHaveBeenCalledTimes(1);\n    });\n\n    it('getAbsolutePathが絶対パスをそのまま返す', () => {\n      const absolutePath = '/absolute/path/to/file.pptx';\n      const result = filePathManager.getAbsolutePath(absolutePath);\n\n      expect(result).toBe(absolutePath);\n      expect(filePathManager.getAbsolutePath).toHaveBeenCalledTimes(1);\n    });\n\n    it('ensurePathがディレクトリを作成する', async () => {\n      const filePath = 'uploads/test-user/test-file.pptx';\n\n      await filePathManager.ensurePath(filePath);\n\n      expect(filePathManager.ensurePath).toHaveBeenCalledWith(filePath);\n    });\n\n    it('findActualFilePathが正しいファイルを見つける', async () => {\n      const originalPath = await filePathManager.findActualFilePath(userId, fileId, 'original');\n      const translatedPath = await filePathManager.findActualFilePath(userId, fileId, 'translated');\n\n      expect(originalPath).toBe(join('tmp/users', userId, 'uploads', `${fileId}_original.pptx`));\n      expect(translatedPath).toBe(join('tmp/users', userId, 'uploads', `${fileId}_translated.pptx`));\n      expect(filePathManager.findActualFilePath).toHaveBeenCalledTimes(2);\n    });\n  });\n\n  describe('Utility Functions', () => {\n    it('generateFileIdがユニークなIDを生成する', () => {\n      const fileId = generateFileId();\n\n      expect(fileId).toBe('mock-file-id');\n      expect(generateFileId).toHaveBeenCalledTimes(1);\n    });\n\n    it('createUserDirectoriesがディレクトリを作成する', async () => {\n      const result = await createUserDirectories('test-user', 'test-file');\n\n      expect(result).toEqual({\n        uploadDir: '/mock/root/tmp/users/test-user/uploads',\n        slidesDir: '/mock/root/tmp/users/test-user/slides/test-file',\n      });\n      expect(createUserDirectories).toHaveBeenCalledWith('test-user', 'test-file');\n    });\n\n    it('cleanupOldFilesが古いファイルを削除する', async () => {\n      await cleanupOldFiles('test-user');\n\n      expect(cleanupOldFiles).toHaveBeenCalledWith('test-user');\n    });\n\n    it('withRetryが成功するまで再試行する', async () => {\n      const operation = jest\n        .fn()\n        .mockRejectedValueOnce(new Error('First attempt failed'))\n        .mockRejectedValueOnce(new Error('Second attempt failed'))\n        .mockResolvedValueOnce('Success');\n\n      const result = await withRetry(operation, {\n        maxRetries: 3,\n        delay: 0,\n        onError: jest.fn(),\n      });\n\n      expect(operation).toHaveBeenCalledTimes(3);\n      expect(result).toBe('Success');\n    });\n\n    it('withRetryが最大試行回数を超えるとエラーをスローする', async () => {\n      const error = new Error('Operation failed');\n      const operation = jest.fn().mockRejectedValue(error);\n\n      await expect(\n        withRetry(operation, {\n          maxRetries: 2,\n          delay: 0,\n          onError: jest.fn(),\n        }),\n      ).rejects.toThrow('Operation failed');\n\n      expect(operation).toHaveBeenCalledTimes(2);\n    });\n  });\n\n  describe('FileState Enum', () => {\n    it('FileStateが正しい値を持つ', () => {\n      expect(FileState.UPLOADED).toBe(0);\n      expect(FileState.PROCESSING).toBe(1);\n      expect(FileState.READY).toBe(2);\n      expect(FileState.ARCHIVED).toBe(3);\n    });\n  });\n});\n\ndescribe('FilePathManager Implementation Tests', () => {\n  // オリジナルのFilePathManagerを取得\n  const originalModule = jest.requireActual('@/lib/utils/file-utils');\n  const FilePathManager = originalModule.FilePathManager;\n\n  // テスト用のインスタンスを作成\n  const manager = new FilePathManager();\n  const userId = 'test-user';\n  const fileId = 'test-file';\n\n  // fsモジュールのモックを設定\n  const mockMkdir = jest.fn().mockResolvedValue(undefined);\n  const mockReaddir = jest.fn().mockResolvedValue([`${fileId}.pptx`, `${fileId}_translated.pptx`]);\n  const mockCopyFile = jest.fn().mockResolvedValue(undefined);\n\n  // モックを上書き\n  jest.mock(\n    'fs/promises',\n    () => ({\n      mkdir: mockMkdir,\n      readdir: mockReaddir,\n      copyFile: mockCopyFile,\n      stat: jest.fn().mockResolvedValue({ mtimeMs: Date.now() }),\n      unlink: jest.fn().mockResolvedValue(undefined),\n    }),\n    { virtual: true },\n  );\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n    // モックをリセット\n    mockMkdir.mockClear();\n    mockReaddir.mockClear();\n    mockCopyFile.mockClear();\n  });\n\n  it('getTempPathが正しいパスを返す（実装）', () => {\n    const originalPath = manager.getTempPath(userId, fileId, 'original');\n    const translatedPath = manager.getTempPath(userId, fileId, 'translated');\n\n    expect(originalPath).toBe(join(FILE_CONFIG.tempDir, userId, 'uploads', `${fileId}_original.pptx`));\n    expect(translatedPath).toBe(join(FILE_CONFIG.tempDir, userId, 'uploads', `${fileId}_translated.pptx`));\n  });\n\n  it('getPublicPathが正しいパスを返す（実装）', () => {\n    const originalPath = manager.getPublicPath(userId, fileId, 'original');\n    const translatedPath = manager.getPublicPath(userId, fileId, 'translated');\n\n    expect(originalPath).toBe(join('uploads', userId, `${fileId}_original.pptx`));\n    expect(translatedPath).toBe(join('uploads', userId, `${fileId}_translated.pptx`));\n  });\n\n  it('getProcessingPathが正しいパスを返す（実装）', () => {\n    const processingPath = manager.getProcessingPath(userId, fileId);\n\n    expect(processingPath).toBe(join(FILE_CONFIG.processingDir, userId, fileId));\n  });\n\n  it('getSlidesPathが正しいパスを返す（実装）', () => {\n    const slidesPath = manager.getSlidesPath(userId, fileId);\n\n    expect(slidesPath).toBe(join(FILE_CONFIG.tempDir, userId, fileId, 'slides'));\n  });\n\n  it('getAbsolutePathが相対パスを絶対パスに変換する（実装）', () => {\n    const relativePath = 'uploads/test-file.pptx';\n    const absolutePath = manager.getAbsolutePath(relativePath);\n\n    expect(absolutePath).toBe(join(process.cwd(), relativePath));\n  });\n\n  it('getAbsolutePathが絶対パスをそのまま返す（実装）', () => {\n    const absolutePath = '/absolute/path/to/file.pptx';\n    const result = manager.getAbsolutePath(absolutePath);\n\n    expect(result).toBe(absolutePath);\n  });\n});\n\n// logFileOperationのテスト\ndescribe('logFileOperation Tests', () => {\n  // テスト前の状態を保存\n  const originalPrisma = jest.requireMock('@/lib/db/prisma').prisma;\n  const mockCreate = jest.fn().mockResolvedValue({});\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n    // prismaのモックを設定\n    jest.requireMock('@/lib/db/prisma').prisma = {\n      ...originalPrisma,\n      activityLog: {\n        create: mockCreate,\n      },\n    };\n  });\n\n  afterEach(() => {\n    // 元の状態に戻す\n    jest.requireMock('@/lib/db/prisma').prisma = originalPrisma;\n  });\n\n  it('成功した操作を記録する', async () => {\n    // 実際のlogFileOperation関数を取得\n    const { logFileOperation } = jest.requireActual('@/lib/utils/file-utils');\n\n    const userId = 'test-user';\n    const fileId = 'test-file';\n    const operation = 'create';\n\n    await logFileOperation(userId, operation, fileId, true);\n\n    expect(mockCreate).toHaveBeenCalledTimes(1);\n    expect(mockCreate).toHaveBeenCalledWith(\n      expect.objectContaining({\n        data: expect.objectContaining({\n          userId,\n          type: 'file_upload',\n          description: expect.stringContaining('create'),\n        }),\n      }),\n    );\n  });\n\n  it('失敗した操作とエラーを記録する', async () => {\n    // 実際のlogFileOperation関数を取得\n    const { logFileOperation } = jest.requireActual('@/lib/utils/file-utils');\n\n    const userId = 'test-user';\n    const fileId = 'test-file';\n    const operation = 'delete';\n    const errorMsg = 'File not found';\n\n    await logFileOperation(userId, operation, fileId, false, errorMsg);\n\n    expect(mockCreate).toHaveBeenCalledTimes(1);\n    expect(mockCreate).toHaveBeenCalledWith(\n      expect.objectContaining({\n        data: expect.objectContaining({\n          userId,\n          type: 'file_delete',\n          description: expect.stringContaining('delete'),\n          metadata: expect.objectContaining({\n            error: errorMsg,\n            success: false,\n          }),\n        }),\n      }),\n    );\n  });\n\n  it('ログ記録中にエラーが発生した場合はコンソールにエラーを出力する', async () => {\n    // 実際のlogFileOperation関数を取得\n    const { logFileOperation } = jest.requireActual('@/lib/utils/file-utils');\n\n    // コンソールエラーをモック\n    const originalConsoleError = console.error;\n    console.error = jest.fn();\n\n    // createがエラーをスローするようにモック\n    mockCreate.mockRejectedValueOnce(new Error('Database error'));\n\n    const userId = 'test-user';\n    const fileId = 'test-file';\n    const operation = 'access';\n\n    // エラーがスローされないことを確認\n    await expect(logFileOperation(userId, operation, fileId, true)).resolves.not.toThrow();\n\n    // コンソールエラーが呼び出されたことを確認\n    expect(console.error).toHaveBeenCalledWith('File operation logging error:', expect.any(Error));\n\n    // 元に戻す\n    console.error = originalConsoleError;\n  });\n});\n\n// ユーティリティ関数のテスト\ndescribe('Utility Functions Tests', () => {\n  const originalModule = jest.requireActual('@/lib/utils/file-utils');\n  const { wait, withRetry, generateFileId } = originalModule;\n\n  it('waitが指定された時間待機する', async () => {\n    const startTime = Date.now();\n    await wait(100);\n    const endTime = Date.now();\n\n    // 少なくとも100ms経過していることを確認（多少の誤差を許容）\n    expect(endTime - startTime).toBeGreaterThanOrEqual(90);\n  });\n\n  it('withRetryが成功するまで再試行する', async () => {\n    const operation = jest\n      .fn()\n      .mockRejectedValueOnce(new Error('First attempt failed'))\n      .mockRejectedValueOnce(new Error('Second attempt failed'))\n      .mockResolvedValueOnce('Success');\n\n    const onError = jest.fn();\n\n    const result = await withRetry(operation, {\n      maxRetries: 3,\n      delay: 10,\n      onError,\n    });\n\n    expect(operation).toHaveBeenCalledTimes(3);\n    expect(onError).toHaveBeenCalledTimes(2);\n    expect(result).toBe('Success');\n  });\n\n  it('withRetryが最大試行回数を超えるとエラーをスローする', async () => {\n    const error = new Error('Operation failed');\n    const operation = jest.fn().mockRejectedValue(error);\n    const onError = jest.fn();\n\n    await expect(\n      withRetry(operation, {\n        maxRetries: 2,\n        delay: 10,\n        onError,\n      }),\n    ).rejects.toThrow('Operation failed');\n\n    expect(operation).toHaveBeenCalledTimes(2);\n    expect(onError).toHaveBeenCalledTimes(2);\n  });\n\n  it('generateFileIdがユニークなIDを生成する', () => {\n    const fileId1 = generateFileId();\n    const fileId2 = generateFileId();\n\n    expect(typeof fileId1).toBe('string');\n    expect(fileId1.length).toBeGreaterThan(10);\n    expect(fileId1).not.toBe(fileId2);\n  });\n});\n"],"names":["jest","mock","mkdir","fn","mockResolvedValue","undefined","writeFile","readdir","stat","mtimeMs","Date","now","unlink","copyFile","existsSync","mockReturnValue","prisma","file","findUnique","findMany","create","update","delete","original","requireActual","FilePathManager","mockImplementation","getTempPath","userId","fileId","type","getPublicPath","getProcessingPath","getSlidesPath","getAbsolutePath","path","startsWith","ensurePath","findActualFilePath","Promise","resolve","moveFile","ensurePublicDirectory","moveToPublic","createUserDirectories","uploadDir","slidesDir","cleanupOldFiles","FILE_CONFIG","FileState","generateFileId","withRetry","describe","beforeEach","clearAllMocks","filePathManager","it","originalPath","translatedPath","expect","toBe","join","toHaveBeenCalledTimes","processingPath","slidesPath","relativePath","absolutePath","result","filePath","toHaveBeenCalledWith","toEqual","operation","mockRejectedValueOnce","Error","mockResolvedValueOnce","maxRetries","delay","onError","error","mockRejectedValue","rejects","toThrow","UPLOADED","PROCESSING","READY","ARCHIVED","mockMkdir","mockReaddir","mockCopyFile","virtual","originalModule","manager","mockClear","tempDir","processingDir","process","cwd","originalPrisma","requireMock","mockCreate","activityLog","afterEach","logFileOperation","objectContaining","data","description","stringContaining","errorMsg","metadata","success","originalConsoleError","console","resolves","not","any","wait","startTime","endTime","toBeGreaterThanOrEqual","fileId1","fileId2","length","toBeGreaterThan"],"mappings":"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"}