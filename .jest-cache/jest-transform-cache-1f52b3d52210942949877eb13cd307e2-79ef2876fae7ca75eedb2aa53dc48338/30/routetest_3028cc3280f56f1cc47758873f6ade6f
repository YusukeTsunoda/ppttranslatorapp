674a851d08c52404654ae0ca3b76a866
"use strict";
// モックの設定
jest.mock('next-auth');
jest.mock('fs');
jest.mock('@/lib/utils/file-utils');
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _nextauth = require("next-auth");
const _fs = require("fs");
const _fileutils = require("@/lib/utils/file-utils");
const _nodemockshttp = require("node-mocks-http");
const _route = require("@/app/api/download/[userId]/[filename]/route");
describe('/api/download/[userId]/[filename]', ()=>{
    beforeEach(()=>{
        jest.clearAllMocks();
    });
    // テストユーザーの設定
    const testUser = {
        id: 'test-user-id',
        name: 'Test User',
        email: 'test@example.com'
    };
    // テストファイルの設定
    const testFile = {
        id: 'test-file-id',
        name: 'test-file.pptx',
        content: Buffer.from('test file content')
    };
    it('未認証ユーザーのアクセスを拒否する', async ()=>{
        // getServerSessionのモックを設定
        _nextauth.getServerSession.mockResolvedValue(null);
        const { req } = (0, _nodemockshttp.createMocks)({
            method: 'GET'
        });
        const response = await (0, _route.GET)(req, {
            params: {
                userId: testUser.id,
                filename: testFile.name
            }
        });
        expect(response.status).toBe(401);
        const data = await response.json();
        expect(data.error).toBe('認証が必要です');
    });
    it('他のユーザーのファイルへのアクセスを拒否する', async ()=>{
        // getServerSessionのモックを設定
        _nextauth.getServerSession.mockResolvedValue({
            user: testUser
        });
        const { req } = (0, _nodemockshttp.createMocks)({
            method: 'GET'
        });
        const response = await (0, _route.GET)(req, {
            params: {
                userId: 'other-user-id',
                filename: testFile.name
            }
        });
        expect(response.status).toBe(403);
        const data = await response.json();
        expect(data.error).toBe('アクセス権限がありません');
    });
    it('存在しないファイルへのアクセスを404で返す', async ()=>{
        // getServerSessionのモックを設定
        _nextauth.getServerSession.mockResolvedValue({
            user: testUser
        });
        // filePathManagerのモックを設定
        _fileutils.filePathManager.findActualFilePath.mockResolvedValue(null);
        const { req } = (0, _nodemockshttp.createMocks)({
            method: 'GET'
        });
        const response = await (0, _route.GET)(req, {
            params: {
                userId: testUser.id,
                filename: 'non-existent-file.pptx'
            }
        });
        expect(response.status).toBe(404);
        const data = await response.json();
        expect(data.error).toBe('ファイルが見つかりません');
    });
    it('正常なファイルダウンロードを処理する', async ()=>{
        // getServerSessionのモックを設定
        _nextauth.getServerSession.mockResolvedValue({
            user: testUser
        });
        // filePathManagerのモックを設定
        const testFilePath = '/test/path/test-file.pptx';
        _fileutils.filePathManager.findActualFilePath.mockResolvedValue(testFilePath);
        // fs.readFileのモックを設定
        _fs.promises.readFile.mockResolvedValue(testFile.content);
        const { req } = (0, _nodemockshttp.createMocks)({
            method: 'GET'
        });
        const response = await (0, _route.GET)(req, {
            params: {
                userId: testUser.id,
                filename: testFile.name
            }
        });
        expect(response.status).toBe(200);
        expect(response.headers.get('Content-Type')).toBe('application/vnd.openxmlformats-officedocument.presentationml.presentation');
        expect(response.headers.get('Content-Disposition')).toBe(`attachment; filename="${testFile.name}"`);
        const buffer = await response.arrayBuffer();
        expect(Buffer.from(buffer)).toEqual(testFile.content);
    });
    it('ファイル読み込みエラーを処理する', async ()=>{
        // getServerSessionのモックを設定
        _nextauth.getServerSession.mockResolvedValue({
            user: testUser
        });
        // filePathManagerのモックを設定
        const testFilePath = '/test/path/test-file.pptx';
        _fileutils.filePathManager.findActualFilePath.mockResolvedValue(testFilePath);
        // fs.readFileのモックを設定してエラーを投げる
        _fs.promises.readFile.mockRejectedValue(new Error('ファイル読み込みエラー'));
        const { req } = (0, _nodemockshttp.createMocks)({
            method: 'GET'
        });
        const response = await (0, _route.GET)(req, {
            params: {
                userId: testUser.id,
                filename: testFile.name
            }
        });
        expect(response.status).toBe(500);
        const data = await response.json();
        expect(data.error).toBe('ファイルのダウンロードに失敗しました');
    });
});

//# sourceMappingURL=data:application/json;base64,