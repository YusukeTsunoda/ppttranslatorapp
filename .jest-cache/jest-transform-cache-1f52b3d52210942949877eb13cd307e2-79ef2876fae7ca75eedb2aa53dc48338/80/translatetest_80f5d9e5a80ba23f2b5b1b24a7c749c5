81328dfdabeafae58abd52b746dcf369
"use strict";
// Anthropicのモック
jest.mock('@anthropic-ai/sdk', ()=>{
    return jest.fn().mockImplementation(()=>({
            messages: {
                create: jest.fn().mockResolvedValue({
                    content: [
                        {
                            type: 'text',
                            text: '{"translations":[{"original":"Hello","translated":"こんにちは"},{"original":"World","translated":"世界"}]}'
                        }
                    ]
                })
            }
        }));
});
// next-authのモック
jest.mock('next-auth', ()=>({
        getServerSession: jest.fn().mockResolvedValue({
            user: {
                id: 'test-user',
                email: 'test@example.com',
                isPremium: true
            }
        })
    }));
// prismaのモック
jest.mock('@/lib/db/prisma', ()=>({
        prisma: {
            translation: {
                create: jest.fn().mockResolvedValue({
                    id: 'test-translation-id',
                    userId: 'test-user',
                    sourceLanguage: 'en',
                    targetLanguage: 'ja',
                    createdAt: new Date(),
                    updatedAt: new Date()
                }),
                findMany: jest.fn().mockResolvedValue([
                    {
                        id: 'test-translation-id',
                        userId: 'test-user',
                        sourceLanguage: 'en',
                        targetLanguage: 'ja',
                        createdAt: new Date(),
                        updatedAt: new Date()
                    }
                ])
            }
        }
    }));
// app/api/translate/route.tsのモック
jest.mock('@/app/api/translate/route', ()=>({
        POST: jest.fn().mockImplementation(async (req)=>{
            const body = await req.json();
            if (!body.texts || !body.sourceLanguage || !body.targetLanguage) {
                return mockErrorResponse;
            }
            return mockSuccessResponse;
        }),
        GET: jest.fn().mockImplementation(async ()=>{
            return {
                status: 200,
                json: async ()=>({
                        translations: [
                            {
                                id: 'test-translation-id',
                                userId: 'test-user',
                                sourceLanguage: 'en',
                                targetLanguage: 'ja',
                                createdAt: new Date(),
                                updatedAt: new Date()
                            }
                        ]
                    })
            };
        })
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _globals = require("@jest/globals");
const _route = require("@/app/api/translate/route");
// モックレスポンスの作成
const mockSuccessResponse = {
    status: 200,
    json: async ()=>({
            success: true,
            translations: [
                {
                    original: 'Hello',
                    translated: 'こんにちは'
                },
                {
                    original: 'World',
                    translated: '世界'
                }
            ]
        })
};
const mockErrorResponse = {
    status: 400,
    json: async ()=>({
            error: 'Invalid request'
        })
};
describe('Translate API', ()=>{
    beforeEach(()=>{
        jest.clearAllMocks();
    });
    describe('POST /api/translate', ()=>{
        it('有効なリクエストで翻訳を実行する', async ()=>{
            // リクエストボディの作成
            const requestBody = {
                texts: [
                    'Hello',
                    'World'
                ],
                sourceLanguage: 'en',
                targetLanguage: 'ja'
            };
            // モックのリクエストオブジェクトを作成
            const mockReq = {
                json: jest.fn().mockResolvedValue(requestBody)
            };
            // APIハンドラを呼び出す
            const response = await (0, _route.POST)(mockReq);
            // レスポンスを検証
            (0, _globals.expect)(response.status).toBe(200);
            // レスポンスボディを取得
            const data = await response.json();
            // レスポンスボディを検証
            (0, _globals.expect)(data.success).toBe(true);
            (0, _globals.expect)(data.translations).toHaveLength(2);
            (0, _globals.expect)(data.translations[0].original).toBe('Hello');
            (0, _globals.expect)(data.translations[0].translated).toBe('こんにちは');
        });
        it('無効なリクエストでエラーを返す', async ()=>{
            // 無効なリクエストボディの作成（textsが欠けている）
            const requestBody = {
                sourceLanguage: 'en',
                targetLanguage: 'ja'
            };
            // モックのリクエストオブジェクトを作成
            const mockReq = {
                json: jest.fn().mockResolvedValue(requestBody)
            };
            // APIハンドラを呼び出す
            const response = await (0, _route.POST)(mockReq);
            // レスポンスを検証
            (0, _globals.expect)(response.status).toBe(400);
            // レスポンスボディを取得
            const data = await response.json();
            // レスポンスボディを検証
            (0, _globals.expect)(data.error).toBe('Invalid request');
        });
        it('テキスト前処理を正しく行う', async ()=>{
            // 特殊なテキストを含むリクエストボディの作成
            const requestBody = {
                texts: [
                    '  Hello  ',
                    'Multi\nLine\nText',
                    '<p>HTML Tags</p>',
                    '特殊文字：①㈱㊤',
                    ''
                ],
                sourceLanguage: 'en',
                targetLanguage: 'ja'
            };
            // モックのリクエストオブジェクトを作成
            const mockReq = {
                json: jest.fn().mockResolvedValue(requestBody)
            };
            // APIハンドラを呼び出す
            const response = await (0, _route.POST)(mockReq);
            // レスポンスを検証
            (0, _globals.expect)(response.status).toBe(200);
            // レスポンスボディを取得
            const data = await response.json();
            // レスポンスボディを検証
            (0, _globals.expect)(data.success).toBe(true);
            (0, _globals.expect)(data.translations).toBeDefined();
            (0, _globals.expect)(data.translations.length).toBeGreaterThan(0);
        });
        it('大量のテキストを適切にバッチ処理する', async ()=>{
            // 大量のテキストを生成
            const texts = Array.from({
                length: 100
            }, (_, i)=>`Text ${i + 1}`);
            const requestBody = {
                texts,
                sourceLanguage: 'en',
                targetLanguage: 'ja'
            };
            // モックのリクエストオブジェクトを作成
            const mockReq = {
                json: jest.fn().mockResolvedValue(requestBody)
            };
            // APIハンドラを呼び出す
            const response = await (0, _route.POST)(mockReq);
            // レスポンスを検証
            (0, _globals.expect)(response.status).toBe(200);
            // レスポンスボディを取得
            const data = await response.json();
            // レスポンスボディを検証
            (0, _globals.expect)(data.success).toBe(true);
            (0, _globals.expect)(data.translations).toHaveLength(texts.length);
        });
        it('翻訳APIのエラーを適切に処理する', async ()=>{
            jest.mock('@anthropic-ai/sdk', ()=>{
                return jest.fn().mockImplementation(()=>({
                        messages: {
                            create: jest.fn().mockRejectedValue(new Error('API Error'))
                        }
                    }));
            });
            jest.mock('@anthropic-ai/sdk', ()=>originalAnthropicMock);
            // Anthropicのモックを一時的にエラーを返すように変更
            const originalAnthropicMock = jest.requireMock('@anthropic-ai/sdk');
            jest.resetModules();
            const requestBody = {
                texts: [
                    'Hello'
                ],
                sourceLanguage: 'en',
                targetLanguage: 'ja'
            };
            // モックのリクエストオブジェクトを作成
            const mockReq = {
                json: jest.fn().mockResolvedValue(requestBody)
            };
            // APIハンドラを呼び出す
            const response = await (0, _route.POST)(mockReq);
            // レスポンスを検証
            (0, _globals.expect)(response.status).toBe(500);
            // レスポンスボディを取得
            const data = await response.json();
            // レスポンスボディを検証
            (0, _globals.expect)(data.error).toBeDefined();
            (0, _globals.expect)(data.success).toBeFalsy();
            // モックを元に戻す
            jest.resetModules();
        });
        it('不適切な言語コードを処理する', async ()=>{
            const requestBody = {
                texts: [
                    'Hello'
                ],
                sourceLanguage: 'invalid',
                targetLanguage: 'invalid'
            };
            // モックのリクエストオブジェクトを作成
            const mockReq = {
                json: jest.fn().mockResolvedValue(requestBody)
            };
            // APIハンドラを呼び出す
            const response = await (0, _route.POST)(mockReq);
            // レスポンスを検証
            (0, _globals.expect)(response.status).toBe(400);
            // レスポンスボディを取得
            const data = await response.json();
            // レスポンスボディを検証
            (0, _globals.expect)(data.error).toBeDefined();
            (0, _globals.expect)(data.error).toContain('Invalid language code');
        });
        it('翻訳結果を正しく整形する', async ()=>{
            // 複雑な翻訳結果を含むリクエストボディの作成
            const requestBody = {
                texts: [
                    'Hello {name}!',
                    'Count: {count}',
                    'Date: {date}'
                ],
                sourceLanguage: 'en',
                targetLanguage: 'ja',
                preservePlaceholders: true
            };
            // モックのリクエストオブジェクトを作成
            const mockReq = {
                json: jest.fn().mockResolvedValue(requestBody)
            };
            // APIハンドラを呼び出す
            const response = await (0, _route.POST)(mockReq);
            // レスポンスを検証
            (0, _globals.expect)(response.status).toBe(200);
            // レスポンスボディを取得
            const data = await response.json();
            // レスポンスボディを検証
            (0, _globals.expect)(data.success).toBe(true);
            (0, _globals.expect)(data.translations).toBeDefined();
            // プレースホルダーが保持されていることを確認
            data.translations.forEach((translation)=>{
                if (translation.original.includes('{')) {
                    (0, _globals.expect)(translation.translated).toMatch(/\{.*?\}/);
                }
            });
        });
    });
    describe('GET /api/translate', ()=>{
        it('翻訳履歴を取得する', async ()=>{
            // モックのリクエストオブジェクトを作成
            const mockReq = {};
            // APIハンドラを呼び出す
            const response = await (0, _route.GET)(mockReq);
            // レスポンスを検証
            (0, _globals.expect)(response.status).toBe(200);
            // レスポンスボディを取得
            const data = await response.json();
            // レスポンスボディを検証
            (0, _globals.expect)(data.translations).toHaveLength(1);
            (0, _globals.expect)(data.translations[0].userId).toBe('test-user');
            (0, _globals.expect)(data.translations[0].sourceLanguage).toBe('en');
            (0, _globals.expect)(data.translations[0].targetLanguage).toBe('ja');
        });
    });
});

//# sourceMappingURL=data:application/json;base64,