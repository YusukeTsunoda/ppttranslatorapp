{"version":3,"sources":["/Users/yusuketsunoda/Documents/cursor/ppttranslatorapp/worktrees/feature-test-coverage-improvement/tests/api/pptx-generate.test.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { expect } from '@jest/globals';\nimport { promises as fs } from 'fs';\nimport path from 'path';\nimport { exec } from 'child_process';\n\n// next-authのモック\njest.mock('next-auth', () => ({\n  getServerSession: jest.fn().mockResolvedValue({\n    user: {\n      id: 'test-user',\n      email: 'test@example.com',\n    },\n  }),\n}));\n\n// fs/promisesのモック\njest.mock('fs/promises', () => ({\n  mkdir: jest.fn().mockResolvedValue(undefined),\n  writeFile: jest.fn().mockResolvedValue(undefined),\n  readFile: jest.fn().mockResolvedValue(Buffer.from('test file content')),\n  readdir: jest.fn().mockResolvedValue(['original.pptx', 'translated.pptx']),\n  access: jest.fn().mockImplementation((path) => {\n    if (path.includes('not-exist')) {\n      return Promise.reject(new Error('File not found'));\n    }\n    return Promise.resolve();\n  }),\n  unlink: jest.fn().mockResolvedValue(undefined),\n}));\n\n// child_processのモック\njest.mock('child_process', () => ({\n  exec: jest.fn().mockImplementation((cmd, callback) => {\n    callback(null, 'success', '');\n  }),\n}));\n\n// file-utilsのモック\njest.mock('@/lib/utils/file-utils', () => ({\n  filePathManager: {\n    findActualFilePath: jest.fn().mockResolvedValue('/path/to/original.pptx'),\n    getTempPath: jest.fn().mockReturnValue('/path/to/temp/file.pptx'),\n    getPublicPath: jest.fn().mockReturnValue('uploads/test-user/file.pptx'),\n  },\n}));\n\n// app/api/pptx/generate/route.tsのモック\njest.mock('@/app/api/pptx/generate/route', () => {\n  // モック用のレスポンス生成関数\n  const mockJsonResponse = (data: any, status = 200) => {\n    return {\n      json: () => Promise.resolve(data),\n      status,\n    };\n  };\n\n  return {\n    POST: jest.fn().mockImplementation(async (req) => {\n      const body = await req.json();\n\n      if (!body.fileId || !body.translations) {\n        return mockJsonResponse({ error: 'Missing required parameters' }, 400);\n      }\n\n      return mockJsonResponse({\n        success: true,\n        fileId: body.fileId,\n        filePath: 'uploads/test-user/test-file_translated.pptx',\n        message: 'PPTXファイルが正常に生成されました',\n      });\n    }),\n  };\n});\n\n// インポートはモックの後に行う\nimport { POST } from '@/app/api/pptx/generate/route';\n\ndescribe('PPTX Generate API', () => {\n  beforeEach(() => {\n    jest.clearAllMocks();\n  });\n\n  describe('POST /api/pptx/generate', () => {\n    it('翻訳データからPPTXファイルを生成する', async () => {\n      // リクエストボディの作成\n      const requestBody = {\n        fileId: 'test-file',\n        translations: [\n          {\n            slideId: 'slide1',\n            title: {\n              original: 'Original Title',\n              translated: '翻訳されたタイトル',\n            },\n            content: [\n              {\n                original: 'Original Content',\n                translated: '翻訳されたコンテンツ',\n              },\n            ],\n          },\n        ],\n      };\n\n      // リクエストオブジェクトのモック\n      const mockReq = {\n        json: jest.fn().mockResolvedValue(requestBody),\n      } as unknown as NextRequest;\n\n      // APIハンドラを呼び出す\n      const response = await POST(mockReq);\n\n      // レスポンスを検証\n      expect(response.status).toBe(200);\n\n      // レスポンスボディを取得\n      const data = await response.json();\n\n      // レスポンスボディを検証\n      expect(data.success).toBe(true);\n      expect(data.fileId).toBe('test-file');\n      expect(data.filePath).toBe('uploads/test-user/test-file_translated.pptx');\n      expect(data.message).toBe('PPTXファイルが正常に生成されました');\n    });\n\n    it('必須パラメータが欠けている場合はエラーを返す', async () => {\n      // 無効なリクエストボディの作成（fileIdが欠けている）\n      const requestBody = {\n        translations: [\n          {\n            slideId: 'slide1',\n            title: {\n              original: 'Original Title',\n              translated: '翻訳されたタイトル',\n            },\n          },\n        ],\n      };\n\n      // リクエストオブジェクトのモック\n      const mockReq = {\n        json: jest.fn().mockResolvedValue(requestBody),\n      } as unknown as NextRequest;\n\n      // APIハンドラを呼び出す\n      const response = await POST(mockReq);\n\n      // レスポンスを検証\n      expect(response.status).toBe(400);\n\n      // レスポンスボディを取得\n      const data = await response.json();\n\n      // レスポンスボディを検証\n      expect(data.error).toBe('Missing required parameters');\n    });\n\n    it('翻訳データが欠けている場合はエラーを返す', async () => {\n      // 無効なリクエストボディの作成（translationsが欠けている）\n      const requestBody = {\n        fileId: 'test-file',\n      };\n\n      // リクエストオブジェクトのモック\n      const mockReq = {\n        json: jest.fn().mockResolvedValue(requestBody),\n      } as unknown as NextRequest;\n\n      // APIハンドラを呼び出す\n      const response = await POST(mockReq);\n\n      // レスポンスを検証\n      expect(response.status).toBe(400);\n\n      // レスポンスボディを取得\n      const data = await response.json();\n\n      // レスポンスボディを検証\n      expect(data.error).toBe('Missing required parameters');\n    });\n  });\n});\n"],"names":["jest","mock","getServerSession","fn","mockResolvedValue","user","id","email","mkdir","undefined","writeFile","readFile","Buffer","from","readdir","access","mockImplementation","path","includes","Promise","reject","Error","resolve","unlink","exec","cmd","callback","filePathManager","findActualFilePath","getTempPath","mockReturnValue","getPublicPath","mockJsonResponse","data","status","json","POST","req","body","fileId","translations","error","success","filePath","message","describe","beforeEach","clearAllMocks","it","requestBody","slideId","title","original","translated","content","mockReq","response","expect","toBe"],"mappings":"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"}