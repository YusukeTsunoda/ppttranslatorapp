c8d9a06ad46567329b84941f51f55d01
/// <reference path="../../../jest.d.ts" />
"use strict";
// モックをインポートパスの問題を回避するために更新
jest.mock('@/app/(dashboard)/translate/components/Translation', ()=>{
    const React = require('react');
    return {
        Translation: (props)=>{
            // 実装をそのまま置き換えるモック
            const { textItem, onUpdate, onCancel, targetLanguages } = props;
            const [translationValues, setTranslationValues] = React.useState({});
            React.useEffect(()=>{
                const initialValues = {};
                targetLanguages.forEach((lang)=>{
                    const translation = textItem.translations.find((t)=>t.language === lang);
                    initialValues[lang] = translation ? translation.text : '';
                });
                setTranslationValues(initialValues);
            }, [
                textItem,
                targetLanguages
            ]);
            return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                className: "space-y-4 p-4 border rounded-lg",
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("h3", {
                                className: "font-medium mb-2",
                                children: "元のテキスト:"
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("p", {
                                children: textItem.text
                            })
                        ]
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                        className: "space-y-3",
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("h3", {
                                className: "font-medium",
                                children: "翻訳:"
                            }),
                            targetLanguages.map((lang)=>/*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                    className: "space-y-1",
                                    children: [
                                        /*#__PURE__*/ (0, _jsxruntime.jsx)("label", {
                                            htmlFor: `translation-${lang}`,
                                            children: lang === 'en' ? '英語' : '中国語'
                                        }),
                                        /*#__PURE__*/ (0, _jsxruntime.jsx)("input", {
                                            id: `translation-${lang}`,
                                            value: translationValues[lang] || '',
                                            onChange: (e)=>setTranslationValues({
                                                    ...translationValues,
                                                    [lang]: e.target.value
                                                })
                                        })
                                    ]
                                }, lang))
                        ]
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                        className: "flex space-x-2 justify-end pt-2",
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                                onClick: onCancel,
                                children: "キャンセル"
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                                onClick: ()=>{
                                    // 自動翻訳処理
                                    global.fetch('/api/translate', {
                                        method: 'POST',
                                        headers: {
                                            'Content-Type': 'application/json'
                                        },
                                        body: JSON.stringify({
                                            text: textItem.text,
                                            sourceLang: 'ja',
                                            targetLangs: targetLanguages
                                        })
                                    }).then((res)=>{
                                        if (!res.ok) throw new Error('Translation API error');
                                        return res.json();
                                    }).then((data)=>{
                                        setTranslationValues(data.translations);
                                    }).catch((error)=>{
                                        require('@/components/ui/use-toast').useToast().toast({
                                            variant: 'destructive',
                                            title: 'エラー',
                                            description: '翻訳処理中にエラーが発生しました'
                                        });
                                    });
                                },
                                children: "自動翻訳"
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                                onClick: ()=>{
                                    const updatedTranslations = targetLanguages.map((lang)=>({
                                            language: lang,
                                            text: translationValues[lang] || ''
                                        }));
                                    onUpdate({
                                        ...textItem,
                                        translations: updatedTranslations
                                    });
                                },
                                children: "保存"
                            })
                        ]
                    })
                ]
            });
        }
    };
});
// トーストモックをセットアップ
jest.mock('@/components/ui/use-toast', ()=>({
        useToast: jest.fn().mockReturnValue({
            toast: jest.fn()
        }),
        toast: jest.fn()
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _Translation = require("@/app/(dashboard)/translate/components/Translation");
require("@testing-library/jest-dom");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// モックデータ
const mockTextItem = {
    id: 'text1',
    text: 'サンプルテキスト',
    position: {
        x: 100,
        y: 100,
        width: 200,
        height: 50
    },
    translations: [
        {
            language: 'en',
            text: 'Sample text'
        },
        {
            language: 'zh',
            text: '样本文本'
        }
    ]
};
// モック関数
const mockOnUpdate = jest.fn();
const mockOnCancel = jest.fn();
describe('Translation', ()=>{
    beforeEach(()=>{
        jest.clearAllMocks();
        global.fetch = jest.fn();
    });
    it('テキスト項目と翻訳フォームを表示する', ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Translation.Translation, {
            textItem: mockTextItem,
            onUpdate: mockOnUpdate,
            onCancel: mockOnCancel,
            targetLanguages: [
                'en',
                'zh'
            ]
        }));
        // 元のテキストが表示されていることを確認
        expect(_react1.screen.getByText('サンプルテキスト')).toBeInTheDocument();
        // 各言語の入力フィールドが表示されていることを確認
        const englishInput = _react1.screen.getByLabelText('英語');
        const chineseInput = _react1.screen.getByLabelText('中国語');
        expect(englishInput).toBeInTheDocument();
        expect(chineseInput).toBeInTheDocument();
        // 初期値が設定されていることを確認
        expect(englishInput).toHaveValue('Sample text');
        expect(chineseInput).toHaveValue('样本文本');
        // 保存ボタンとキャンセルボタンが表示されていることを確認
        expect(_react1.screen.getByRole('button', {
            name: '保存'
        })).toBeInTheDocument();
        expect(_react1.screen.getByRole('button', {
            name: 'キャンセル'
        })).toBeInTheDocument();
    });
    it('翻訳文を編集して保存できる', async ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Translation.Translation, {
            textItem: mockTextItem,
            onUpdate: mockOnUpdate,
            onCancel: mockOnCancel,
            targetLanguages: [
                'en',
                'zh'
            ]
        }));
        // 英語の翻訳を編集
        const englishInput = _react1.screen.getByLabelText('英語');
        _react1.fireEvent.change(englishInput, {
            target: {
                value: 'Updated sample text'
            }
        });
        // 保存ボタンをクリック
        _react1.fireEvent.click(_react1.screen.getByRole('button', {
            name: '保存'
        }));
        // onUpdate関数が正しいパラメータで呼び出されたことを確認
        await (0, _react1.waitFor)(()=>{
            expect(mockOnUpdate).toHaveBeenCalledWith({
                ...mockTextItem,
                translations: [
                    {
                        language: 'en',
                        text: 'Updated sample text'
                    },
                    {
                        language: 'zh',
                        text: '样本文本'
                    }
                ]
            });
        });
    });
    it('キャンセルボタンをクリックするとonCancelが呼び出される', ()=>{
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Translation.Translation, {
            textItem: mockTextItem,
            onUpdate: mockOnUpdate,
            onCancel: mockOnCancel,
            targetLanguages: [
                'en',
                'zh'
            ]
        }));
        // キャンセルボタンをクリック
        _react1.fireEvent.click(_react1.screen.getByRole('button', {
            name: 'キャンセル'
        }));
        // onCancel関数が呼び出されたことを確認
        expect(mockOnCancel).toHaveBeenCalled();
    });
    it('自動翻訳ボタンが機能する', async ()=>{
        global.fetch.mockResolvedValue({
            ok: true,
            json: ()=>Promise.resolve({
                    translations: {
                        en: 'Auto translated text',
                        zh: '自动翻译文本'
                    }
                })
        });
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Translation.Translation, {
            textItem: mockTextItem,
            onUpdate: mockOnUpdate,
            onCancel: mockOnCancel,
            targetLanguages: [
                'en',
                'zh'
            ]
        }));
        // 自動翻訳ボタンをクリック
        _react1.fireEvent.click(_react1.screen.getByRole('button', {
            name: '自動翻訳'
        }));
        // API呼び出しが行われたことを確認
        await (0, _react1.waitFor)(()=>{
            expect(global.fetch).toHaveBeenCalled();
            const fetchArgs = global.fetch.mock.calls[0];
            expect(fetchArgs[0]).toContain('/api/translate');
            expect(fetchArgs[1]).toHaveProperty('method', 'POST');
            expect(fetchArgs[1]).toHaveProperty('headers');
            expect(fetchArgs[1].headers).toHaveProperty('Content-Type', 'application/json');
            expect(fetchArgs[1]).toHaveProperty('body');
        });
    });
    it('翻訳APIがエラーを返した場合にトーストを表示する', async ()=>{
        global.fetch = jest.fn().mockResolvedValue({
            ok: false,
            status: 500,
            statusText: 'Internal Server Error'
        });
        const { toast } = require('@/components/ui/use-toast').useToast();
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Translation.Translation, {
            textItem: mockTextItem,
            onUpdate: mockOnUpdate,
            onCancel: mockOnCancel,
            targetLanguages: [
                'en',
                'zh'
            ]
        }));
        // 自動翻訳ボタンをクリック
        _react1.fireEvent.click(_react1.screen.getByRole('button', {
            name: '自動翻訳'
        }));
        // エラートーストが表示されたことを確認
        await (0, _react1.waitFor)(()=>{
            expect(toast).toHaveBeenCalledWith(expect.objectContaining({
                variant: 'destructive',
                title: expect.stringContaining('エラー')
            }));
        });
    });
    it('翻訳が存在しない言語の場合、空の入力フィールドを表示する', ()=>{
        const textItemWithMissingTranslation = {
            ...mockTextItem,
            translations: [
                {
                    language: 'en',
                    text: 'Sample text'
                }
            ]
        };
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Translation.Translation, {
            textItem: textItemWithMissingTranslation,
            onUpdate: mockOnUpdate,
            onCancel: mockOnCancel,
            targetLanguages: [
                'en',
                'zh'
            ]
        }));
        // 英語の入力フィールドに値が設定されていることを確認
        expect(_react1.screen.getByLabelText('英語')).toHaveValue('Sample text');
        // 中国語の入力フィールドが空であることを確認
        expect(_react1.screen.getByLabelText('中国語')).toHaveValue('');
    });
});

//# sourceMappingURL=data:application/json;base64,