name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # 手動実行も可能に
  schedule:
    - cron: '0 0 * * 0'  # 毎週日曜日の午前0時に実行

env:
  NODE_VERSION: '20'
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: postgres
  POSTGRES_DB: ppttranslator_test
  DATABASE_URL: postgresql://postgres:postgres@localhost:5432/ppttranslator_test
  DIRECT_URL: postgresql://postgres:postgres@localhost:5432/ppttranslator_test
  NEXTAUTH_URL: http://localhost:3000
  NEXTAUTH_SECRET: test_secret
  BASE_URL: http://localhost:3000
  STRIPE_SECRET_KEY: dummy_key_for_tests

jobs:
  code-quality:
    name: Code Quality Check
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run ESLint
      id: eslint
      run: npm run lint
      continue-on-error: true

    - name: TypeScript type check
      id: tsc
      run: npx tsc --noEmit
      continue-on-error: true

    - name: Prettier Check
      id: prettier
      run: npx prettier --check "**/*.{js,jsx,ts,tsx}"
      continue-on-error: true

    - name: Generate code quality report
      if: always()
      run: |
        echo "## コード品質チェック結果" > code-quality-report.md
        echo "### ESLint" >> code-quality-report.md
        if [ "${{ steps.eslint.outcome }}" == "success" ]; then
          echo "✅ ESLintチェック成功" >> code-quality-report.md
        else
          echo "❌ ESLintチェック失敗" >> code-quality-report.md
          echo '```' >> code-quality-report.md
          npm run lint 2>&1 | head -n 20 >> code-quality-report.md
          echo '... (省略)' >> code-quality-report.md
          echo '```' >> code-quality-report.md
        fi
        
        echo "### TypeScript" >> code-quality-report.md
        if [ "${{ steps.tsc.outcome }}" == "success" ]; then
          echo "✅ TypeScriptチェック成功" >> code-quality-report.md
        else
          echo "❌ TypeScriptチェック失敗" >> code-quality-report.md
          echo '```' >> code-quality-report.md
          npx tsc --noEmit 2>&1 | head -n 20 >> code-quality-report.md
          echo '... (省略)' >> code-quality-report.md
          echo '```' >> code-quality-report.md
        fi
        
        echo "### Prettier" >> code-quality-report.md
        if [ "${{ steps.prettier.outcome }}" == "success" ]; then
          echo "✅ Prettierチェック成功" >> code-quality-report.md
        else
          echo "❌ Prettierチェック失敗" >> code-quality-report.md
          echo '```' >> code-quality-report.md
          npx prettier --check "**/*.{js,jsx,ts,tsx}" 2>&1 | head -n 20 >> code-quality-report.md
          echo '... (省略)' >> code-quality-report.md
          echo '```' >> code-quality-report.md
        fi

    - name: Upload code quality report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: code-quality-report
        path: code-quality-report.md
        retention-days: 14

    - name: Failed if any check failed
      if: steps.tsc.outcome == 'failure' || steps.prettier.outcome == 'failure'
      run: exit 1

    - name: Warning for ESLint failure
      if: steps.eslint.outcome == 'failure'
      run: |
        echo "::warning::ESLintチェックに失敗しましたが、パイプラインは継続します。ESLintエラーは修正してください。"

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: code-quality

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # 全履歴を取得（コードカバレッジの比較用）

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci
      
    - name: Cache Prisma
      uses: actions/cache@v3
      with:
        path: node_modules/.prisma
        key: ${{ runner.os }}-prisma-${{ hashFiles('prisma/schema.prisma') }}
        restore-keys: |
          ${{ runner.os }}-prisma-

    - name: Generate Prisma client
      run: npx prisma generate
      env:
        DATABASE_URL: ${{ env.DATABASE_URL }}
      
    - name: Cache Jest
      uses: actions/cache@v3
      with:
        path: |
          node_modules/.cache/jest
        key: ${{ runner.os }}-jest-${{ hashFiles('jest.config.js') }}-${{ hashFiles('**/*.ts', '**/*.tsx') }}
        restore-keys: |
          ${{ runner.os }}-jest-

    - name: Run Tests
      run: npm run test:ci
      env:
        DATABASE_URL: ${{ env.DATABASE_URL }}
        NEXTAUTH_URL: ${{ env.NEXTAUTH_URL }}
        NEXTAUTH_SECRET: ${{ env.NEXTAUTH_SECRET }}
        BASE_URL: ${{ env.BASE_URL }}
        STRIPE_SECRET_KEY: ${{ env.STRIPE_SECRET_KEY }}

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        directory: ./coverage
        fail_ci_if_error: false
        verbose: true
        flags: unittests
        name: codecov-umbrella

    - name: Generate detailed test report
      if: always()
      run: |
        npm run reports:create-dirs
        npx jest --json --outputFile=reports/jest-results.json || true
        npx jest-html-reporter --json=reports/jest-results.json --outputPath=reports/jest-report.html

    - name: Analyze test results
      if: always()
      run: |
        echo "## ユニットテスト結果" > test-summary.md
        echo "### テスト統計" >> test-summary.md
        if [ -f "reports/jest-results.json" ]; then
          total=$(jq '.numTotalTests' reports/jest-results.json)
          passed=$(jq '.numPassedTests' reports/jest-results.json)
          failed=$(jq '.numFailedTests' reports/jest-results.json)
          echo "- 総テスト数: $total" >> test-summary.md
          echo "- 成功: $passed" >> test-summary.md
          echo "- 失敗: $failed" >> test-summary.md
          
          if [ "$failed" -gt 0 ]; then
            echo "### 失敗したテスト" >> test-summary.md
            jq -r '.testResults[].assertionResults[] | select(.status=="failed") | "- " + .ancestorTitles[0] + ": " + .title + " (" + .failureMessages[0] + ")"' reports/jest-results.json | head -n 10 >> test-summary.md
            if [ "$(jq '.testResults[].assertionResults[] | select(.status=="failed") | .title' reports/jest-results.json | wc -l)" -gt 10 ]; then
              echo "... (他の失敗したテストは省略)" >> test-summary.md
            fi
          fi
          
          echo "### カバレッジ" >> test-summary.md
          if [ -f "coverage/coverage-summary.json" ]; then
            statements=$(jq '.total.statements.pct' coverage/coverage-summary.json)
            branches=$(jq '.total.branches.pct' coverage/coverage-summary.json)
            functions=$(jq '.total.functions.pct' coverage/coverage-summary.json)
            lines=$(jq '.total.lines.pct' coverage/coverage-summary.json)
            echo "- Statements: $statements%" >> test-summary.md
            echo "- Branches: $branches%" >> test-summary.md
            echo "- Functions: $functions%" >> test-summary.md
            echo "- Lines: $lines%" >> test-summary.md
          else
            echo "カバレッジ情報が見つかりません" >> test-summary.md
          fi
        else
          echo "テスト結果が見つかりません" >> test-summary.md
        fi

    - name: Upload test reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-reports
        path: |
          coverage
          reports
          test-summary.md
        retention-days: 14

  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    timeout-minutes: 30

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci
      
    - name: Cache Next.js build
      uses: actions/cache@v3
      with:
        path: |
          .next/cache
        key: ${{ runner.os }}-nextjs-${{ hashFiles('package-lock.json') }}-${{ hashFiles('**/*.ts', '**/*.tsx') }}
        restore-keys: |
          ${{ runner.os }}-nextjs-

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install Python dependencies
      run: |
        if [ -f "python_backend/requirements.txt" ]; then
          python -m pip install --upgrade pip
          pip install -r python_backend/requirements.txt
        fi

    - name: Setup Database
      run: |
        npx prisma generate
        npx prisma migrate deploy
        npm run db:seed
      env:
        DATABASE_URL: ${{ env.DATABASE_URL }}
        DIRECT_URL: ${{ env.DIRECT_URL }}

    - name: Build Next.js
      run: npm run build
      env:
        DATABASE_URL: ${{ env.DATABASE_URL }}
        NEXTAUTH_URL: ${{ env.NEXTAUTH_URL }}
        NEXTAUTH_SECRET: ${{ env.NEXTAUTH_SECRET }}
        BASE_URL: ${{ env.BASE_URL }}
        STRIPE_SECRET_KEY: ${{ env.STRIPE_SECRET_KEY }}

    - name: Start Next.js
      run: npm run start &
      env:
        DATABASE_URL: ${{ env.DATABASE_URL }}
        NEXTAUTH_URL: ${{ env.NEXTAUTH_URL }}
        NEXTAUTH_SECRET: ${{ env.NEXTAUTH_SECRET }}
        BASE_URL: ${{ env.BASE_URL }}
        STRIPE_SECRET_KEY: ${{ env.STRIPE_SECRET_KEY }}

    - name: Wait for Next.js
      run: |
        while ! nc -z localhost 3000; do
          sleep 1
        done
        echo "Next.js is running on port 3000"

    - name: Create directories for Cypress reports
      run: |
        npm run reports:create-dirs

    - name: Run Cypress tests
      id: cypress
      uses: cypress-io/github-action@v6
      with:
        browser: chrome
        record: false
        config: video=true,screenshotOnRunFailure=true
      env:
        DATABASE_URL: ${{ env.DATABASE_URL }}
        CYPRESS_BASE_URL: ${{ env.NEXTAUTH_URL }}
        NEXTAUTH_URL: ${{ env.NEXTAUTH_URL }}
        NEXTAUTH_SECRET: ${{ env.NEXTAUTH_SECRET }}
        BASE_URL: ${{ env.BASE_URL }}
        STRIPE_SECRET_KEY: ${{ env.STRIPE_SECRET_KEY }}
        TEST_USER_EMAIL: ${{ secrets.TEST_USER_EMAIL }}
        TEST_USER_PASSWORD: ${{ secrets.TEST_USER_PASSWORD }}
      continue-on-error: true

    - name: Generate Cypress report
      if: always()
      run: |
        npm run cypress:generate-report

    - name: Upload Cypress results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: cypress-results
        path: |
          cypress/videos
          cypress/screenshots
          cypress/reports
        retention-days: 14

    - name: Analyze test failures
      if: steps.cypress.outcome == 'failure'
      run: |
        echo "## E2Eテスト失敗分析" > e2e-failures.md
        echo "### 失敗したテスト" >> e2e-failures.md
        find cypress/screenshots -type f | while read -r screenshot; do
          test_name=$(basename "$screenshot" .png | sed 's/ -- .*$//')
          echo "- $test_name" >> e2e-failures.md
        done
        
        if [ -f "cypress/reports/report.json" ]; then
          echo "### 詳細エラー" >> e2e-failures.md
          jq -r '.results[] | .suites[] | .tests[] | select(.state == "failed") | "- " + .title + ":\n  " + .error' cypress/reports/report.json >> e2e-failures.md
        fi

    - name: Upload E2E failure analysis
      uses: actions/upload-artifact@v4
      if: steps.cypress.outcome == 'failure'
      with:
        name: e2e-failures
        path: e2e-failures.md
        retention-days: 14

    - name: Failed if Cypress tests failed
      if: steps.cypress.outcome == 'failure'
      run: exit 1

  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    needs: [unit-tests, e2e-tests]
    if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
    timeout-minutes: 20
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci
      
    - name: Cache Next.js build
      uses: actions/cache@v3
      with:
        path: |
          .next/cache
        key: ${{ runner.os }}-nextjs-${{ hashFiles('package-lock.json') }}-${{ hashFiles('**/*.ts', '**/*.tsx') }}
        restore-keys: |
          ${{ runner.os }}-nextjs-

    - name: Generate Prisma client
      run: npx prisma generate
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}

    - name: Build Next.js
      run: npm run build
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        NEXTAUTH_URL: ${{ secrets.NEXTAUTH_URL }}
        NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
        BASE_URL: ${{ secrets.BASE_URL }}
        STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}

    - name: Install Vercel CLI
      run: npm install -g vercel

    - name: Deploy to Vercel
      run: |
        vercel deploy --prod --token=${{ secrets.VERCEL_TOKEN }} 

    - name: Create deployment summary
      run: |
        echo "## デプロイ情報" > deployment-summary.md
        echo "### ビルド情報" >> deployment-summary.md
        echo "- ブランチ: ${{ github.ref_name }}" >> deployment-summary.md
        echo "- コミット: ${{ github.sha }}" >> deployment-summary.md
        echo "- デプロイ時間: $(date)" >> deployment-summary.md
        echo "- デプロイURL: ${{ secrets.NEXTAUTH_URL }}" >> deployment-summary.md

    - name: Upload deployment summary
      uses: actions/upload-artifact@v4
      with:
        name: deployment-summary
        path: deployment-summary.md
        retention-days: 14

  production-verification:
    name: 本番環境動作確認
    runs-on: ubuntu-latest
    needs: build-and-deploy
    if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
    timeout-minutes: 10
    
    steps:
    - name: Wait for deployment to complete
      run: sleep 60  # デプロイが完全に反映されるまで待機
    
    - name: Check health endpoint
      id: health_check
      run: |
        HEALTH_URL="${{ secrets.NEXTAUTH_URL }}/api/health"
        echo "ヘルスチェックURL: $HEALTH_URL"
        
        # ヘルスチェックエンドポイントにリクエスト
        RESPONSE=$(curl -s -w "\n%{http_code}" $HEALTH_URL)
        HTTP_STATUS=$(echo "$RESPONSE" | tail -n1)
        BODY=$(echo "$RESPONSE" | sed '$d')
        
        # レスポンスを保存
        echo "$BODY" > health-check-response.json
        
        # ステータスコードを確認
        if [[ $HTTP_STATUS -ge 200 && $HTTP_STATUS -lt 300 ]]; then
          echo "✅ ヘルスチェック成功: HTTP $HTTP_STATUS"
          echo "health_status=success" >> $GITHUB_ENV
        else
          echo "❌ ヘルスチェック失敗: HTTP $HTTP_STATUS"
          echo "health_status=failure" >> $GITHUB_ENV
        fi
        
        # レスポンスの内容を確認
        OVERALL_STATUS=$(echo "$BODY" | jq -r '.status')
        echo "全体ステータス: $OVERALL_STATUS"
        
        # 各コンポーネントのステータスを確認
        AUTH_STATUS=$(echo "$BODY" | jq -r '.components.auth.status')
        DB_STATUS=$(echo "$BODY" | jq -r '.components.database.status')
        ERROR_HANDLING_STATUS=$(echo "$BODY" | jq -r '.components.errorHandling.status')
        
        echo "認証ステータス: $AUTH_STATUS"
        echo "データベースステータス: $DB_STATUS"
        echo "エラーハンドリングステータス: $ERROR_HANDLING_STATUS"
        
        # 結果をサマリーに出力
        echo "## 本番環境動作確認結果" > verification-summary.md
        echo "### ヘルスチェック" >> verification-summary.md
        echo "- エンドポイント: $HEALTH_URL" >> verification-summary.md
        echo "- HTTPステータス: $HTTP_STATUS" >> verification-summary.md
        echo "- 全体ステータス: $OVERALL_STATUS" >> verification-summary.md
        echo "- 認証ステータス: $AUTH_STATUS" >> verification-summary.md
        echo "- データベースステータス: $DB_STATUS" >> verification-summary.md
        echo "- エラーハンドリングステータス: $ERROR_HANDLING_STATUS" >> verification-summary.md
        
        # 詳細情報を追加
        echo "### 詳細情報" >> verification-summary.md
        echo '```json' >> verification-summary.md
        echo "$BODY" >> verification-summary.md
        echo '```' >> verification-summary.md
        
        # 失敗した場合はエラーを出力
        if [[ "$OVERALL_STATUS" != "ok" ]]; then
          echo "::error::ヘルスチェックが失敗しました。ステータス: $OVERALL_STATUS"
          exit 1
        fi
    
    - name: Upload verification summary
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: verification-summary
        path: verification-summary.md
        retention-days: 14
    
    - name: Verify authentication functionality
      id: auth_check
      run: |
        AUTH_URL="${{ secrets.NEXTAUTH_URL }}/api/auth/session"
        echo "認証チェックURL: $AUTH_URL"
        
        # セッションエンドポイントにリクエスト
        RESPONSE=$(curl -s -w "\n%{http_code}" $AUTH_URL)
        HTTP_STATUS=$(echo "$RESPONSE" | tail -n1)
        BODY=$(echo "$RESPONSE" | sed '$d')
        
        # レスポンスを保存
        echo "$BODY" > auth-check-response.json
        
        # ステータスコードを確認（未認証なので200または401が正常）
        if [[ $HTTP_STATUS -eq 200 || $HTTP_STATUS -eq 401 ]]; then
          echo "✅ 認証エンドポイント確認成功: HTTP $HTTP_STATUS"
          echo "auth_check_status=success" >> $GITHUB_ENV
        else
          echo "❌ 認証エンドポイント確認失敗: HTTP $HTTP_STATUS"
          echo "auth_check_status=failure" >> $GITHUB_ENV
          echo "::error::認証エンドポイントの確認に失敗しました。ステータス: $HTTP_STATUS"
          exit 1
        fi
        
        # 結果をサマリーに追加
        echo "### 認証機能確認" >> verification-summary.md
        echo "- エンドポイント: $AUTH_URL" >> verification-summary.md
        echo "- HTTPステータス: $HTTP_STATUS" >> verification-summary.md
        echo "- レスポンス: \`$BODY\`" >> verification-summary.md
    
    - name: Send verification notification
      if: always()
      run: |
        if [ "${{ env.health_status }}" == "success" ] && [ "${{ env.auth_check_status }}" == "success" ]; then
          echo "verification_result=success" >> $GITHUB_ENV
          echo "verification_message=✅ 本番環境動作確認が成功しました" >> $GITHUB_ENV
        else
          echo "verification_result=failure" >> $GITHUB_ENV
          echo "verification_message=❌ 本番環境動作確認に失敗しました" >> $GITHUB_ENV
        fi
        
        echo "## 本番環境動作確認" >> verification-notification.md
        echo "${{ env.verification_message }}" >> verification-notification.md
        echo "- 確認時刻: $(date)" >> verification-notification.md
        echo "- デプロイURL: ${{ secrets.NEXTAUTH_URL }}" >> verification-notification.md
        
        if [ "${{ env.verification_result }}" == "failure" ]; then
          echo "::error::本番環境動作確認に失敗しました。詳細はverification-summaryを確認してください。"

  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs: [build-and-deploy, production-verification]
    if: always() && github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
    
    steps:
    - name: Notification Status
      run: |
        if [ "${{ needs.build-and-deploy.result }}" == "success" ] && [ "${{ needs.production-verification.result }}" == "success" ]; then
          echo "status=success" >> $GITHUB_ENV
          echo "color=good" >> $GITHUB_ENV
          echo "title=✅ デプロイ成功" >> $GITHUB_ENV
        else
          echo "status=failure" >> $GITHUB_ENV
          echo "color=danger" >> $GITHUB_ENV
          echo "title=❌ デプロイ失敗" >> $GITHUB_ENV
        fi

    - name: Send Slack notification
      uses: rtCamp/action-slack-notify@v2
      if: env.SLACK_WEBHOOK != ''
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        SLACK_CHANNEL: deployments
        SLACK_COLOR: ${{ env.color }}
        SLACK_TITLE: ${{ env.title }}
        SLACK_MESSAGE: |
          *リポジトリ:* ${{ github.repository }}
          *ブランチ:* ${{ github.ref_name }}
          *コミット:* ${{ github.event.head_commit.message }}
          *デプロイURL:* ${{ secrets.NEXTAUTH_URL }}
          *ワークフロー詳細:* ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }} 

    - name: Debug Environment
      run: |
        echo "DATABASE_URL=$DATABASE_URL"
        echo "DIRECT_URL=$DIRECT_URL" 