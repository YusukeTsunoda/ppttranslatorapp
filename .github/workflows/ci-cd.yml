name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  lint-and-test:
    name: Lint and Unit Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: ppttranslator_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Generate Prisma client
      run: npx prisma generate
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/ppttranslator_test

    - name: Run ESLint
      run: npm run lint

    - name: Run unit tests with coverage
      run: npm run test:coverage
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/ppttranslator_test
        NEXTAUTH_URL: http://localhost:3000
        NEXTAUTH_SECRET: test_secret
        BASE_URL: http://localhost:3000
        STRIPE_SECRET_KEY: dummy_key_for_tests

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        directory: ./coverage
        fail_ci_if_error: false
        verbose: true

    - name: Upload coverage report as artifact
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: coverage
        retention-days: 14

  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: lint-and-test

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: ppttranslator_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r python_backend/requirements.txt

    - name: Setup Database
      run: |
        npx prisma generate
        npx prisma migrate deploy
        npm run db:seed
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/ppttranslator_test

    - name: Build Next.js
      run: npm run build
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/ppttranslator_test
        NEXTAUTH_URL: http://localhost:3000
        NEXTAUTH_SECRET: test_secret
        BASE_URL: http://localhost:3000
        STRIPE_SECRET_KEY: dummy_key_for_tests

    - name: Start Next.js
      run: npm run start &
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/ppttranslator_test
        NEXTAUTH_URL: http://localhost:3000
        NEXTAUTH_SECRET: test_secret
        BASE_URL: http://localhost:3000
        STRIPE_SECRET_KEY: dummy_key_for_tests

    - name: Wait for Next.js
      run: |
        while ! nc -z localhost 3000; do
          sleep 1
        done

    - name: Run Cypress tests
      uses: cypress-io/github-action@v6
      with:
        browser: chrome
        record: false
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/ppttranslator_test
        CYPRESS_BASE_URL: http://localhost:3000
        NEXTAUTH_URL: http://localhost:3000
        NEXTAUTH_SECRET: test_secret
        BASE_URL: http://localhost:3000
        STRIPE_SECRET_KEY: dummy_key_for_tests
        TEST_USER_EMAIL: ${{ secrets.TEST_USER_EMAIL }}
        TEST_USER_PASSWORD: ${{ secrets.TEST_USER_PASSWORD }}

    - name: Generate Cypress report
      if: always()
      run: npx mochawesome-merge cypress/results/*.json > cypress/results/report.json

    - name: Upload Cypress results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: cypress-results
        path: |
          cypress/videos
          cypress/screenshots
          cypress/results
        retention-days: 14

  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    needs: [lint-and-test, e2e-tests]
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Generate Prisma client
      run: npx prisma generate

    - name: Build Next.js
      run: npm run build
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        NEXTAUTH_URL: ${{ secrets.NEXTAUTH_URL }}
        NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}

    - name: Deploy to Vercel
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        vercel-args: '--prod' 