name: Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    # Node.jsのバージョンはここで一元管理 (例: 18.x)
    # もし複数のバージョンでテストしたい場合は、strategy.matrix を使用
    # strategy:
    #   matrix:
    #     node-version: [16.x, 18.x]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: ppt_translator_test
        ports:
          - 5433:5432 # ホストの5433番ポートをコンテナの5432番ポートにマッピング
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x' # 使用するNode.jsバージョンを指定 (matrixを使う場合は ${{ matrix.node-version }})
        cache: 'npm' # npmのキャッシュを有効化

    - name: Install dependencies
      run: npm ci

    # --- ユニットテスト ---
    - name: Run unit tests with coverage
      id: unit-tests # ステップIDを付与 (必要に応じて)
      run: npm test -- --coverage # package.jsonの 'test' スクリプトでカバレッジを生成すると仮定
      env:
        CI: true

    - name: Upload unit test coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        directory: ./coverage # 'npm test -- --coverage' の出力先
        flags: unittests
        name: codecov-umbrella # 必要であれば matrix.node-version などで区別
        fail_ci_if_error: true
        verbose: true

    - name: Cache Jest test results
      uses: actions/cache@v4
      with:
        path: .jest-cache
        key: ${{ runner.os }}-jest-${{ hashFiles('**/package-lock.json') }} # 依存関係の変更でキーが変わるように
        restore-keys: |
          ${{ runner.os }}-jest-

    # --- インテグレーションテスト ---
    - name: Setup environment variables for integration tests
      run: |
        echo "DATABASE_URL=postgresql://testuser:testpass@localhost:5433/ppt_translator_test" >> .env.test
        echo "NEXT_PUBLIC_APP_URL=http://localhost:3000" >> .env.test
        echo "NEXTAUTH_URL=http://localhost:3000" >> .env.test
        echo "NEXTAUTH_SECRET=test-secret" >> .env.test
      # 環境変数はテストスクリプト内で直接参照するか、.env.test をテストランナーが読み込む想定

    - name: Run database migrations
      run: npx prisma migrate deploy

    - name: Run integration tests
      id: integration-tests
      run: npm test -- tests/integration/**/*.test.ts
      env:
        CI: true
        NODE_ENV: test

    # --- パフォーマンステスト ---
    - name: Run performance tests
      id: performance-tests
      run: npm test -- tests/performance/**/*.test.ts
      env:
        CI: true
        NODE_ENV: test

    # --- E2Eテスト ---
    - name: Run E2E tests
      id: e2e-tests
      run: npm run test:e2e
      env:
        CI: true
        # 必要に応じて、ここで .env.test を読み込む設定や、
        # テストスクリプト内で環境変数を直接利用する

    # --- テスト結果の集約とアップロード ---
    - name: Summarize test information
      if: always() # 常に実行
      run: |
        echo "### Test Summary" >> $GITHUB_STEP_SUMMARY
        if [ "${{ steps.unit-tests.outcome }}" == "success" ]; then
          echo "- ✅ Unit tests passed." >> $GITHUB_STEP_SUMMARY
        else
          echo "- ❌ Unit tests failed." >> $GITHUB_STEP_SUMMARY
        fi
        echo "- Unit test coverage uploaded to Codecov." >> $GITHUB_STEP_SUMMARY

        if [ "${{ steps.integration-tests.outcome }}" == "success" ]; then
          echo "- ✅ Integration tests passed." >> $GITHUB_STEP_SUMMARY
        else
          echo "- ❌ Integration tests failed." >> $GITHUB_STEP_SUMMARY
        fi

        if [ "${{ steps.performance-tests.outcome }}" == "success" ]; then
          echo "- ✅ Performance tests passed." >> $GITHUB_STEP_SUMMARY
        else
          echo "- ❌ Performance tests failed." >> $GITHUB_STEP_SUMMARY
        fi

        if [ "${{ steps.e2e-tests.outcome }}" == "success" ]; then
          echo "- ✅ E2E tests passed." >> $GITHUB_STEP_SUMMARY
        else
          echo "- ❌ E2E tests failed." >> $GITHUB_STEP_SUMMARY
        fi
        echo "Check artifacts for detailed reports (if generated)." >> $GITHUB_STEP_SUMMARY

    - name: Upload test artifacts
      if: always() # テストの成否に関わらず常に実行
      uses: actions/upload-artifact@v4
      with:
        name: test-results-node-18 # Nodeバージョンを名前に含めると分かりやすい
        path: |
          coverage/   # ユニットテストのカバレッジレポート
          junit.xml   # インテグレーション/E2EテストのJUnitレポート (生成されている場合)
          performance-reports/  # パフォーマンステストの結果
          # 他にもアップロードしたいテスト関連ファイルがあればここに追加
        retention-days: 7 # (オプション) アーティファクトの保持日数

    # --- Slack通知 ---
    - name: Slack Notification
      if: always()
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        SLACK_CHANNEL: ci-notifications
        SLACK_COLOR: ${{ job.status }}
        SLACK_TITLE: "テスト結果"
        SLACK_MESSAGE: |
          *テスト結果サマリー*
          - ユニットテスト: ${{ steps.unit-tests.outcome }}
          - インテグレーションテスト: ${{ steps.integration-tests.outcome }}
          - パフォーマンステスト: ${{ steps.performance-tests.outcome }}
          - E2Eテスト: ${{ steps.e2e-tests.outcome }}
        SLACK_FOOTER: "PPT Translator App CI/CD"