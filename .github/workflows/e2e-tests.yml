name: E2E Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 0 * * *'  # 毎日UTCの0時（深夜）に実行
  workflow_dispatch:  # 手動実行も可能に

env:
  NODE_VERSION: '20'
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: postgres
  POSTGRES_DB: ppttranslator_test
  DATABASE_URL: postgresql://postgres:postgres@localhost:5432/ppttranslator_test
  NEXTAUTH_URL: http://localhost:3000
  NEXTAUTH_SECRET: test_secret
  BASE_URL: http://localhost:3000
  STRIPE_SECRET_KEY: dummy_key_for_tests

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 30  # タイムアウト設定

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci
      
    - name: Cache Next.js build
      uses: actions/cache@v3
      with:
        path: |
          .next/cache
        key: ${{ runner.os }}-nextjs-${{ hashFiles('package-lock.json') }}-${{ hashFiles('**/*.ts', '**/*.tsx') }}
        restore-keys: |
          ${{ runner.os }}-nextjs-

    - name: Setup Database
      run: |
        npx prisma generate
        npx prisma migrate deploy
        npm run db:seed
      env:
        DATABASE_URL: ${{ env.DATABASE_URL }}

    - name: Start Next.js
      run: npm run dev &
      env:
        DATABASE_URL: ${{ env.DATABASE_URL }}
        NEXTAUTH_URL: ${{ env.NEXTAUTH_URL }}
        NEXTAUTH_SECRET: ${{ env.NEXTAUTH_SECRET }}
        BASE_URL: ${{ env.BASE_URL }}
        STRIPE_SECRET_KEY: ${{ env.STRIPE_SECRET_KEY }}

    - name: Wait for Next.js
      run: |
        while ! nc -z localhost 3000; do
          sleep 1
        done
        echo "Next.js is running on port 3000"

    - name: Create directories for Cypress reports
      run: |
        mkdir -p cypress/results
        mkdir -p cypress/reports

    - name: Run Cypress tests
      id: cypress
      uses: cypress-io/github-action@v6
      with:
        browser: chrome
        record: false
        config: video=true,screenshotOnRunFailure=true
      env:
        DATABASE_URL: ${{ env.DATABASE_URL }}
        CYPRESS_BASE_URL: ${{ env.NEXTAUTH_URL }}
        NEXTAUTH_URL: ${{ env.NEXTAUTH_URL }}
        NEXTAUTH_SECRET: ${{ env.NEXTAUTH_SECRET }}
        BASE_URL: ${{ env.BASE_URL }}
        STRIPE_SECRET_KEY: ${{ env.STRIPE_SECRET_KEY }}
        TEST_USER_EMAIL: ${{ secrets.TEST_USER_EMAIL }}
        TEST_USER_PASSWORD: ${{ secrets.TEST_USER_PASSWORD }}
      continue-on-error: true  # テストが失敗しても後続のステップを実行

    - name: Generate Cypress report
      if: always()
      run: |
        npx mochawesome-merge cypress/results/*.json > cypress/results/report.json || true
        npx mochawesome-report-generator cypress/results/report.json --reportDir cypress/reports || true

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: cypress-results
        path: |
          cypress/videos
          cypress/screenshots
          cypress/results
          cypress/reports
        retention-days: 30
        
    - name: Analyze test failures
      if: steps.cypress.outcome == 'failure'
      run: |
        echo "## E2E Test Failures Analysis" > test-failures.md
        echo "### Failed Tests" >> test-failures.md
        find cypress/screenshots -type f | while read -r screenshot; do
          test_name=$(basename "$screenshot" .png | sed 's/ -- .*$//')
          echo "- $test_name" >> test-failures.md
          echo "  ![Screenshot]($screenshot)" >> test-failures.md
        done
        cat test-failures.md

    - name: Upload test failure analysis
      uses: actions/upload-artifact@v4
      if: steps.cypress.outcome == 'failure'
      with:
        name: test-failure-analysis
        path: test-failures.md
        retention-days: 30
        
    - name: Calculate test execution time
      if: always()
      run: |
        echo "## E2E Test Execution Time" > test-timing.md
        echo "### Test Duration" >> test-timing.md
        if [ -f "cypress/results/report.json" ]; then
          duration=$(jq '.stats.duration' cypress/results/report.json)
          echo "- Total duration: $duration ms" >> test-timing.md
          echo "- Average test duration: $(jq '.stats.duration / .stats.tests' cypress/results/report.json) ms" >> test-timing.md
          echo "- Slowest tests:" >> test-timing.md
          jq -r '.results[] | .suites[] | .tests[] | select(.duration != null) | "\(.duration)ms: \(.title)"' cypress/results/report.json | sort -nr | head -5 | while read -r line; do
            echo "  - $line" >> test-timing.md
          done
        else
          echo "- No timing information available" >> test-timing.md
        fi
        cat test-timing.md

    - name: Upload test timing analysis
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-timing-analysis
        path: test-timing.md
        retention-days: 30
        
    - name: Notify on failure
      if: steps.cypress.outcome == 'failure' && github.event_name != 'pull_request'
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        SLACK_CHANNEL: e2e-tests
        SLACK_COLOR: 'danger'
        SLACK_TITLE: '❌ E2E Tests Failed'
        SLACK_MESSAGE: |
          *Repository:* ${{ github.repository }}
          *Branch:* ${{ github.ref_name }}
          *Commit:* ${{ github.event.head_commit.message }}
          *Triggered by:* ${{ github.actor }}
          *Details:* ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          
    - name: Fail the workflow if Cypress tests failed
      if: steps.cypress.outcome == 'failure'
      run: exit 1 