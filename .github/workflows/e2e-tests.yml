name: E2E Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 0 * * 1,4'  # ÊØéÈÄ±ÊúàÊõúÊó•„Å®Êú®ÊõúÊó•„ÅÆÂçàÂâç0ÊôÇ„Å´ÂÆüË°å
  workflow_dispatch:  # ÊâãÂãïÂÆüË°å„ÇÇÂèØËÉΩ„Å´

env:
  NODE_VERSION: '20'
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: postgres
  POSTGRES_DB: ppttranslator_test
  DATABASE_URL: postgresql://postgres:postgres@localhost:5432/ppttranslator_test
  NEXTAUTH_URL: http://localhost:3000
  NEXTAUTH_SECRET: test_secret
  BASE_URL: http://localhost:3000
  STRIPE_SECRET_KEY: dummy_key_for_tests

jobs:
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Â±•Ê≠¥„ÇíÂÖ®„Å¶ÂèñÂæóÔºà„ÉÜ„Çπ„ÉàÂ§âÊõ¥„ÅÆËøΩË∑°Áî®Ôºâ

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci
      
    - name: Cache Next.js build
      uses: actions/cache@v3
      with:
        path: |
          .next/cache
        key: ${{ runner.os }}-nextjs-${{ hashFiles('package-lock.json') }}-${{ hashFiles('**/*.ts', '**/*.tsx') }}
        restore-keys: |
          ${{ runner.os }}-nextjs-

    - name: Cache Prisma
      uses: actions/cache@v3
      with:
        path: node_modules/.prisma
        key: ${{ runner.os }}-prisma-${{ hashFiles('prisma/schema.prisma') }}
        restore-keys: |
          ${{ runner.os }}-prisma-

    - name: Generate Prisma client
      run: npx prisma generate
      env:
        DATABASE_URL: ${{ env.DATABASE_URL }}

    - name: Setup Database
      run: |
        npx prisma migrate deploy
        npm run db:seed
      env:
        DATABASE_URL: ${{ env.DATABASE_URL }}

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install Python dependencies
      run: |
        if [ -f "python_backend/requirements.txt" ]; then
          python -m pip install --upgrade pip
          pip install -r python_backend/requirements.txt
        fi

    - name: Start Next.js
      run: npm run dev &
      env:
        DATABASE_URL: ${{ env.DATABASE_URL }}
        NEXTAUTH_URL: ${{ env.NEXTAUTH_URL }}
        NEXTAUTH_SECRET: ${{ env.NEXTAUTH_SECRET }}
        BASE_URL: ${{ env.BASE_URL }}
        STRIPE_SECRET_KEY: ${{ env.STRIPE_SECRET_KEY }}

    - name: Wait for Next.js
      run: |
        echo "Next.js„ÅåËµ∑Âãï„Åô„Çã„ÅÆ„ÇíÂæÖÊ©ü„Åó„Å¶„ÅÑ„Åæ„Åô..."
        while ! nc -z localhost 3000; do
          sleep 1
        done
        echo "Next.js„ÅØ„Éù„Éº„Éà3000„ÅßËµ∑Âãï„Åó„Å¶„ÅÑ„Åæ„Åô"

    - name: Create directories for reports
      run: |
        npm run reports:create-dirs

    - name: Run Cypress tests
      id: cypress
      uses: cypress-io/github-action@v6
      with:
        browser: chrome
        record: false
        config: video=true,screenshotOnRunFailure=true
      env:
        DATABASE_URL: ${{ env.DATABASE_URL }}
        CYPRESS_BASE_URL: ${{ env.NEXTAUTH_URL }}
        NEXTAUTH_URL: ${{ env.NEXTAUTH_URL }}
        NEXTAUTH_SECRET: ${{ env.NEXTAUTH_SECRET }}
        BASE_URL: ${{ env.BASE_URL }}
        STRIPE_SECRET_KEY: ${{ env.STRIPE_SECRET_KEY }}
        TEST_USER_EMAIL: ${{ secrets.TEST_USER_EMAIL }}
        TEST_USER_PASSWORD: ${{ secrets.TEST_USER_PASSWORD }}
      continue-on-error: true

    - name: Generate test reports
      if: always()
      run: |
        npm run cypress:generate-report
        
        # E2E„ÉÜ„Çπ„ÉàÁµêÊûú„ÅÆ„Çµ„Éû„É™„Éº„ÇíÁîüÊàê
        echo "## E2E„ÉÜ„Çπ„ÉàÂÆüË°åÁµêÊûú" > e2e-test-summary.md
        
        if [ -f "cypress/reports/report.json" ]; then
          total=$(jq '.stats.tests' cypress/reports/report.json)
          passed=$(jq '.stats.passes' cypress/reports/report.json)
          failed=$(jq '.stats.failures' cypress/reports/report.json)
          skipped=$(jq '.stats.skipped' cypress/reports/report.json)
          duration=$(jq '.stats.duration' cypress/reports/report.json)
          
          # ÂÆüË°åÊôÇÈñì„ÇíÂàÜ„Å®Áßí„Å´Â§âÊèõ
          minutes=$((duration / 60000))
          seconds=$(((duration % 60000) / 1000))
          
          echo "### „ÉÜ„Çπ„ÉàÁµ±Ë®à" >> e2e-test-summary.md
          echo "- Á∑è„ÉÜ„Çπ„ÉàÊï∞: $total" >> e2e-test-summary.md
          echo "- ÊàêÂäü: ‚úÖ $passed" >> e2e-test-summary.md
          echo "- Â§±Êïó: ‚ùå $failed" >> e2e-test-summary.md
          echo "- „Çπ„Ç≠„ÉÉ„Éó: ‚è≠Ô∏è $skipped" >> e2e-test-summary.md
          echo "- ÂÆüË°åÊôÇÈñì: ‚è±Ô∏è ${minutes}ÂàÜ${seconds}Áßí" >> e2e-test-summary.md
          
          if [ "$failed" -gt 0 ]; then
            echo "### Â§±Êïó„Åó„Åü„ÉÜ„Çπ„Éà" >> e2e-test-summary.md
            jq -r '.results[] | .suites[] | .tests[] | select(.state == "failed") | "- ‚ùå **" + .title + "**\n  ```\n  " + .error + "\n  ```"' cypress/reports/report.json >> e2e-test-summary.md
          fi
        else
          echo "‚ö†Ô∏è „ÉÜ„Çπ„Éà„É¨„Éù„Éº„Éà„ÅÆÁîüÊàê„Å´Â§±Êïó„Åó„Åæ„Åó„Åü" >> e2e-test-summary.md
        fi

    - name: Upload test artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: e2e-test-results
        path: |
          cypress/videos
          cypress/screenshots
          cypress/reports
          e2e-test-summary.md
        retention-days: 30

    - name: Post test results to PR
      if: github.event_name == 'pull_request' && always()
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const summary = fs.readFileSync('e2e-test-summary.md', 'utf8');
          
          await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
            body: summary
          });

    - name: Notify Slack
      if: always()
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        SLACK_CHANNEL: e2e-tests
        SLACK_COLOR: ${{ steps.cypress.outcome == 'success' && 'good' || 'danger' }}
        SLACK_TITLE: E2E Tests ${{ steps.cypress.outcome == 'success' && 'Passed ‚úÖ' || 'Failed ‚ùå' }}
        SLACK_MESSAGE: |
          Branch: ${{ github.ref_name }}
          Commit: ${{ github.sha }}
          ${{ steps.cypress.outcome == 'success' && 'All E2E tests passed successfully! üéâ' || 'Some E2E tests failed. Please check the results.' }}
        SLACK_FOOTER: "Run #${{ github.run_number }} | ${{ github.workflow }}" 