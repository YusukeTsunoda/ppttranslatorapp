# 翻訳履歴機能の実装計画
実装項目:
  - 履歴一覧表示の改善
  - 詳細表示機能の追加
  - フィルタリング機能の実装
  - ソート機能の実装

実装順序:
  1. データモデルの拡張
  2. APIエンドポイントの拡張
  3. 履歴一覧表示の改善
  4. 詳細表示機能の追加
  5. フィルタリング機能の実装
  6. ソート機能の実装

関連ファイル:
  - app/(dashboard)/history/page.tsx: 履歴一覧表示ページ
  - app/api/history/route.ts: 履歴データ取得API
  - app/(dashboard)/history/[id]/page.tsx: 詳細表示ページ（新規作成）
  - app/api/history/[id]/route.ts: 詳細データ取得API（新規作成）
  - lib/hooks/useHistoryFilter.ts: フィルタリングロジック（新規作成）
  - components/history/HistoryFilter.tsx: フィルタリングコンポーネント（新規作成）
  - components/history/HistorySort.tsx: ソートコンポーネント（新規作成）
  - components/history/HistoryDetail.tsx: 詳細表示コンポーネント（新規作成）
  - prisma/schema.prisma: データモデル定義

データモデル拡張:
  TranslationHistoryモデル拡張:
    既存フィールド:
      - id: String @id @default(cuid())
      - userId: String
      - fileName: String
      - pageCount: Int @default(0)
      - status: String
      - creditsUsed: Int
      - sourceLang: Language
      - targetLang: Language
      - model: String
      - createdAt: DateTime @default(now())
      - updatedAt: DateTime @updatedAt
    追加フィールド:
      - fileSize: Int @default(0) # ファイルサイズ（バイト）
      - processingTime: Int @default(0) # 処理時間（ミリ秒）
      - thumbnailPath: String? # サムネイル画像パス
      - tags: Json? # タグ情報（JSON配列）
      - metadata: Json? # 追加メタデータ

APIエンドポイント拡張:
  GET /api/history:
    機能追加:
      - クエリパラメータによるフィルタリング
      - ソートオプション
      - ページネーション
    クエリパラメータ:
      - page: ページ番号
      - limit: 1ページあたりの件数
      - sort: ソートフィールド
      - order: ソート順序（asc/desc）
      - search: 検索キーワード
      - startDate: 開始日
      - endDate: 終了日
      - status: ステータスフィルター
      - sourceLang: ソース言語フィルター
      - targetLang: ターゲット言語フィルター
  
  GET /api/history/[id]:
    機能:
      - 特定の履歴項目の詳細情報を取得
      - 関連するスライド情報も含める
    レスポンス:
      - 履歴の詳細情報
      - 翻訳前後のテキスト情報
      - サムネイル画像URL

UI実装:
  履歴一覧表示の改善:
    コンポーネント:
      - HistoryTable: 履歴テーブルコンポーネント
      - HistoryCard: モバイル向けカードビュー
      - Pagination: ページネーションコンポーネント
    機能:
      - レスポンシブデザイン（テーブル/カード切替）
      - サムネイル表示
      - ステータスバッジのデザイン改善
      - ページネーション
      - クイックアクション（詳細表示、再翻訳）
  
  詳細表示機能:
    実装方法:
      - 動的ルーティングを使用した専用ページ
      - モーダルでのプレビュー表示
    コンポーネント:
      - HistoryDetail: 詳細情報表示
      - SlidePreview: スライドプレビュー
      - MetadataPanel: メタデータ表示パネル
    機能:
      - 翻訳前後のテキスト比較表示
      - スライドプレビュー
      - メタデータの詳細表示
      - 再翻訳ボタン
      - エクスポートオプション
  
  フィルタリング機能:
    コンポーネント:
      - FilterPanel: フィルターパネル
      - DateRangePicker: 日付範囲選択
      - SearchInput: 検索入力
      - FilterChips: 適用中フィルターチップ
    機能:
      - 日付範囲フィルター
      - ファイル名検索
      - ステータスフィルター
      - 言語ペアフィルター
      - フィルター状態のURL保存
  
  ソート機能:
    コンポーネント:
      - SortDropdown: ソートオプションドロップダウン
      - SortDirectionToggle: 昇順/降順切替
    ソートオプション:
      - 日付（昇順/降順）
      - ファイル名（昇順/降順）
      - ファイルサイズ（昇順/降順）
      - ページ数（昇順/降順）
      - クレジット使用量（昇順/降順）

実装ステップ詳細:
  ステップ1: データモデルの拡張
    - Prismaスキーマに新しいフィールドを追加
    - マイグレーションを実行
    - 既存データの互換性を確保
    - バックアップを作成してからマイグレーション実行
  
  ステップ2: APIエンドポイントの拡張
    - GET /api/history の拡張
    - クエリパラメータの処理を追加
    - フィルタリングとソートロジックの実装
    - ページネーション対応
    - GET /api/history/[id] の新規作成
  
  ステップ3: 履歴一覧表示の改善
    - 既存の履歴ページのリファクタリング
    - テーブルレイアウトの最適化
    - レスポンシブデザインの実装
    - ページネーションの追加
  
  ステップ4: 詳細表示機能の追加
    - 詳細表示ページの作成
    - 詳細コンポーネントの実装
    - スライドプレビューの実装
    - メタデータ表示の実装
  
  ステップ5: フィルタリング機能の実装
    - フィルターフックの作成
    - フィルターコンポーネントの実装
    - URLクエリパラメータとの連携
    - フィルター状態の保持
  
  ステップ6: ソート機能の実装
    - ソートロジックの実装
    - ソートコンポーネントの実装
    - URLクエリパラメータとの連携

テスト計画:
  ユニットテスト:
    - フィルタリングロジックのテスト
    - ソートロジックのテスト
    - APIレスポンス処理のテスト
  
  統合テスト:
    - APIエンドポイントのテスト
    - フィルターとソートの連携テスト
    - ページネーションのテスト
  
  E2Eテスト:
    - 履歴一覧表示のテスト
    - 詳細表示機能のテスト
    - フィルタリングとソートの操作テスト

パフォーマンス考慮事項:
  - 大量の履歴データがある場合のページネーション最適化
  - 画像サムネイルの遅延ロードと最適化
  - クエリパラメータによるサーバーサイドフィルタリング
  - クライアントサイドキャッシュの活用

セキュリティ考慮事項:
  - ユーザー固有の履歴データのアクセス制御
  - APIエンドポイントの認証確認
  - 入力値のバリデーション
  - SQLインジェクション対策

アクセシビリティ考慮事項:
  - キーボードナビゲーション対応
  - スクリーンリーダー対応
  - 色のコントラスト比の確保
  - フォーカス管理の最適化

実装スケジュール:
  - ステップ1（データモデル拡張）: 1日
  - ステップ2（APIエンドポイント拡張）: 2日
  - ステップ3（履歴一覧表示の改善）: 2日
  - ステップ4（詳細表示機能の追加）: 2日
  - ステップ5（フィルタリング機能の実装）: 2日
  - ステップ6（ソート機能の実装）: 1日
  - テストと修正: 2日
  合計: 12日

過去の失敗から学んだ教訓:
  - データベーススキーマの変更は必ずバックアップを取ってから実施
  - 段階的な実装と各ステップでのテストを徹底
  - フロントエンドとバックエンドの連携を密に取りながら実装
  - エラーハンドリングを適切に実装
  - パフォーマンスを考慮した設計（特に大量データ処理時）
  - ユーザー体験を最優先に考えた実装
  - 適切なドキュメント作成