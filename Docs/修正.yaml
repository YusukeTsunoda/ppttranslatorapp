# PPTXTranslator 移行計画

# デザイン統一・ダーク/ライトテーマ導入 修正計画

- step: 1
  title: Tailwind設定・グローバルCSSの統一
  items:
    - Tailwindの設定ファイル（tailwind.config.cjs/ts）をdesignReferrenceの内容で統一
    - グローバルCSS（globals.css）をdesignReferrenceの内容で統一
    - カスタム変数・アニメーション・ユーティリティクラスも反映
    - 既存のカスタムCSSやクラス名の競合を整理

- step: 2
  title: テーマProvider/トグルの導入
  items:
    - ThemeProvider, ThemeToggle, 必要に応じてtheme-mode-toggleをdesignReferrenceから移植
    - _app.tsxやlayout.tsxで全体をThemeProviderでラップ
    - next-themesの設定（attribute="class"/defaultTheme/system）を反映

- step: 3
  title: 共通レイアウト・ナビゲーションの統一
  items:
    - ヘッダー・ナビゲーション・フッター等の共通レイアウトをdesignReferrenceのものに統一
    - 各ページで同じナビ・テーマトグルUIを利用
    - レスポンシブ対応・アクセシビリティも考慮

- step: 4
  title: 各ページのデザイン反映
  items:
    - page: / (app/(marketing)/page.tsx)
      status: 完了
    - page: /pricing (app/(marketing)/pricing/page.tsx)
      status: 完了
    - page: /translate (app/(dashboard)/translate/page.tsx)
      status: 完了
    - page: /profile (app/(dashboard)/profile/page.tsx)
      status: 完了
    - page: /dashboard/history (app/(dashboard)/history/page.tsx)
      status: 完了
    - page: /dashboard/admin (app/(dashboard)/admin/page.tsx)
      status: 完了
    - page: /dashboard/settings (app/(dashboard)/settings/page.tsx)
      status: 完了
    - page: /dashboard/activity (app/(dashboard)/activity/page.tsx)
      status: 完了
    - page: /dashboard/checkout (app/(dashboard)/checkout/page.tsx)
      status: 完了

- step: 5
  title: UIコンポーネントの移植・統合
  items:
    - designReferrence/components/ui/配下のUIコンポーネントを現行アプリに移植・統合
    - 既存のUIコンポーネントとの重複・競合を整理
    - 共通化できる部分は共通化

- step: 6
  title: アニメーション・ユーティリティの反映
  items:
    - カスタムアニメーション・ユーティリティクラスをglobals.cssごと反映
    - ページ・コンポーネントで必要な箇所に適用

- step: 7
  title: 動作検証・不具合修正
  items:
    - テーマ切り替え、各ページの表示、レスポンシブ、アクセシビリティ等を検証
    - サードパーティUIや画像のダーク対応も確認
    - 不具合があれば修正・再検証

- step: 8
  title: スライド上の原文位置・サイズ情報の可視化機能追加
  items:
    - サーバー側（python_backend/scripts/pptx_parser.py）で各テキストの座標・サイズ（x, y, width, height）を抽出し、APIレスポンスに含める
    - API（app/api/pptx/parse/など）のレスポンス仕様を変更し、各テキストにposition情報を付与
    - データベース（prisma/schema.prisma）のText.positionフィールド仕様を「座標・サイズ情報を含むJson」として明記
    - フロントエンド（app/(dashboard)/translate/types.ts, PreviewSection.tsx等）でposition情報を受け取り、スライド画像上に枠やハイライトを重ねて表示
    - Docs/api-reference.mdにAPIレスポンス例（position情報付き）を追記
    - Docs/database.mdにText.positionの仕様を追記
    - Docs/frontend.mdにプレビュー表示の仕様・データフローを追記
    - Docs/backend.mdにPPTXパース処理・API設計の仕様変更を追記
    - Docs/structure.yamlにデータフロー・構造図の修正を追記

# クライアントコンポーネント直import・直呼び出し調査結果

# 各ページごとに記載

# --- サーバー→クライアントimport・default参照の厳密調査 ---

- app/layout.tsx:
    result: NavBarWrapper経由でクライアント呼び出し、直import・default参照なし
- app/providers.tsx:
    result: 'use client'明記、問題なし
- app/not-found.tsx:
    result: 問題なし
- app/(dashboard)/layout.tsx:
    result: 'use client'明記、問題なし
- app/(dashboard)/activity/page.tsx:
    result: 'use client'明記、問題なし
- app/(dashboard)/admin/layout.tsx:
    result: サーバーコンポーネント、クライアントimportなし
- app/(dashboard)/admin/page.tsx:
    result: サーバーコンポーネント、クライアントimportなし
- app/(dashboard)/admin/statistics/page.tsx:
    result: サーバーコンポーネント、クライアントimportなし
- app/(dashboard)/admin/users/page.tsx:
    result: サーバーコンポーネント、クライアントimportなし
- app/(dashboard)/admin/logs/page.tsx:
    result: サーバーコンポーネント、クライアントimportなし
- app/(dashboard)/history/page.tsx:
    result: 'use client'明記、問題なし
- app/(dashboard)/history/[id]/page.tsx:
    result: 'use client'明記、問題なし
- app/(dashboard)/translate/page.tsx:
    result: 'use client'明記、問題なし
- app/(dashboard)/translate/components/PreviewSection.tsx:
    result: 'use client'明記、問題なし
- app/(dashboard)/translate/components/FileUpload.tsx:
    result: 'use client'明記、問題なし
- app/(dashboard)/translate/components/Translation.tsx:
    result: 'use client'明記、問題なし
- app/(dashboard)/translate/translate-client.tsx:
    result: 'use client'明記、問題なし
- app/(dashboard)/integrations/page.tsx:
    result: 'use client'明記、問題なし
- app/(dashboard)/profile/page.tsx:
    result: 'use client'明記、問題なし
- app/(dashboard)/settings/page.tsx:
    result: 'use client'明記、問題なし
- app/(dashboard)/settings/subscription/page.tsx:
    result: サーバーコンポーネント、クライアントimportなし

# 各ページごとに記載

- app/layout.tsx:
    result: NavBarWrapper経由で呼び出し、直import・直呼び出しなし
    default_export: あり（RootLayout, サーバーコンポーネント、クライアントコンポーネントのdefault参照なし）
- app/providers.tsx:
    result: 問題なし（use client明記、ThemeProvider等はクライアントコンポーネントとして正しく利用）
    default_export: なし（export functionのみ、問題なし）
- app/not-found.tsx:
    result: 問題なし
    default_export: あり（NotFound, サーバーコンポーネント、クライアントコンポーネントのdefault参照なし）
- app/(dashboard)/layout.tsx:
    result: 'use client'明記、問題なし
    default_export: あり（DashboardLayout, 'use client'明記、問題なし）
- app/(dashboard)/history/page.tsx:
    result: 'use client'明記、問題なし
    default_export: あり（HistoryPage, 'use client'明記、問題なし）
- app/(dashboard)/history/[id]/page.tsx:
    result: 'use client'明記、問題なし
    default_export: あり（HistoryDetailPage, 'use client'明記、問題なし）
- app/(dashboard)/translate/page.tsx:
    result: 'use client'明記、問題なし
    default_export: あり（TranslatePage, 'use client'明記、問題なし）
- app/(dashboard)/translate/components/PreviewSection.tsx:
    result: 'use client'明記、問題なし
    default_export: なし（export functionのみ、問題なし）
- app/(dashboard)/translate/components/FileUpload.tsx:
    result: 'use client'明記、問題なし
    default_export: なし（export functionのみ、問題なし）
- app/(dashboard)/translate/components/Translation.tsx:
    result: 'use client'明記、問題なし
    default_export: なし（export functionのみ、問題なし）
- app/(dashboard)/translate/translate-client.tsx:
    result: 'use client'明記、問題なし
    default_export: なし（export functionのみ、問題なし）
- app/(dashboard)/admin/layout.tsx:
    result: サーバーコンポーネント、クライアントコンポーネントの直import・直呼び出しなし
    default_export: あり（AdminLayout, サーバーコンポーネント、クライアントコンポーネントのdefault参照なし）
- app/(dashboard)/admin/page.tsx:
    result: サーバーコンポーネント、クライアントコンポーネントの直import・直呼び出しなし
    default_export: あり（AdminDashboard, サーバーコンポーネント、クライアントコンポーネントのdefault参照なし）
- app/(dashboard)/admin/logs/page.tsx:
    result: サーバーコンポーネント、クライアントコンポーネントの直import・直呼び出しなし
    default_export: あり（AdminLogsPage, サーバーコンポーネント、クライアントコンポーネントのdefault参照なし）
- app/(dashboard)/admin/statistics/page.tsx:
    result: サーバーコンポーネント、クライアントコンポーネントの直import・直呼び出しなし
    default_export: あり（StatisticsPage, サーバーコンポーネント、クライアントコンポーネントのdefault参照なし）
- app/(dashboard)/admin/users/page.tsx:
    result: サーバーコンポーネント、クライアントコンポーネントの直import・直呼び出しなし
    default_export: あり（AdminUsersPage, サーバーコンポーネント、クライアントコンポーネントのdefault参照なし）
- app/(dashboard)/integrations/page.tsx:
    result: サーバーコンポーネント、クライアントコンポーネントの直import・直呼び出しなし
    default_export: あり（IntegrationsPage, サーバーコンポーネント、クライアントコンポーネントのdefault参照なし）
- app/(dashboard)/profile/page.tsx:
    result: 'use client'明記、問題なし
    default_export: あり（ProfilePage, 'use client'明記、問題なし）
- app/(dashboard)/settings/page.tsx:
    result: 'use client'明記、問題なし
    default_export: あり（SettingsPage, 'use client'明記、問題なし）
- app/(dashboard)/settings/subscription/page.tsx:
    result: サーバーコンポーネント、クライアントコンポーネントの直import・直呼び出しなし
    default_export: あり（SubscriptionPage, サーバーコンポーネント、クライアントコンポーネントのdefault参照なし）
- app/(dashboard)/activity/page.tsx:
    result: 'use client'明記、問題なし
    default_export: あり（ActivityPage, 'use client'明記、問題なし）
- app/(dashboard)/checkout/page.tsx:
    result: サーバーコンポーネント、クライアントコンポーネントの直import・直呼び出しなし
    default_export: あり（CheckoutPage, サーバーコンポーネント、クライアントコンポーネントのdefault参照なし）
- app/(marketing)/layout.tsx:
    result: サーバーコンポーネント、クライアントコンポーネントの直import・直呼び出しなし
    default_export: あり（MarketingLayout, サーバーコンポーネント、クライアントコンポーネントのdefault参照なし）
- app/(marketing)/page.tsx:
    result: サーバーコンポーネント、クライアントコンポーネントの直import・直呼び出しなし
    default_export: あり（HomePage, サーバーコンポーネント、クライアントコンポーネントのdefault参照なし）
- app/(marketing)/pricing/page.tsx:
    result: サーバーコンポーネント、クライアントコンポーネントの直import・直呼び出しなし
    default_export: あり（PricingPage, サーバーコンポーネント、クライアントコンポーネントのdefault参照なし）
- app/(auth)/reset-password/page.tsx:
    result: 'use client'明記、問題なし
    default_export: あり（ResetPasswordPage, 'use client'明記、問題なし）
- app/(auth)/reset-password/confirm/page.tsx:
    result: 'use client'明記、問題なし
    default_export: あり（ResetPasswordConfirmPage, 'use client'明記、問題なし）
- app/(auth)/signin/page.tsx:
    result: 'use client'明記、問題なし
    default_export: あり（SignInPage, 'use client'明記、問題なし）
- app/(auth)/signup/page.tsx:
    result: 'use client'明記、問題なし
    default_export: あり（SignUpPage, 'use client'明記、問題なし）

# --- 全ファイルimport情報（2024-06-XX時点） ---

# app/(dashboard)/admin/page.tsx
imports:
  - { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
  - { prisma } from '@/lib/prisma'
  - { UserRole } from '@prisma/client'
  - Link from 'next/link'
  - { redirect } from 'next/navigation'
  - { getServerSession } from 'next-auth'
  - { authOptions } from '@/lib/auth'

# app/(dashboard)/admin/logs/page.tsx
imports:
  - { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
  - { prisma } from '@/lib/prisma'
  - { UserRole } from '@prisma/client'
  - Link from 'next/link'
  - { redirect } from 'next/navigation'
  - { getServerSession } from 'next-auth'
  - { authOptions } from '@/lib/auth'

# app/(dashboard)/admin/statistics/page.tsx
imports:
  - { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
  - { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
  - { prisma } from '@/lib/prisma'
  - { UserRole } from '@prisma/client'
  - Link from 'next/link'
  - { redirect } from 'next/navigation'
  - { getServerSession } from 'next-auth'
  - { authOptions } from '@/lib/auth'

# app/(dashboard)/admin/users/page.tsx
imports:
  - { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
  - { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table'
  - { prisma } from '@/lib/prisma'
  - { UserRole } from '@prisma/client'
  - Link from 'next/link'
  - { redirect } from 'next/navigation'
  - { getServerSession } from 'next-auth'
  - { authOptions } from '@/lib/auth'

# --- 今回の不具合に関する情報 ---

- admin配下の各ページ（page.tsx, logs/page.tsx, statistics/page.tsx, users/page.tsx）で、
  サーバーコンポーネントからクライアントコンポーネントのdefault参照やPromise的参照が発生している場合、
  Next.jsのビルド時に「Cannot access default.then on the server」「n._ is not a function」等のエラーが発生。
- すべてのimportはnamed importで統一されており、default importは存在しない。
- UIコンポーネント（card, table, tabs等）はすべてnamed exportのみで、default exportは存在しない。
- それでもエラーが発生する場合、import先のファイルが内部でdefault exportやクライアントモジュールのPromise的参照を返していないか、
  もしくはNext.jsのバージョンやビルドキャッシュの問題も考慮する必要がある。

# --- 原因まとめ ---
- サーバー→クライアントのimport境界は原則守られているが、
  Next.jsのバンドル・ビルド時に何らかの形でdefault参照やPromise的参照が混入している可能性。
- 主要なUIコンポーネント・import方法自体には現状問題は見当たらない。
- さらなる原因特定には、importチェーンの全てのファイル・export方法の再確認、
  およびNext.jsのバージョン・キャッシュクリア・node_modules再インストール等も推奨。

# --- 現在のビルドエラー・調査状況まとめ（2024-06-XX） ---

## 現在のエラー内容
- ビルド時に以下のエラーが発生：
  - Error: Cannot access default.then on the server. You cannot dot into a client module from a server component. You can only pass the imported name through.
  - TypeError: n._ is not a function
- 発生ページ例：
  - /admin/statistics
  - /admin/logs
  - /admin
  - /admin/users
- いずれも「サーバーコンポーネントからクライアントコンポーネントのdefault参照やPromise的参照」が疑われるNext.js特有のエラー

## 推定原因
- サーバーコンポーネントからクライアントコンポーネントのdefault参照やPromise的参照がどこかで発生している可能性
- ただし、importはすべてnamed importで統一されており、UIコンポーネントもnamed exportのみでdefault exportは存在しない
- importチェーンのどこかでdefault exportやPromise的参照が混入している、またはNext.jsのバージョン・ビルドキャッシュの問題も考えられる

## 現状までの調査・確認結果
- app/(dashboard)/admin配下の全ページ、components/ui配下の全UIコンポーネントについて、
  - import/export方法はすべてnamedで統一されていることを確認
  - default importやdefault exportは存在しない
  - 'use client'の有無も適切に分かれている
- PrismaやDB関連のimportも問題なし
- .then等のPromise的参照もクライアントコンポーネント内のみで利用されている
- それでもビルド時に上記エラーが発生するため、
  - importチェーンのさらに深い部分（lib/hooks/utils等）や、
  - Next.jsのバージョン・キャッシュ・node_modulesの状態も含めて再調査が必要

# --- ここまでの調査・修正履歴は本ファイルに記載 ---

# PPTX翻訳テキストの位置ずれ修正 プロジェクト計画

## 1. 背景と目的

本プロジェクトは、PPTXファイルを翻訳する際に発生するテキストボックスの位置ずれ、サイズ変更、フォントの不整合、autofit機能の不備といった問題を解消し、翻訳後のPPTXファイルの品質を向上させることを目的とします。

## 2. 現状分析と課題特定

### 2.1. 具体的な不具合パターン
- 翻訳後のテキストが元のテキストボックスの範囲を超えてしまう。
- テキストボックスのサイズが不適切に変更される（小さすぎる、大きすぎる）。
- 元のフォント情報（種類、サイズ、太字、イタリック等）が失われる、または不正確になる。
- テキストの自動調整（autofit）が正しく機能しない。
    - `SHAPE_TO_FIT_TEXT`: テキストに合わせてシェイプが調整されない。
    - `TEXT_TO_FIT_SHAPE`: シェイプに合わせてテキストが調整されない（フォントサイズが縮小されない等）。
- 行間や文字間隔が翻訳によって変わってしまう。
- 縦書きテキストの処理に問題がある可能性。

### 2.2. 既存コードの課題
- `python-pptx` ライブラリの仕様や限界の理解不足。
- テキストボックスのプロパティ取得・設定ロジックの不備。
- autofitに関する詳細な制御が行われていない可能性。
- 多様なPPTXファイルの形式やPowerPointのバージョン差への対応不足。

## 3. 修正方針

### 3.1. 基本方針
- `python-pptx` ライブラリを最大限活用し、不足する機能はカスタムロジックで補う。
- テキストボックスの主要なプロパティ（位置、サイズ、マージン、フォント関連、段落設定、autofit）を正確に抽出し、翻訳後に適切に再設定する。
- autofitの挙動をPowerPointの動作に可能な限り近づける。特に `TEXT_TO_FIT_SHAPE` の場合のフォントサイズ調整ロジックを重点的に検討する。

### 3.2. 技術的アプローチ
- **プロパティの正確な抽出**:
    - `shape.text_frame` を通じてアクセスできる全プロパティを調査。
    - `TextFrame` オブジェクト: `margin_left`, `margin_right`, `margin_top`, `margin_bottom`, `word_wrap`, `auto_size` (`MsoAutoSize`)。
    - `Paragraph` オブジェクト: `alignment`, `level`, `line_spacing`, `space_before`, `space_after`。
    - `Font` オブジェクト: `name`, `size`, `bold`, `italic`, `underline`, `color`。
- **Autofit (`auto_size`) の再現**:
    - `MsoAutoSize.NONE`: サイズ固定。変更しない。
    - `MsoAutoSize.SHAPE_TO_FIT_TEXT`: テキスト量に応じてシェイプの高さ（場合によっては幅も）を調整する。`python-pptx` がある程度自動で行うが、微調整が必要か検証。
    - `MsoAutoSize.TEXT_TO_FIT_SHAPE`: シェイプのサイズは固定し、テキストが収まるようにフォントサイズを縮小する。これは `python-pptx` では直接サポートされていないため、カスタムロジックが必要。テキストのレンダリングサイズを概算し、適切なフォントサイズを iteratively に決定する処理を検討。
        - Pillow等のライブラリを利用して、特定フォント・サイズでのテキスト描画に必要なバウンディングボックスを計算する。
        - 最小フォントサイズを設定し、それを下回らないようにする。
- **位置とサイズの再計算**:
    - 基本的には元の位置・サイズを維持する。
    - `SHAPE_TO_FIT_TEXT` の場合、テキスト量に応じて高さを調整し、必要であれば元のPPTXでの下端や他のオブジェクトとの相対関係を考慮して位置を再調整する。
- **フォント処理**:
    - 元のフォントがターゲット環境に存在しない場合のフォールバック処理を検討（例: 標準フォントに置き換える、警告を出す）。
    - 埋め込みフォントへの対応は困難なため、スコープ外とするか検討。

## 4. 実装計画

### ステップ1: 詳細調査と最小再現ケースの作成 (期間: X日)
- **タスク**:
    - `python-pptx` でテキストボックスの各プロパティ（上記3.2参照）を読み取り、新しいPPTXに設定するテストコードを作成し、動作を検証する。
    - 特に `text_frame.auto_size` の各設定値（`NONE`, `SHAPE_TO_FIT_TEXT`, `TEXT_TO_FIT_SHAPE`）が、`python-pptx` でどのように扱われるか、PowerPoint上での実際の挙動と比較検証する。
    - テキスト位置・サイズずれ、フォント不一致、autofit不全など、各不具合パターンについて、最小限の要素で再現できるPPTXファイルと、それを処理するPythonスクリプトを作成する。
- **成果物**:
    - プロパティテストコード。
    - 各不具合パターンの再現PPTXファイルと再現スクリプト。
    - `python-pptx` の挙動に関する調査メモ。

### ステップ2: テキストボックスプロパティ抽出・保持ロジックの改善 (期間: Y日)
- **タスク**:
    - 元のPPTXから、ステップ1で特定した全ての関連プロパティを正確に抽出するロジックを実装・改善する。
    - 抽出した情報を、新しいPPTXを生成する際に利用しやすい中間データ構造で保持する。
- **成果物**:
    - 改善されたプロパティ抽出・保持モジュール。
    - 中間データ構造の定義。

### ステップ3: Autofit (`TEXT_TO_FIT_SHAPE`) 対応ロジックの実装 (期間: Z日)
- **タスク**:
    - `TEXT_TO_FIT_SHAPE` の場合、テキストが指定シェイプ内に収まるようにフォントサイズを動的に調整するロジックを実装する。
        - テキストの描画サイズを推定する方法を確立する（例: Pillowライブラリの`ImageFont.getbbox()` や `ImageDraw.textbbox()`）。
        - 許容されるフォントサイズの範囲内で、最適なフォントサイズを見つけるための反復処理または計算式を実装する。
    - テキストボックスのマージンも考慮に入れる。
- **成果物**:
    - `TEXT_TO_FIT_SHAPE` 対応ロジックを含むモジュール。
    - 描画サイズ推定関数のテスト。

### ステップ4: 位置・サイズ調整および `SHAPE_TO_FIT_TEXT` 対応ロジックの実装 (期間: W日)
- **タスク**:
    - `SHAPE_TO_FIT_TEXT` の場合、翻訳後のテキスト量に基づいてテキストボックスの高さ（および必要に応じて幅）を調整するロジックを実装する。
        - `python-pptx` でテキストを設定後、自動調整されたサイズを元に、さらに調整が必要か判断する。
        - 複数行にわたる場合の高さ計算を正確に行う。
    - 上記調整に伴い、テキストボックスの `top` プロパティなどを再計算し、レイアウト崩れを防ぐ。
- **成果物**:
    - 位置・サイズ調整ロジックを含むモジュール。

### ステップ5: PPTXジェネレーターへの統合と全体調整 (期間: V日)
- **タスク**:
    - ステップ2〜4で作成した各ロジックを既存のPPTXジェネレーターに統合する。
    - フォント設定、段落設定（揃え、行間など）の再設定ロジックを最終確認・調整する。
    - 全体を通して、翻訳処理のパイプラインを見直し、データの流れを最適化する。
- **成果物**:
    - 修正されたPPTXジェネレーター。

### ステップ6: テストケース拡充と検証 (期間: U日)
- **タスク**:
    - 多様な種類のテキストボックス（異なるフォント、autofit設定、テキスト量、英語・日本語テキスト、縦書き、複雑な書式設定等）を含むテスト用PPTXファイルを多数用意する。
    - 修正後のジェネレーターでこれらのファイルを処理し、出力結果を目視および（可能であれば）プログラムで検証する。
    - 発見されたバグを修正し、リグレッションテストを行う。
- **成果物**:
    - 拡充されたテスト用PPTXファイル群。
    - テスト結果報告書。
    - バグ修正パッチ。

## 5. 注意すべき内容・リスク管理

- **`python-pptx` の限界**:
    - ライブラリがサポートしていないPPTXの機能（例: 高度なアニメーション、一部のSmartArt、複雑な図形描画）や、特定のPowerPointバージョンでのみ有効な機能については対応が困難。
    - 解決策: 事前にライブラリのドキュメントやコミュニティで情報を収集し、対応範囲を明確にする。困難な場合は、その機能を簡略化するか、ユーザーに注意を促す。
- **フォント環境依存**:
    - 開発・実行環境に存在しないフォントが使用されている場合、代替フォントでの表示となり、レイアウトが崩れる。
    - 解決策: 使用頻度の高いフォントをリストアップし、環境へのインストールを推奨。フォントが見つからない場合のフォールバック戦略（例: Arial, Meiryoなど標準的なフォントに置換）を実装。
- **Autofitの完全再現の困難性**:
    - PowerPoint内部のレンダリングエンジンと完全に同じロジックを再現するのは非常に難しい。特に `TEXT_TO_FIT_SHAPE` でのフォントサイズ調整は近似的なものになる可能性がある。
    - 解決策: 許容できる誤差の範囲を設定する。主要なケースで問題なく動作することを目標とし、エッジケースについては限定的な対応とする可能性を考慮。
- **パフォーマンス**:
    - テキスト描画サイズの計算やフォントサイズの反復調整は、処理時間を増加させる可能性がある。特に大量のテキストボックスを含むファイルで顕著になる。
    - 解決策: 計算ロジックの最適化。必要な場合にのみ詳細計算を行うようにする。進捗表示などでユーザー体験を損なわない工夫。
- **言語特性による違い**:
    - 日本語と英語では、同じフォントサイズでも文字の占める幅や高さが大きく異なる。これにより、`SHAPE_TO_FIT_TEXT` の結果が大きく変わることがある。
    - 解決策: 多言語でのテストを十分に行う。特に日本語の折り返しや禁則処理が影響しないか注意する。
- **PPTXファイル形式の複雑さ**:
    - Office Open XML形式は非常に複雑。`python-pptx` が抽象化してくれている部分以外で問題が発生した場合、デバッグが困難になる可能性がある。
    - 解決策: 問題が発生した場合は、PPTXファイルを解凍してXMLレベルでの調査も視野に入れる。

## 6. テスト方針

- **単体テスト**: 各プロパティ抽出関数、autofitロジック、サイズ計算関数など、個別のモジュール・関数に対してテストを作成。
- **結合テスト**:
    - 各ステップで開発したモジュールを結合し、テキストボックス単位での処理が正しく行われるかテストする。
    - 最小再現ケースPPTXファイルを使用。
- **システムテスト/E2Eテスト**:
    - 実際の使用に近い多様なPPTXファイル（レイアウト、コンテンツ、書式が異なるもの）を入力とし、翻訳処理全体を通して出力PPTXが期待通りであるか検証する。
    - **検証項目**:
        - テキストボックスの位置、サイズ
        - フォントの種類、サイズ、スタイル（太字、イタリック、下線、色）
        - テキストの揃え、行間、段落設定
        - Autofitの挙動（`NONE`, `SHAPE_TO_FIT_TEXT`, `TEXT_TO_FIT_SHAPE` がそれぞれ期待通りか）
        - 元のレイアウトが可能な限り維持されているか
        - 日本語特有のレイアウト崩れがないか
- **リグレッションテスト**: バグ修正後や機能追加後に、既存のテストケースを再実行し、新たな不具合が発生していないか確認する。
- **目視確認**: プログラムでの自動検証が難しい微妙なレイアウト崩れや可読性については、最終的に人間が目視で確認する。

## 7. スケジュール（仮）

- ステップ1: X日間
- ステップ2: Y日間
- ステップ3: Z日間
- ステップ4: W日間
- ステップ5: V日間
- ステップ6: U日間
- バッファ: B日間
- **合計**: (X+Y+Z+W+V+U+B)日間

※ 各ステップの日数は、初期調査後に具体化する。

## 8. 成果物

- 修正されたPPTX処理 Pythonコードベース
- テストケース群（PPTXファイル、テストスクリプト）
- プロジェクト計画書（本ドキュメント）
- 調査報告書（`python-pptx` の挙動、フォント処理など）
- テスト結果報告書
- (オプション) ユーザー向けドキュメント（既知の制限事項など）