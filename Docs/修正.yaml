# PPTXTranslator 移行計画

# デザイン統一・ダーク/ライトテーマ導入 修正計画

- step: 1
  title: Tailwind設定・グローバルCSSの統一
  items:
    - Tailwindの設定ファイル（tailwind.config.cjs/ts）をdesignReferrenceの内容で統一
    - グローバルCSS（globals.css）をdesignReferrenceの内容で統一
    - カスタム変数・アニメーション・ユーティリティクラスも反映
    - 既存のカスタムCSSやクラス名の競合を整理

- step: 2
  title: テーマProvider/トグルの導入
  items:
    - ThemeProvider, ThemeToggle, 必要に応じてtheme-mode-toggleをdesignReferrenceから移植
    - _app.tsxやlayout.tsxで全体をThemeProviderでラップ
    - next-themesの設定（attribute="class"/defaultTheme/system）を反映

- step: 3
  title: 共通レイアウト・ナビゲーションの統一
  items:
    - ヘッダー・ナビゲーション・フッター等の共通レイアウトをdesignReferrenceのものに統一
    - 各ページで同じナビ・テーマトグルUIを利用
    - レスポンシブ対応・アクセシビリティも考慮

- step: 4
  title: 各ページのデザイン反映
  items:
    - page: / (app/(marketing)/page.tsx)
      status: 完了
    - page: /pricing (app/(marketing)/pricing/page.tsx)
      status: 完了
    - page: /translate (app/(dashboard)/translate/page.tsx)
      status: 完了
    - page: /profile (app/(dashboard)/profile/page.tsx)
      status: 完了
    - page: /dashboard/history (app/(dashboard)/history/page.tsx)
      status: 完了
    - page: /dashboard/admin (app/(dashboard)/admin/page.tsx)
      status: 完了
    - page: /dashboard/settings (app/(dashboard)/settings/page.tsx)
      status: 完了
    - page: /dashboard/activity (app/(dashboard)/activity/page.tsx)
      status: 完了
    - page: /dashboard/checkout (app/(dashboard)/checkout/page.tsx)
      status: 完了

- step: 5
  title: UIコンポーネントの移植・統合
  items:
    - designReferrence/components/ui/配下のUIコンポーネントを現行アプリに移植・統合
    - 既存のUIコンポーネントとの重複・競合を整理
    - 共通化できる部分は共通化

- step: 6
  title: アニメーション・ユーティリティの反映
  items:
    - カスタムアニメーション・ユーティリティクラスをglobals.cssごと反映
    - ページ・コンポーネントで必要な箇所に適用

- step: 7
  title: 動作検証・不具合修正
  items:
    - テーマ切り替え、各ページの表示、レスポンシブ、アクセシビリティ等を検証
    - サードパーティUIや画像のダーク対応も確認
    - 不具合があれば修正・再検証

- step: 8
  title: スライド上の原文位置・サイズ情報の可視化機能追加
  items:
    - サーバー側（python_backend/scripts/pptx_parser.py）で各テキストの座標・サイズ（x, y, width, height）を抽出し、APIレスポンスに含める
    - API（app/api/pptx/parse/など）のレスポンス仕様を変更し、各テキストにposition情報を付与
    - データベース（prisma/schema.prisma）のText.positionフィールド仕様を「座標・サイズ情報を含むJson」として明記
    - フロントエンド（app/(dashboard)/translate/types.ts, PreviewSection.tsx等）でposition情報を受け取り、スライド画像上に枠やハイライトを重ねて表示
    - Docs/api-reference.mdにAPIレスポンス例（position情報付き）を追記
    - Docs/database.mdにText.positionの仕様を追記
    - Docs/frontend.mdにプレビュー表示の仕様・データフローを追記
    - Docs/backend.mdにPPTXパース処理・API設計の仕様変更を追記
    - Docs/structure.yamlにデータフロー・構造図の修正を追記

# クライアントコンポーネント直import・直呼び出し調査結果

# 各ページごとに記載

# --- サーバー→クライアントimport・default参照の厳密調査 ---

- app/layout.tsx:
    result: NavBarWrapper経由でクライアント呼び出し、直import・default参照なし
- app/providers.tsx:
    result: 'use client'明記、問題なし
- app/not-found.tsx:
    result: 問題なし
- app/(dashboard)/layout.tsx:
    result: 'use client'明記、問題なし
- app/(dashboard)/activity/page.tsx:
    result: 'use client'明記、問題なし
- app/(dashboard)/admin/layout.tsx:
    result: サーバーコンポーネント、クライアントimportなし
- app/(dashboard)/admin/page.tsx:
    result: サーバーコンポーネント、クライアントimportなし
- app/(dashboard)/admin/statistics/page.tsx:
    result: サーバーコンポーネント、クライアントimportなし
- app/(dashboard)/admin/users/page.tsx:
    result: サーバーコンポーネント、クライアントimportなし
- app/(dashboard)/admin/logs/page.tsx:
    result: サーバーコンポーネント、クライアントimportなし
- app/(dashboard)/history/page.tsx:
    result: 'use client'明記、問題なし
- app/(dashboard)/history/[id]/page.tsx:
    result: 'use client'明記、問題なし
- app/(dashboard)/translate/page.tsx:
    result: 'use client'明記、問題なし
- app/(dashboard)/translate/components/PreviewSection.tsx:
    result: 'use client'明記、問題なし
- app/(dashboard)/translate/components/FileUpload.tsx:
    result: 'use client'明記、問題なし
- app/(dashboard)/translate/components/Translation.tsx:
    result: 'use client'明記、問題なし
- app/(dashboard)/translate/translate-client.tsx:
    result: 'use client'明記、問題なし
- app/(dashboard)/integrations/page.tsx:
    result: 'use client'明記、問題なし
- app/(dashboard)/profile/page.tsx:
    result: 'use client'明記、問題なし
- app/(dashboard)/settings/page.tsx:
    result: 'use client'明記、問題なし
- app/(dashboard)/settings/subscription/page.tsx:
    result: サーバーコンポーネント、クライアントimportなし

# 各ページごとに記載

- app/layout.tsx:
    result: NavBarWrapper経由で呼び出し、直import・直呼び出しなし
    default_export: あり（RootLayout, サーバーコンポーネント、クライアントコンポーネントのdefault参照なし）
- app/providers.tsx:
    result: 問題なし（use client明記、ThemeProvider等はクライアントコンポーネントとして正しく利用）
    default_export: なし（export functionのみ、問題なし）
- app/not-found.tsx:
    result: 問題なし
    default_export: あり（NotFound, サーバーコンポーネント、クライアントコンポーネントのdefault参照なし）
- app/(dashboard)/layout.tsx:
    result: 'use client'明記、問題なし
    default_export: あり（DashboardLayout, 'use client'明記、問題なし）
- app/(dashboard)/history/page.tsx:
    result: 'use client'明記、問題なし
    default_export: あり（HistoryPage, 'use client'明記、問題なし）
- app/(dashboard)/history/[id]/page.tsx:
    result: 'use client'明記、問題なし
    default_export: あり（HistoryDetailPage, 'use client'明記、問題なし）
- app/(dashboard)/translate/page.tsx:
    result: 'use client'明記、問題なし
    default_export: あり（TranslatePage, 'use client'明記、問題なし）
- app/(dashboard)/translate/components/PreviewSection.tsx:
    result: 'use client'明記、問題なし
    default_export: なし（export functionのみ、問題なし）
- app/(dashboard)/translate/components/FileUpload.tsx:
    result: 'use client'明記、問題なし
    default_export: なし（export functionのみ、問題なし）
- app/(dashboard)/translate/components/Translation.tsx:
    result: 'use client'明記、問題なし
    default_export: なし（export functionのみ、問題なし）
- app/(dashboard)/translate/translate-client.tsx:
    result: 'use client'明記、問題なし
    default_export: なし（export functionのみ、問題なし）
- app/(dashboard)/admin/layout.tsx:
    result: サーバーコンポーネント、クライアントコンポーネントの直import・直呼び出しなし
    default_export: あり（AdminLayout, サーバーコンポーネント、クライアントコンポーネントのdefault参照なし）
- app/(dashboard)/admin/page.tsx:
    result: サーバーコンポーネント、クライアントコンポーネントの直import・直呼び出しなし
    default_export: あり（AdminDashboard, サーバーコンポーネント、クライアントコンポーネントのdefault参照なし）
- app/(dashboard)/admin/logs/page.tsx:
    result: サーバーコンポーネント、クライアントコンポーネントの直import・直呼び出しなし
    default_export: あり（AdminLogsPage, サーバーコンポーネント、クライアントコンポーネントのdefault参照なし）
- app/(dashboard)/admin/statistics/page.tsx:
    result: サーバーコンポーネント、クライアントコンポーネントの直import・直呼び出しなし
    default_export: あり（StatisticsPage, サーバーコンポーネント、クライアントコンポーネントのdefault参照なし）
- app/(dashboard)/admin/users/page.tsx:
    result: サーバーコンポーネント、クライアントコンポーネントの直import・直呼び出しなし
    default_export: あり（AdminUsersPage, サーバーコンポーネント、クライアントコンポーネントのdefault参照なし）
- app/(dashboard)/integrations/page.tsx:
    result: サーバーコンポーネント、クライアントコンポーネントの直import・直呼び出しなし
    default_export: あり（IntegrationsPage, サーバーコンポーネント、クライアントコンポーネントのdefault参照なし）
- app/(dashboard)/profile/page.tsx:
    result: 'use client'明記、問題なし
    default_export: あり（ProfilePage, 'use client'明記、問題なし）
- app/(dashboard)/settings/page.tsx:
    result: 'use client'明記、問題なし
    default_export: あり（SettingsPage, 'use client'明記、問題なし）
- app/(dashboard)/settings/subscription/page.tsx:
    result: サーバーコンポーネント、クライアントコンポーネントの直import・直呼び出しなし
    default_export: あり（SubscriptionPage, サーバーコンポーネント、クライアントコンポーネントのdefault参照なし）
- app/(dashboard)/activity/page.tsx:
    result: 'use client'明記、問題なし
    default_export: あり（ActivityPage, 'use client'明記、問題なし）
- app/(dashboard)/checkout/page.tsx:
    result: サーバーコンポーネント、クライアントコンポーネントの直import・直呼び出しなし
    default_export: あり（CheckoutPage, サーバーコンポーネント、クライアントコンポーネントのdefault参照なし）
- app/(marketing)/layout.tsx:
    result: サーバーコンポーネント、クライアントコンポーネントの直import・直呼び出しなし
    default_export: あり（MarketingLayout, サーバーコンポーネント、クライアントコンポーネントのdefault参照なし）
- app/(marketing)/page.tsx:
    result: サーバーコンポーネント、クライアントコンポーネントの直import・直呼び出しなし
    default_export: あり（HomePage, サーバーコンポーネント、クライアントコンポーネントのdefault参照なし）
- app/(marketing)/pricing/page.tsx:
    result: サーバーコンポーネント、クライアントコンポーネントの直import・直呼び出しなし
    default_export: あり（PricingPage, サーバーコンポーネント、クライアントコンポーネントのdefault参照なし）
- app/(auth)/reset-password/page.tsx:
    result: 'use client'明記、問題なし
    default_export: あり（ResetPasswordPage, 'use client'明記、問題なし）
- app/(auth)/reset-password/confirm/page.tsx:
    result: 'use client'明記、問題なし
    default_export: あり（ResetPasswordConfirmPage, 'use client'明記、問題なし）
- app/(auth)/signin/page.tsx:
    result: 'use client'明記、問題なし
    default_export: あり（SignInPage, 'use client'明記、問題なし）
- app/(auth)/signup/page.tsx:
    result: 'use client'明記、問題なし
    default_export: あり（SignUpPage, 'use client'明記、問題なし）

# --- 全ファイルimport情報（2024-06-XX時点） ---

# app/(dashboard)/admin/page.tsx
imports:
  - { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
  - { prisma } from '@/lib/prisma'
  - { UserRole } from '@prisma/client'
  - Link from 'next/link'
  - { redirect } from 'next/navigation'
  - { getServerSession } from 'next-auth'
  - { authOptions } from '@/lib/auth'

# app/(dashboard)/admin/logs/page.tsx
imports:
  - { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
  - { prisma } from '@/lib/prisma'
  - { UserRole } from '@prisma/client'
  - Link from 'next/link'
  - { redirect } from 'next/navigation'
  - { getServerSession } from 'next-auth'
  - { authOptions } from '@/lib/auth'

# app/(dashboard)/admin/statistics/page.tsx
imports:
  - { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
  - { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
  - { prisma } from '@/lib/prisma'
  - { UserRole } from '@prisma/client'
  - Link from 'next/link'
  - { redirect } from 'next/navigation'
  - { getServerSession } from 'next-auth'
  - { authOptions } from '@/lib/auth'

# app/(dashboard)/admin/users/page.tsx
imports:
  - { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
  - { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table'
  - { prisma } from '@/lib/prisma'
  - { UserRole } from '@prisma/client'
  - Link from 'next/link'
  - { redirect } from 'next/navigation'
  - { getServerSession } from 'next-auth'
  - { authOptions } from '@/lib/auth'

# --- 今回の不具合に関する情報 ---

- admin配下の各ページ（page.tsx, logs/page.tsx, statistics/page.tsx, users/page.tsx）で、
  サーバーコンポーネントからクライアントコンポーネントのdefault参照やPromise的参照が発生している場合、
  Next.jsのビルド時に「Cannot access default.then on the server」「n._ is not a function」等のエラーが発生。
- すべてのimportはnamed importで統一されており、default importは存在しない。
- UIコンポーネント（card, table, tabs等）はすべてnamed exportのみで、default exportは存在しない。
- それでもエラーが発生する場合、import先のファイルが内部でdefault exportやクライアントモジュールのPromise的参照を返していないか、
  もしくはNext.jsのバージョンやビルドキャッシュの問題も考慮する必要がある。

# --- 原因まとめ ---
- サーバー→クライアントのimport境界は原則守られているが、
  Next.jsのバンドル・ビルド時に何らかの形でdefault参照やPromise的参照が混入している可能性。
- 主要なUIコンポーネント・import方法自体には現状問題は見当たらない。
- さらなる原因特定には、importチェーンの全てのファイル・export方法の再確認、
  およびNext.jsのバージョン・キャッシュクリア・node_modules再インストール等も推奨。

# --- 現在のビルドエラー・調査状況まとめ（2024-06-XX） ---

## 現在のエラー内容
- ビルド時に以下のエラーが発生：
  - Error: Cannot access default.then on the server. You cannot dot into a client module from a server component. You can only pass the imported name through.
  - TypeError: n._ is not a function
- 発生ページ例：
  - /admin/statistics
  - /admin/logs
  - /admin
  - /admin/users
- いずれも「サーバーコンポーネントからクライアントコンポーネントのdefault参照やPromise的参照」が疑われるNext.js特有のエラー

## 推定原因
- サーバーコンポーネントからクライアントコンポーネントのdefault参照やPromise的参照がどこかで発生している可能性
- ただし、importはすべてnamed importで統一されており、UIコンポーネントもnamed exportのみでdefault exportは存在しない
- importチェーンのどこかでdefault exportやPromise的参照が混入している、またはNext.jsのバージョン・ビルドキャッシュの問題も考えられる

## 現状までの調査・確認結果
- app/(dashboard)/admin配下の全ページ、components/ui配下の全UIコンポーネントについて、
  - import/export方法はすべてnamedで統一されていることを確認
  - default importやdefault exportは存在しない
  - 'use client'の有無も適切に分かれている
- PrismaやDB関連のimportも問題なし
- .then等のPromise的参照もクライアントコンポーネント内のみで利用されている
- それでもビルド時に上記エラーが発生するため、
  - importチェーンのさらに深い部分（lib/hooks/utils等）や、
  - Next.jsのバージョン・キャッシュ・node_modulesの状態も含めて再調査が必要

# --- ここまでの調査・修正履歴は本ファイルに記載 ---