# PPTXTranslator 移行計画

# デザイン統一・ダーク/ライトテーマ導入 修正計画

- step: 1
  title: Tailwind設定・グローバルCSSの統一
  items:
    - Tailwindの設定ファイル（tailwind.config.cjs/ts）をdesignReferrenceの内容で統一
    - グローバルCSS（globals.css）をdesignReferrenceの内容で統一
    - カスタム変数・アニメーション・ユーティリティクラスも反映
    - 既存のカスタムCSSやクラス名の競合を整理

- step: 2
  title: テーマProvider/トグルの導入
  items:
    - ThemeProvider, ThemeToggle, 必要に応じてtheme-mode-toggleをdesignReferrenceから移植
    - _app.tsxやlayout.tsxで全体をThemeProviderでラップ
    - next-themesの設定（attribute="class"/defaultTheme/system）を反映

- step: 3
  title: 共通レイアウト・ナビゲーションの統一
  items:
    - ヘッダー・ナビゲーション・フッター等の共通レイアウトをdesignReferrenceのものに統一
    - 各ページで同じナビ・テーマトグルUIを利用
    - レスポンシブ対応・アクセシビリティも考慮

- step: 4
  title: 各ページのデザイン反映
  items:
    - page: / (app/(marketing)/page.tsx)
      status: 完了
    - page: /pricing (app/(marketing)/pricing/page.tsx)
      status: 完了
    - page: /translate (app/(dashboard)/translate/page.tsx)
      status: 完了
    - page: /profile (app/(dashboard)/profile/page.tsx)
      status: 完了
    - page: /dashboard/history (app/(dashboard)/history/page.tsx)
      status: 完了
    - page: /dashboard/admin (app/(dashboard)/admin/page.tsx)
      status: 完了
    - page: /dashboard/settings (app/(dashboard)/settings/page.tsx)
      status: 完了
    - page: /dashboard/activity (app/(dashboard)/activity/page.tsx)
      status: 完了
    - page: /dashboard/checkout (app/(dashboard)/checkout/page.tsx)
      status: 完了

- step: 5
  title: UIコンポーネントの移植・統合
  items:
    - designReferrence/components/ui/配下のUIコンポーネントを現行アプリに移植・統合
    - 既存のUIコンポーネントとの重複・競合を整理
    - 共通化できる部分は共通化

- step: 6
  title: アニメーション・ユーティリティの反映
  items:
    - カスタムアニメーション・ユーティリティクラスをglobals.cssごと反映
    - ページ・コンポーネントで必要な箇所に適用

- step: 7
  title: 動作検証・不具合修正
  items:
    - テーマ切り替え、各ページの表示、レスポンシブ、アクセシビリティ等を検証
    - サードパーティUIや画像のダーク対応も確認
    - 不具合があれば修正・再検証

- step: 8
  title: スライド上の原文位置・サイズ情報の可視化機能追加
  items:
    - サーバー側（python_backend/scripts/pptx_parser.py）で各テキストの座標・サイズ（x, y, width, height）を抽出し、APIレスポンスに含める
    - API（app/api/pptx/parse/など）のレスポンス仕様を変更し、各テキストにposition情報を付与
    - データベース（prisma/schema.prisma）のText.positionフィールド仕様を「座標・サイズ情報を含むJson」として明記
    - フロントエンド（app/(dashboard)/translate/types.ts, PreviewSection.tsx等）でposition情報を受け取り、スライド画像上に枠やハイライトを重ねて表示
    - Docs/api-reference.mdにAPIレスポンス例（position情報付き）を追記
    - Docs/database.mdにText.positionの仕様を追記
    - Docs/frontend.mdにプレビュー表示の仕様・データフローを追記
    - Docs/backend.mdにPPTXパース処理・API設計の仕様変更を追記
    - Docs/structure.yamlにデータフロー・構造図の修正を追記

# クライアントコンポーネント直import・直呼び出し調査結果

# 各ページごとに記載

# --- サーバー→クライアントimport・default参照の厳密調査 ---

- app/layout.tsx:
    result: NavBarWrapper経由でクライアント呼び出し、直import・default参照なし
- app/providers.tsx:
    result: 'use client'明記、問題なし
- app/not-found.tsx:
    result: 問題なし
- app/(dashboard)/layout.tsx:
    result: 'use client'明記、問題なし
- app/(dashboard)/activity/page.tsx:
    result: 'use client'明記、問題なし
- app/(dashboard)/admin/layout.tsx:
    result: サーバーコンポーネント、クライアントimportなし
- app/(dashboard)/admin/page.tsx:
    result: サーバーコンポーネント、クライアントimportなし
- app/(dashboard)/admin/statistics/page.tsx:
    result: サーバーコンポーネント、クライアントimportなし
- app/(dashboard)/admin/users/page.tsx:
    result: サーバーコンポーネント、クライアントimportなし
- app/(dashboard)/admin/logs/page.tsx:
    result: サーバーコンポーネント、クライアントimportなし
- app/(dashboard)/history/page.tsx:
    result: 'use client'明記、問題なし
- app/(dashboard)/history/[id]/page.tsx:
    result: 'use client'明記、問題なし
- app/(dashboard)/translate/page.tsx:
    result: 'use client'明記、問題なし
- app/(dashboard)/translate/components/PreviewSection.tsx:
    result: 'use client'明記、問題なし
- app/(dashboard)/translate/components/FileUpload.tsx:
    result: 'use client'明記、問題なし
- app/(dashboard)/translate/components/Translation.tsx:
    result: 'use client'明記、問題なし
- app/(dashboard)/translate/translate-client.tsx:
    result: 'use client'明記、問題なし
- app/(dashboard)/integrations/page.tsx:
    result: 'use client'明記、問題なし
- app/(dashboard)/profile/page.tsx:
    result: 'use client'明記、問題なし
- app/(dashboard)/settings/page.tsx:
    result: 'use client'明記、問題なし
- app/(dashboard)/settings/subscription/page.tsx:
    result: サーバーコンポーネント、クライアントimportなし

# 各ページごとに記載

- app/layout.tsx:
    result: NavBarWrapper経由で呼び出し、直import・直呼び出しなし
    default_export: あり（RootLayout, サーバーコンポーネント、クライアントコンポーネントのdefault参照なし）
- app/providers.tsx:
    result: 問題なし（use client明記、ThemeProvider等はクライアントコンポーネントとして正しく利用）
    default_export: なし（export functionのみ、問題なし）
- app/not-found.tsx:
    result: 問題なし
    default_export: あり（NotFound, サーバーコンポーネント、クライアントコンポーネントのdefault参照なし）
- app/(dashboard)/layout.tsx:
    result: 'use client'明記、問題なし
    default_export: あり（DashboardLayout, 'use client'明記、問題なし）
- app/(dashboard)/history/page.tsx:
    result: 'use client'明記、問題なし
    default_export: あり（HistoryPage, 'use client'明記、問題なし）
- app/(dashboard)/history/[id]/page.tsx:
    result: 'use client'明記、問題なし
    default_export: あり（HistoryDetailPage, 'use client'明記、問題なし）
- app/(dashboard)/translate/page.tsx:
    result: 'use client'明記、問題なし
    default_export: あり（TranslatePage, 'use client'明記、問題なし）
- app/(dashboard)/translate/components/PreviewSection.tsx:
    result: 'use client'明記、問題なし
    default_export: なし（export functionのみ、問題なし）
- app/(dashboard)/translate/components/FileUpload.tsx:
    result: 'use client'明記、問題なし
    default_export: なし（export functionのみ、問題なし）
- app/(dashboard)/translate/components/Translation.tsx:
    result: 'use client'明記、問題なし
    default_export: なし（export functionのみ、問題なし）
- app/(dashboard)/translate/translate-client.tsx:
    result: 'use client'明記、問題なし
    default_export: なし（export functionのみ、問題なし）
- app/(dashboard)/admin/layout.tsx:
    result: サーバーコンポーネント、クライアントコンポーネントの直import・直呼び出しなし
    default_export: あり（AdminLayout, サーバーコンポーネント、クライアントコンポーネントのdefault参照なし）
- app/(dashboard)/admin/page.tsx:
    result: サーバーコンポーネント、クライアントコンポーネントの直import・直呼び出しなし
    default_export: あり（AdminDashboard, サーバーコンポーネント、クライアントコンポーネントのdefault参照なし）
- app/(dashboard)/admin/logs/page.tsx:
    result: サーバーコンポーネント、クライアントコンポーネントの直import・直呼び出しなし
    default_export: あり（AdminLogsPage, サーバーコンポーネント、クライアントコンポーネントのdefault参照なし）
- app/(dashboard)/admin/statistics/page.tsx:
    result: サーバーコンポーネント、クライアントコンポーネントの直import・直呼び出しなし
    default_export: あり（StatisticsPage, サーバーコンポーネント、クライアントコンポーネントのdefault参照なし）
- app/(dashboard)/admin/users/page.tsx:
    result: サーバーコンポーネント、クライアントコンポーネントの直import・直呼び出しなし
    default_export: あり（AdminUsersPage, サーバーコンポーネント、クライアントコンポーネントのdefault参照なし）
- app/(dashboard)/integrations/page.tsx:
    result: サーバーコンポーネント、クライアントコンポーネントの直import・直呼び出しなし
    default_export: あり（IntegrationsPage, サーバーコンポーネント、クライアントコンポーネントのdefault参照なし）
- app/(dashboard)/profile/page.tsx:
    result: 'use client'明記、問題なし
    default_export: あり（ProfilePage, 'use client'明記、問題なし）
- app/(dashboard)/settings/page.tsx:
    result: 'use client'明記、問題なし
    default_export: あり（SettingsPage, 'use client'明記、問題なし）
- app/(dashboard)/settings/subscription/page.tsx:
    result: サーバーコンポーネント、クライアントコンポーネントの直import・直呼び出しなし
    default_export: あり（SubscriptionPage, サーバーコンポーネント、クライアントコンポーネントのdefault参照なし）
- app/(dashboard)/activity/page.tsx:
    result: 'use client'明記、問題なし
    default_export: あり（ActivityPage, 'use client'明記、問題なし）
- app/(dashboard)/checkout/page.tsx:
    result: サーバーコンポーネント、クライアントコンポーネントの直import・直呼び出しなし
    default_export: あり（CheckoutPage, サーバーコンポーネント、クライアントコンポーネントのdefault参照なし）
- app/(marketing)/layout.tsx:
    result: サーバーコンポーネント、クライアントコンポーネントの直import・直呼び出しなし
    default_export: あり（MarketingLayout, サーバーコンポーネント、クライアントコンポーネントのdefault参照なし）
- app/(marketing)/page.tsx:
    result: サーバーコンポーネント、クライアントコンポーネントの直import・直呼び出しなし
    default_export: あり（HomePage, サーバーコンポーネント、クライアントコンポーネントのdefault参照なし）
- app/(marketing)/pricing/page.tsx:
    result: サーバーコンポーネント、クライアントコンポーネントの直import・直呼び出しなし
    default_export: あり（PricingPage, サーバーコンポーネント、クライアントコンポーネントのdefault参照なし）
- app/(auth)/reset-password/page.tsx:
    result: 'use client'明記、問題なし
    default_export: あり（ResetPasswordPage, 'use client'明記、問題なし）
- app/(auth)/reset-password/confirm/page.tsx:
    result: 'use client'明記、問題なし
    default_export: あり（ResetPasswordConfirmPage, 'use client'明記、問題なし）
- app/(auth)/signin/page.tsx:
    result: 'use client'明記、問題なし
    default_export: あり（SignInPage, 'use client'明記、問題なし）
- app/(auth)/signup/page.tsx:
    result: 'use client'明記、問題なし
    default_export: あり（SignUpPage, 'use client'明記、問題なし）

# --- 全ファイルimport情報（2024-06-XX時点） ---

# app/(dashboard)/admin/page.tsx
imports:
  - { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
  - { prisma } from '@/lib/prisma'
  - { UserRole } from '@prisma/client'
  - Link from 'next/link'
  - { redirect } from 'next/navigation'
  - { getServerSession } from 'next-auth'
  - { authOptions } from '@/lib/auth'

# app/(dashboard)/admin/logs/page.tsx
imports:
  - { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
  - { prisma } from '@/lib/prisma'
  - { UserRole } from '@prisma/client'
  - Link from 'next/link'
  - { redirect } from 'next/navigation'
  - { getServerSession } from 'next-auth'
  - { authOptions } from '@/lib/auth'

# app/(dashboard)/admin/statistics/page.tsx
imports:
  - { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
  - { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
  - { prisma } from '@/lib/prisma'
  - { UserRole } from '@prisma/client'
  - Link from 'next/link'
  - { redirect } from 'next/navigation'
  - { getServerSession } from 'next-auth'
  - { authOptions } from '@/lib/auth'

# app/(dashboard)/admin/users/page.tsx
imports:
  - { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
  - { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table'
  - { prisma } from '@/lib/prisma'
  - { UserRole } from '@prisma/client'
  - Link from 'next/link'
  - { redirect } from 'next/navigation'
  - { getServerSession } from 'next-auth'
  - { authOptions } from '@/lib/auth'

# --- 今回の不具合に関する情報 ---

- admin配下の各ページ（page.tsx, logs/page.tsx, statistics/page.tsx, users/page.tsx）で、
  サーバーコンポーネントからクライアントコンポーネントのdefault参照やPromise的参照が発生している場合、
  Next.jsのビルド時に「Cannot access default.then on the server」「n._ is not a function」等のエラーが発生。
- すべてのimportはnamed importで統一されており、default importは存在しない。
- UIコンポーネント（card, table, tabs等）はすべてnamed exportのみで、default exportは存在しない。
- それでもエラーが発生する場合、import先のファイルが内部でdefault exportやクライアントモジュールのPromise的参照を返していないか、
  もしくはNext.jsのバージョンやビルドキャッシュの問題も考慮する必要がある。

# --- 原因まとめ ---
- サーバー→クライアントのimport境界は原則守られているが、
  Next.jsのバンドル・ビルド時に何らかの形でdefault参照やPromise的参照が混入している可能性。
- 主要なUIコンポーネント・import方法自体には現状問題は見当たらない。
- さらなる原因特定には、importチェーンの全てのファイル・export方法の再確認、
  およびNext.jsのバージョン・キャッシュクリア・node_modules再インストール等も推奨。

# --- 現在のビルドエラー・調査状況まとめ（2024-06-XX） ---

## 現在のエラー内容
- ビルド時に以下のエラーが発生：
  - Error: Cannot access default.then on the server. You cannot dot into a client module from a server component. You can only pass the imported name through.
  - TypeError: n._ is not a function
- 発生ページ例：
  - /admin/statistics
  - /admin/logs
  - /admin
  - /admin/users
- いずれも「サーバーコンポーネントからクライアントコンポーネントのdefault参照やPromise的参照」が疑われるNext.js特有のエラー

## 推定原因
- サーバーコンポーネントからクライアントコンポーネントのdefault参照やPromise的参照がどこかで発生している可能性
- ただし、importはすべてnamed importで統一されており、UIコンポーネントもnamed exportのみでdefault exportは存在しない
- importチェーンのどこかでdefault exportやPromise的参照が混入している、またはNext.jsのバージョン・ビルドキャッシュの問題も考えられる

## 現状までの調査・確認結果
- app/(dashboard)/admin配下の全ページ、components/ui配下の全UIコンポーネントについて、
  - import/export方法はすべてnamedで統一されていることを確認
  - default importやdefault exportは存在しない
  - 'use client'の有無も適切に分かれている
- PrismaやDB関連のimportも問題なし
- .then等のPromise的参照もクライアントコンポーネント内のみで利用されている
- それでもビルド時に上記エラーが発生するため、
  - importチェーンのさらに深い部分（lib/hooks/utils等）や、
  - Next.jsのバージョン・キャッシュ・node_modulesの状態も含めて再調査が必要

# --- ここまでの調査・修正履歴は本ファイルに記載 ---

<<<<<<< HEAD
# テストカバレッジ向上計画

## 概要
本計画は、`feature/test-coverage-improvement` ブランチにおけるテストカバレッジ向上作業を推進するためのものです。
APIエンドポイントのテスト、翻訳機能コアモジュールのテストを中心にカバレッジを高め、品質向上を目指します。

## 推進の順番

1.  **APIエンドポイントテストの拡充・新規作成**
    *   優先度（高）：認証・認可関連 (`/api/auth/*`)
    *   優先度（中）：ユーザー関連 (`/api/user/*`, `/api/profile/*`)
    *   優先度（中）：履歴関連 (`/api/history/*`)
    *   優先度（低）：その他未テストまたはカバレッジの低いエンドポイント (例: `/api/upload/*`, `/api/download/*`, `/api/pptx/*`, `/api/integrations/*` など)
2.  **翻訳機能コアモジュールのテスト**
    *   主要な翻訳処理ロジックの単体テスト
    *   外部API連携部分のモックテスト
    *   エラーハンドリング、エッジケースのテスト
3.  **管理機能関連APIエンドポイントのテスト**
    *   `/api/admin/*` 関連のエンドポイントテスト
4.  **全体のカバレッジ確認と不足分の補強**
    *   カバレッジレポートを元に、テストが手薄な箇所を特定し追加テストを実施

## 注意すべき内容

*   **テストの独立性**: 各テストケースは他のテストケースや実行順序に依存しないように設計します。
*   **再現性**: テストは環境や実行タイミングに左右されず、常に同じ結果が得られるようにします。
*   **網羅性**: 正常系のテストだけでなく、異常系、境界値、エッジケースも十分に考慮します。
*   **可読性と保守性**: テストコードは理解しやすく、将来的な変更や追加が容易なように記述します。テストケースの意図が明確に伝わるようにします。
*   **実行速度**: テストスイート全体の実行時間が過度に長くならないよう、効率的なテストを心がけます。特にI/O処理や外部API呼び出しを伴うテストは慎重に設計します。
*   **モック/スタブの適切な活用**: データベースアクセス、外部API呼び出し、ファイルシステム操作など、外部依存性は適切にモックまたはスタブ化し、テストの分離性と速度を確保します。
*   **CI/CDとの連携**: 作成したテストはCI/CDパイプラインで自動実行されるように設定し、常にコードの品質を担保できるようにします。
*   **カバレッジ測定と目標設定**: 定期的にテストカバレッジを測定し、目標値（例: クリティカルなモジュールは90%以上、全体で80%以上など）を設定し、進捗を追跡します。
*   **実データに近いテストデータ**:可能な範囲で本番環境のデータパターンを模倣したテストデータを使用し、現実的なシナリオでの検証を行います。(個人情報や機密情報を含まないように注意)

## 実装計画（例）

### フェーズ1: APIエンドポイントテスト（主要機能）
*   **期間**: [開始日] - [終了日]
*   **担当**: [担当者名/チーム]
*   **タスク**:
    *   [ ] `auth`関連APIのテストケース設計と実装
    *   [ ] `user`, `profile`関連APIのテストケース設計と実装
    *   [ ] `history`関連APIのテストケース設計と実装
    *   [ ] 既存テストの見直しとリファクタリング

### フェーズ2: 翻訳機能コアモジュールのテスト
*   **期間**: [開始日] - [終了日]
*   **担当**: [担当者名/チーム]
*   **タスク**:
    *   [ ] 翻訳処理ロジックの単体テストケース設計と実装 (正常系・異常系)
    *   [ ] `lib/anthropic`など外部連携部分のモックテスト実装
    *   [ ] パフォーマンスに関する基本的なテスト

### フェーズ3: APIエンドポイントテスト（その他・管理機能）
*   **期間**: [開始日] - [終了日]
*   **担当**: [担当者名/チーム]
*   **タスク**:
    *   [ ] `upload`, `download`, `pptx` 関連APIのテストケース設計と実装
    *   [ ] `admin` 関連APIのテストケース設計と実装
    *   [ ] `integrations` 関連APIのテストケース設計と実装

### フェーズ4: カバレッジ向上と全体調整
*   **期間**: [開始日] - [終了日]
*   **担当**: [担当者名/チーム]
*   **タスク**:
    *   [ ] テストカバレッジレポートの分析と未テスト箇所の特定
    *   [ ] 特定された箇所への追加テスト実装
    *   [ ] テストスイート全体の最適化とドキュメント整備

## 使用ツール (想定)
*   **テストフレームワーク**: Jest (フロントエンド/API), Pytest (Pythonバックエンド, 必要に応じて)
*   **カバレッジツール**: Jest標準機能, coverage.py (Python)
*   **モックライブラリ**: Jest Mocks, unittest.mock (Python)

## その他
*   ブランチ戦略: `feature/test-coverage-improvement` から機能ごと、または進捗の区切りが良い単位でフィーチャーブランチを作成し、プルリクエストベースでマージしていくことを推奨します。
*   進捗管理: 定期的なミーティングやタスクボード（Jira, Trelloなど）での進捗共有を行います。
=======
name: CI/CD統合実装計画

概要:
  目的: GitHub Actionsを使用したテスト自動化とCI/CD統合の強化
  ブランチ: feature/test-coverage-improvement

実装順序:
  1. テスト環境の整備:
    - Jest設定の最適化:
      - jest.config.jsの更新
      - テストタイムアウト設定の調整
      - テストマッチャーの追加
    - Cypressテスト環境の強化:
      - cypress.config.tsの更新
      - カスタムコマンドの追加
      - テストユーティリティの拡充
    
  2. テストカバレッジ計測の導入:
    - Jestカバレッジ設定:
      - collectCoverageFromの設定
      - カバレッジしきい値の設定
      - レポート出力形式の指定
    - Cypressカバレッジ設定:
      - @cypress/code-coverageの導入
      - nyc設定の追加
      - マージされたカバレッジレポートの生成

  3. テストレポート生成の強化:
    - Jest HTML Reporter設定:
      - レポートテンプレートのカスタマイズ
      - エラー詳細の表示強化
      - トレンド分析の追加
    - Cypress Mochawesome Reporter設定:
      - レポートスタイルのカスタマイズ
      - スクリーンショット埋め込み
      - ビデオ記録との連携

  4. テスト失敗時の分析機能:
    - スクリーンショット管理:
      - 保存ディレクトリ構造の整理
      - 命名規則の統一
      - 自動クリーンアップの設定
    - エラーログ分析:
      - エラーパターンの分類
      - 共通エラーの検出
      - 解決策の提案機能

  5. テスト実行時間の最適化:
    - テストの並列実行:
      - Jest worker数の最適化
      - Cypress並列実行の設定
      - テストの分散実行
    - キャッシュ戦略:
      - GitHub Actionsキャッシュの最適化
      - 依存関係のキャッシュ
      - ビルドキャッシュの活用

確認すべきドキュメント:
  - docs/test-strategy.md: テスト戦略の全体像
  - docs/ci-cd-pipeline.md: CI/CDパイプラインの設計
  - docs/test-coverage.md: カバレッジ要件と計測方法
  - docs/error-handling.md: エラー処理とログ管理
  - docs/performance.md: パフォーマンス最適化ガイドライン

注意事項:
  1. テスト環境:
    - Node.jsバージョンの統一（v20.x）
    - 環境変数の適切な管理
    - テストデータの分離

  2. セキュリティ:
    - シークレット情報の適切な管理
    - 環境変数の暗号化
    - アクセス権限の制御

  3. パフォーマンス:
    - テスト実行時間の監視
    - リソース使用量の最適化
    - キャッシュ戦略の効果測定

  4. メンテナンス:
    - コードの可読性維持
    - ドキュメントの更新
    - 定期的な設定の見直し

依存関係の確認:
  - package.json: テスト関連パッケージの更新
  - requirements.txt: Pythonテスト依存関係
  - docker-compose.yml: テスト用コンテナ設定

成功基準:
  1. テストカバレッジ:
    - 全体カバレッジ80%以上
    - 重要モジュール90%以上
    - E2Eテストの主要フロー網羅

  2. 実行時間:
    - ユニットテスト: 5分以内
    - E2Eテスト: 15分以内
    - 全体のCI/CD: 30分以内

  3. 安定性:
    - フェイルテスト率1%未満
    - 環境依存エラーの排除
    - 再現性の確保
>>>>>>> c58ec68 (実装途中)
