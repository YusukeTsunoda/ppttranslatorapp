# MVPに必要な実装項目（実装順序と詳細）
mvp_required_implementation:
  title: MVPに必要な実装項目（実装順序と詳細）
  description: 優先度順に実装すべき項目と、各項目の詳細な実装ステップ
  items:
    - description: "- [ ] 6. バッチ翻訳機能の実装"
      priority: high
      phases:
        - phase_name: "設計フェーズ"
          tasks:
            - description: "- [ ] バッチ処理アーキテクチャの設計"
            - description: "- [ ] ジョブキュー管理システムの選定"
            - description: "- [ ] フロントエンドUIの設計"
        - phase_name: "実装フェーズ"
          tasks:
            - description: "- [ ] 複数ファイルアップロード機能の実装"
            - description: "- [ ] バックグラウンド処理システムの実装"
            - description: "- [ ] 進捗状況の管理と表示機能の実装"
            - description: "- [ ] ジョブステータス監視システムの構築"
        - phase_name: "テストフェーズ"
          tasks:
            - description: "- [ ] 大量ファイルでの負荷テスト"
            - description: "- [ ] 長時間実行のエラー耐性テスト"
            - description: "- [ ] ユーザーインターフェース使用感テスト"
      subtasks:
        - description: "- [ ] 複数ファイルの一括アップロード"
        - description: "- [ ] バックグラウンド処理の実装"
        - description: "- [ ] 進捗状況の表示"

    - id: batch_translation
      description: "大量ファイルを非同期で翻訳するバッチ機能"
      priority: medium_high
      depends_on: [slide_api_refactor]
      phases:
        - phase_name: "設計"
          tasks:
            - "ジョブキュー (BullMQ) 構成図作成"
            - "失敗時リトライ・冪等設計"
            - "フロント UI ワイヤーフレーム作成"
        - phase_name: "実装"
          tasks:
            - "複数ファイルアップロード (TUS プロトコル)"
            - "バックエンドでジョブ生成 → 翻訳 → PPTX 書き戻し"
            - "進捗 SSE / WebSocket でリアルタイム表示"
        - phase_name: "負荷テスト"
          tasks:
            - "50 ファイル × 100 MB ケースでスループット測定"
            - "12 h 連続実行耐久テスト"
      acceptance_criteria:
        - "1 GB バッチを 30 min 以内に完了"
        - "失敗ジョブ自動リカバリ率 100%"

    - id: batch_translation_detailed
      description: "バッチ翻訳機能の詳細実装計画"
      priority: high
      depends_on: [batch_translation]
      implementation_steps:
        - step: "1. ファイルアップロードシステムの実装"
          tasks:
            - "TUSプロトコルを使用した大容量ファイルアップロードの実装"
            - "複数ファイル同時アップロードのUI実装"
            - "アップロード進捗状況のリアルタイム表示"
          considerations:
            - "ファイルサイズ制限の設定（ユーザープランに応じた制限）"
            - "ファイル形式の検証（PPTXのみ許可）"
            - "アップロード中断・再開機能の実装"
          error_prevention:
            - "ネットワーク切断時の自動再試行機能"
            - "重複ファイル検出と処理"
            - "ディスク容量不足時のエラーハンドリング"
        
        - step: "2. ジョブキューシステムの実装"
          tasks:
            - "BullMQを使用したジョブキューの構築"
            - "ジョブ優先度の設定（プレミアムユーザー優先など）"
            - "ジョブスケジューリングとリソース配分の最適化"
          considerations:
            - "Redis永続化設定によるジョブデータ保護"
            - "キューの監視とデッドレター処理"
            - "システム再起動時のジョブ復旧処理"
          error_prevention:
            - "ジョブタイムアウト設定と自動リトライ"
            - "ジョブ実行の冪等性確保"
            - "部分的な処理結果の保存と復元"
        
        - step: "3. 翻訳処理パイプラインの実装"
          tasks:
            - "ファイル単位の処理ワークフローの定義"
            - "PPTXパース → テキスト抽出 → 翻訳 → 書き戻しの処理フロー実装"
            - "翻訳APIとの連携強化（レート制限対応）"
          considerations:
            - "大量テキストの分割処理（APIの文字数制限対応）"
            - "翻訳結果の正規化処理（余分なテキスト除去）"
            - "スライド構造の保持と再構築"
          error_prevention:
            - "翻訳APIエラー時のフォールバック処理"
            - "部分翻訳結果の保存と再開機能"
            - "翻訳品質の自動検証（異常な短さ/長さの検出）"
        
        - step: "4. 進捗状況管理システムの実装"
          tasks:
            - "Server-Sent Events (SSE)を使用したリアルタイム進捗表示"
            - "ジョブステータス（待機中、処理中、完了、エラー）の管理"
            - "処理速度と残り時間の予測表示"
          considerations:
            - "接続切断時の再接続と状態同期"
            - "複数デバイスでの同期表示"
            - "長時間実行ジョブのハートビート監視"
          error_prevention:
            - "進捗更新の頻度制限（サーバー負荷軽減）"
            - "クライアント側での状態管理とサーバー同期"
            - "異常な進捗パターンの検出と通知"
        
        - step: "5. 結果配信システムの実装"
          tasks:
            - "処理完了ファイルのダウンロード機能実装"
            - "一括ダウンロードとZIP圧縮機能"
            - "メール通知システムの実装"
          considerations:
            - "大容量ファイルのストリーミングダウンロード"
            - "処理結果の一時保存期間設定"
            - "ダウンロードURLの安全な生成と有効期限設定"
          error_prevention:
            - "ダウンロード中断時の再開機能"
            - "ファイル破損チェックと自動修復"
            - "アクセス権限の厳格な検証"
      
      technical_considerations:
        - area: "ファイル構造"
          details:
            - "新しいファイルパス構造（/tmp/users/{userId}/{fileId}/slides）の一貫した使用"
            - "バッチ処理用の一時ディレクトリ構造設計"
            - "処理完了ファイルの保存場所と命名規則"
        
        - area: "エラー耐性"
          details:
            - "StreamingPPTXParserクラスの強化されたエラーハンドリングの活用"
            - "代替の一時ディレクトリ使用機能の実装"
            - "キャッシュからのフォールバック結果取得機能の活用"
        
        - area: "認証・セキュリティ"
          details:
            - "バッチ処理APIへのアクセス制御"
            - "ユーザー権限に基づく処理制限"
            - "APIリクエストへの認証情報の正しい付与（credentials: 'include'）"
        
        - area: "スケーラビリティ"
          details:
            - "水平スケーリング可能なワーカー設計"
            - "リソース使用量の監視と自動スケーリング"
            - "ユーザー間の公平なリソース配分"
        
        - area: "パフォーマンス最適化"
          details:
            - "メモリ使用量の最適化（ストリーミング処理の活用）"
            - "並列処理の最適化（CPUコア数に応じた調整）"
            - "I/O操作のバッファリングと最適化"
            - "Prismaモデルの参照方法の修正（batchJob→BatchJob, activityLog→ActivityLog等） #完了"
      
      testing_strategy:
        - test_type: "単体テスト"
          details:
            - "各コンポーネントの独立したテスト（アップロード、キュー、処理、通知）"
            - "エラーケースの網羅的テスト"
            - "境界値テスト（最大ファイルサイズ、最大同時処理数など）"
        
        - test_type: "統合テスト"
          details:
            - "エンドツーエンドのワークフローテスト"
            - "実際のPPTXファイルを使用した処理テスト"
            - "異なるネットワーク条件下でのテスト"
        
        - test_type: "負荷テスト"
          details:
            - "大量ファイル（50ファイル×100MB）での処理テスト"
            - "長時間実行（12時間連続）テスト"
            - "システムリソース（CPU、メモリ、ディスク）の監視"
        
        - test_type: "ユーザビリティテスト"
          details:
            - "UI/UXの使いやすさテスト"
            - "進捗表示の分かりやすさテスト"
            - "エラーメッセージの明確さテスト"
      
      rollout_strategy:
        - phase: "内部テスト"
          details:
            - "開発チーム内での機能テスト"
            - "バグ修正と安定化"
        
        - phase: "ベータテスト"
          details:
            - "限定ユーザーへの機能公開"
            - "フィードバック収集と改善"
        
        - phase: "段階的リリース"
          details:
            - "無料ユーザー向け制限付き機能提供"
            - "プレミアムユーザー向け完全機能提供"
            - "使用状況モニタリングと最適化"