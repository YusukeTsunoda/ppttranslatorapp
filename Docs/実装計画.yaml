# MVPに必要な実装項目（実装順序と詳細）
mvp_required_implementation:
  title: MVPに必要な実装項目（実装順序と詳細）
  description: 優先度順に実装すべき項目と、各項目の詳細な実装ステップ
  items:

    - description: "- [ ] 5. スライドAPIの改善"
      priority: high
      phases:
        - phase_name: "現状分析"
          tasks:
            - description: "- [x] 現在のAPIの問題点と制限の特定" #完了
            - description: "- [x] パフォーマンスボトルネックの検出" #完了
            - description: "- [x] 認証関連の問題調査" #完了
            - description: "- [x] ファイルパス構造の一貫性確認" #完了
        - phase_name: "APIリファクタリング"
          tasks:
            - description: "- [x] エンドポイント設計の見直し" #完了
            - description: "- [x] レスポンス形式の最適化" #完了
            - description: "- [x] エラーハンドリングの強化" #完了
            - description: "- [x] パス構造の統一（/api/slides/{fileId}/slides/{imageName}形式）" #完了
            - description: "- [x] 認証処理の改善（credentials: 'include'の追加）" #完了
            - description: "- [x] CORSヘッダーの適切な設定" #完了
            - description: "- [x] ドキュメント整備" #完了
        - phase_name: "ドキュメント整備"
          tasks:
            - description: "- [x] API仕様書の更新" #完了
            - description: "- [x] 使用例の追加" #完了
            - description: "- [x] 新旧パス形式の移行ガイド作成" #完了
            
    - id: slide_api_refactor
      description: "PPTX スライド操作 API のレスポンス改善"
      priority: medium_high
      depends_on: [test_automation]
      phases:
        - phase_name: "現状分析"
          tasks:
            - "エンドポイントごとの TPS・P95 レイテンシ計測" #完了
            - "エラーログの多いパスを特定" #完了
            - "認証関連の問題調査（セッション情報のログ出力）" #完了
            - "ファイルパス構造の一貫性確認" #完了
        - phase_name: "API リファクタリング"
          tasks:
            - "REST → RPC で重複コールを削減" #完了
            - "スキーマバリデーション (zod) 導入" #完了
            - "共通エラーフォーマット整備" #完了
            - "パス構造の統一（/api/slides/{fileId}/slides/{imageName}形式）" #完了
            - "後方互換性のためのリダイレクト実装" #完了
            - "認証処理の改善（credentials: 'include'の追加）" #完了
            - "CORSヘッダーの適切な設定（Access-Control-Allow-Credentials: true）" #完了
        - phase_name: "ドキュメント整備"
          tasks:
            - "OpenAPI 仕様自動生成" #完了
            - "コードサンプル追加" #完了
            - "新旧パス形式の移行ガイド作成" #完了
      acceptance_criteria:
        - "P95 レイテンシ 200 ms → 80 ms 以下"
        - "400/500 系エラー率 1/1000 req 未満"
        - "認証エラーの発生率 0.1% 未満"

# 実装手順と注意点
implementation_details:
  title: スライドAPIの詳細実装手順と注意点
  description: スライドAPIの改善における詳細な実装手順、注意点、考慮すべき項目
  steps:
    - step: 1
      name: "ファイルパス構造の統一" #完了
      tasks:
        - "旧形式: `/tmp/users/{userId}/slides/{fileId}` から新形式: `/tmp/users/{userId}/{fileId}/slides` への移行" #完了
        - "APIエンドポイントのパス形式を `/api/slides/{fileId}/slides/{imageName}` に統一" #完了
        - "既存データの移行スクリプト作成と検証" #完了
      considerations:
        - "既存のファイルパスを使用している箇所の特定と修正"
        - "移行中のダウンタイムの最小化"
        - "エラー発生時のロールバック手順の準備"
      validation:
        - "全てのAPIエンドポイントで新しいパス形式が正しく解析されることを確認"
        - "既存のファイルが新しいパス構造で正しくアクセスできることを確認"
    
    - step: 2
      name: "認証処理の改善" #完了
      tasks:
        - "フロントエンドのfetchリクエストに`credentials: 'include'`を追加" #完了
        - "画像タグに`crossOrigin=\"anonymous\"`属性を追加" #完了
        - "APIレスポンスに`Access-Control-Allow-Credentials: true`ヘッダーを追加" #完了
        - "セッション情報のログ出力機能の実装" #完了
      considerations:
        - "ブラウザのセキュリティポリシーとの互換性確保"
        - "認証情報の適切な処理と保護"
        - "クロスオリジンリクエストの適切な処理"
      validation:
        - "ログイン状態でスライド画像が正しく表示されることを確認"
        - "認証エラーが発生しないことを確認"
        - "セッション情報が正しくログに出力されることを確認"
    
    - step: 3
      name: "後方互換性の確保" #完了
      tasks:
        - "旧形式のパス `/api/slides/{fileId}/{imageName}` へのリクエストを処理するリダイレクトハンドラの実装" #完了
        - "リダイレクト時のHTTPステータスコードとヘッダーの適切な設定" #完了
        - "デバッグログの追加によるパスパラメータ解析結果の詳細出力" #完了
      considerations:
        - "リダイレクトによるパフォーマンスへの影響の最小化"
        - "リダイレクトループの防止"
        - "適切なHTTPステータスコード（307 Temporary Redirect）の使用"
      validation:
        - "旧形式のパスへのリクエストが新形式に正しくリダイレクトされることを確認"
        - "リダイレクト後も認証情報が保持されることを確認"
    
    - step: 4
      name: "エラーハンドリングの強化" #完了
      tasks:
        - "無効なパス形式の場合の明確なエラーメッセージの実装" #完了
        - "パスの検証強化（2番目のパスセグメントが 'slides' であることの確認）" #完了
        - "詳細なエラー情報のログ出力機能の実装" #完了
      considerations:
        - "ユーザーフレンドリーなエラーメッセージの提供"
        - "セキュリティ情報の漏洩防止"
        - "デバッグ情報の適切なログレベルでの出力"
      validation:
        - "無効なパス形式でリクエストした場合に適切なエラーレスポンスが返されることを確認"
        - "エラー情報が適切にログに出力されることを確認"
    
    - step: 5
      name: "パフォーマンス最適化"
      tasks:
        - "画像キャッシュの実装または改善"
        - "レスポンスの圧縮設定の最適化"
        - "不要なミドルウェアの削除または最適化"
      considerations:
        - "キャッシュの有効期間と無効化戦略"
        - "ブラウザキャッシュとの連携"
        - "帯域幅使用量の最適化"
      validation:
        - "レスポンス時間の計測と目標値（P95 80ms以下）の達成確認"
        - "キャッシュヒット率の計測と最適化"
    
    - step: 6
      name: "テストとドキュメント整備"
      tasks:
        - "単体テストの作成と実行"
        - "統合テストの作成と実行"
        - "API仕様書の更新"
        - "使用例とサンプルコードの追加"
      considerations:
        - "エッジケースのテスト（無効なパス、大きな画像、認証エラーなど）"
        - "テスト環境と本番環境の差異の最小化"
        - "ドキュメントの正確性と完全性の確保"
      validation:
        - "全てのテストが成功することを確認"
        - "ドキュメントが最新の実装を正確に反映していることを確認"

# 実装時の注意事項
implementation_warnings:
  title: 実装時の注意事項
  description: スライドAPIの改善実装時に特に注意すべき項目
  warnings:
    - category: "パス構造"
      items:
        - "パスパラメータの解析ロジックを慎重に実装し、エッジケースを考慮すること"
        - "ファイルパスとURLパスの違いを明確に区別し、混同しないこと"
        - "パス内の特殊文字（スペース、非ASCII文字など）の適切なエンコード/デコードを確保すること"
    
    - category: "認証"
      items:
        - "認証情報の処理において、セキュリティリスクを最小化すること"
        - "CORSの設定は必要最小限に留め、不要なオリジンからのアクセスを許可しないこと"
        - "認証情報を含むリクエストのキャッシュ設定に注意すること"
    
    - category: "後方互換性"
      items:
        - "リダイレクト実装後も既存のクライアントが正常に動作することを確認すること"
        - "リダイレクトによるパフォーマンス低下を監視し、必要に応じて最適化すること"
        - "リダイレクトの段階的な廃止計画を検討すること"
    
    - category: "エラーハンドリング"
      items:
        - "セキュリティ上の理由から、詳細なエラー情報は内部ログにのみ出力し、クライアントには必要最小限の情報のみを返すこと"
        - "エラーメッセージは多言語対応を考慮すること"
        - "エラー発生時のフォールバックメカニズムを実装すること"
    
    - category: "パフォーマンス"
      items:
        - "大量のリクエストが発生した場合のスケーリング戦略を検討すること"
        - "画像サイズの最適化を検討すること"
        - "不要なリクエストを減らすためのクライアント側の最適化も検討すること"
    
    - category: "テスト"
      items:
        - "実際のユーザー環境を模擬したエンドツーエンドテストを実施すること"
        - "異なるブラウザでの動作確認を行うこと"
        - "モバイルデバイスでの動作確認も行うこと"
    - id: text_extraction_improvement
      description: "- [x] 3. テキスト抽出の改善" # 完了
      priority: high
      phases:
        - phase_name: "設計フェーズ"
          tasks:
            - description: "- [ ] バッチ処理アーキテクチャの設計"
            - description: "- [ ] ジョブキュー管理システムの選定"
            - description: "- [ ] フロントエンドUIの設計"
        - phase_name: "実装フェーズ"
          tasks:
            - description: "- [ ] 複数ファイルアップロード機能の実装"
            - description: "- [ ] バックグラウンド処理システムの実装"
            - description: "- [ ] 進捗状況の管理と表示機能の実装"
            - description: "- [ ] ジョブステータス監視システムの構築"
        - phase_name: "テストフェーズ"
          tasks:
            - description: "- [ ] 大量ファイルでの負荷テスト"
            - description: "- [ ] 長時間実行のエラー耐性テスト"
            - description: "- [ ] ユーザーインターフェース使用感テスト"
      subtasks:
        - description: "- [ ] 複数ファイルの一括アップロード"
        - description: "- [ ] バックグラウンド処理の実装"
        - description: "- [ ] 進捗状況の表示"

    - id: batch_translation
      description: "大量ファイルを非同期で翻訳するバッチ機能"
      priority: medium_high
      depends_on: [slide_api_refactor]
      phases:
        - phase_name: "設計"
          tasks:
            - "ジョブキュー (BullMQ) 構成図作成"
            - "失敗時リトライ・冪等設計"
            - "フロント UI ワイヤーフレーム作成"
        - phase_name: "実装"
          tasks:
            - "バッチアップロード UI 実装"
            - "ジョブキュー・ワーカー実装"
            - "進捗表示機能実装"
            - "ダウンロード機能実装"
        - phase_name: "テスト"
          tasks:
            - "大量ファイルでの負荷テスト"
            - "エラー発生時の回復機能テスト"
            - "ユーザビリティテスト"
      acceptance_criteria:
        - "50ファイル同時処理が可能"
        - "進捗状況がリアルタイムで表示される"
        - "処理完了後に一括ダウンロードが可能"
        - "エラー発生時に適切な通知と回復手段が提供される"

    - id: batch_translation_implementation_plan
      description: "バッチ翻訳機能の詳細実装計画"
      priority: high
      implementation_steps:
        - step: "1. ファイルアップロードシステムの実装"
          tasks:
            - "複数ファイル選択UIの実装"
            - "ドラッグ&ドロップ機能の実装"
            - "ファイルタイプとサイズのバリデーション"
          considerations:
            - "大容量ファイルの効率的なアップロード"
            - "プログレスバーの実装"
            - "エラーハンドリングとリトライ機能"
          error_prevention:
            - "不正なファイル形式の早期検出"
            - "ネットワークエラー時の回復機能"
            - "重複ファイルの検出と処理"
        
        - step: "2. ジョブキューシステムの実装"
          tasks:
            - "BullMQの設定と初期化"
            - "キュー構造の設計（バッチジョブ、ファイル処理、翻訳）"
            - "ワーカープロセスの実装"
          considerations:
            - "ジョブの優先順位付け"
            - "失敗時の自動リトライ設定"
            - "分散処理の可能性"
          error_prevention:
            - "デッドロック防止策"
            - "ジョブタイムアウト設定"
            - "エラーログとモニタリング"
        
        - step: "3. バックグラウンド処理システムの実装"
          tasks:
            - "ファイル処理ワーカーの実装"
            - "翻訳ワーカーの実装"
            - "結果集約と保存の実装"
          considerations:
            - "リソース使用量の最適化"
            - "並列処理の制御"
            - "処理の冪等性確保"
          error_prevention:
            - "部分的な失敗からの回復"
            - "システムクラッシュ時のジョブ状態保存"
            - "不整合データの検出と修正"
        
        - step: "4. 進捗状況管理システムの実装"
          tasks:
            - "ジョブステータスの追跡と更新"
            - "リアルタイム進捗表示の実装"
            - "エラー通知システムの実装"
          considerations:
            - "複数デバイスでの同期表示"
            - "長時間実行ジョブのハートビート監視"
          error_prevention:
            - "進捗更新の頻度制限（サーバー負荷軽減）"
            - "クライアント側での状態管理とサーバー同期"
            - "異常な進捗パターンの検出と通知"
        
        - step: "5. 結果配信システムの実装"
          tasks:
            - "処理完了ファイルのダウンロード機能実装"
            - "一括ダウンロードとZIP圧縮機能"
            - "メール通知システムの実装"
          considerations:
            - "大容量ファイルのストリーミングダウンロード"
            - "処理結果の一時保存期間設定"
            - "ダウンロードURLの安全な生成と有効期限設定"
          error_prevention:
            - "ダウンロード中断時の再開機能"
            - "ファイル破損チェックと自動修復"
            - "アクセス権限の厳格な検証"
      
      technical_considerations:
        - area: "ファイル構造"
          details:
            - "新しいファイルパス構造（/tmp/users/{userId}/{fileId}/slides）の一貫した使用"
            - "バッチ処理用の一時ディレクトリ構造設計"
            - "処理完了ファイルの保存場所と命名規則"
        
        - area: "エラー耐性"
          details:
            - "StreamingPPTXParserクラスの強化されたエラーハンドリングの活用"
            - "代替の一時ディレクトリ使用機能の実装"
            - "キャッシュからのフォールバック結果取得機能の活用"
        
        - area: "認証・セキュリティ"
          details:
            - "バッチ処理APIへのアクセス制御"
            - "ユーザー権限に基づく処理制限"
            - "APIリクエストへの認証情報の正しい付与（credentials: 'include'）"
        
        - area: "スケーラビリティ"
          details:
            - "水平スケーリング可能なワーカー設計"
            - "リソース使用量の監視と自動スケーリング"
            - "ユーザー間の公平なリソース配分"
        
        - area: "パフォーマンス最適化"
          details:
            - "メモリ使用量の最適化（ストリーミング処理の活用）"
            - "並列処理の最適化（CPUコア数に応じた調整）"
            - "I/O操作のバッファリングと最適化"
            - "Prismaモデルの参照方法の修正（batchJob→BatchJob, activityLog→ActivityLog等） #完了"
      
      testing_strategy:
        - test_type: "単体テスト"
          details:
            - "各コンポーネントの独立したテスト（アップロード、キュー、処理、通知）"
            - "エラーケースの網羅的テスト"
            - "境界値テスト（最大ファイルサイズ、最大同時処理数など）"
        
        - test_type: "統合テスト"
          details:
            - "エンドツーエンドのワークフローテスト"
            - "実際のPPTXファイルを使用した処理テスト"
            - "異なるネットワーク条件下でのテスト"
        
        - test_type: "負荷テスト"
          details:
            - "大量ファイル（50ファイル×100MB）での処理テスト"
            - "長時間実行（12時間連続）テスト"
            - "システムリソース（CPU、メモリ、ディスク）の監視"
        
        - test_type: "ユーザビリティテスト"
          details:
            - "UI/UXの使いやすさテスト"
            - "進捗表示の分かりやすさテスト"
            - "エラーメッセージの明確さテスト"
      
      rollout_strategy:
        - phase: "内部テスト"
          details:
            - "開発チーム内での機能テスト"
            - "バグ修正と安定化"
        
        - phase: "ベータテスト"
          details:
            - "限定ユーザーへの機能公開"
            - "フィードバック収集と改善"
        
        - phase: "段階的リリース"
          details:
            - "無料ユーザー向け制限付き機能提供"
            - "プレミアムユーザー向け完全機能提供"
            - "使用状況モニタリングと最適化"
            - "許可パラメータと型を定義（zod スキーマ） #完了"
            - "SQL インジェクション対策ポリシー作成 #完了"

# サーバーサイドフィルタリング実装
server_side_filtering:
  title: "サーバーサイドフィルタリング実装"
  description: "クエリパラメータによるサーバーサイドフィルタリングの実装"
  phases:
    - phase_name: "設計"
      tasks:
        - "許可パラメータと型を定義（zod スキーマ） #完了"
        - "SQL インジェクション対策ポリシー作成 #完了"
    - phase_name: "実装"
      tasks:
        - "クエリパーサ & ORM クエリビルダ実装 #完了"
        - "レスポンスに pagination / totalCount を含める #完了"
    - phase_name: "セキュリティ & テスト"
      tasks:
        - "インジェクション攻撃シナリオでペネトレーションテスト #完了"
        - "RBAC によるアクセス制御確認 #完了"
    acceptance_criteria:
      - "OWASP Top10 の Injection カテゴリをすべてクリア #完了"
      - "1 万件クエリで 200 ms 以内に応答 #完了"

# 実装詳細と注意事項
implementation_details:
  title: "サーバーサイドフィルタリング実装の詳細計画"
  description: "クエリパラメータによるサーバーサイドフィルタリングの詳細な実装手順と注意事項"
  phases:
    - phase_name: "詳細設計"
      tasks:
        - description: "フィルタリング可能なフィールドの特定と制限 #完了"
          details: 
            - "セキュリティリスクの低いフィールドのみをフィルタリング対象に指定 #完了"
            - "機密データや内部識別子はフィルタリング対象から除外 #完了"
        - description: "Zodスキーマによる厳格な型定義 #完了"
          details:
            - "各クエリパラメータの型、形式、長さ制限を定義 #完了"
            - "複合クエリ（AND/OR条件）のスキーマ設計 #完了"
        - description: "ORM安全利用ポリシーの策定 #完了"
          details:
            - "生のSQLクエリ禁止、常にORM/クエリビルダを使用 #完了"
            - "動的クエリ生成時のエスケープ処理確認 #完了"

    - phase_name: "実装ステップ"
      tasks:
        - description: "ミドルウェアによるクエリパラメータ検証 #完了"
          details:
            - "不正なパラメータの早期検出と拒否 #完了"
            - "Zodスキーマによる自動バリデーション実装 #完了"
        - description: "ORM/Prismaクエリビルダの実装 #完了"
          details:
            - "動的フィルタ条件の安全な構築方法 #完了"
            - "パフォーマンス最適化（インデックス活用確認） #完了"
        - description: "ページネーション最適化 #完了"
          details:
            - "カーソルベースページネーションの実装 #完了"
            - "大量データセットのための効率的なカウントクエリ #完了"

    - phase_name: "テストと検証"
      tasks:
        - description: "自動テストケース作成 #完了"
          details:
            - "正常系：様々なフィルタパターンのテスト #完了"
            - "異常系：不正パラメータ、攻撃パターンのテスト #完了"
        - description: "パフォーマンステスト #完了"
          details:
            - "大量データセット（1万件以上）でのクエリ実行時間測定 #完了"
            - "複雑なフィルタ条件でのレスポンスタイム検証 #完了"
        - description: "セキュリティ検証 #完了"
          details:
            - "SQLインジェクション脆弱性テスト #完了"
            - "権限バイパス攻撃シナリオテスト #完了"

  potential_issues:
    - issue: "N+1クエリ問題 #完了"
      mitigation: 
        - "関連データの取得にはincludeを使用し、必要なリレーションのみをプリロード #完了"
        - "複雑なクエリではRawクエリではなくPrismaのネイティブJOIN機能を活用 #完了"
    
    - issue: "メモリ使用量の増大 #完了"
      mitigation:
        - "大量データ返却時はストリーミングレスポンスの検討 #完了"
        - "返却データ量を制限するプロジェクション機能の実装 #完了"
    
    - issue: "インジェクション攻撃リスク #完了"
      mitigation:
        - "すべてのユーザー入力のエスケープ処理 #完了"
        - "ORMの安全なAPIのみを使用（where条件に直接文字列連結を使わない） #完了"
        - "allowlist方式での許可パラメータ制御 #完了"

  best_practices:
    - "クエリパラメータの正規化（大文字/小文字、空白処理など） #完了"
    - "適切なエラーメッセージ（詳細なDBエラーを直接返さない） #完了"
    - "レート制限の実装（複雑なクエリによるDoS対策） #完了"
    - "キャッシュ戦略の検討（頻繁に使用されるクエリ結果のキャッシュ） #完了"

  performance_considerations:
    - "適切なインデックス設計（フィルタリングされる全フィールドにインデックス作成） #完了"
    - "複合インデックスの検討（複数フィールドでのフィルタリングが多い場合） #完了"
    - "クエリ複雑度に基づくタイムアウト設定 #完了"
    - "大規模データセットでの部分的なレスポンス戦略 #完了"

  security_checklist:
    - "SQLインジェクション対策（パラメータ化クエリの使用） #完了"
    - "権限ベースのフィルタリング（ユーザーが閲覧可能なデータのみをフィルタリング対象に） #完了"
    - "APIレート制限の実装 #完了"
    - "不正確な情報漏洩の防止（エラーメッセージの一般化） #完了"
    - "入力サニタイズとバリデーション（特殊文字、長さ制限） #完了"
    
  implementation_complete:
    - "履歴API (GET /api/history) #完了"
    - "ファイル一覧API (GET /api/upload) #完了"
    - "アクティビティログAPI (GET /api/activity) #完了"
    - "ユーザー管理API (GET /api/admin/users) #完了"
