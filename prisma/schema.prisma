generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String    @id @default(cuid())
  name                  String?
  email                 String?   @unique
  emailVerified         DateTime?
  image                 String?
  passwordHash          String?
  role                 String    @default("user")
  lastLogin           DateTime?
  sessionExpires      DateTime?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  deletedAt           DateTime?
  stripeCustomerId     String?   @unique
  stripeSubscriptionId String?
  stripeProductId      String?
  planName            String?
  subscriptionStatus   String?
  resetToken          String?   @unique
  resetTokenExpires   DateTime?
  lastPasswordReset   DateTime?
  magicLinkToken      String?   @unique
  magicLinkExpires    DateTime?
  lastMagicLinkSent   DateTime?
  activityLogs    ActivityLog[]
  translations    Translation[]
  accounts         Account[]
  sessions         Session[]

  @@map("users")
  @@index([email])
  @@index([lastLogin])
  @@index([sessionExpires])
  @@index([magicLinkToken])
  @@index([resetToken])
}

model ActivityLog {
  id         String         @id @default(uuid())
  userId     String
  action     ActivityAction
  ipAddress  String
  metadata   Json?
  createdAt  DateTime      @default(now())
  user       User          @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([createdAt])
}

model Translation {
  id          String   @id @default(cuid())
  slides      Json
  translations Json
  currentSlide Int
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum ActivityAction {
  sign_in
  sign_up
  sign_out
  update_account
  update_password
  delete_account
  file_upload
  translation
  download
  settings_change
} 