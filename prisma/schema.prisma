generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  users             User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id
  sessionToken String   @unique
  userId       String
  expires      DateTime
  users        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Translation {
  id          String   @id
  createdAt   DateTime @default(now())
  updatedAt   DateTime
  model       String
  sourceLang  Language
  targetLang  Language
  textId      String
  translation String
  Text        Text     @relation(fields: [textId], references: [id], onDelete: Cascade)
}

model File {
  id           String     @id
  userId       String
  originalName String
  storagePath  String
  status       FileStatus @default(PROCESSING)
  fileSize     Int
  mimeType     String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime
  User         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  Slide        Slide[]
  TranslationHistory TranslationHistory[]
}

model Slide {
  id        String   @id
  fileId    String
  index     Int
  imagePath String
  createdAt DateTime @default(now())
  updatedAt DateTime
  File      File     @relation(fields: [fileId], references: [id], onDelete: Cascade)
  Text      Text[]
}

model Text {
  id          String        @id
  slideId     String
  text        String
  position    Json // { x: number, y: number, width: number, height: number } 形式の座標・サイズ情報を格納
  createdAt   DateTime      @default(now())
  updatedAt   DateTime
  Slide       Slide         @relation(fields: [slideId], references: [id], onDelete: Cascade)
  Translation Translation[]
}

model User {
  id                 String               @id
  name               String?
  email              String               @unique
  emailVerified      DateTime?
  image              String?
  password           String?
  role               UserRole             @default(USER)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  credits            Int                  @default(0)
  Account            Account[]
  ActivityLog        ActivityLog[]
  File               File[]
  Session            Session[]
  TranslationHistory TranslationHistory[]
}

model TranslationHistory {
  id             String   @id @default(cuid())
  userId         String
  fileId         String
  pageCount      Int      @default(0)
  status         TranslationStatus
  creditsUsed    Int
  sourceLang     Language
  targetLang     Language
  model          String
  fileSize       Int      @default(0)
  processingTime Int      @default(0)
  thumbnailPath  String?
  tags           Json?
  metadata       Json?
  translatedFileKey String?
  errorMessage   String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  file           File     @relation(fields: [fileId], references: [id], onDelete: Cascade)

  @@index([fileId])
  @@index([userId, createdAt])
}

model ActivityLog {
  id          String   @id @default(cuid())
  userId      String
  type        String
  description String
  metadata    Json?
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UsageStatistics {
  id         String   @id @default(cuid())
  userId     String
  tokenCount Int      @default(0)
  apiCalls   Int      @default(0)
  month      Int
  year       Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([userId, month, year])
}

model ApiKey {
  id          String    @id @default(cuid())
  userId      String
  name        String
  key         String    @unique
  lastUsed    DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  expiresAt   DateTime?
  isRevoked   Boolean   @default(false)
  permissions Json?     // {"translate": true, "history": true} のような形式
}

model BatchJob {
  id              String      @id @default(cuid())
  userId          String
  status          BatchStatus @default(PENDING)
  totalFiles      Int         @default(0)
  processedFiles  Int         @default(0)
  failedFiles     Int         @default(0)
  options         Json?       // 処理オプション（言語設定など）
  results         Json?       // 処理結果の概要
  errorDetails    Json?       // エラー情報
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  startedAt       DateTime?
  completedAt     DateTime?
}

enum FileStatus {
  PROCESSING
  READY
  ERROR
}

enum Language {
  ja
  en
  zh
  ko
  fr
  de
  es
  it
  ru
  pt
}

enum UserRole {
  USER
  ADMIN
}

enum TranslationStatus {
  PROCESSING
  COMPLETED
  FAILED
}

enum BatchStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}
