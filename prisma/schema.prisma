generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(cuid())
  email        String        @unique
  name         String?
  passwordHash String?
  role         String        @default("user")
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  deletedAt    DateTime?
  activityLogs ActivityLog[]
  teams        TeamMember[]
}

model Team {
  id                   String        @id @default(cuid())
  name                 String
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
  stripeCustomerId     String?      @unique
  stripeSubscriptionId String?      @unique
  stripeProductId      String?
  planName            String?       @db.VarChar(50)
  subscriptionStatus  String?       @db.VarChar(20)
  members              TeamMember[]
  activityLogs         ActivityLog[]
}

model TeamMember {
  id        String   @id @default(cuid())
  teamId    String
  userId    String
  role      String   @default("member")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  team      Team     @relation(fields: [teamId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([teamId, userId])
}

model ActivityLog {
  id         String         @id @default(uuid())
  teamId     String
  userId     String
  action     ActivityAction
  ipAddress  String
  metadata   Json?
  createdAt  DateTime      @default(now())
  
  team       Team          @relation(fields: [teamId], references: [id])
  user       User          @relation(fields: [userId], references: [id])

  @@index([teamId])
  @@index([userId])
  @@index([createdAt])
}

enum ActivityAction {
  file_upload
  translation
  download
  settings_change
  member_invite
} 