<?xml version="1.0" encoding="UTF-8"?>
<testsuites name="jest tests" tests="159" failures="0" errors="0" time="1.561">
  <testsuite name="Login API" errors="0" failures="0" skipped="0" timestamp="2025-03-22T03:08:22" time="0.437" tests="6">
    <testcase classname="Login API 必須フィールドが欠けている場合は400エラーを返す" name="Login API 必須フィールドが欠けている場合は400エラーを返す" time="0.005">
    </testcase>
    <testcase classname="Login API ユーザーが存在しない場合は401エラーを返す" name="Login API ユーザーが存在しない場合は401エラーを返す" time="0.002">
    </testcase>
    <testcase classname="Login API パスワードが一致しない場合は401エラーを返す" name="Login API パスワードが一致しない場合は401エラーを返す" time="0.003">
    </testcase>
    <testcase classname="Login API 認証成功時にユーザー情報を返す" name="Login API 認証成功時にユーザー情報を返す" time="0.007">
    </testcase>
    <testcase classname="Login API データベース接続エラー時に500エラーを返す" name="Login API データベース接続エラー時に500エラーを返す" time="0">
    </testcase>
    <testcase classname="Login API 予期せぬエラー時に500エラーを返す" name="Login API 予期せぬエラー時に500エラーを返す" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="エラーハンドリングユーティリティ" errors="0" failures="0" skipped="0" timestamp="2025-03-22T03:08:22" time="0.429" tests="22">
    <testcase classname="エラーハンドリングユーティリティ エラー作成関数 認証エラーを正しく作成する" name="エラーハンドリングユーティリティ エラー作成関数 認証エラーを正しく作成する" time="0.004">
    </testcase>
    <testcase classname="エラーハンドリングユーティリティ エラー作成関数 バリデーションエラーを正しく作成する" name="エラーハンドリングユーティリティ エラー作成関数 バリデーションエラーを正しく作成する" time="0.004">
    </testcase>
    <testcase classname="エラーハンドリングユーティリティ エラー作成関数 Not Foundエラーを正しく作成する" name="エラーハンドリングユーティリティ エラー作成関数 Not Foundエラーを正しく作成する" time="0.001">
    </testcase>
    <testcase classname="エラーハンドリングユーティリティ エラー作成関数 権限エラーを正しく作成する" name="エラーハンドリングユーティリティ エラー作成関数 権限エラーを正しく作成する" time="0.001">
    </testcase>
    <testcase classname="エラーハンドリングユーティリティ エラー作成関数 データベースエラーを正しく作成する" name="エラーハンドリングユーティリティ エラー作成関数 データベースエラーを正しく作成する" time="0">
    </testcase>
    <testcase classname="エラーハンドリングユーティリティ エラーハンドリング関数 クライアントエラーを正しく処理する" name="エラーハンドリングユーティリティ エラーハンドリング関数 クライアントエラーを正しく処理する" time="0.001">
    </testcase>
    <testcase classname="エラーハンドリングユーティリティ エラーハンドリング関数 AppErrorのクライアントエラーを正しく処理する" name="エラーハンドリングユーティリティ エラーハンドリング関数 AppErrorのクライアントエラーを正しく処理する" time="0">
    </testcase>
    <testcase classname="エラーハンドリングユーティリティ エラーハンドリング関数 APIエラーを正しく処理する" name="エラーハンドリングユーティリティ エラーハンドリング関数 APIエラーを正しく処理する" time="0.001">
    </testcase>
    <testcase classname="エラーハンドリングユーティリティ AppErrorクラス 正しく初期化される" name="エラーハンドリングユーティリティ AppErrorクラス 正しく初期化される" time="0">
    </testcase>
    <testcase classname="エラーハンドリングユーティリティ AppErrorクラス コンテキスト情報を持つことができる" name="エラーハンドリングユーティリティ AppErrorクラス コンテキスト情報を持つことができる" time="0">
    </testcase>
    <testcase classname="エラーハンドリングユーティリティ AppErrorクラス 元のエラーを保持できる" name="エラーハンドリングユーティリティ AppErrorクラス 元のエラーを保持できる" time="0">
    </testcase>
    <testcase classname="エラーハンドリングユーティリティ Error Creators createValidationErrorが正しいAppErrorを作成する" name="エラーハンドリングユーティリティ Error Creators createValidationErrorが正しいAppErrorを作成する" time="0">
    </testcase>
    <testcase classname="エラーハンドリングユーティリティ Error Creators createAuthErrorが正しいAppErrorを作成する" name="エラーハンドリングユーティリティ Error Creators createAuthErrorが正しいAppErrorを作成する" time="0.001">
    </testcase>
    <testcase classname="エラーハンドリングユーティリティ Error Creators createForbiddenErrorが正しいAppErrorを作成する" name="エラーハンドリングユーティリティ Error Creators createForbiddenErrorが正しいAppErrorを作成する" time="0">
    </testcase>
    <testcase classname="エラーハンドリングユーティリティ Error Creators createNotFoundErrorが正しいAppErrorを作成する" name="エラーハンドリングユーティリティ Error Creators createNotFoundErrorが正しいAppErrorを作成する" time="0">
    </testcase>
    <testcase classname="エラーハンドリングユーティリティ Error Creators createRateLimitErrorが正しいAppErrorを作成する" name="エラーハンドリングユーティリティ Error Creators createRateLimitErrorが正しいAppErrorを作成する" time="0">
    </testcase>
    <testcase classname="エラーハンドリングユーティリティ Error Creators createDatabaseErrorが正しいAppErrorを作成する" name="エラーハンドリングユーティリティ Error Creators createDatabaseErrorが正しいAppErrorを作成する" time="0">
    </testcase>
    <testcase classname="エラーハンドリングユーティリティ mapSessionErrorToAppError EXPIREDエラーを正しく変換する" name="エラーハンドリングユーティリティ mapSessionErrorToAppError EXPIREDエラーを正しく変換する" time="0">
    </testcase>
    <testcase classname="エラーハンドリングユーティリティ mapSessionErrorToAppError INVALIDエラーを正しく変換する" name="エラーハンドリングユーティリティ mapSessionErrorToAppError INVALIDエラーを正しく変換する" time="0">
    </testcase>
    <testcase classname="エラーハンドリングユーティリティ mapSessionErrorToAppError NETWORKエラーを正しく変換する" name="エラーハンドリングユーティリティ mapSessionErrorToAppError NETWORKエラーを正しく変換する" time="0">
    </testcase>
    <testcase classname="エラーハンドリングユーティリティ mapSessionErrorToAppError UNAUTHORIZEDエラーを正しく変換する" name="エラーハンドリングユーティリティ mapSessionErrorToAppError UNAUTHORIZEDエラーを正しく変換する" time="0">
    </testcase>
    <testcase classname="エラーハンドリングユーティリティ mapSessionErrorToAppError UNKNOWNエラーを正しく変換する" name="エラーハンドリングユーティリティ mapSessionErrorToAppError UNKNOWNエラーを正しく変換する" time="0">
    </testcase>
  </testsuite>
  <testsuite name="ファイルユーティリティ" errors="0" failures="0" skipped="0" timestamp="2025-03-22T03:08:22" time="0.464" tests="8">
    <testcase classname="ファイルユーティリティ FilePathManager getTempPath 正しい一時ファイルパスを返す" name="ファイルユーティリティ FilePathManager getTempPath 正しい一時ファイルパスを返す" time="0.007">
    </testcase>
    <testcase classname="ファイルユーティリティ FilePathManager getPublicPath 正しい公開ファイルパスを返す" name="ファイルユーティリティ FilePathManager getPublicPath 正しい公開ファイルパスを返す" time="0">
    </testcase>
    <testcase classname="ファイルユーティリティ FilePathManager getProcessingPath 正しい処理中ファイルパスを返す" name="ファイルユーティリティ FilePathManager getProcessingPath 正しい処理中ファイルパスを返す" time="0.002">
    </testcase>
    <testcase classname="ファイルユーティリティ generateFileId 一意のファイルIDを生成する" name="ファイルユーティリティ generateFileId 一意のファイルIDを生成する" time="0.001">
    </testcase>
    <testcase classname="ファイルユーティリティ wait 指定された時間だけ待機する" name="ファイルユーティリティ wait 指定された時間だけ待機する" time="0.001">
    </testcase>
    <testcase classname="ファイルユーティリティ withRetry 初回で成功した場合はリトライしない" name="ファイルユーティリティ withRetry 初回で成功した場合はリトライしない" time="0.001">
    </testcase>
    <testcase classname="ファイルユーティリティ withRetry 失敗後にリトライして成功する場合" name="ファイルユーティリティ withRetry 失敗後にリトライして成功する場合" time="0.001">
    </testcase>
    <testcase classname="ファイルユーティリティ withRetry 最大リトライ回数を超えた場合はエラーをスロー" name="ファイルユーティリティ withRetry 最大リトライ回数を超えた場合はエラーをスロー" time="0.005">
    </testcase>
  </testsuite>
  <testsuite name="PPTXパーサー" errors="0" failures="0" skipped="0" timestamp="2025-03-22T03:08:22" time="0.488" tests="5">
    <testcase classname="PPTXパーサー parsePPTX PPTXファイルを正しくパースする" name="PPTXパーサー parsePPTX PPTXファイルを正しくパースする" time="0.007">
    </testcase>
    <testcase classname="PPTXパーサー parsePPTX Pythonスクリプトが見つからない場合はエラーを投げる" name="PPTXパーサー parsePPTX Pythonスクリプトが見つからない場合はエラーを投げる" time="0.008">
    </testcase>
    <testcase classname="PPTXパーサー parsePPTX Pythonスクリプトの実行エラーを適切に処理する" name="PPTXパーサー parsePPTX Pythonスクリプトの実行エラーを適切に処理する" time="0.001">
    </testcase>
    <testcase classname="PPTXパーサー extractTexts パース結果からテキストを抽出する" name="PPTXパーサー extractTexts パース結果からテキストを抽出する" time="0.001">
    </testcase>
    <testcase classname="PPTXパーサー getTextWithPositions パース結果からテキストと位置情報を取得する" name="PPTXパーサー getTextWithPositions パース結果からテキストと位置情報を取得する" time="0">
    </testcase>
  </testsuite>
  <testsuite name="File Utilities" errors="0" failures="0" skipped="0" timestamp="2025-03-22T03:08:22" time="0.609" tests="27">
    <testcase classname="File Utilities FilePathManager getTempPathが正しいパスを返す" name="File Utilities FilePathManager getTempPathが正しいパスを返す" time="0.003">
    </testcase>
    <testcase classname="File Utilities FilePathManager getPublicPathが正しいパスを返す" name="File Utilities FilePathManager getPublicPathが正しいパスを返す" time="0.004">
    </testcase>
    <testcase classname="File Utilities FilePathManager getProcessingPathが正しいパスを返す" name="File Utilities FilePathManager getProcessingPathが正しいパスを返す" time="0">
    </testcase>
    <testcase classname="File Utilities FilePathManager getSlidesPathが正しいパスを返す" name="File Utilities FilePathManager getSlidesPathが正しいパスを返す" time="0.001">
    </testcase>
    <testcase classname="File Utilities FilePathManager getAbsolutePathが相対パスを絶対パスに変換する" name="File Utilities FilePathManager getAbsolutePathが相対パスを絶対パスに変換する" time="0.001">
    </testcase>
    <testcase classname="File Utilities FilePathManager getAbsolutePathが絶対パスをそのまま返す" name="File Utilities FilePathManager getAbsolutePathが絶対パスをそのまま返す" time="0">
    </testcase>
    <testcase classname="File Utilities FilePathManager ensurePathがディレクトリを作成する" name="File Utilities FilePathManager ensurePathがディレクトリを作成する" time="0.001">
    </testcase>
    <testcase classname="File Utilities FilePathManager findActualFilePathが正しいファイルを見つける" name="File Utilities FilePathManager findActualFilePathが正しいファイルを見つける" time="0">
    </testcase>
    <testcase classname="File Utilities Utility Functions generateFileIdがユニークなIDを生成する" name="File Utilities Utility Functions generateFileIdがユニークなIDを生成する" time="0.001">
    </testcase>
    <testcase classname="File Utilities Utility Functions createUserDirectoriesがディレクトリを作成する" name="File Utilities Utility Functions createUserDirectoriesがディレクトリを作成する" time="0">
    </testcase>
    <testcase classname="File Utilities Utility Functions cleanupOldFilesが古いファイルを削除する" name="File Utilities Utility Functions cleanupOldFilesが古いファイルを削除する" time="0.001">
    </testcase>
    <testcase classname="File Utilities Utility Functions withRetryが成功するまで再試行する" name="File Utilities Utility Functions withRetryが成功するまで再試行する" time="0.003">
    </testcase>
    <testcase classname="File Utilities Utility Functions withRetryが最大試行回数を超えるとエラーをスローする" name="File Utilities Utility Functions withRetryが最大試行回数を超えるとエラーをスローする" time="0.009">
    </testcase>
    <testcase classname="File Utilities FileState Enum FileStateが正しい値を持つ" name="File Utilities FileState Enum FileStateが正しい値を持つ" time="0">
    </testcase>
    <testcase classname="FilePathManager Implementation Tests getTempPathが正しいパスを返す（実装）" name="FilePathManager Implementation Tests getTempPathが正しいパスを返す（実装）" time="0">
    </testcase>
    <testcase classname="FilePathManager Implementation Tests getPublicPathが正しいパスを返す（実装）" name="FilePathManager Implementation Tests getPublicPathが正しいパスを返す（実装）" time="0">
    </testcase>
    <testcase classname="FilePathManager Implementation Tests getProcessingPathが正しいパスを返す（実装）" name="FilePathManager Implementation Tests getProcessingPathが正しいパスを返す（実装）" time="0.001">
    </testcase>
    <testcase classname="FilePathManager Implementation Tests getSlidesPathが正しいパスを返す（実装）" name="FilePathManager Implementation Tests getSlidesPathが正しいパスを返す（実装）" time="0">
    </testcase>
    <testcase classname="FilePathManager Implementation Tests getAbsolutePathが相対パスを絶対パスに変換する（実装）" name="FilePathManager Implementation Tests getAbsolutePathが相対パスを絶対パスに変換する（実装）" time="0">
    </testcase>
    <testcase classname="FilePathManager Implementation Tests getAbsolutePathが絶対パスをそのまま返す（実装）" name="FilePathManager Implementation Tests getAbsolutePathが絶対パスをそのまま返す（実装）" time="0">
    </testcase>
    <testcase classname="logFileOperation Tests 成功した操作を記録する" name="logFileOperation Tests 成功した操作を記録する" time="0">
    </testcase>
    <testcase classname="logFileOperation Tests 失敗した操作とエラーを記録する" name="logFileOperation Tests 失敗した操作とエラーを記録する" time="0.001">
    </testcase>
    <testcase classname="logFileOperation Tests ログ記録中にエラーが発生した場合はコンソールにエラーを出力する" name="logFileOperation Tests ログ記録中にエラーが発生した場合はコンソールにエラーを出力する" time="0">
    </testcase>
    <testcase classname="Utility Functions Tests waitが指定された時間待機する" name="Utility Functions Tests waitが指定された時間待機する" time="0.102">
    </testcase>
    <testcase classname="Utility Functions Tests withRetryが成功するまで再試行する" name="Utility Functions Tests withRetryが成功するまで再試行する" time="0.033">
    </testcase>
    <testcase classname="Utility Functions Tests withRetryが最大試行回数を超えるとエラーをスローする" name="Utility Functions Tests withRetryが最大試行回数を超えるとエラーをスローする" time="0.012">
    </testcase>
    <testcase classname="Utility Functions Tests generateFileIdがユニークなIDを生成する" name="Utility Functions Tests generateFileIdがユニークなIDを生成する" time="0">
    </testcase>
  </testsuite>
  <testsuite name="Auth Session Tests" errors="0" failures="0" skipped="1" timestamp="2025-03-22T03:08:22" time="0.652" tests="1">
    <testcase classname="Auth Session Tests この問題が解決されるまでテストをスキップ" name="Auth Session Tests この問題が解決されるまでテストをスキップ" time="0">
      <skipped/>
    </testcase>
  </testsuite>
  <testsuite name="useActivityLogs" errors="0" failures="0" skipped="1" timestamp="2025-03-22T03:08:22" time="0.678" tests="1">
    <testcase classname="useActivityLogs 型の問題が解決されるまでテストをスキップ" name="useActivityLogs 型の問題が解決されるまでテストをスキップ" time="0">
      <skipped/>
    </testcase>
  </testsuite>
  <testsuite name="Card Components" errors="0" failures="0" skipped="0" timestamp="2025-03-22T03:08:22" time="0.711" tests="13">
    <testcase classname="Card Components Card 基本的なCardをレンダリングする" name="Card Components Card 基本的なCardをレンダリングする" time="0.016">
    </testcase>
    <testcase classname="Card Components Card カスタムクラス名を適用する" name="Card Components Card カスタムクラス名を適用する" time="0.005">
    </testcase>
    <testcase classname="Card Components CardHeader CardHeaderをレンダリングする" name="Card Components CardHeader CardHeaderをレンダリングする" time="0.001">
    </testcase>
    <testcase classname="Card Components CardHeader カスタムクラス名を適用する" name="Card Components CardHeader カスタムクラス名を適用する" time="0.001">
    </testcase>
    <testcase classname="Card Components CardTitle CardTitleをレンダリングする" name="Card Components CardTitle CardTitleをレンダリングする" time="0.002">
    </testcase>
    <testcase classname="Card Components CardTitle カスタムクラス名を適用する" name="Card Components CardTitle カスタムクラス名を適用する" time="0.001">
    </testcase>
    <testcase classname="Card Components CardDescription CardDescriptionをレンダリングする" name="Card Components CardDescription CardDescriptionをレンダリングする" time="0">
    </testcase>
    <testcase classname="Card Components CardDescription カスタムクラス名を適用する" name="Card Components CardDescription カスタムクラス名を適用する" time="0">
    </testcase>
    <testcase classname="Card Components CardContent CardContentをレンダリングする" name="Card Components CardContent CardContentをレンダリングする" time="0.001">
    </testcase>
    <testcase classname="Card Components CardContent カスタムクラス名を適用する" name="Card Components CardContent カスタムクラス名を適用する" time="0.001">
    </testcase>
    <testcase classname="Card Components CardFooter CardFooterをレンダリングする" name="Card Components CardFooter CardFooterをレンダリングする" time="0">
    </testcase>
    <testcase classname="Card Components CardFooter カスタムクラス名を適用する" name="Card Components CardFooter カスタムクラス名を適用する" time="0.001">
    </testcase>
    <testcase classname="Card Components Card Composition すべてのカードコンポーネントを組み合わせる" name="Card Components Card Composition すべてのカードコンポーネントを組み合わせる" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="APIフック" errors="0" failures="0" skipped="0" timestamp="2025-03-22T03:08:22" time="0.714" tests="3">
    <testcase classname="APIフック useApiMutation ミューテーションを正しく実行する" name="APIフック useApiMutation ミューテーションを正しく実行する" time="0.012">
    </testcase>
    <testcase classname="APIフック useApiMutation ミューテーションエラーを正しく処理する" name="APIフック useApiMutation ミューテーションエラーを正しく処理する" time="0.006">
    </testcase>
    <testcase classname="APIフック useApiMutation カスタムメソッドを使用できる" name="APIフック useApiMutation カスタムメソッドを使用できる" time="0.005">
    </testcase>
  </testsuite>
  <testsuite name="Alert Component" errors="0" failures="0" skipped="0" timestamp="2025-03-22T03:08:22" time="0.703" tests="6">
    <testcase classname="Alert Component デフォルトのアラートをレンダリングする" name="Alert Component デフォルトのアラートをレンダリングする" time="0.034">
    </testcase>
    <testcase classname="Alert Component destructiveバリアントのアラートをレンダリングする" name="Alert Component destructiveバリアントのアラートをレンダリングする" time="0.003">
    </testcase>
    <testcase classname="Alert Component カスタムクラス名を適用する" name="Alert Component カスタムクラス名を適用する" time="0.002">
    </testcase>
    <testcase classname="Alert Component AlertTitleとAlertDescriptionを含むアラートをレンダリングする" name="Alert Component AlertTitleとAlertDescriptionを含むアラートをレンダリングする" time="0.004">
    </testcase>
    <testcase classname="Alert Component AlertTitleにカスタムクラス名を適用する" name="Alert Component AlertTitleにカスタムクラス名を適用する" time="0.001">
    </testcase>
    <testcase classname="Alert Component AlertDescriptionにカスタムクラス名を適用する" name="Alert Component AlertDescriptionにカスタムクラス名を適用する" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="セッション管理" errors="0" failures="0" skipped="0" timestamp="2025-03-22T03:08:22" time="0.716" tests="9">
    <testcase classname="セッション管理 useAuth 認証状態を正しく返す" name="セッション管理 useAuth 認証状態を正しく返す" time="0.01">
    </testcase>
    <testcase classname="セッション管理 useAuth ログイン処理を正しく実行する" name="セッション管理 useAuth ログイン処理を正しく実行する" time="0.002">
    </testcase>
    <testcase classname="セッション管理 useAuth ログアウト処理を正しく実行する" name="セッション管理 useAuth ログアウト処理を正しく実行する" time="0.002">
    </testcase>
    <testcase classname="セッション管理 useAuth エラー状態を正しく処理する" name="セッション管理 useAuth エラー状態を正しく処理する" time="0.002">
    </testcase>
    <testcase classname="セッション管理 useAuth エラーをクリアする" name="セッション管理 useAuth エラーをクリアする" time="0.003">
    </testcase>
    <testcase classname="セッション管理 isSessionValid 有効なセッションを正しく検証する" name="セッション管理 isSessionValid 有効なセッションを正しく検証する" time="0">
    </testcase>
    <testcase classname="セッション管理 isSessionValid 期限切れのセッションを無効と判定する" name="セッション管理 isSessionValid 期限切れのセッションを無効と判定する" time="0">
    </testcase>
    <testcase classname="セッション管理 isSessionValid ユーザー情報のないセッションを無効と判定する" name="セッション管理 isSessionValid ユーザー情報のないセッションを無効と判定する" time="0">
    </testcase>
    <testcase classname="セッション管理 isSessionValid nullセッションを無効と判定する" name="セッション管理 isSessionValid nullセッションを無効と判定する" time="0">
    </testcase>
  </testsuite>
  <testsuite name="Upload API" errors="0" failures="0" skipped="0" timestamp="2025-03-22T03:08:23" time="0.097" tests="2">
    <testcase classname="Upload API ファイルがアップロードされた場合、成功レスポンスを返す" name="Upload API ファイルがアップロードされた場合、成功レスポンスを返す" time="0.001">
    </testcase>
    <testcase classname="Upload API ファイルがアップロードされていない場合、エラーレスポンスを返す" name="Upload API ファイルがアップロードされていない場合、エラーレスポンスを返す" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Health API" errors="0" failures="0" skipped="0" timestamp="2025-03-22T03:08:23" time="0.105" tests="1">
    <testcase classname="Health API GETリクエストに対して200ステータスコードとOKステータスを返す" name="Health API GETリクエストに対して200ステータスコードとOKステータスを返す" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="Button" errors="0" failures="0" skipped="0" timestamp="2025-03-22T03:08:22" time="0.362" tests="7">
    <testcase classname="Button ボタンをレンダリングする" name="Button ボタンをレンダリングする" time="0.031">
    </testcase>
    <testcase classname="Button クリックイベントを処理する" name="Button クリックイベントを処理する" time="0.008">
    </testcase>
    <testcase classname="Button 異なるバリアントをレンダリングする" name="Button 異なるバリアントをレンダリングする" time="0.003">
    </testcase>
    <testcase classname="Button 異なるサイズをレンダリングする" name="Button 異なるサイズをレンダリングする" time="0.001">
    </testcase>
    <testcase classname="Button 無効状態をレンダリングする" name="Button 無効状態をレンダリングする" time="0.001">
    </testcase>
    <testcase classname="Button カスタムクラス名を適用する" name="Button カスタムクラス名を適用する" time="0.001">
    </testcase>
    <testcase classname="Button asChildプロパティを使用して別の要素としてレンダリングする" name="Button asChildプロパティを使用して別の要素としてレンダリングする" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Switch Component" errors="0" failures="0" skipped="0" timestamp="2025-03-22T03:08:22" time="0.365" tests="6">
    <testcase classname="Switch Component 基本的なSwitchをレンダリングする" name="Switch Component 基本的なSwitchをレンダリングする" time="0.02">
    </testcase>
    <testcase classname="Switch Component チェック済みのSwitchをレンダリングする" name="Switch Component チェック済みのSwitchをレンダリングする" time="0.002">
    </testcase>
    <testcase classname="Switch Component 無効化されたSwitchをレンダリングする" name="Switch Component 無効化されたSwitchをレンダリングする" time="0.007">
    </testcase>
    <testcase classname="Switch Component カスタムクラス名を適用する" name="Switch Component カスタムクラス名を適用する" time="0.002">
    </testcase>
    <testcase classname="Switch Component クリックイベントを処理する" name="Switch Component クリックイベントを処理する" time="0.006">
    </testcase>
    <testcase classname="Switch Component 追加の属性を設定する" name="Switch Component 追加の属性を設定する" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="cn function" errors="0" failures="0" skipped="0" timestamp="2025-03-22T03:08:23" time="0.14" tests="5">
    <testcase classname="cn function クラス名を正しく結合する" name="cn function クラス名を正しく結合する" time="0.002">
    </testcase>
    <testcase classname="cn function 空の入力を処理する" name="cn function 空の入力を処理する" time="0">
    </testcase>
    <testcase classname="formatDate function 日付を日本語形式でフォーマットする" name="formatDate function 日付を日本語形式でフォーマットする" time="0.013">
    </testcase>
    <testcase classname="formatDate function 現在の日付をフォーマットする" name="formatDate function 現在の日付をフォーマットする" time="0.001">
    </testcase>
    <testcase classname="formatDate function 日付オブジェクトが必要" name="formatDate function 日付オブジェクトが必要" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="DropdownMenu" errors="0" failures="0" skipped="0" timestamp="2025-03-22T03:08:22" time="0.423" tests="3">
    <testcase classname="DropdownMenu トリガーとコンテンツが正しくレンダリングされる" name="DropdownMenu トリガーとコンテンツが正しくレンダリングされる" time="0.022">
    </testcase>
    <testcase classname="DropdownMenu メニューアイテムにクリックハンドラーを設定できる" name="DropdownMenu メニューアイテムにクリックハンドラーを設定できる" time="0.002">
    </testcase>
    <testcase classname="DropdownMenu ラベルとセパレーターが正しくレンダリングされる" name="DropdownMenu ラベルとセパレーターが正しくレンダリングされる" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="Label Component" errors="0" failures="0" skipped="0" timestamp="2025-03-22T03:08:23" time="0.198" tests="5">
    <testcase classname="Label Component 基本的なLabelをレンダリングする" name="Label Component 基本的なLabelをレンダリングする" time="0.015">
    </testcase>
    <testcase classname="Label Component htmlForプロパティを正しく設定する" name="Label Component htmlForプロパティを正しく設定する" time="0.001">
    </testcase>
    <testcase classname="Label Component カスタムクラス名を適用する" name="Label Component カスタムクラス名を適用する" time="0.002">
    </testcase>
    <testcase classname="Label Component 無効化された状態を表示する" name="Label Component 無効化された状態を表示する" time="0.002">
    </testcase>
    <testcase classname="Label Component 追加のプロパティを渡す" name="Label Component 追加のプロパティを渡す" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Input Component" errors="0" failures="0" skipped="0" timestamp="2025-03-22T03:08:23" time="0.201" tests="7">
    <testcase classname="Input Component デフォルトのInputをレンダリングする" name="Input Component デフォルトのInputをレンダリングする" time="0.016">
    </testcase>
    <testcase classname="Input Component 異なるタイプのInputをレンダリングする" name="Input Component 異なるタイプのInputをレンダリングする" time="0.002">
    </testcase>
    <testcase classname="Input Component プレースホルダーを表示する" name="Input Component プレースホルダーを表示する" time="0.002">
    </testcase>
    <testcase classname="Input Component 無効化されたInputをレンダリングする" name="Input Component 無効化されたInputをレンダリングする" time="0.001">
    </testcase>
    <testcase classname="Input Component 必須のInputをレンダリングする" name="Input Component 必須のInputをレンダリングする" time="0.002">
    </testcase>
    <testcase classname="Input Component カスタムクラス名を適用する" name="Input Component カスタムクラス名を適用する" time="0.001">
    </testcase>
    <testcase classname="Input Component デフォルトの値を持つInputをレンダリングする" name="Input Component デフォルトの値を持つInputをレンダリングする" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="useIntersectionObserver" errors="0" failures="0" skipped="0" timestamp="2025-03-22T03:08:23" time="0.283" tests="4">
    <testcase classname="useIntersectionObserver 要素が存在する場合、IntersectionObserverを初期化して監視する" name="useIntersectionObserver 要素が存在する場合、IntersectionObserverを初期化して監視する" time="0.009">
    </testcase>
    <testcase classname="useIntersectionObserver 要素が存在しない場合、IntersectionObserverを初期化しない" name="useIntersectionObserver 要素が存在しない場合、IntersectionObserverを初期化しない" time="0.005">
    </testcase>
    <testcase classname="useIntersectionObserver アンマウント時にIntersectionObserverを切断する" name="useIntersectionObserver アンマウント時にIntersectionObserverを切断する" time="0.001">
    </testcase>
    <testcase classname="useIntersectionObserver 依存配列の値が変更された場合、IntersectionObserverを再初期化する" name="useIntersectionObserver 依存配列の値が変更された場合、IntersectionObserverを再初期化する" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="ActivityLogger" errors="0" failures="0" skipped="0" timestamp="2025-03-22T03:08:23" time="0.087" tests="3">
    <testcase classname="ActivityLogger logActivity 有効なデータでアクティビティを記録する" name="ActivityLogger logActivity 有効なデータでアクティビティを記録する" time="0.003">
    </testcase>
    <testcase classname="ActivityLogger logActivity 必須パラメータが不足している場合はエラーをスローする" name="ActivityLogger logActivity 必須パラメータが不足している場合はエラーをスローする" time="0">
    </testcase>
    <testcase classname="ActivityLogger logActivity メタデータが正しく記録される" name="ActivityLogger logActivity メタデータが正しく記録される" time="0">
    </testcase>
  </testsuite>
  <testsuite name="Avatar Component" errors="0" failures="0" skipped="0" timestamp="2025-03-22T03:08:23" time="0.201" tests="3">
    <testcase classname="Avatar Component Avatarコンポーネントをレンダリングする" name="Avatar Component Avatarコンポーネントをレンダリングする" time="0.008">
    </testcase>
    <testcase classname="Avatar Component AvatarFallbackをレンダリングする" name="Avatar Component AvatarFallbackをレンダリングする" time="0.002">
    </testcase>
    <testcase classname="Avatar Component カスタムクラス名を適用する" name="Avatar Component カスタムクラス名を適用する" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="PPTX Generate API" errors="0" failures="0" skipped="0" timestamp="2025-03-22T03:08:23" time="0.083" tests="3">
    <testcase classname="PPTX Generate API POST /api/pptx/generate 翻訳データからPPTXファイルを生成する" name="PPTX Generate API POST /api/pptx/generate 翻訳データからPPTXファイルを生成する" time="0.002">
    </testcase>
    <testcase classname="PPTX Generate API POST /api/pptx/generate 必須パラメータが欠けている場合はエラーを返す" name="PPTX Generate API POST /api/pptx/generate 必須パラメータが欠けている場合はエラーを返す" time="0.001">
    </testcase>
    <testcase classname="PPTX Generate API POST /api/pptx/generate 翻訳データが欠けている場合はエラーを返す" name="PPTX Generate API POST /api/pptx/generate 翻訳データが欠けている場合はエラーを返す" time="0">
    </testcase>
  </testsuite>
  <testsuite name="PreviewSection" errors="0" failures="0" skipped="0" timestamp="2025-03-22T03:08:22" time="0.403" tests="2">
    <testcase classname="PreviewSection スライドプレビューを表示する" name="PreviewSection スライドプレビューを表示する" time="0.04">
    </testcase>
    <testcase classname="PreviewSection ズームインボタンとズームアウトボタンが機能する" name="PreviewSection ズームインボタンとズームアウトボタンが機能する" time="0.009">
    </testcase>
  </testsuite>
  <testsuite name="Translate API" errors="0" failures="0" skipped="0" timestamp="2025-03-22T03:08:23" time="0.093" tests="3">
    <testcase classname="Translate API POST /api/translate 有効なリクエストで翻訳を実行する" name="Translate API POST /api/translate 有効なリクエストで翻訳を実行する" time="0.001">
    </testcase>
    <testcase classname="Translate API POST /api/translate 無効なリクエストでエラーを返す" name="Translate API POST /api/translate 無効なリクエストでエラーを返す" time="0">
    </testcase>
    <testcase classname="Translate API GET /api/translate 翻訳履歴を取得する" name="Translate API GET /api/translate 翻訳履歴を取得する" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="PPTX Parse API" errors="0" failures="0" skipped="0" timestamp="2025-03-22T03:08:23" time="0.08" tests="4">
    <testcase classname="PPTX Parse API POST /api/pptx/parse 有効なPPTXファイルをパースする" name="PPTX Parse API POST /api/pptx/parse 有効なPPTXファイルをパースする" time="0.001">
    </testcase>
    <testcase classname="PPTX Parse API POST /api/pptx/parse ファイルが指定されていない場合はエラーを返す" name="PPTX Parse API POST /api/pptx/parse ファイルが指定されていない場合はエラーを返す" time="0">
    </testcase>
    <testcase classname="PPTX Parse API POST /api/pptx/parse 無効なファイルタイプの場合はエラーを返す" name="PPTX Parse API POST /api/pptx/parse 無効なファイルタイプの場合はエラーを返す" time="0.001">
    </testcase>
    <testcase classname="PPTX Parse API GET /api/pptx/parse ヘルスチェックエンドポイントが正常に応答する" name="PPTX Parse API GET /api/pptx/parse ヘルスチェックエンドポイントが正常に応答する" time="0">
    </testcase>
  </testsuite>
</testsuites>